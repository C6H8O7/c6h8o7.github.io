struct CameraUniform {
    view: mat4x4<f32>,
    proj: mat4x4<f32>,
};
@group(0) @binding(0)
var<uniform> camera: CameraUniform;

@group(0) @binding(1)
var<uniform> model: mat4x4<f32>;

struct VertexInput {
    @location(0) position: vec3<f32>,
    @location(1) normal: vec3<f32>,
};

struct VertexOutput {
    @builtin(position) vertex_position: vec4<f32>,
    @location(0) vertex_normal: vec4<f32>,
};

@vertex
fn vs_main(in: VertexInput) -> VertexOutput {
    var out: VertexOutput;
    out.vertex_normal = model * vec4<f32>(in.normal, 0.0);
    out.vertex_position = camera.proj * camera.view * model * vec4<f32>(in.position, 1.0);
    return out;
}

@fragment
fn fs_main(in: VertexOutput) -> @location(0) vec4<f32> {
    var light_dir = vec3<f32>(-1.0, 0.0, 0.0);
    var dot = dot(-light_dir, in.vertex_normal.xyz);
    return vec4<f32>(dot, dot, dot, 1.0);
}fn svo_abs(v: i32) -> u32 {
    if v < 0 {
        return u32(abs(v) - 1);
    }
    return u32(v);
}

fn is_in_bounds(p: vec3i, depth: u32) -> bool {
    let max_v = svo_abs(p.x) | svo_abs(p.y) | svo_abs(p.z);
    return max_v < (1u << depth);
}

fn interleave(val: u32) -> u32 {
    var n = val;

    n = (n | (n << 16)) & 0x030000FF;
    n = (n | (n <<  8)) & 0x0300F00F;
    n = (n | (n <<  4)) & 0x030C30C3;
    n = (n | (n <<  2)) & 0x09249249;
    
    return n;
}

fn interleave3(p: vec3u) -> u32 {
    return ((interleave(p.x) << 2) | (interleave(p.y) << 1) | interleave(p.z));
}

fn get_indexed_position(p: vec3i, depth: u32) -> vec3u {
    let min = (1i << depth);
    return vec3u(u32(p.x + min), u32(p.y + min), u32(p.z + min));
}

fn get_position_path(p: vec3i, depth: u32) -> u32 {
    let indexed_pos = get_indexed_position(p, depth);
    return interleave3(indexed_pos);
}


fn ray_box_dist(pos: vec3f, dir: vec3f, vmin: vec3<f32>, vmax: vec3<f32>) -> f32 {
    let v1 = (vmin.x - pos.x) / dir.x;
    let v2 = (vmax.x - pos.x) / dir.x;
    let v3 = (vmin.y - pos.y) / dir.y;
    let v4 = (vmax.y - pos.y) / dir.y;
    let v5 = (vmin.z - pos.z) / dir.z;
    let v6 = (vmax.z - pos.z) / dir.z;
    let v7 = max(max(min(v1, v2), min(v3, v4)), min(v5, v6));
    let v8 = min(min(max(v1, v2), max(v3, v4)), max(v5, v6));

    if (v8 < 0.0 || v7 > v8) {
        return 0.0;
    }
    
    return v7;
}

fn vec3f_to_vec3i(v: vec3f) -> vec3i {
    return vec3i(
        i32(floor(v.x)),
        i32(floor(v.y)),
        i32(floor(v.z))
    );
}

fn vec3i_to_vec3f(v: vec3i) -> vec3f {
    return vec3f(
        f32(v.x),
        f32(v.y),
        f32(v.z)
    );
}

//////////////////////////////////////////////////////////////////////////////////////////////////////

struct CameraUniform {
    inv_view_proj: mat4x4f,
    znear: f32,
    zfar: f32,
};
@group(0) @binding(0)
var<uniform> camera: CameraUniform;

@group(0) @binding(1)
var<storage, read_write> svo: array<i32>;

struct RenderSettings {
    show_steps: i32,
    show_depth: i32,
    light_theta: f32,
    light_phi: f32,
};
@group(0) @binding(2)
var<uniform> render_settings: RenderSettings;

struct VertexInput {
    @builtin(vertex_index) vertex_id: u32,
};

struct VertexOutput {
    @builtin(position) vertex_position: vec4f,
    @location(0) ray_origin: vec3f,
    @location(1) ray_dir: vec3f,
};

@vertex
fn vs_main(in: VertexInput) -> VertexOutput {
    var out: VertexOutput;
    out.vertex_position = vec4f(0.0, 0.0, 0.0, 1.0);

    if (in.vertex_id == 0u) {
        out.vertex_position.x = -1.0;
        out.vertex_position.y = -1.0;
    } else if (in.vertex_id == 1u) {
        out.vertex_position.x = 1.0;
        out.vertex_position.y = -1.0;
    } else if (in.vertex_id == 2u) {
        out.vertex_position.x = -1.0;
        out.vertex_position.y = 1.0;
    } else if (in.vertex_id == 3u) {
        out.vertex_position.x = -1.0;
        out.vertex_position.y = 1.0;
    } else if (in.vertex_id == 4u) {
        out.vertex_position.x = 1.0;
        out.vertex_position.y = -1.0;
    } else if (in.vertex_id == 5u) {
        out.vertex_position.x = 1.0;
        out.vertex_position.y = 1.0;
    }
    
    out.ray_origin = (camera.inv_view_proj * vec4f(out.vertex_position.xy, -1.0, 1.0) * camera.znear).xyz;
    out.ray_dir = (camera.inv_view_proj * (vec4f(out.vertex_position.xy, 1.0, 1.0) * camera.zfar - vec4f(out.vertex_position.xy, -1.0, 1.0) * camera.znear)).xyz;
    return out;
}

struct Voxel {
    exist: bool,
    value: u32,
    depth: u32,
    pos: vec3f,
}

fn has_voxel(p: vec3i, depth: u32) -> Voxel {
    var voxel_result = Voxel(false, 0, 0, vec3f(0));

    if !is_in_bounds(p, depth) {
        return voxel_result;
    }

    let path = get_position_path(p, depth);
    var depth_shift = (depth * 3);
    var current_depth = 1u;
    var current_index = 1i;
    var pos = vec3f(0);
    let p0f = vec3i_to_vec3f(p);

    while depth_shift >= 0 {
        let current_node = svo[current_index];
        let path_index = ((path >> depth_shift) & 7);

        let offset = vec3i_to_vec3f(vec3i(1i << (depth + 1u - current_depth))) * 0.5;
        let mask = vec3i_to_vec3f(vec3i(p0f >= pos) * 2 - 1);
        pos += mask * offset;

        if depth_shift == 0 {
            let i = current_index + i32(path_index) / 4;
            let v = (svo[i] >> (path_index%4 * 8)) & 0xff;
            return Voxel(v != 0, u32(v), current_depth, pos);
        } else {
            let i = current_index + i32(path_index) / 2;
            let v = (svo[i] >> (path_index%2 * 16)) & 0xffff;

            if v == 0 {
                return Voxel(false, 0, current_depth, pos);
            }

            current_index += v;
        }

        depth_shift -= 3u;
        current_depth += 1u;
    }

    return voxel_result;
}

struct Ray {
    pos: vec3f,
    dir: vec3f
}

struct RayResult {
    hit: bool,
    value: u32,
    steps: u32,
    dist: f32,
    pos: vec3f,
    normal: vec3f
};

fn ray_trace(ray: Ray) -> RayResult {
    var pos = ray.pos;
    let dir = ray.dir;
    let depth = u32(svo[0]);
    var pre_dist = f32(0);
    var ray_result = RayResult(false, 0, 0, f32(0), vec3f(0), vec3f(0));

    if !is_in_bounds(vec3f_to_vec3i(pos), depth) {
        let size = f32(1u << depth);
        pre_dist = ray_box_dist(pos, dir, vec3f(-size), vec3f(size));

        if pre_dist == 0.0f {
            return ray_result;
        }

        pos = pos + dir * (pre_dist + 0.001);
    }

    let dir_inv = 1.0 / dir;
    let dir_sign = sign(dir);
    let size = f32(1u << (depth + 1));

    var current_pos = pos;
    var steps = 0u;
    var normal = vec3f(0);
    var t_current = f32(0);

    loop {
        let posi = vec3f_to_vec3i(current_pos);
        let voxel = has_voxel(posi, depth);

        if voxel.exist {
            ray_result.hit = true;
            ray_result.value = voxel.value;
            ray_result.steps = steps;
            ray_result.dist = t_current + pre_dist;
            ray_result.pos = current_pos + normal * 0.002;
            ray_result.normal = normal;
            return ray_result;
        }

        let half_voxel_size = size / f32(1u << voxel.depth) * 0.5;
        let t_max = (voxel.pos + dir_sign * half_voxel_size - pos) * dir_inv;
        t_current = min(min(t_max.x, t_max.y), t_max.z);
        let mask = vec3f(t_max.xyz <= min(t_max.yzx, t_max.zxy));
        normal = mask * -dir_sign;

        current_pos = pos + dir * t_current - normal * 0.001;

        steps = steps + 1;

        if !is_in_bounds(vec3f_to_vec3i(current_pos), depth) {
            ray_result.steps = steps;
            return ray_result;
        }

        if steps > 100u {
            break;
        }
    }
    
    return ray_result;
}

struct FragmentOutput {
    @location(0) col: vec4f,
    //@builtin(frag_depth) depth: f32,
};

@fragment
fn fs_main(in: VertexOutput) -> FragmentOutput {
    var out: FragmentOutput;
    //out.depth = f32(0.999);
    out.col = vec4f(0., 0., 0., 1.);

    let ray = normalize(in.ray_dir);
    let ray_result = ray_trace(Ray(in.ray_origin, ray));

    let theta = render_settings.light_theta;
    let phi = render_settings.light_phi;
    let light_dir = vec3f(sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta));

    if ray_result.hit {
        let ambient_col = vec4f(0.1f, 0.1f, 0.1f, 0.0f);
        var diffuse_col = vec4f(0.8f, 0.8f, 0.8f, 0.0f);

        if ray_result.value == 1 {
            diffuse_col = vec4f(1.f, 0.f, 0.f, 0.f);
        } else if ray_result.value == 2 {
            diffuse_col = vec4f(0.f, 1.f, 0.f, 0.f);
        } else if ray_result.value == 3 {
            diffuse_col = vec4f(0.f, 0.f, 1.f, 0.f);
        }

        //out.depth = ray_result.dist / (camera.zfar - camera.znear);

        var l_factor = max(dot(ray_result.normal, light_dir), 0.0);
        out.col += ambient_col * diffuse_col;

        if l_factor > 0.0f {
            let light_ray_result = ray_trace(Ray(ray_result.pos, light_dir));

            if light_ray_result.hit {
                l_factor = 0.0f;
            }
        }

        out.col += diffuse_col * l_factor;
    }

    if (render_settings.show_steps == 1) {
        let v = f32(ray_result.steps) / 20.0;
        out.col = vec4f(v, v, v, 1.);
    }

    /*if (render_settings.show_depth == 1) {
        out.col = vec4f(1 - out.depth, 1 - out.depth, 1 - out.depth, 1.);
    }*/

    return out;
}