// SHADER.WGSL

struct CameraUniform {
    view: mat4x4<f32>,
    proj: mat4x4<f32>,
};
@group(0) @binding(0)
var<uniform> camera: CameraUniform;

@group(0) @binding(1)
var<uniform> model: mat4x4<f32>;

struct VertexInput {
    @location(0) position: vec3<f32>,
    @location(1) normal: vec3<f32>,
};

struct VertexOutput {
    @builtin(position) vertex_position: vec4<f32>,
    @location(0) vertex_normal: vec4<f32>,
};

@vertex
fn vs_main(in: VertexInput) -> VertexOutput {
    var out: VertexOutput;
    out.vertex_normal = model * vec4<f32>(in.normal, 0.0);
    out.vertex_position = camera.proj * camera.view * model * vec4<f32>(in.position, 1.0);
    return out;
}

@fragment
fn fs_main(in: VertexOutput) -> @location(0) vec4<f32> {
    var light_dir = vec3<f32>(-1.0, 0.0, 0.0);
    var dot = dot(-light_dir, in.vertex_normal.xyz);
    return vec4<f32>(dot, dot, dot, 1.0);
}
// VOX.WGSL

//////////////////////////////////////// UTILS

fn svo_abs(v: i32) -> u32 {
    if v < 0 {
        return u32(abs(v) - 1);
    }
    return u32(v);
}

fn is_in_bounds(p: vec3i, depth: u32) -> bool {
    let max_v = svo_abs(p.x) | svo_abs(p.y) | svo_abs(p.z);
    return max_v < (1u << depth);
}

fn interleave(val: u32) -> u32 {
    var n = val;

    n = (n | (n << 16)) & 0x030000FF;
    n = (n | (n <<  8)) & 0x0300F00F;
    n = (n | (n <<  4)) & 0x030C30C3;
    n = (n | (n <<  2)) & 0x09249249;
    
    return n;
}

fn interleave3(p: vec3u) -> u32 {
    return ((interleave(p.x) << 2) | (interleave(p.y) << 1) | interleave(p.z));
}

fn get_indexed_position(p: vec3i, depth: u32) -> vec3u {
    let min = (1i << depth);
    return vec3u(u32(p.x + min), u32(p.y + min), u32(p.z + min));
}

fn get_position_path(p: vec3i, depth: u32) -> u32 {
    let indexed_pos = get_indexed_position(p, depth);
    return interleave3(indexed_pos);
}


fn ray_box_dist(pos: vec3f, dir: vec3f, vmin: vec3<f32>, vmax: vec3<f32>) -> f32 {
    let v1 = (vmin.x - pos.x) / dir.x;
    let v2 = (vmax.x - pos.x) / dir.x;
    let v3 = (vmin.y - pos.y) / dir.y;
    let v4 = (vmax.y - pos.y) / dir.y;
    let v5 = (vmin.z - pos.z) / dir.z;
    let v6 = (vmax.z - pos.z) / dir.z;
    let v7 = max(max(min(v1, v2), min(v3, v4)), min(v5, v6));
    let v8 = min(min(max(v1, v2), max(v3, v4)), max(v5, v6));

    if (v8 < 0.0 || v7 > v8) {
        return 0.0;
    }
    
    return v7;
}

fn vec3f_to_vec3i(v: vec3f) -> vec3i {
    return vec3i(
        i32(floor(v.x)),
        i32(floor(v.y)),
        i32(floor(v.z))
    );
}

fn vec3i_to_vec3f(v: vec3i) -> vec3f {
    return vec3f(
        f32(v.x),
        f32(v.y),
        f32(v.z)
    );
}

//////////////////////////////////////// NOISE

fn permute4(x: vec4f) -> vec4f { return ((x * 34. + 1.) * x) % vec4f(289.); }
fn taylorInvSqrt4(r: vec4f) -> vec4f { return 1.79284291400159 - 0.85373472095314 * r; }
fn fade3(t: vec3f) -> vec3f { return t * t * t * (t * (t * 6. - 15.) + 10.); }

fn perlinNoise3(P: vec3f) -> f32 {
    var Pi0 : vec3f = floor(P); // Integer part for indexing
    var Pi1 : vec3f = Pi0 + vec3f(1.); // Integer part + 1
    Pi0 = Pi0 % vec3f(289.);
    Pi1 = Pi1 % vec3f(289.);
    let Pf0 = fract(P); // Fractional part for interpolation
    let Pf1 = Pf0 - vec3f(1.); // Fractional part - 1.
    let ix = vec4f(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
    let iy = vec4f(Pi0.yy, Pi1.yy);
    let iz0 = Pi0.zzzz;
    let iz1 = Pi1.zzzz;

    let ixy = permute4(permute4(ix) + iy);
    let ixy0 = permute4(ixy + iz0);
    let ixy1 = permute4(ixy + iz1);

    var gx0: vec4f = ixy0 / 7.;
    var gy0: vec4f = fract(floor(gx0) / 7.) - 0.5;
    gx0 = fract(gx0);
    var gz0: vec4f = vec4f(0.5) - abs(gx0) - abs(gy0);
    var sz0: vec4f = step(gz0, vec4f(0.));
    gx0 = gx0 + sz0 * (step(vec4f(0.), gx0) - 0.5);
    gy0 = gy0 + sz0 * (step(vec4f(0.), gy0) - 0.5);

    var gx1: vec4f = ixy1 / 7.;
    var gy1: vec4f = fract(floor(gx1) / 7.) - 0.5;
    gx1 = fract(gx1);
    var gz1: vec4f = vec4f(0.5) - abs(gx1) - abs(gy1);
    var sz1: vec4f = step(gz1, vec4f(0.));
    gx1 = gx1 - sz1 * (step(vec4f(0.), gx1) - 0.5);
    gy1 = gy1 - sz1 * (step(vec4f(0.), gy1) - 0.5);

    var g000: vec3f = vec3f(gx0.x, gy0.x, gz0.x);
    var g100: vec3f = vec3f(gx0.y, gy0.y, gz0.y);
    var g010: vec3f = vec3f(gx0.z, gy0.z, gz0.z);
    var g110: vec3f = vec3f(gx0.w, gy0.w, gz0.w);
    var g001: vec3f = vec3f(gx1.x, gy1.x, gz1.x);
    var g101: vec3f = vec3f(gx1.y, gy1.y, gz1.y);
    var g011: vec3f = vec3f(gx1.z, gy1.z, gz1.z);
    var g111: vec3f = vec3f(gx1.w, gy1.w, gz1.w);

    let norm0 = taylorInvSqrt4(
        vec4f(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
    g000 = g000 * norm0.x;
    g010 = g010 * norm0.y;
    g100 = g100 * norm0.z;
    g110 = g110 * norm0.w;
    let norm1 = taylorInvSqrt4(
        vec4f(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
    g001 = g001 * norm1.x;
    g011 = g011 * norm1.y;
    g101 = g101 * norm1.z;
    g111 = g111 * norm1.w;

    let n000 = dot(g000, Pf0);
    let n100 = dot(g100, vec3f(Pf1.x, Pf0.yz));
    let n010 = dot(g010, vec3f(Pf0.x, Pf1.y, Pf0.z));
    let n110 = dot(g110, vec3f(Pf1.xy, Pf0.z));
    let n001 = dot(g001, vec3f(Pf0.xy, Pf1.z));
    let n101 = dot(g101, vec3f(Pf1.x, Pf0.y, Pf1.z));
    let n011 = dot(g011, vec3f(Pf0.x, Pf1.yz));
    let n111 = dot(g111, Pf1);

    var fade_xyz: vec3f = fade3(Pf0);
    let temp = vec4f(f32(fade_xyz.z)); // simplify after chrome bug fix
    let n_z = mix(vec4f(n000, n100, n010, n110), vec4f(n001, n101, n011, n111), temp);
    let n_yz = mix(n_z.xy, n_z.zw, vec2f(f32(fade_xyz.y))); // simplify after chrome bug fix
    let n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);
    return 2.2 * n_xyz;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////

struct CameraUniform {
    inv_view_proj: mat4x4f,
    znear: f32,
    zfar: f32,
};
@group(0) @binding(0)
var<uniform> camera: CameraUniform;

@group(0) @binding(1)
var<storage, read_write> svo: array<i32>;

struct RenderSettings {
    show_steps: i32,
    show_depth: i32,
    light_theta: f32,
    light_phi: f32,
    ao: i32,
};
@group(0) @binding(2)
var<uniform> render_settings: RenderSettings;

struct VertexInput {
    @builtin(vertex_index) vertex_id: u32,
};

struct VertexOutput {
    @builtin(position) vertex_position: vec4f,
    @location(0) ray_origin: vec3f,
    @location(1) ray_dir: vec3f,
};

@vertex
fn vs_main(in: VertexInput) -> VertexOutput {
    var out: VertexOutput;
    out.vertex_position = vec4f(0.0, 0.0, 0.0, 1.0);

    if (in.vertex_id == 0u) {
        out.vertex_position.x = -1.0;
        out.vertex_position.y = -1.0;
    } else if (in.vertex_id == 1u) {
        out.vertex_position.x = 1.0;
        out.vertex_position.y = -1.0;
    } else if (in.vertex_id == 2u) {
        out.vertex_position.x = -1.0;
        out.vertex_position.y = 1.0;
    } else if (in.vertex_id == 3u) {
        out.vertex_position.x = -1.0;
        out.vertex_position.y = 1.0;
    } else if (in.vertex_id == 4u) {
        out.vertex_position.x = 1.0;
        out.vertex_position.y = -1.0;
    } else if (in.vertex_id == 5u) {
        out.vertex_position.x = 1.0;
        out.vertex_position.y = 1.0;
    }
    
    out.ray_origin = (camera.inv_view_proj * vec4f(out.vertex_position.xy, -1.0, 1.0) * camera.znear).xyz;
    out.ray_dir = (camera.inv_view_proj * (vec4f(out.vertex_position.xy, 1.0, 1.0) * camera.zfar - vec4f(out.vertex_position.xy, -1.0, 1.0) * camera.znear)).xyz;
    return out;
}

//////////////////////////////////////// SVO

struct Voxel {
    exist: bool,
    value: u32,
    depth: u32,
    pos: vec3f,
}

fn has_voxel(p: vec3i, depth: u32) -> Voxel {
    let p0f = vec3i_to_vec3f(p) + vec3f(.5, .5, .5);
    var current_depth = 0u;

    var voxel_result = Voxel(false, 0, current_depth, p0f);

    if !is_in_bounds(p, depth) {
        return voxel_result;
    }

    let path = get_position_path(p, depth);
    let size = vec3i_to_vec3f(vec3i(1i << (depth + 1)));
    var depth_shift = i32(depth * 3);
    var current_index = 1i;
    var pos = vec3f(0);
    
    while depth_shift >= 0 {
        current_depth += 1u;
        
        let path_index = ((path >> u32(depth_shift)) & 7);
        let path_index_mask = 1i << path_index;
        let current_node = svo[current_index];
        
        let offset = size / f32(1i << (current_depth + 1));
        let mask = vec3i_to_vec3f(vec3i(p0f >= pos) * 2 - 1);
        pos += mask * offset;
        
        let is_next_valid = ((current_node >> 8) & path_index_mask) > 0;

        if !is_next_valid {
            return Voxel(false, 0, current_depth, pos);
        }

        let is_next_leaf = (current_node & path_index_mask) > 0;
        
        if is_next_leaf {
            let leaf_ptr = ((current_node >> 17) & 0x7fff);
            let i = current_index + leaf_ptr + i32(path_index) / 4;
            let value = (svo[i] >> (path_index%4 * 8)) & 0xff;
            
            return Voxel(true, u32(value), current_depth, pos);
        }

        let is_far_ptr = (current_node & 0x10000) > 0;
        var next_offset = ((current_node >> 17) & 0x7fff);

        if is_far_ptr {
            next_offset = svo[current_index + next_offset];
        }

        current_index += next_offset + i32(path_index);

        depth_shift -= 3;
    }

    voxel_result.pos = pos;
    voxel_result.depth = current_depth;
    return voxel_result;
}

//////////////////////////////////////// RAY TRACE

struct Ray {
    pos: vec3f,
    dir: vec3f
}

struct RayResult {
    hit: bool,
    value: u32,
    steps: u32,
    dist: f32,
    pos: vec3f,
    normal: vec3f,
    mask: vec3f
};

fn ray_trace(ray: Ray) -> RayResult {
    var pos = ray.pos;
    let dir = ray.dir;
    let depth = u32(svo[0]);
    var pre_dist = f32(0);
    var ray_result = RayResult(false, 0, 0, f32(0), vec3f(0), vec3f(0), vec3f(0));

    if !is_in_bounds(vec3f_to_vec3i(pos), depth) {
        let half_size = f32(1u << depth);
        pre_dist = ray_box_dist(pos, dir, vec3f(-half_size), vec3f(half_size));

        if pre_dist == 0.0f {
            return ray_result;
        }

        pos = pos + dir * (pre_dist + 0.001);
    }

    let dir_inv = 1.0 / dir;
    let dir_sign = sign(dir);
    let size = f32(1u << (depth + 1));

    var current_pos = pos;
    var steps = 0u;
    var normal = vec3f(0);
    var t_current = f32(0);
    var mask = vec3f(0);

    loop {
        let posi = vec3f_to_vec3i(current_pos);
        let voxel = has_voxel(posi, depth);

        if voxel.exist {
            ray_result.hit = true;
            ray_result.value = voxel.value;
            ray_result.steps = steps;
            ray_result.dist = t_current + pre_dist;
            ray_result.pos = current_pos + normal * 0.001;
            ray_result.normal = normal;
            ray_result.mask = mask;
            return ray_result;
        }

        let half_voxel_size = size / f32(1u << (voxel.depth + 1));
        let t_max = (voxel.pos + dir_sign * half_voxel_size - pos) * dir_inv;
        t_current = min(min(t_max.x, t_max.y), t_max.z);
        mask = vec3f(t_max.xyz <= min(t_max.yzx, t_max.zxy));
        normal = mask * -dir_sign;

        current_pos = pos + dir * t_current - normal * 0.0005;

        if !is_in_bounds(vec3f_to_vec3i(current_pos), depth) {
            ray_result.steps = steps;
            return ray_result;
        }

        steps = steps + 1;

        if steps > 100u {
            break;
        }
    }
    
    return ray_result;
}

//////////////////////////////////////// VOXEL AO

fn vertex_ao(side: vec2f, corner: f32) -> f32 {
	//if side.x == 1.0 && side.y == 1.0 { return 1.0; }
	return (side.x + side.y + max(corner, side.x * side.y)) / 3.0;
}

fn has_voxel_ao(pos: vec3f, depth: u32) -> f32 {
    let posi = vec3f_to_vec3i(pos);
    let voxel = has_voxel(posi, depth);
    if voxel.exist {
        return 1.0;
    }
    return 0.0;
}

fn voxel_ao(pos: vec3f, d1: vec3f, d2: vec3f, depth: u32) -> vec4f {
	let side = vec4f(has_voxel_ao(pos + d1, depth), has_voxel_ao(pos + d2, depth), has_voxel_ao(pos - d1, depth), has_voxel_ao(pos - d2, depth));
	let corner = vec4f(has_voxel_ao(pos + d1 + d2, depth), has_voxel_ao(pos - d1 + d2, depth), has_voxel_ao(pos - d1 - d2, depth), has_voxel_ao(pos + d1 - d2, depth));
	var ao = vec4f(0.0);
	ao.x = vertex_ao(side.xy, corner.x);
	ao.y = vertex_ao(side.yz, corner.y);
	ao.z = vertex_ao(side.zw, corner.z);
	ao.w = vertex_ao(side.wx, corner.w);
	return vec4f(1.0) - ao;
}

//////////////////////////////////////// FRAGMENT

struct FragmentOutput {
    @location(0) col: vec4f,
    @builtin(frag_depth) depth: f32,
};

@fragment
fn fs_main(in: VertexOutput) -> FragmentOutput {
    var out: FragmentOutput;
    out.depth = f32(0.999);
    out.col = vec4f(0., 0., 0., 1.);

    var ray = normalize(in.ray_dir);
    if ray.x == 0.0 {
        ray.x = 0.00001;
    }
    if ray.y == 0.0 {
        ray.y = 0.00001;
    }
    if ray.z == 0.0 {
        ray.z = 0.00001;
    }

    let ray_result = ray_trace(Ray(in.ray_origin, ray));

    let theta = render_settings.light_theta;
    let phi = render_settings.light_phi;
    let light_dir = vec3f(sin(theta) * cos(phi), sin(theta) * sin(phi), cos(theta));

    if ray_result.hit {
        let ambient_factor = 0.4f;
        let light_factor = 1.0f - ambient_factor;

        let ambient_light = vec4f(ambient_factor, ambient_factor, ambient_factor, 0.0f);
        var diffuse_col = vec4f(1.0f, 1.0f, 1.0f, 0.0f);

        var ao = 1.0f;
        if (render_settings.ao == 1) {
            let ambient = voxel_ao(ray_result.pos - ray_result.normal * 0.002 - sign(ray) * ray_result.mask, ray_result.mask.zxy, ray_result.mask.yzx, u32(svo[0]));
            let d = vec2f(dot(ray_result.mask * ray_result.pos.yzx, vec3f(1.0)), dot(ray_result.mask * ray_result.pos.zxy, vec3f(1.0)));
            let uv = d - vec2f(1.0) * floor(d);
	        let interp_ao = mix(mix(ambient.z, ambient.w, uv.x), mix(ambient.y, ambient.x, uv.x), uv.y);
            let base_ao = 0.75 + interp_ao * 0.25;
            ao = pow(base_ao, 2.0);
        }

        if ray_result.value == 1 {
            diffuse_col = vec4f(1.f, 0.f, 0.f, 0.f);
        } else if ray_result.value == 2 {
            diffuse_col = vec4f(0.f, 1.f, 0.f, 0.f);
        } else if ray_result.value == 3 {
            diffuse_col = vec4f(0.f, 0.f, 1.f, 0.f);
        } else if ray_result.value == 4 {
            diffuse_col = vec4f(1.f, 1.f, 0.f, 0.f);
        } else if ray_result.value == 5 {
            diffuse_col = vec4f(1.f, 0.f, 1.f, 1.f);
            out.col = diffuse_col;
            return out;
        }

        let noise = perlinNoise3(floor(ray_result.pos) + vec3f(0.5, 0.5, 0.5));

        diffuse_col *= (1.0 + noise * 0.15);

        out.depth = ray_result.dist / (camera.zfar - camera.znear);
        out.col += diffuse_col * ambient_light * ao;

        var l_factor = max(dot(ray_result.normal, light_dir), 0.0);

        if l_factor > 0.0f {
            let light_ray_result = ray_trace(Ray(ray_result.pos, light_dir));

            if light_ray_result.hit {
                l_factor = 0.0f;
            }
        }

        out.col += diffuse_col * l_factor * light_factor;
    }

    if (render_settings.show_steps == 1) {
        let v = f32(ray_result.steps) / 100.0;
        out.col = vec4f(v, v, v, 1.);
    }

    if (render_settings.show_depth == 1) {
        out.col = vec4f(1 - out.depth, 1 - out.depth, 1 - out.depth, 1.);
    }

    return out;
}
