// Copyright 2010 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else if (typeof location !== 'undefined') {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      throw 'using preloaded data can only be done on a web page or in a web worker';
    }
    var PACKAGE_NAME = '../bin/Lime.data';
    var REMOTE_PACKAGE_BASE = 'Lime.data';
    if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
      Module['locateFile'] = Module['locateFilePackage'];
      err('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
    }
    var REMOTE_PACKAGE_NAME = Module['locateFile'] ? Module['locateFile'](REMOTE_PACKAGE_BASE, '') : REMOTE_PACKAGE_BASE;
  
    var REMOTE_PACKAGE_SIZE = metadata.remote_package_size;
    var PACKAGE_UUID = metadata.package_uuid;
  
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onerror = function(event) {
        throw new Error("NetworkError for: " + packageName);
      }
      xhr.onload = function(event) {
        if (xhr.status == 200 || xhr.status == 304 || xhr.status == 206 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
          var packageData = xhr.response;
          callback(packageData);
        } else {
          throw new Error(xhr.statusText + " : " + xhr.responseURL);
        }
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetchedCallback = null;
      var fetched = Module['getPreloadedPackage'] ? Module['getPreloadedPackage'](REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE) : null;

      if (!fetched) fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }
Module['FS_createPath']('/', 'data', true, true);

    function DataRequest(start, end, audio) {
      this.start = start;
      this.end = end;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);
        this.finish(byteArray);
      },
      finish: function(byteArray) {
        var that = this;

        Module['FS_createDataFile'](this.name, null, byteArray, true, true, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        Module['removeRunDependency']('fp ' + that.name);

        this.requests[this.name] = null;
      }
    };

        var files = metadata.files;
        for (var i = 0; i < files.length; ++i) {
          new DataRequest(files[i].start, files[i].end, files[i].audio).open('GET', files[i].filename);
        }

  
    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      assert(arrayBuffer instanceof ArrayBuffer, 'bad input to processPackageData');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
        // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though
        // (we may be allocating before malloc is ready, during startup).
        var ptr = Module['getMemory'](byteArray.length);
        Module['HEAPU8'].set(byteArray, ptr);
        DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
  
          var files = metadata.files;
          for (var i = 0; i < files.length; ++i) {
            DataRequest.prototype.requests[files[i].filename].onload();
          }
              Module['removeRunDependency']('datafile_../bin/Lime.data');

    };
    Module['addRunDependency']('datafile_../bin/Lime.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage({"files": [{"start": 0, "audio": 0, "end": 386, "filename": "/data/frag.glsl"}, {"start": 386, "audio": 0, "end": 790, "filename": "/data/frag_ori.glsl"}, {"start": 790, "audio": 0, "end": 1884, "filename": "/data/goomba.png"}, {"start": 1884, "audio": 0, "end": 134261, "filename": "/data/lemongrab.png"}, {"start": 134261, "audio": 0, "end": 773298, "filename": "/data/lime.png"}, {"start": 773298, "audio": 0, "end": 773524, "filename": "/data/vert.glsl"}, {"start": 773524, "audio": 0, "end": 773737, "filename": "/data/vert_ori.glsl"}], "remote_package_size": 773737, "package_uuid": "b40eed71-bdac-47b7-9de2-92a0eb15d1b0"});

})();



// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_HAS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;
ENVIRONMENT_IS_WEB = typeof window === 'object';
ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// A web environment like Electron.js can have Node enabled, so we must
// distinguish between Node-enabled environments and Node environments per se.
// This will allow the former to do things like mount NODEFS.
// Extended check using process.versions fixes issue #8816.
// (Also makes redundant the original check that 'require' is a function.)
ENVIRONMENT_HAS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
ENVIRONMENT_IS_NODE = ENVIRONMENT_HAS_NODE && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}



// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

if (ENVIRONMENT_IS_NODE) {
  scriptDirectory = __dirname + '/';

  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  read_ = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  readBinary = function readBinary(filename) {
    var ret = read_(filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  process['on']('unhandledRejection', abort);

  quit_ = function(status) {
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {


  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit === 'function') {
    quit_ = function(status) {
      quit(status);
    };
  }

  if (typeof print !== 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console === 'undefined') console = {};
    console.log = print;
    console.warn = console.error = typeof printErr !== 'undefined' ? printErr : print;
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }


  read_ = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.
if (Module['arguments']) arguments_ = Module['arguments'];if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) Object.defineProperty(Module, 'arguments', { configurable: true, get: function() { abort('Module.arguments has been replaced with plain arguments_') } });
if (Module['thisProgram']) thisProgram = Module['thisProgram'];if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) Object.defineProperty(Module, 'thisProgram', { configurable: true, get: function() { abort('Module.thisProgram has been replaced with plain thisProgram') } });
if (Module['quit']) quit_ = Module['quit'];if (!Object.getOwnPropertyDescriptor(Module, 'quit')) Object.defineProperty(Module, 'quit', { configurable: true, get: function() { abort('Module.quit has been replaced with plain quit_') } });

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
if (!Object.getOwnPropertyDescriptor(Module, 'read')) Object.defineProperty(Module, 'read', { configurable: true, get: function() { abort('Module.read has been replaced with plain read_') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) Object.defineProperty(Module, 'readAsync', { configurable: true, get: function() { abort('Module.readAsync has been replaced with plain readAsync') } });
if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) Object.defineProperty(Module, 'readBinary', { configurable: true, get: function() { abort('Module.readBinary has been replaced with plain readBinary') } });
// TODO: add when SDL2 is fixed if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) Object.defineProperty(Module, 'setWindowTitle', { configurable: true, get: function() { abort('Module.setWindowTitle has been replaced with plain setWindowTitle') } });


// TODO remove when SDL2 is fixed (also see above)



// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  abort('staticAlloc is no longer available at runtime; instead, perform static allocations at compile time (using makeStaticAlloc)');
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  if (end > _emscripten_get_heap_size()) {
    abort('failure to dynamicAlloc - memory growth etc. is not supported there, call malloc/sbrk directly');
  }
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  return Math.ceil(size / factor) * factor;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

var asm2wasmImports = { // special asm2wasm imports
    "f64-rem": function(x, y) {
        return x % y;
    },
    "debugger": function() {
        debugger;
    }
};



var jsCallStartIndex = 1;
var functionPointers = new Array(0);


// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');


  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';

}

function removeFunction(index) {

  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}

var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};

function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;




// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html


var wasmBinary;if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) Object.defineProperty(Module, 'wasmBinary', { configurable: true, get: function() { abort('Module.wasmBinary has been replaced with plain wasmBinary') } });
var noExitRuntime;if (Module['noExitRuntime']) noExitRuntime = Module['noExitRuntime'];if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) Object.defineProperty(Module, 'noExitRuntime', { configurable: true, get: function() { abort('Module.noExitRuntime has been replaced with plain noExitRuntime') } });




// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}





// Wasm globals

var wasmMemory;

// In fastcomp asm.js, we don't need a wasm Table at all.
// In the wasm backend, we polyfill the WebAssembly object,
// so this creates a (non-native-wasm) table for us.


//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);

  ret = convertReturnValue(ret);
  if (stack !== 0) stackRestore(stack);
  return ret;
}

function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_DYNAMIC = 2; // Cannot be freed except through sbrk
var ALLOC_NONE = 3; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc,
    stackAlloc,
    dynamicAlloc][allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}




/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  abort("this function has been removed - you should use UTF8ToString(ptr, maxBytesToRead) instead!");
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}


// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (u8Array[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = u8Array[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string on the asm.js/wasm heap to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (u8Array[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u >= 0x200000) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to an UTF-8 string on the asm.js/wasm heap! (Valid unicode code points should be in range 0-0x1FFFFF).');
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}


// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}




// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var STATIC_BASE = 8,
    STACK_BASE = 35536,
    STACKTOP = STACK_BASE,
    STACK_MAX = 5278416,
    DYNAMIC_BASE = 5278416,
    DYNAMICTOP_PTR = 35344;

assert(STACK_BASE % 16 === 0, 'stack must start aligned');
assert(DYNAMIC_BASE % 16 === 0, 'heap must start aligned');



var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;if (!Object.getOwnPropertyDescriptor(Module, 'TOTAL_MEMORY')) Object.defineProperty(Module, 'TOTAL_MEMORY', { configurable: true, get: function() { abort('Module.TOTAL_MEMORY has been replaced with plain INITIAL_TOTAL_MEMORY') } });

assert(INITIAL_TOTAL_MEMORY >= TOTAL_STACK, 'TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');






// In standalone mode, the wasm creates the memory, and the user can't provide it.
// In non-standalone/normal mode, we create the memory here.

// Create the main memory. (Note: this isn't used in STANDALONE_WASM mode since the wasm
// memory is created in the wasm, not in JS.)

  if (Module['buffer']) {
    buffer = Module['buffer'];
  }
  else {
    buffer = new ArrayBuffer(INITIAL_TOTAL_MEMORY);
  }


// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['TOTAL_MEMORY'].
INITIAL_TOTAL_MEMORY = buffer.byteLength;
updateGlobalBufferAndViews(buffer);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;




// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  var cookie1 = HEAPU32[(STACK_MAX >> 2)-1];
  var cookie2 = HEAPU32[(STACK_MAX >> 2)-2];
  if (cookie1 != 0x02135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  // We don't do this with ASan because ASan does its own checks for this.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}




// Endianness check (note: assumes compiler arch was little-endian)
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';
})();

function abortFnPtrError(ptr, sig) {
	abort("Invalid function pointer " + ptr + " called with signature '" + sig + "'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this). Build with ASSERTIONS=2 for more info.");
}



function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;
  if (!Module["noFSInit"] && !FS.init.initialized) FS.init();
TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  FS.ignorePermissions = false;
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;



// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what += '';
  out(what);
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  throw output;
}


var memoryInitializer = null;







// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}






// Globals used by JS i64 conversions
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = [];

function _sapp_js_create_textfield(){ var _sapp_inp = document.createElement("input"); _sapp_inp.type = "text"; _sapp_inp.id = "_sokol_app_input_element"; _sapp_inp.autocapitalize = "none"; _sapp_inp.addEventListener("focusout", function(_sapp_event) { __sapp_emsc_notify_keyboard_hidden() }); document.body.append(_sapp_inp); }
function _sapp_js_focus_textfield(){ document.getElementById("_sokol_app_input_element").focus(); }
function _sapp_js_hook_beforeunload(){ window.addEventListener('beforeunload', function(_sapp_event) { if (__sapp_html5_get_ask_leave_site() != 0) { _sapp_event.preventDefault(); _sapp_event.returnValue = ' '; } }); }
function _sapp_js_unfocus_textfield(){ document.getElementById("_sokol_app_input_element").blur(); }



// STATICTOP = STATIC_BASE + 35528;
/* global initializers */  __ATINIT__.push({ func: function() { ___emscripten_environ_constructor() } });


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = 35520
assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
}

function copyTempDouble(ptr) {
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];
  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];
  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];
  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];
  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];
  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];
  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];
}

// {{PRE_LIBRARY}}


  function demangle(func) {
      warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b__Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function jsStackTrace() {
      var err = new Error();
      if (!err.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error(0);
        } catch(e) {
          err = e;
        }
        if (!err.stack) {
          return '(no stack trace available)';
        }
      }
      return err.stack.toString();
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + UTF8ToString(condition) + ', at: ' + [filename ? UTF8ToString(filename) : 'unknown filename', line, func ? UTF8ToString(func) : 'unknown function']);
    }

  
  var ENV={};function ___buildEnvironment(environ) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'web_user';
        ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        // Browser language detection #8751
        ENV['LANG'] = ((typeof navigator === 'object' && navigator.languages && navigator.languages[0]) || 'C').replace('-', '_') + '.UTF-8';
        ENV['_'] = thisProgram;
        // Allocate memory.
        poolPtr = getMemory(TOTAL_ENV_SIZE);
        envPtr = getMemory(MAX_ENV_VALUES * 4);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in ENV) {
        if (typeof ENV[key] === 'string') {
          var line = key + '=' + ENV[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  var ___exception_infos={};
  
  var ___exception_caught= [];
  
  function ___exception_addRef(ptr) {
      if (!ptr) return;
      var info = ___exception_infos[ptr];
      info.refcount++;
    }
  
  function ___exception_deAdjust(adjusted) {
      if (!adjusted || ___exception_infos[adjusted]) return adjusted;
      for (var key in ___exception_infos) {
        var ptr = +key; // the iteration key is a string, and if we throw this, it must be an integer as that is what we look for
        var adj = ___exception_infos[ptr].adjusted;
        var len = adj.length;
        for (var i = 0; i < len; i++) {
          if (adj[i] === adjusted) {
            return ptr;
          }
        }
      }
      return adjusted;
    }function ___cxa_begin_catch(ptr) {
      var info = ___exception_infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exceptions--;
      }
      if (info) info.rethrown = false;
      ___exception_caught.push(ptr);
      ___exception_addRef(___exception_deAdjust(ptr));
      return ptr;
    }

  
  var ___exception_last=0;function ___cxa_throw(ptr, type, destructor) {
      ___exception_infos[ptr] = {
        ptr: ptr,
        adjusted: [ptr],
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      ___exception_last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exceptions = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exceptions++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

  function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
    

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else err('failed to set errno from JS');
      return value;
    }
  
  
  var PATH={splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  
  var PATH_FS={resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function(from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function(stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = Buffer.alloc ? Buffer.alloc(BUFSIZE) : new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              try {
                bytesRead = fs.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function(node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function(node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
        return;
      },resizeFileStorage:function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[44];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
        },readdir:function(node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function(stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            // malloc() can lead to growing the heap. If targeting the heap, we need to
            // re-acquire the heap buffer object in case growth had occurred.
            var fromHeap = (buffer.buffer == HEAP8.buffer);
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            (fromHeap ? HEAP8 : buffer).set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function() {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function(mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function(mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function(name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function(mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function(mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function(path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function(path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function(path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function(store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function(store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function(store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function(src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err && !errored) {
            errored = true;
            return callback(err);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        transaction.oncomplete = function(e) {
          if (!errored) {
            callback(null);
          }
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  
  var ERRNO_CODES={EPERM:63,ENOENT:44,ESRCH:71,EINTR:27,EIO:29,ENXIO:60,E2BIG:1,ENOEXEC:45,EBADF:8,ECHILD:12,EAGAIN:6,EWOULDBLOCK:6,ENOMEM:48,EACCES:2,EFAULT:21,ENOTBLK:105,EBUSY:10,EEXIST:20,EXDEV:75,ENODEV:43,ENOTDIR:54,EISDIR:31,EINVAL:28,ENFILE:41,EMFILE:33,ENOTTY:59,ETXTBSY:74,EFBIG:22,ENOSPC:51,ESPIPE:70,EROFS:69,EMLINK:34,EPIPE:64,EDOM:18,ERANGE:68,ENOMSG:49,EIDRM:24,ECHRNG:106,EL2NSYNC:156,EL3HLT:107,EL3RST:108,ELNRNG:109,EUNATCH:110,ENOCSI:111,EL2HLT:112,EDEADLK:16,ENOLCK:46,EBADE:113,EBADR:114,EXFULL:115,ENOANO:104,EBADRQC:103,EBADSLT:102,EDEADLOCK:16,EBFONT:101,ENOSTR:100,ENODATA:116,ETIME:117,ENOSR:118,ENONET:119,ENOPKG:120,EREMOTE:121,ENOLINK:47,EADV:122,ESRMNT:123,ECOMM:124,EPROTO:65,EMULTIHOP:36,EDOTDOT:125,EBADMSG:9,ENOTUNIQ:126,EBADFD:127,EREMCHG:128,ELIBACC:129,ELIBBAD:130,ELIBSCN:131,ELIBMAX:132,ELIBEXEC:133,ENOSYS:52,ENOTEMPTY:55,ENAMETOOLONG:37,ELOOP:32,EOPNOTSUPP:138,EPFNOSUPPORT:139,ECONNRESET:15,ENOBUFS:42,EAFNOSUPPORT:5,EPROTOTYPE:67,ENOTSOCK:57,ENOPROTOOPT:50,ESHUTDOWN:140,ECONNREFUSED:14,EADDRINUSE:3,ECONNABORTED:13,ENETUNREACH:40,ENETDOWN:38,ETIMEDOUT:73,EHOSTDOWN:142,EHOSTUNREACH:23,EINPROGRESS:26,EALREADY:7,EDESTADDRREQ:17,EMSGSIZE:35,EPROTONOSUPPORT:66,ESOCKTNOSUPPORT:137,EADDRNOTAVAIL:4,ENETRESET:39,EISCONN:30,ENOTCONN:53,ETOOMANYREFS:141,EUSERS:136,EDQUOT:19,ESTALE:72,ENOTSUP:138,ENOMEDIUM:148,EILSEQ:25,EOVERFLOW:61,ECANCELED:11,ENOTRECOVERABLE:56,EOWNERDEAD:62,ESTRPIPE:135};var NODEFS={isWindows:false,staticInit:function() {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer["alloc"] ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },convertNodeCode:function(e) {
        var code = e.code;
        assert(code in ERRNO_CODES);
        return ERRNO_CODES[code];
      },mount:function (mount) {
        assert(ENVIRONMENT_HAS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(28);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function(flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(28);
        }
      },node_ops:{getattr:function(node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function(node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        },unlink:function(parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        },rmdir:function(parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        },readdir:function(node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        },symlink:function(parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        },readlink:function(node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(NODEFS.convertNodeCode(e));
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function(node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function(parent, name) {
          throw new FS.ErrnoError(44);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(63);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(63);
        },unlink:function(parent, name) {
          throw new FS.ErrnoError(63);
        },rmdir:function(parent, name) {
          throw new FS.ErrnoError(63);
        },readdir:function(node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newName, oldPath) {
          throw new FS.ErrnoError(63);
        },readlink:function(node) {
          throw new FS.ErrnoError(63);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(29);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        }}};
  
  var ERRNO_MESSAGES={0:"Success",1:"Arg list too long",2:"Permission denied",3:"Address already in use",4:"Address not available",5:"Address family not supported by protocol family",6:"No more processes",7:"Socket already connected",8:"Bad file number",9:"Trying to read unreadable message",10:"Mount device busy",11:"Operation canceled",12:"No children",13:"Connection aborted",14:"Connection refused",15:"Connection reset by peer",16:"File locking deadlock error",17:"Destination address required",18:"Math arg out of domain of func",19:"Quota exceeded",20:"File exists",21:"Bad address",22:"File too large",23:"Host is unreachable",24:"Identifier removed",25:"Illegal byte sequence",26:"Connection already in progress",27:"Interrupted system call",28:"Invalid argument",29:"I/O error",30:"Socket is already connected",31:"Is a directory",32:"Too many symbolic links",33:"Too many open files",34:"Too many links",35:"Message too long",36:"Multihop attempted",37:"File or path name too long",38:"Network interface is not configured",39:"Connection reset by network",40:"Network is unreachable",41:"Too many open files in system",42:"No buffer space available",43:"No such device",44:"No such file or directory",45:"Exec format error",46:"No record locks available",47:"The link has been severed",48:"Not enough core",49:"No message of desired type",50:"Protocol not available",51:"No space left on device",52:"Function not implemented",53:"Socket is not connected",54:"Not a directory",55:"Directory not empty",56:"State not recoverable",57:"Socket operation on non-socket",59:"Not a typewriter",60:"No such device or address",61:"Value too large for defined data type",62:"Previous owner died",63:"Not super-user",64:"Broken pipe",65:"Protocol error",66:"Unknown protocol",67:"Protocol wrong type for socket",68:"Math result not representable",69:"Read only file system",70:"Illegal seek",71:"No such process",72:"Stale file handle",73:"Connection timed out",74:"Text file busy",75:"Cross-device link",100:"Device not a stream",101:"Bad font file fmt",102:"Invalid slot",103:"Invalid request code",104:"No anode",105:"Block device required",106:"Channel number out of range",107:"Level 3 halted",108:"Level 3 reset",109:"Link number out of range",110:"Protocol driver not attached",111:"No CSI structure available",112:"Level 2 halted",113:"Invalid exchange",114:"Invalid request descriptor",115:"Exchange full",116:"No data (for no delay io)",117:"Timer expired",118:"Out of streams resources",119:"Machine is not on the network",120:"Package not installed",121:"The object is remote",122:"Advertise error",123:"Srmount error",124:"Communication error on send",125:"Cross mount point (not really error)",126:"Given log. name not unique",127:"f.d. invalid for this operation",128:"Remote address changed",129:"Can   access a needed shared lib",130:"Accessing a corrupted shared lib",131:".lib section in a.out corrupted",132:"Attempting to link in too many libs",133:"Attempting to exec a shared library",135:"Streams pipe error",136:"Too many users",137:"Socket type not supported",138:"Not supported",139:"Protocol family not supported",140:"Can't send after socket shutdown",141:"Too many references",142:"Host is down",148:"No medium (in tape drive)",156:"Level 2 not synchronized"};var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function(e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function(path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function(parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function(parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function(parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function(node) {
        FS.hashRemoveNode(node);
      },isRoot:function(node) {
        return node === node.parent;
      },isMountpoint:function(node) {
        return !!node.mounted;
      },isFile:function(mode) {
        return (mode & 61440) === 32768;
      },isDir:function(mode) {
        return (mode & 61440) === 16384;
      },isLink:function(mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function(mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function(mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function(mode) {
        return (mode & 61440) === 4096;
      },isSocket:function(mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return 2;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return 2;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },mayLookup:function(dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },mayCreate:function(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },mayOpen:function(node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function(fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },getStream:function(fd) {
        return FS.streams[fd];
      },createStream:function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function(fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function() {
          throw new FS.ErrnoError(70);
        }},major:function(dev) {
        return ((dev) >> 8);
      },minor:function(dev) {
        return ((dev) & 0xff);
      },makedev:function(ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function(dev) {
        return FS.devices[dev];
      },getMounts:function(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function(populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function(type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function(path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function(path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },mkdev:function(path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(10);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },unlink:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },lstat:function(path) {
        return FS.stat(path, true);
      },chmod:function(path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function(path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chmod(stream.node, mode);
      },chown:function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },utime:function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function(path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            console.log("FS.trackingDelegate error on read file: " + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function(stream) {
        return stream.fd === null;
      },llseek:function(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+stream.path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function(stream, buffer, offset, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function(stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function(stream) {
        return 0;
      },ioctl:function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function() {
        return FS.currentPath;
      },chdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else
        if (ENVIRONMENT_IS_NODE) {
          // for nodejs with or without crypto support included
          try {
            var crypto_module = require('crypto');
            // nodejs has crypto support
            random_device = function() { return crypto_module['randomBytes'](1)[0]; };
          } catch (e) {
            // nodejs doesn't have crypto support
          }
        } else
        {}
        if (!random_device) {
          // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
          random_device = function() { abort("no cryptographic support found for random_device. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function() {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        var stdout = FS.open('/dev/stdout', 'w');
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
  
          // Try to get a maximally helpful stack trace. On Node.js, getting Error.stack
          // now ensures it shows what we want.
          if (this.stack) {
            // Define the stack property for Node.js 4, which otherwise errors on the next line.
            Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
            this.stack = demangleAll(this.stack);
          }
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function() {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function(input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function() {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function(parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function(relative, base) {
        return PATH_FS.resolve(base, relative);
      },standardizePath:function(path) {
        return PATH.normalize(path);
      },findObject:function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function(parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function(parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function(parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(29);
        return success;
      },createLazyFile:function(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(29);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(29);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function() {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function(dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(8);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function(func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -54;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)]=tempI64[0],HEAP32[(((buf)+(44))>>2)]=tempI64[1]);
        HEAP32[(((buf)+(48))>>2)]=4096;
        HEAP32[(((buf)+(52))>>2)]=stat.blocks;
        HEAP32[(((buf)+(56))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)]=0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)]=tempI64[0],HEAP32[(((buf)+(84))>>2)]=tempI64[1]);
        return 0;
      },doMsync:function(addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function(path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function(path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -28;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function(path, buf, bufsize) {
        if (bufsize <= 0) return -28;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function(path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -28;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        if (!node) {
          return -44;
        }
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -2;
        }
        return 0;
      },doDup:function(path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function(varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function() {
        var ret = UTF8ToString(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function(fd) {
        // TODO: when all syscalls use wasi, can remove the next line
        if (fd === undefined) fd = SYSCALLS.get();
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
        return stream;
      },get64:function() {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function() {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -28;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -28; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(28);
          return -1;
        default: {
          return -28;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get(); // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -59;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -59;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -59;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -59;
          return -28; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -59;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -59;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
     

  function ___unlock() {}

  
  function _fd_close(fd) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_close(
  ) {
  return _fd_close.apply(null, arguments)
  }

  
  function _fd_read(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doReadv(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_read(
  ) {
  return _fd_read.apply(null, arguments)
  }

  
  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -61;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((newOffset)>>2)]=tempI64[0],HEAP32[(((newOffset)+(4))>>2)]=tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_seek(
  ) {
  return _fd_seek.apply(null, arguments)
  }

  
  function _fd_write(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doWritev(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)]=num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }function ___wasi_fd_write(
  ) {
  return _fd_write.apply(null, arguments)
  }

  function _abort() {
      abort();
    }

   

   

  function _emscripten_get_device_pixel_ratio() {
      return devicePixelRatio || 1.0;
    }

  
  var JSEvents={keyEvent:0,mouseEvent:0,wheelEvent:0,uiEvent:0,focusEvent:0,deviceOrientationEvent:0,deviceMotionEvent:0,fullscreenChangeEvent:0,pointerlockChangeEvent:0,visibilityChangeEvent:0,touchEvent:0,previousFullscreenElement:null,previousScreenX:null,previousScreenY:null,removeEventListenersRegistered:false,removeAllEventListeners:function() {
        for(var i = JSEvents.eventHandlers.length-1; i >= 0; --i) {
          JSEvents._removeHandler(i);
        }
        JSEvents.eventHandlers = [];
        JSEvents.deferredCalls = [];
      },registerRemoveEventListeners:function() {
        if (!JSEvents.removeEventListenersRegistered) {
          __ATEXIT__.push(JSEvents.removeAllEventListeners);
          JSEvents.removeEventListenersRegistered = true;
        }
      },deferredCalls:[],deferCall:function(targetFunction, precedence, argsList) {
        function arraysHaveEqualContent(arrA, arrB) {
          if (arrA.length != arrB.length) return false;
  
          for(var i in arrA) {
            if (arrA[i] != arrB[i]) return false;
          }
          return true;
        }
        // Test if the given call was already queued, and if so, don't add it again.
        for(var i in JSEvents.deferredCalls) {
          var call = JSEvents.deferredCalls[i];
          if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
            return;
          }
        }
        JSEvents.deferredCalls.push({
          targetFunction: targetFunction,
          precedence: precedence,
          argsList: argsList
        });
  
        JSEvents.deferredCalls.sort(function(x,y) { return x.precedence < y.precedence; });
      },removeDeferredCalls:function(targetFunction) {
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          if (JSEvents.deferredCalls[i].targetFunction == targetFunction) {
            JSEvents.deferredCalls.splice(i, 1);
            --i;
          }
        }
      },canPerformEventHandlerRequests:function() {
        return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;
      },runDeferredCalls:function() {
        if (!JSEvents.canPerformEventHandlerRequests()) {
          return;
        }
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          var call = JSEvents.deferredCalls[i];
          JSEvents.deferredCalls.splice(i, 1);
          --i;
          call.targetFunction.apply(this, call.argsList);
        }
      },inEventHandler:0,currentEventHandler:null,eventHandlers:[],isInternetExplorer:function() { return navigator.userAgent.indexOf('MSIE') !== -1 || navigator.appVersion.indexOf('Trident/') > 0; },removeAllHandlersOnTarget:function(target, eventTypeString) {
        for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
          if (JSEvents.eventHandlers[i].target == target && 
            (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
             JSEvents._removeHandler(i--);
           }
        }
      },_removeHandler:function(i) {
        var h = JSEvents.eventHandlers[i];
        h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
        JSEvents.eventHandlers.splice(i, 1);
      },registerOrRemoveHandler:function(eventHandler) {
        var jsEventHandler = function jsEventHandler(event) {
          // Increment nesting count for the event handler.
          ++JSEvents.inEventHandler;
          JSEvents.currentEventHandler = eventHandler;
          // Process any old deferred calls the user has placed.
          JSEvents.runDeferredCalls();
          // Process the actual event, calls back to user C code handler.
          eventHandler.handlerFunc(event);
          // Process any new deferred calls that were placed right now from this event handler.
          JSEvents.runDeferredCalls();
          // Out of event handler - restore nesting count.
          --JSEvents.inEventHandler;
        };
        
        if (eventHandler.callbackfunc) {
          eventHandler.eventListenerFunc = jsEventHandler;
          eventHandler.target.addEventListener(eventHandler.eventTypeString, jsEventHandler, eventHandler.useCapture);
          JSEvents.eventHandlers.push(eventHandler);
          JSEvents.registerRemoveEventListeners();
        } else {
          for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
            if (JSEvents.eventHandlers[i].target == eventHandler.target
             && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
               JSEvents._removeHandler(i--);
             }
          }
        }
      },getBoundingClientRectOrZeros:function(target) {
        return target.getBoundingClientRect ? target.getBoundingClientRect() : { left: 0, top: 0 };
      },pageScrollPos:function() {
        if (pageXOffset > 0 || pageYOffset > 0) {
          return [pageXOffset, pageYOffset];
        }
        if (typeof document.documentElement.scrollLeft !== 'undefined' || typeof document.documentElement.scrollTop !== 'undefined') {
          return [document.documentElement.scrollLeft, document.documentElement.scrollTop];
        }
        return [document.body.scrollLeft|0, document.body.scrollTop|0];
      },getNodeNameForTarget:function(target) {
        if (!target) return '';
        if (target == window) return '#window';
        if (target == screen) return '#screen';
        return (target && target.nodeName) ? target.nodeName : '';
      },tick:function() {
        if (window['performance'] && window['performance']['now']) return window['performance']['now']();
        else return Date.now();
      },fullscreenEnabled:function() {
        return document.fullscreenEnabled || document.mozFullScreenEnabled || document.webkitFullscreenEnabled || document.msFullscreenEnabled;
      }};
  
  
  var __specialEventTargets=[0, typeof document !== 'undefined' ? document : 0, typeof window !== 'undefined' ? window : 0];function __findEventTarget(target) {
      warnOnce('Rules for selecting event targets in HTML5 API are changing: instead of using document.getElementById() that only can refer to elements by their DOM ID, new event target selection mechanism uses the more flexible function document.querySelector() that can look up element names, classes, and complex CSS selectors. Build with -s DISABLE_DEPRECATED_FIND_EVENT_TARGET_BEHAVIOR=1 to change to the new lookup rules. See https://github.com/emscripten-core/emscripten/pull/7977 for more details.');
      try {
        // The sensible "default" target varies between events, but use window as the default
        // since DOM events mostly can default to that. Specific callback registrations
        // override their own defaults.
        if (!target) return window;
        if (typeof target === "number") target = __specialEventTargets[target] || UTF8ToString(target);
        if (target === '#window') return window;
        else if (target === '#document') return document;
        else if (target === '#screen') return screen;
        else if (target === '#canvas') return Module['canvas'];
        return (typeof target === 'string') ? document.getElementById(target) : target;
      } catch(e) {
        // In Web Workers, some objects above, such as '#document' do not exist. Gracefully
        // return null for them.
        return null;
      }
    }function _emscripten_get_element_css_size(target, width, height) {
      target = target ? __findEventTarget(target) : Module['canvas'];
      if (!target) return -4;
  
      if (target.getBoundingClientRect) {
        var rect = target.getBoundingClientRect();
        HEAPF64[((width)>>3)]=rect.right - rect.left;
        HEAPF64[((height)>>3)]=rect.bottom - rect.top;
      } else {
        HEAPF64[((width)>>3)]=target.clientWidth;
        HEAPF64[((height)>>3)]=target.clientHeight;
      }
  
      return 0;
    }

  function _emscripten_get_heap_size() {
      return HEAP8.length;
    }

   

  function _emscripten_request_animation_frame_loop(cb, userData) {
      function tick(timeStamp) {
        if (dynCall_idi(cb, timeStamp, userData)) {
          requestAnimationFrame(tick);
        }
      }
      return requestAnimationFrame(tick);
    }

  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + HEAP8.length + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }function _emscripten_resize_heap(requestedSize) {
      abortOnCannotGrowMemory(requestedSize);
    }

  
  function __findCanvasEventTarget(target) {
      if (typeof target === 'number') target = UTF8ToString(target);
      if (!target || target === '#canvas') {
        if (typeof GL !== 'undefined' && GL.offscreenCanvases['canvas']) return GL.offscreenCanvases['canvas']; // TODO: Remove this line, target '#canvas' should refer only to Module['canvas'], not to GL.offscreenCanvases['canvas'] - but need stricter tests to be able to remove this line.
        return Module['canvas'];
      }
      if (typeof GL !== 'undefined' && GL.offscreenCanvases[target]) return GL.offscreenCanvases[target];
      return __findEventTarget(target);
    }function _emscripten_set_canvas_element_size(target, width, height) {
      var canvas = __findCanvasEventTarget(target);
      if (!canvas) return -4;
      canvas.width = width;
      canvas.height = height;
      return 0;
    }

  
  function __registerKeyEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.keyEvent) JSEvents.keyEvent = _malloc( 164 );
  
      var keyEventHandlerFunc = function(ev) {
        var e = ev || event;
  
        var keyEventData = JSEvents.keyEvent;
        stringToUTF8(e.key ? e.key : "", keyEventData + 0, 32);
        stringToUTF8(e.code ? e.code : "", keyEventData + 32, 32);
        HEAP32[(((keyEventData)+(64))>>2)]=e.location;
        HEAP32[(((keyEventData)+(68))>>2)]=e.ctrlKey;
        HEAP32[(((keyEventData)+(72))>>2)]=e.shiftKey;
        HEAP32[(((keyEventData)+(76))>>2)]=e.altKey;
        HEAP32[(((keyEventData)+(80))>>2)]=e.metaKey;
        HEAP32[(((keyEventData)+(84))>>2)]=e.repeat;
        stringToUTF8(e.locale ? e.locale : "", keyEventData + 88, 32);
        stringToUTF8(e.char ? e.char : "", keyEventData + 120, 32);
        HEAP32[(((keyEventData)+(152))>>2)]=e.charCode;
        HEAP32[(((keyEventData)+(156))>>2)]=e.keyCode;
        HEAP32[(((keyEventData)+(160))>>2)]=e.which;
  
        if (dynCall_iiii(callbackfunc, eventTypeId, keyEventData, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: __findEventTarget(target),
        allowsDeferredCalls: JSEvents.isInternetExplorer() ? false : true, // MSIE doesn't allow fullscreen and pointerlock requests from key handlers, others do.
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: keyEventHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_keydown_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerKeyEventCallback(target, userData, useCapture, callbackfunc, 2, "keydown", targetThread);
      return 0;
    }

  function _emscripten_set_keypress_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerKeyEventCallback(target, userData, useCapture, callbackfunc, 1, "keypress", targetThread);
      return 0;
    }

  function _emscripten_set_keyup_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerKeyEventCallback(target, userData, useCapture, callbackfunc, 3, "keyup", targetThread);
      return 0;
    }

  
  
  function __fillMouseEventData(eventStruct, e, target) {
      HEAPF64[((eventStruct)>>3)]=JSEvents.tick();
      HEAP32[(((eventStruct)+(8))>>2)]=e.screenX;
      HEAP32[(((eventStruct)+(12))>>2)]=e.screenY;
      HEAP32[(((eventStruct)+(16))>>2)]=e.clientX;
      HEAP32[(((eventStruct)+(20))>>2)]=e.clientY;
      HEAP32[(((eventStruct)+(24))>>2)]=e.ctrlKey;
      HEAP32[(((eventStruct)+(28))>>2)]=e.shiftKey;
      HEAP32[(((eventStruct)+(32))>>2)]=e.altKey;
      HEAP32[(((eventStruct)+(36))>>2)]=e.metaKey;
      HEAP16[(((eventStruct)+(40))>>1)]=e.button;
      HEAP16[(((eventStruct)+(42))>>1)]=e.buttons;
      HEAP32[(((eventStruct)+(44))>>2)]=e["movementX"] || e["mozMovementX"] || e["webkitMovementX"] || (e.screenX-JSEvents.previousScreenX);
      HEAP32[(((eventStruct)+(48))>>2)]=e["movementY"] || e["mozMovementY"] || e["webkitMovementY"] || (e.screenY-JSEvents.previousScreenY);
  
      if (Module['canvas']) {
        var rect = Module['canvas'].getBoundingClientRect();
        HEAP32[(((eventStruct)+(60))>>2)]=e.clientX - rect.left;
        HEAP32[(((eventStruct)+(64))>>2)]=e.clientY - rect.top;
      } else { // Canvas is not initialized, return 0.
        HEAP32[(((eventStruct)+(60))>>2)]=0;
        HEAP32[(((eventStruct)+(64))>>2)]=0;
      }
      if (target) {
        var rect = JSEvents.getBoundingClientRectOrZeros(target);
        HEAP32[(((eventStruct)+(52))>>2)]=e.clientX - rect.left;
        HEAP32[(((eventStruct)+(56))>>2)]=e.clientY - rect.top;
      } else { // No specific target passed, return 0.
        HEAP32[(((eventStruct)+(52))>>2)]=0;
        HEAP32[(((eventStruct)+(56))>>2)]=0;
      }
      // wheel and mousewheel events contain wrong screenX/screenY on chrome/opera
        // https://github.com/emscripten-core/emscripten/pull/4997
      // https://bugs.chromium.org/p/chromium/issues/detail?id=699956
      if (e.type !== 'wheel' && e.type !== 'mousewheel') {
        JSEvents.previousScreenX = e.screenX;
        JSEvents.previousScreenY = e.screenY;
      }
    }function __registerMouseEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.mouseEvent) JSEvents.mouseEvent = _malloc( 72 );
      target = __findEventTarget(target);
  
      var mouseEventHandlerFunc = function(ev) {
        var e = ev || event;
  
        // TODO: Make this access thread safe, or this could update live while app is reading it.
        __fillMouseEventData(JSEvents.mouseEvent, e, target);
  
        if (dynCall_iiii(callbackfunc, eventTypeId, JSEvents.mouseEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: target,
        allowsDeferredCalls: eventTypeString != 'mousemove' && eventTypeString != 'mouseenter' && eventTypeString != 'mouseleave', // Mouse move events do not allow fullscreen/pointer lock requests to be handled in them!
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: mouseEventHandlerFunc,
        useCapture: useCapture
      };
      // In IE, mousedown events don't either allow deferred calls to be run!
      if (JSEvents.isInternetExplorer() && eventTypeString == 'mousedown') eventHandler.allowsDeferredCalls = false;
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_mousedown_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerMouseEventCallback(target, userData, useCapture, callbackfunc, 5, "mousedown", targetThread);
      return 0;
    }

  function _emscripten_set_mouseenter_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerMouseEventCallback(target, userData, useCapture, callbackfunc, 33, "mouseenter", targetThread);
      return 0;
    }

  function _emscripten_set_mouseleave_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerMouseEventCallback(target, userData, useCapture, callbackfunc, 34, "mouseleave", targetThread);
      return 0;
    }

  function _emscripten_set_mousemove_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerMouseEventCallback(target, userData, useCapture, callbackfunc, 8, "mousemove", targetThread);
      return 0;
    }

  function _emscripten_set_mouseup_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerMouseEventCallback(target, userData, useCapture, callbackfunc, 6, "mouseup", targetThread);
      return 0;
    }

  
  function __registerUiEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.uiEvent) JSEvents.uiEvent = _malloc( 36 );
  
      if (eventTypeString == "scroll" && !target) {
        target = document; // By default read scroll events on document rather than window.
      } else {
        target = __findEventTarget(target);
      }
  
      var uiEventHandlerFunc = function(ev) {
        var e = ev || event;
        if (e.target != target) {
          // Never take ui events such as scroll via a 'bubbled' route, but always from the direct element that
          // was targeted. Otherwise e.g. if app logs a message in response to a page scroll, the Emscripten log
          // message box could cause to scroll, generating a new (bubbled) scroll message, causing a new log print,
          // causing a new scroll, etc..
          return;
        }
        var scrollPos = JSEvents.pageScrollPos();
  
        var uiEvent = JSEvents.uiEvent;
        HEAP32[((uiEvent)>>2)]=e.detail;
        HEAP32[(((uiEvent)+(4))>>2)]=document.body.clientWidth;
        HEAP32[(((uiEvent)+(8))>>2)]=document.body.clientHeight;
        HEAP32[(((uiEvent)+(12))>>2)]=innerWidth;
        HEAP32[(((uiEvent)+(16))>>2)]=innerHeight;
        HEAP32[(((uiEvent)+(20))>>2)]=outerWidth;
        HEAP32[(((uiEvent)+(24))>>2)]=outerHeight;
        HEAP32[(((uiEvent)+(28))>>2)]=scrollPos[0];
        HEAP32[(((uiEvent)+(32))>>2)]=scrollPos[1];
        if (dynCall_iiii(callbackfunc, eventTypeId, uiEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: target,
        allowsDeferredCalls: false, // Neither scroll or resize events allow running requests inside them.
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: uiEventHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_resize_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerUiEventCallback(target, userData, useCapture, callbackfunc, 10, "resize", targetThread);
      return 0;
    }

  
  function __registerTouchEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.touchEvent) JSEvents.touchEvent = _malloc( 1684 );
  
      target = __findEventTarget(target);
  
      var touchEventHandlerFunc = function(ev) {
        var e = ev || event;
  
        var touches = {};
        for(var i = 0; i < e.touches.length; ++i) {
          var touch = e.touches[i];
          touch.changed = false;
          touches[touch.identifier] = touch;
        }
        for(var i = 0; i < e.changedTouches.length; ++i) {
          var touch = e.changedTouches[i];
          touches[touch.identifier] = touch;
          touch.changed = true;
        }
        for(var i = 0; i < e.targetTouches.length; ++i) {
          var touch = e.targetTouches[i];
          touches[touch.identifier].onTarget = true;
        }
  
        var touchEvent = JSEvents.touchEvent;
        var ptr = touchEvent;
        HEAP32[(((ptr)+(4))>>2)]=e.ctrlKey;
        HEAP32[(((ptr)+(8))>>2)]=e.shiftKey;
        HEAP32[(((ptr)+(12))>>2)]=e.altKey;
        HEAP32[(((ptr)+(16))>>2)]=e.metaKey;
        ptr += 20; // Advance to the start of the touch array.
        var canvasRect = Module['canvas'] ? Module['canvas'].getBoundingClientRect() : undefined;
        var targetRect = JSEvents.getBoundingClientRectOrZeros(target);
        var numTouches = 0;
        for(var i in touches) {
          var t = touches[i];
          HEAP32[((ptr)>>2)]=t.identifier;
          HEAP32[(((ptr)+(4))>>2)]=t.screenX;
          HEAP32[(((ptr)+(8))>>2)]=t.screenY;
          HEAP32[(((ptr)+(12))>>2)]=t.clientX;
          HEAP32[(((ptr)+(16))>>2)]=t.clientY;
          HEAP32[(((ptr)+(20))>>2)]=t.pageX;
          HEAP32[(((ptr)+(24))>>2)]=t.pageY;
          HEAP32[(((ptr)+(28))>>2)]=t.changed;
          HEAP32[(((ptr)+(32))>>2)]=t.onTarget;
          if (canvasRect) {
            HEAP32[(((ptr)+(44))>>2)]=t.clientX - canvasRect.left;
            HEAP32[(((ptr)+(48))>>2)]=t.clientY - canvasRect.top;
          } else {
            HEAP32[(((ptr)+(44))>>2)]=0;
            HEAP32[(((ptr)+(48))>>2)]=0;            
          }
          HEAP32[(((ptr)+(36))>>2)]=t.clientX - targetRect.left;
          HEAP32[(((ptr)+(40))>>2)]=t.clientY - targetRect.top;
  
          ptr += 52;
  
          if (++numTouches >= 32) {
            break;
          }
        }
        HEAP32[((touchEvent)>>2)]=numTouches;
  
        if (dynCall_iiii(callbackfunc, eventTypeId, touchEvent, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: target,
        allowsDeferredCalls: eventTypeString == 'touchstart' || eventTypeString == 'touchend',
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: touchEventHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_touchcancel_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerTouchEventCallback(target, userData, useCapture, callbackfunc, 25, "touchcancel", targetThread);
      return 0;
    }

  function _emscripten_set_touchend_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerTouchEventCallback(target, userData, useCapture, callbackfunc, 23, "touchend", targetThread);
      return 0;
    }

  function _emscripten_set_touchmove_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerTouchEventCallback(target, userData, useCapture, callbackfunc, 24, "touchmove", targetThread);
      return 0;
    }

  function _emscripten_set_touchstart_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerTouchEventCallback(target, userData, useCapture, callbackfunc, 22, "touchstart", targetThread);
      return 0;
    }

  
  function __registerWebGlEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
  
      if (!target) target = Module['canvas'];
  
      var webGlEventHandlerFunc = function(ev) {
        var e = ev || event;
  
        if (dynCall_iiii(callbackfunc, eventTypeId, 0, userData)) e.preventDefault();
      };
  
      var eventHandler = {
        target: __findEventTarget(target),
        allowsDeferredCalls: false,
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: webGlEventHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_webglcontextlost_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerWebGlEventCallback(target, userData, useCapture, callbackfunc, 31, "webglcontextlost", targetThread);
      return 0;
    }

  function _emscripten_set_webglcontextrestored_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      __registerWebGlEventCallback(target, userData, useCapture, callbackfunc, 32, "webglcontextrestored", targetThread);
      return 0;
    }

  
  function __registerWheelEventCallback(target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString, targetThread) {
      if (!JSEvents.wheelEvent) JSEvents.wheelEvent = _malloc( 104 );
  
      // The DOM Level 3 events spec event 'wheel'
      var wheelHandlerFunc = function(ev) {
        var e = ev || event;
        var wheelEvent = JSEvents.wheelEvent;
        __fillMouseEventData(wheelEvent, e, target);
        HEAPF64[(((wheelEvent)+(72))>>3)]=e["deltaX"];
        HEAPF64[(((wheelEvent)+(80))>>3)]=e["deltaY"];
        HEAPF64[(((wheelEvent)+(88))>>3)]=e["deltaZ"];
        HEAP32[(((wheelEvent)+(96))>>2)]=e["deltaMode"];
        if (dynCall_iiii(callbackfunc, eventTypeId, wheelEvent, userData)) e.preventDefault();
      };
      // The 'mousewheel' event as implemented in Safari 6.0.5
      var mouseWheelHandlerFunc = function(ev) {
        var e = ev || event;
        __fillMouseEventData(JSEvents.wheelEvent, e, target);
        HEAPF64[(((JSEvents.wheelEvent)+(72))>>3)]=e["wheelDeltaX"] || 0;
        HEAPF64[(((JSEvents.wheelEvent)+(80))>>3)]=-(e["wheelDeltaY"] || e["wheelDelta"]) /* 1. Invert to unify direction with the DOM Level 3 wheel event. 2. MSIE does not provide wheelDeltaY, so wheelDelta is used as a fallback. */;
        HEAPF64[(((JSEvents.wheelEvent)+(88))>>3)]=0 /* Not available */;
        HEAP32[(((JSEvents.wheelEvent)+(96))>>2)]=0 /* DOM_DELTA_PIXEL */;
        var shouldCancel = dynCall_iiii(callbackfunc, eventTypeId, JSEvents.wheelEvent, userData);
        if (shouldCancel) {
          e.preventDefault();
        }
      };
  
      var eventHandler = {
        target: target,
        allowsDeferredCalls: true,
        eventTypeString: eventTypeString,
        callbackfunc: callbackfunc,
        handlerFunc: (eventTypeString == 'wheel') ? wheelHandlerFunc : mouseWheelHandlerFunc,
        useCapture: useCapture
      };
      JSEvents.registerOrRemoveHandler(eventHandler);
    }function _emscripten_set_wheel_callback_on_thread(target, userData, useCapture, callbackfunc, targetThread) {
      target = __findEventTarget(target);
      if (typeof target.onwheel !== 'undefined') {
        __registerWheelEventCallback(target, userData, useCapture, callbackfunc, 9, "wheel", targetThread);
        return 0;
      } else if (typeof target.onmousewheel !== 'undefined') {
        __registerWheelEventCallback(target, userData, useCapture, callbackfunc, 9, "mousewheel", targetThread);
        return 0;
      } else {
        return -1;
      }
    }

  
  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:{},currentContext:null,offscreenCanvases:{},timerQueriesEXT:[],programInfos:{},stringCache:{},unpackAlignment:4,init:function() {
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function(table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:256,miniTempBuffer:null,miniTempBufferViews:[0],getSource:function(shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var len = length ? HEAP32[(((length)+(i*4))>>2)] : -1;
          source += UTF8ToString(HEAP32[(((string)+(i*4))>>2)], len < 0 ? undefined : len);
        }
        return source;
      },createContext:function(canvas, webGLContextAttributes) {
  
  
  
  
        var ctx = 
          (canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes));
  
  
        if (!ctx) return 0;
  
        var handle = GL.registerContext(ctx, webGLContextAttributes);
  
  
  
        return handle;
      },registerContext:function(ctx, webGLContextAttributes) {
        var handle = _malloc(8); // Make space on the heap to store GL context attributes that need to be accessible as shared between threads.
        var context = {
          handle: handle,
          attributes: webGLContextAttributes,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
  
  
  
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes.enableExtensionsByDefault === 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
  
  
  
  
        return handle;
      },makeContextCurrent:function(contextHandle) {
  
        GL.currentContext = GL.contexts[contextHandle]; // Active Emscripten GL layer context object.
        Module.ctx = GLctx = GL.currentContext && GL.currentContext.GLctx; // Active WebGL context object.
        return !(contextHandle && !GLctx);
      },getContext:function(contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function(contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        _free(GL.contexts[contextHandle]);
        GL.contexts[contextHandle] = null;
      },acquireInstancedArraysExtension:function(ctx) {
        // Extension available in WebGL 1 from Firefox 26 and Google Chrome 30 onwards. Core feature in WebGL 2.
        var ext = ctx.getExtension('ANGLE_instanced_arrays');
        if (ext) {
          ctx['vertexAttribDivisor'] = function(index, divisor) { ext['vertexAttribDivisorANGLE'](index, divisor); };
          ctx['drawArraysInstanced'] = function(mode, first, count, primcount) { ext['drawArraysInstancedANGLE'](mode, first, count, primcount); };
          ctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { ext['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
        }
      },acquireVertexArrayObjectExtension:function(ctx) {
        // Extension available in WebGL 1 from Firefox 25 and WebKit 536.28/desktop Safari 6.0.3 onwards. Core feature in WebGL 2.
        var ext = ctx.getExtension('OES_vertex_array_object');
        if (ext) {
          ctx['createVertexArray'] = function() { return ext['createVertexArrayOES'](); };
          ctx['deleteVertexArray'] = function(vao) { ext['deleteVertexArrayOES'](vao); };
          ctx['bindVertexArray'] = function(vao) { ext['bindVertexArrayOES'](vao); };
          ctx['isVertexArray'] = function(vao) { return ext['isVertexArrayOES'](vao); };
        }
      },acquireDrawBuffersExtension:function(ctx) {
        // Extension available in WebGL 1 from Firefox 28 onwards. Core feature in WebGL 2.
        var ext = ctx.getExtension('WEBGL_draw_buffers');
        if (ext) {
          ctx['drawBuffers'] = function(n, bufs) { ext['drawBuffersWEBGL'](n, bufs); };
        }
      },initExtensions:function(context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist.
  
        if (context.version < 2) {
          GL.acquireInstancedArraysExtension(GLctx);
          GL.acquireVertexArrayObjectExtension(GLctx);
          GL.acquireDrawBuffersExtension(GLctx);
        }
  
        GLctx.disjointTimerQueryExt = GLctx.getExtension("EXT_disjoint_timer_query");
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ // Khronos ratified WebGL extensions ordered by number (no debug extensions):
                                               "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "EXT_frag_depth",
                                               "WEBGL_draw_buffers", "ANGLE_instanced_arrays", "OES_texture_float_linear",
                                               "OES_texture_half_float_linear", "EXT_blend_minmax", "EXT_shader_texture_lod",
                                               // Community approved WebGL extensions ordered by number:
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_sRGB", "WEBGL_compressed_texture_etc1", "EXT_disjoint_timer_query",
                                               "WEBGL_compressed_texture_etc", "WEBGL_compressed_texture_astc", "EXT_color_buffer_float",
                                               "WEBGL_compressed_texture_s3tc_srgb", "EXT_disjoint_timer_query_webgl2"];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (extension.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions() || []; // .getSupportedExtensions() can return null if context is lost, so coerce to empty array.
        exts.forEach(function(ext) {
          if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
            GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
          }
        });
      },populateUniformTable:function(program) {
        var p = GL.programs[program];
        var ptable = GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1, // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
          maxUniformBlockNameLength: -1 // Lazily computed as well
        };
  
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, 0x8B86/*GL_ACTIVE_UNIFORMS*/);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // If we are dealing with an array, e.g. vec4 foo[3], strip off the array index part to canonicalize that "foo", "foo[]",
          // and "foo[0]" will mean the same. Loop below will populate foo[1] and foo[2].
          if (name.slice(-1) == ']') {
            name = name.slice(0, name.lastIndexOf('['));
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          if (loc) {
            var id = GL.getNewId(GL.uniforms);
            utable[name] = [u.size, id];
            GL.uniforms[id] = loc;
  
            for (var j = 1; j < u.size; ++j) {
              var n = name + '['+j+']';
              loc = GLctx.getUniformLocation(p, n);
              id = GL.getNewId(GL.uniforms);
  
              GL.uniforms[id] = loc;
            }
          }
        }
      }};
  
  var __emscripten_webgl_power_preferences=['default', 'low-power', 'high-performance'];function _emscripten_webgl_do_create_context(target, attributes) {
      assert(attributes);
      var contextAttributes = {};
      var a = attributes >> 2;
      contextAttributes['alpha'] = !!HEAP32[a + (0>>2)];
      contextAttributes['depth'] = !!HEAP32[a + (4>>2)];
      contextAttributes['stencil'] = !!HEAP32[a + (8>>2)];
      contextAttributes['antialias'] = !!HEAP32[a + (12>>2)];
      contextAttributes['premultipliedAlpha'] = !!HEAP32[a + (16>>2)];
      contextAttributes['preserveDrawingBuffer'] = !!HEAP32[a + (20>>2)];
      var powerPreference = HEAP32[a + (24>>2)];
      contextAttributes['powerPreference'] = __emscripten_webgl_power_preferences[powerPreference];
      contextAttributes['failIfMajorPerformanceCaveat'] = !!HEAP32[a + (28>>2)];
      contextAttributes.majorVersion = HEAP32[a + (32>>2)];
      contextAttributes.minorVersion = HEAP32[a + (36>>2)];
      contextAttributes.enableExtensionsByDefault = HEAP32[a + (40>>2)];
      contextAttributes.explicitSwapControl = HEAP32[a + (44>>2)];
      contextAttributes.proxyContextToMainThread = HEAP32[a + (48>>2)];
      contextAttributes.renderViaOffscreenBackBuffer = HEAP32[a + (52>>2)];
  
      var canvas = __findCanvasEventTarget(target);
  
  
  
      if (!canvas) {
        return 0;
      }
  
      if (contextAttributes.explicitSwapControl) {
        return 0;
      }
  
  
      var contextHandle = GL.createContext(canvas, contextAttributes);
      return contextHandle;
    }function _emscripten_webgl_create_context(a0,a1
  ) {
  return _emscripten_webgl_do_create_context(a0,a1);
  }

  
  function _emscripten_webgl_enable_extension_calling_thread(contextHandle, extension) {
      var context = GL.getContext(contextHandle);
      var extString = UTF8ToString(extension);
      if (extString.indexOf('GL_') == 0) extString = extString.substr(3); // Allow enabling extensions both with "GL_" prefix and without.
  
      // Obtain function entry points to extension related functions.
      if (extString == 'ANGLE_instanced_arrays') GL.acquireInstancedArraysExtension(GLctx);
      else if (extString == 'OES_vertex_array_object') GL.acquireVertexArrayObjectExtension(GLctx);
      else if (extString == 'WEBGL_draw_buffers') GL.acquireDrawBuffersExtension(GLctx);
  
      var ext = context.GLctx.getExtension(extString);
      return !!ext;
    }function _emscripten_webgl_enable_extension(a0,a1
  ) {
  return _emscripten_webgl_enable_extension_calling_thread(a0,a1);
  }

  function _emscripten_webgl_init_context_attributes(attributes) {
      assert(attributes);
      var a = attributes >> 2;
      for(var i = 0; i < (56>>2); ++i) {
        HEAP32[a+i] = 0;
      }
  
      HEAP32[a + (0>>2)] =
      HEAP32[a + (4>>2)] = 
      HEAP32[a + (12>>2)] = 
      HEAP32[a + (16>>2)] = 
      HEAP32[a + (32>>2)] = 
      HEAP32[a + (40>>2)] = 1;
  
    }

  function _emscripten_webgl_make_context_current(contextHandle) {
      var success = GL.makeContextCurrent(contextHandle);
      return success ? 0 : -5;
    }

  function _glActiveTexture(x0) { GLctx['activeTexture'](x0) }

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _glBindBuffer(target, buffer) {
  
      GLctx.bindBuffer(target, GL.buffers[buffer]);
    }

  function _glBindFramebuffer(target, framebuffer) {
  
      GLctx.bindFramebuffer(target, GL.framebuffers[framebuffer]);
  
    }

  function _glBindRenderbuffer(target, renderbuffer) {
      GLctx.bindRenderbuffer(target, GL.renderbuffers[renderbuffer]);
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, GL.textures[texture]);
    }

  function _glBlendColor(x0, x1, x2, x3) { GLctx['blendColor'](x0, x1, x2, x3) }

  function _glBlendEquationSeparate(x0, x1) { GLctx['blendEquationSeparate'](x0, x1) }

  function _glBlendFuncSeparate(x0, x1, x2, x3) { GLctx['blendFuncSeparate'](x0, x1, x2, x3) }

  function _glBufferData(target, size, data, usage) {
        // N.b. here first form specifies a heap subarray, second form an integer size, so the ?: code here is polymorphic. It is advised to avoid
        // randomly mixing both uses in calling code, to avoid any potential JS engine JIT issues.
        GLctx.bufferData(target, data ? HEAPU8.subarray(data, data+size) : size, usage);
    }

  function _glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function _glClear(x0) { GLctx['clear'](x0) }

  function _glClearColor(x0, x1, x2, x3) { GLctx['clearColor'](x0, x1, x2, x3) }

  function _glClearDepthf(x0) { GLctx['clearDepth'](x0) }

  function _glClearStencil(x0) { GLctx['clearStencil'](x0) }

  function _glColorMask(red, green, blue, alpha) {
      GLctx.colorMask(!!red, !!green, !!blue, !!alpha);
    }

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
      GLctx['compressedTexImage2D'](target, level, internalFormat, width, height, border, data ? HEAPU8.subarray((data),(data+imageSize)) : null);
    }

  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _glCullFace(x0) { GLctx['cullFace'](x0) }

  function _glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }

  function _glDeleteFramebuffers(n, framebuffers) {
      for (var i = 0; i < n; ++i) {
        var id = HEAP32[(((framebuffers)+(i*4))>>2)];
        var framebuffer = GL.framebuffers[id];
        if (!framebuffer) continue; // GL spec: "glDeleteFramebuffers silently ignores 0s and names that do not correspond to existing framebuffer objects".
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null;
      }
    }

  function _glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

  function _glDeleteRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((renderbuffers)+(i*4))>>2)];
        var renderbuffer = GL.renderbuffers[id];
        if (!renderbuffer) continue; // GL spec: "glDeleteRenderbuffers silently ignores 0s and names that do not correspond to existing renderbuffer objects".
        GLctx.deleteRenderbuffer(renderbuffer);
        renderbuffer.name = 0;
        GL.renderbuffers[id] = null;
      }
    }

  function _glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  function _glDepthFunc(x0) { GLctx['depthFunc'](x0) }

  function _glDepthMask(flag) {
      GLctx.depthMask(!!flag);
    }

  function _glDisable(x0) { GLctx['disable'](x0) }

  function _glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }

  function _glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _glDrawArraysInstanced(mode, first, count, primcount) {
      GLctx['drawArraysInstanced'](mode, first, count, primcount);
    }

  function _glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }

  function _glDrawElementsInstanced(mode, count, type, indices, primcount) {
      GLctx['drawElementsInstanced'](mode, count, type, indices, primcount);
    }

  function _glEnable(x0) { GLctx['enable'](x0) }

  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

  function _glFrontFace(x0) { GLctx['frontFace'](x0) }

  
  function __glGenObject(n, buffers, createFunction, objectTable
      ) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx[createFunction]();
        var id = buffer && GL.getNewId(objectTable);
        if (buffer) {
          buffer.name = id;
          objectTable[id] = buffer;
        } else {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        }
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }function _glGenBuffers(n, buffers) {
      __glGenObject(n, buffers, 'createBuffer', GL.buffers
        );
    }

  function _glGenRenderbuffers(n, renderbuffers) {
      __glGenObject(n, renderbuffers, 'createRenderbuffer', GL.renderbuffers
        );
    }

  function _glGenTextures(n, textures) {
      __glGenObject(n, textures, 'createTexture', GL.textures
        );
    }

  function _glGetAttribLocation(program, name) {
      return GLctx.getAttribLocation(GL.programs[program], UTF8ToString(name));
    }

  function _glGetError() {
      var error = GLctx.getError() || GL.lastError;
      GL.lastError = 0/*GL_NO_ERROR*/;
      return error;
    }

  
  function emscriptenWebGLGet(name_, p, type) {
      // Guard against user passing a null pointer.
      // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
      // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
      // better to report an error instead of doing anything random.
      if (!p) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var ret = undefined;
      switch(name_) { // Handle a few trivial GLES values
        case 0x8DFA: // GL_SHADER_COMPILER
          ret = 1;
          break;
        case 0x8DF8: // GL_SHADER_BINARY_FORMATS
          if (type != 0 && type != 1) {
            GL.recordError(0x0500); // GL_INVALID_ENUM
          }
          return; // Do not write anything to the out pointer, since no binary formats are supported.
        case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
          ret = 0;
          break;
        case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
          // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
          // so implement it ourselves to allow C++ GLES2 code get the length.
          var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
          ret = formats ? formats.length : 0;
          break;
      }
  
      if (ret === undefined) {
        var result = GLctx.getParameter(name_);
        switch (typeof(result)) {
          case "number":
            ret = result;
            break;
          case "boolean":
            ret = result ? 1 : 0;
            break;
          case "string":
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
          case "object":
            if (result === null) {
              // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
              // can mean an invalid name_, which we need to report as an error
              switch(name_) {
                case 0x8894: // ARRAY_BUFFER_BINDING
                case 0x8B8D: // CURRENT_PROGRAM
                case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                case 0x8CA6: // FRAMEBUFFER_BINDING
                case 0x8CA7: // RENDERBUFFER_BINDING
                case 0x8069: // TEXTURE_BINDING_2D
                case 0x85B5: // WebGL 2 GL_VERTEX_ARRAY_BINDING, or WebGL 1 extension OES_vertex_array_object GL_VERTEX_ARRAY_BINDING_OES
                case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                  ret = 0;
                  break;
                }
                default: {
                  GL.recordError(0x0500); // GL_INVALID_ENUM
                  return;
                }
              }
            } else if (result instanceof Float32Array ||
                       result instanceof Uint32Array ||
                       result instanceof Int32Array ||
                       result instanceof Array) {
              for (var i = 0; i < result.length; ++i) {
                switch (type) {
                  case 0: HEAP32[(((p)+(i*4))>>2)]=result[i]; break;
                  case 2: HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                  case 4: HEAP8[(((p)+(i))>>0)]=result[i] ? 1 : 0; break;
                }
              }
              return;
            } else {
              try {
                ret = result.name | 0;
              } catch(e) {
                GL.recordError(0x0500); // GL_INVALID_ENUM
                err('GL_INVALID_ENUM in glGet' + type + 'v: Unknown object returned from WebGL getParameter(' + name_ + ')! (error: ' + e + ')');
                return;
              }
            }
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            err('GL_INVALID_ENUM in glGet' + type + 'v: Native code calling glGet' + type + 'v(' + name_ + ') and it returns ' + result + ' of type ' + typeof(result) + '!');
            return;
        }
      }
  
      switch (type) {
        case 1: (tempI64 = [ret>>>0,(tempDouble=ret,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((p)>>2)]=tempI64[0],HEAP32[(((p)+(4))>>2)]=tempI64[1]);    break;
        case 0: HEAP32[((p)>>2)]=ret;    break;
        case 2:   HEAPF32[((p)>>2)]=ret;  break;
        case 4: HEAP8[((p)>>0)]=ret ? 1 : 0; break;
      }
    }function _glGetIntegerv(name_, p) {
      emscriptenWebGLGet(name_, p, 0);
    }

  function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
      var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
    }

  function _glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      if (program >= GL.counter) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        return;
      }
  
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        HEAP32[((p)>>2)]=ptable.maxUniformLength;
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        if (ptable.maxAttributeLength == -1) {
          program = GL.programs[program];
          var numAttribs = GLctx.getProgramParameter(program, 0x8B89/*GL_ACTIVE_ATTRIBUTES*/);
          ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
          for (var i = 0; i < numAttribs; ++i) {
            var activeAttrib = GLctx.getActiveAttrib(program, i);
            ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxAttributeLength;
      } else if (pname == 0x8A35 /* GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */) {
        if (ptable.maxUniformBlockNameLength == -1) {
          program = GL.programs[program];
          var numBlocks = GLctx.getProgramParameter(program, 0x8A36/*GL_ACTIVE_UNIFORM_BLOCKS*/);
          ptable.maxUniformBlockNameLength = 0;
          for (var i = 0; i < numBlocks; ++i) {
            var activeBlockName = GLctx.getActiveUniformBlockName(program, i);
            ptable.maxUniformBlockNameLength = Math.max(ptable.maxUniformBlockNameLength, activeBlockName.length+1);
          }
        }
        HEAP32[((p)>>2)]=ptable.maxUniformBlockNameLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      var numBytesWrittenExclNull = (maxLength > 0 && infoLog) ? stringToUTF8(log, infoLog, maxLength) : 0;
      if (length) HEAP32[((length)>>2)]=numBytesWrittenExclNull;
    }

  function _glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B88) { // GL_SHADER_SOURCE_LENGTH
        var source = GLctx.getShaderSource(GL.shaders[shader]);
        var sourceLength = (source === null || source.length == 0) ? 0 : source.length + 1;
        HEAP32[((p)>>2)]=sourceLength;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  
  function stringToNewUTF8(jsString) {
      var length = lengthBytesUTF8(jsString)+1;
      var cString = _malloc(length);
      stringToUTF8(jsString, cString, length);
      return cString;
    }function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret;
      switch(name_) {
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions() || []; // .getSupportedExtensions() can return null if context is lost, so coerce to empty array.
          exts = exts.concat(exts.map(function(e) { return "GL_" + e; }));
          ret = stringToNewUTF8(exts.join(' '));
          break;
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x9245 /* UNMASKED_VENDOR_WEBGL */:
        case 0x9246 /* UNMASKED_RENDERER_WEBGL */:
          var s = GLctx.getParameter(name_);
          if (!s) {
            GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          }
          ret = stringToNewUTF8(s);
          break;
  
        case 0x1F02 /* GL_VERSION */:
          var glVersion = GLctx.getParameter(GLctx.VERSION);
          // return GLES version string corresponding to the version of the WebGL context
          {
            glVersion = 'OpenGL ES 2.0 (' + glVersion + ')';
          }
          ret = stringToNewUTF8(glVersion);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          var glslVersion = GLctx.getParameter(GLctx.SHADING_LANGUAGE_VERSION);
          // extract the version number 'N.M' from the string 'WebGL GLSL ES N.M ...'
          var ver_re = /^WebGL GLSL ES ([0-9]\.[0-9][0-9]?)(?:$| .*)/;
          var ver_num = glslVersion.match(ver_re);
          if (ver_num !== null) {
            if (ver_num[1].length == 3) ver_num[1] = ver_num[1] + '0'; // ensure minor version has 2 digits
            glslVersion = 'OpenGL ES GLSL ES ' + ver_num[1] + ' (' + glslVersion + ')';
          }
          ret = stringToNewUTF8(glslVersion);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }

  function _glGetUniformLocation(program, name) {
      name = UTF8ToString(name);
  
      var arrayIndex = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name[name.length - 1] == ']') {
        var leftBrace = name.lastIndexOf('[');
        arrayIndex = name[leftBrace+1] != ']' ? parseInt(name.slice(leftBrace + 1)) : 0; // "index]", parseInt will ignore the ']' at the end; but treat "foo[]" as "foo[0]"
        name = name.slice(0, leftBrace);
      }
  
      var uniformInfo = GL.programInfos[program] && GL.programInfos[program].uniforms[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayIndex >= 0 && arrayIndex < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1] + arrayIndex;
      } else {
        return -1;
      }
    }

  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.populateUniformTable(program);
    }

  function _glPolygonOffset(x0, x1) { GLctx['polygonOffset'](x0, x1) }

  function _glRenderbufferStorage(x0, x1, x2, x3) { GLctx['renderbufferStorage'](x0, x1, x2, x3) }

  function _glScissor(x0, x1, x2, x3) { GLctx['scissor'](x0, x1, x2, x3) }

  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
  
  
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _glStencilFunc(x0, x1, x2) { GLctx['stencilFunc'](x0, x1, x2) }

  function _glStencilFuncSeparate(x0, x1, x2, x3) { GLctx['stencilFuncSeparate'](x0, x1, x2, x3) }

  function _glStencilMask(x0) { GLctx['stencilMask'](x0) }

  function _glStencilOp(x0, x1, x2) { GLctx['stencilOp'](x0, x1, x2) }

  function _glStencilOpSeparate(x0, x1, x2, x3) { GLctx['stencilOpSeparate'](x0, x1, x2, x3) }

  
  
  function __computeUnpackAlignedImageSize(width, height, sizePerPixel, alignment) {
      function roundedToNextMultipleOf(x, y) {
        return (x + y - 1) & -y;
      }
      var plainRowSize = width * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
      return height * alignedRowSize;
    }
  
  var __colorChannelsInGlTextureFormat={6402:1,6406:1,6407:3,6408:4,6409:1,6410:2,35904:3,35906:4};
  
  var __sizeOfGlTextureElementType={5121:1,5123:2,5125:4,5126:4,32819:2,32820:2,33635:2,34042:4,36193:2};function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
      var sizePerPixel = __colorChannelsInGlTextureFormat[format] * __sizeOfGlTextureElementType[type];
      if (!sizePerPixel) {
        GL.recordError(0x0500); // GL_INVALID_ENUM
        return;
      }
      var bytes = __computeUnpackAlignedImageSize(width, height, sizePerPixel, GL.unpackAlignment);
      var end = pixels + bytes;
      switch(type) {
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          return HEAPU8.subarray(pixels, end);
        case 0x1406 /* GL_FLOAT */:
          return HEAPF32.subarray(pixels>>2, end>>2);
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x84FA /* GL_UNSIGNED_INT_24_8_WEBGL/GL_UNSIGNED_INT_24_8 */:
          return HEAPU32.subarray(pixels>>2, end>>2);
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
          return HEAPU16.subarray(pixels>>1, end>>1);
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
      }
    }function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels ? emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) : null);
    }

  function _glTexParameteri(x0, x1, x2) { GLctx['texParameteri'](x0, x1, x2) }

  function _glUniform1fv(location, count, value) {
  
  
      if (count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[count-1];
        for (var i = 0; i < count; ++i) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*4)>>2);
      }
      GLctx.uniform1fv(GL.uniforms[location], view);
    }

  function _glUniform1i(location, v0) {
      GLctx.uniform1i(GL.uniforms[location], v0);
    }

  function _glUniform2fv(location, count, value) {
  
  
      if (2*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[2*count-1];
        for (var i = 0; i < 2*count; i += 2) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*8)>>2);
      }
      GLctx.uniform2fv(GL.uniforms[location], view);
    }

  function _glUniform3fv(location, count, value) {
  
  
      if (3*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[3*count-1];
        for (var i = 0; i < 3*count; i += 3) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*12)>>2);
      }
      GLctx.uniform3fv(GL.uniforms[location], view);
    }

  function _glUniform4fv(location, count, value) {
  
  
      if (4*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[4*count-1];
        for (var i = 0; i < 4*count; i += 4) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniform4fv(GL.uniforms[location], view);
    }

  function _glUniformMatrix4fv(location, count, transpose, value) {
  
  
      if (16*count <= GL.MINI_TEMP_BUFFER_SIZE) {
        // avoid allocation when uploading few enough uniforms
        var view = GL.miniTempBufferViews[16*count-1];
        for (var i = 0; i < 16*count; i += 16) {
          view[i] = HEAPF32[(((value)+(4*i))>>2)];
          view[i+1] = HEAPF32[(((value)+(4*i+4))>>2)];
          view[i+2] = HEAPF32[(((value)+(4*i+8))>>2)];
          view[i+3] = HEAPF32[(((value)+(4*i+12))>>2)];
          view[i+4] = HEAPF32[(((value)+(4*i+16))>>2)];
          view[i+5] = HEAPF32[(((value)+(4*i+20))>>2)];
          view[i+6] = HEAPF32[(((value)+(4*i+24))>>2)];
          view[i+7] = HEAPF32[(((value)+(4*i+28))>>2)];
          view[i+8] = HEAPF32[(((value)+(4*i+32))>>2)];
          view[i+9] = HEAPF32[(((value)+(4*i+36))>>2)];
          view[i+10] = HEAPF32[(((value)+(4*i+40))>>2)];
          view[i+11] = HEAPF32[(((value)+(4*i+44))>>2)];
          view[i+12] = HEAPF32[(((value)+(4*i+48))>>2)];
          view[i+13] = HEAPF32[(((value)+(4*i+52))>>2)];
          view[i+14] = HEAPF32[(((value)+(4*i+56))>>2)];
          view[i+15] = HEAPF32[(((value)+(4*i+60))>>2)];
        }
      } else
      {
        var view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(GL.uniforms[location], !!transpose, view);
    }

  function _glUseProgram(program) {
      GLctx.useProgram(GL.programs[program]);
    }

  function _glVertexAttribDivisor(index, divisor) {
      GLctx['vertexAttribDivisor'](index, divisor);
    }

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, !!normalized, stride, ptr);
    }

  function _glViewport(x0, x1, x2, x3) { GLctx['viewport'](x0, x1, x2, x3) }



  function _llvm_trap() {
      abort('trap!');
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
    }
  
   

   

   

FS.staticInit();Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
if (ENVIRONMENT_HAS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
var GLctx; GL.init();
var ASSERTIONS = true;

// Copyright 2017 The Emscripten Authors.  All rights reserved.
// Emscripten is available under two separate licenses, the MIT license and the
// University of Illinois/NCSA Open Source License.  Both these licenses can be
// found in the LICENSE file.

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


// ASM_LIBRARY EXTERN PRIMITIVES: Math_imul,Math_clz32,Int8Array,Int32Array

function nullFunc_idi(x) { abortFnPtrError(x, 'idi'); }
function nullFunc_ii(x) { abortFnPtrError(x, 'ii'); }
function nullFunc_iidiiii(x) { abortFnPtrError(x, 'iidiiii'); }
function nullFunc_iii(x) { abortFnPtrError(x, 'iii'); }
function nullFunc_iiii(x) { abortFnPtrError(x, 'iiii'); }
function nullFunc_iiiii(x) { abortFnPtrError(x, 'iiiii'); }
function nullFunc_v(x) { abortFnPtrError(x, 'v'); }
function nullFunc_vi(x) { abortFnPtrError(x, 'vi'); }
function nullFunc_vii(x) { abortFnPtrError(x, 'vii'); }
function nullFunc_viiii(x) { abortFnPtrError(x, 'viiii'); }
function nullFunc_viiiii(x) { abortFnPtrError(x, 'viiiii'); }
function nullFunc_viiiiii(x) { abortFnPtrError(x, 'viiiiii'); }

var asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Float32Array": Float32Array, "Float64Array": Float64Array };

var asmLibraryArg = { "___assert_fail": ___assert_fail, "___buildEnvironment": ___buildEnvironment, "___cxa_allocate_exception": ___cxa_allocate_exception, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_throw": ___cxa_throw, "___exception_addRef": ___exception_addRef, "___exception_deAdjust": ___exception_deAdjust, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___setErrNo": ___setErrNo, "___syscall221": ___syscall221, "___syscall5": ___syscall5, "___syscall54": ___syscall54, "___unlock": ___unlock, "___wasi_fd_close": ___wasi_fd_close, "___wasi_fd_read": ___wasi_fd_read, "___wasi_fd_seek": ___wasi_fd_seek, "___wasi_fd_write": ___wasi_fd_write, "__computeUnpackAlignedImageSize": __computeUnpackAlignedImageSize, "__fillMouseEventData": __fillMouseEventData, "__findCanvasEventTarget": __findCanvasEventTarget, "__findEventTarget": __findEventTarget, "__glGenObject": __glGenObject, "__registerKeyEventCallback": __registerKeyEventCallback, "__registerMouseEventCallback": __registerMouseEventCallback, "__registerTouchEventCallback": __registerTouchEventCallback, "__registerUiEventCallback": __registerUiEventCallback, "__registerWebGlEventCallback": __registerWebGlEventCallback, "__registerWheelEventCallback": __registerWheelEventCallback, "_abort": _abort, "_emscripten_get_device_pixel_ratio": _emscripten_get_device_pixel_ratio, "_emscripten_get_element_css_size": _emscripten_get_element_css_size, "_emscripten_get_heap_size": _emscripten_get_heap_size, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_request_animation_frame_loop": _emscripten_request_animation_frame_loop, "_emscripten_resize_heap": _emscripten_resize_heap, "_emscripten_set_canvas_element_size": _emscripten_set_canvas_element_size, "_emscripten_set_keydown_callback_on_thread": _emscripten_set_keydown_callback_on_thread, "_emscripten_set_keypress_callback_on_thread": _emscripten_set_keypress_callback_on_thread, "_emscripten_set_keyup_callback_on_thread": _emscripten_set_keyup_callback_on_thread, "_emscripten_set_mousedown_callback_on_thread": _emscripten_set_mousedown_callback_on_thread, "_emscripten_set_mouseenter_callback_on_thread": _emscripten_set_mouseenter_callback_on_thread, "_emscripten_set_mouseleave_callback_on_thread": _emscripten_set_mouseleave_callback_on_thread, "_emscripten_set_mousemove_callback_on_thread": _emscripten_set_mousemove_callback_on_thread, "_emscripten_set_mouseup_callback_on_thread": _emscripten_set_mouseup_callback_on_thread, "_emscripten_set_resize_callback_on_thread": _emscripten_set_resize_callback_on_thread, "_emscripten_set_touchcancel_callback_on_thread": _emscripten_set_touchcancel_callback_on_thread, "_emscripten_set_touchend_callback_on_thread": _emscripten_set_touchend_callback_on_thread, "_emscripten_set_touchmove_callback_on_thread": _emscripten_set_touchmove_callback_on_thread, "_emscripten_set_touchstart_callback_on_thread": _emscripten_set_touchstart_callback_on_thread, "_emscripten_set_webglcontextlost_callback_on_thread": _emscripten_set_webglcontextlost_callback_on_thread, "_emscripten_set_webglcontextrestored_callback_on_thread": _emscripten_set_webglcontextrestored_callback_on_thread, "_emscripten_set_wheel_callback_on_thread": _emscripten_set_wheel_callback_on_thread, "_emscripten_webgl_create_context": _emscripten_webgl_create_context, "_emscripten_webgl_do_create_context": _emscripten_webgl_do_create_context, "_emscripten_webgl_enable_extension": _emscripten_webgl_enable_extension, "_emscripten_webgl_enable_extension_calling_thread": _emscripten_webgl_enable_extension_calling_thread, "_emscripten_webgl_init_context_attributes": _emscripten_webgl_init_context_attributes, "_emscripten_webgl_make_context_current": _emscripten_webgl_make_context_current, "_fd_close": _fd_close, "_fd_read": _fd_read, "_fd_seek": _fd_seek, "_fd_write": _fd_write, "_glActiveTexture": _glActiveTexture, "_glAttachShader": _glAttachShader, "_glBindBuffer": _glBindBuffer, "_glBindFramebuffer": _glBindFramebuffer, "_glBindRenderbuffer": _glBindRenderbuffer, "_glBindTexture": _glBindTexture, "_glBlendColor": _glBlendColor, "_glBlendEquationSeparate": _glBlendEquationSeparate, "_glBlendFuncSeparate": _glBlendFuncSeparate, "_glBufferData": _glBufferData, "_glBufferSubData": _glBufferSubData, "_glClear": _glClear, "_glClearColor": _glClearColor, "_glClearDepthf": _glClearDepthf, "_glClearStencil": _glClearStencil, "_glColorMask": _glColorMask, "_glCompileShader": _glCompileShader, "_glCompressedTexImage2D": _glCompressedTexImage2D, "_glCreateProgram": _glCreateProgram, "_glCreateShader": _glCreateShader, "_glCullFace": _glCullFace, "_glDeleteBuffers": _glDeleteBuffers, "_glDeleteFramebuffers": _glDeleteFramebuffers, "_glDeleteProgram": _glDeleteProgram, "_glDeleteRenderbuffers": _glDeleteRenderbuffers, "_glDeleteShader": _glDeleteShader, "_glDeleteTextures": _glDeleteTextures, "_glDepthFunc": _glDepthFunc, "_glDepthMask": _glDepthMask, "_glDisable": _glDisable, "_glDisableVertexAttribArray": _glDisableVertexAttribArray, "_glDrawArrays": _glDrawArrays, "_glDrawArraysInstanced": _glDrawArraysInstanced, "_glDrawElements": _glDrawElements, "_glDrawElementsInstanced": _glDrawElementsInstanced, "_glEnable": _glEnable, "_glEnableVertexAttribArray": _glEnableVertexAttribArray, "_glFrontFace": _glFrontFace, "_glGenBuffers": _glGenBuffers, "_glGenRenderbuffers": _glGenRenderbuffers, "_glGenTextures": _glGenTextures, "_glGetAttribLocation": _glGetAttribLocation, "_glGetError": _glGetError, "_glGetIntegerv": _glGetIntegerv, "_glGetProgramInfoLog": _glGetProgramInfoLog, "_glGetProgramiv": _glGetProgramiv, "_glGetShaderInfoLog": _glGetShaderInfoLog, "_glGetShaderiv": _glGetShaderiv, "_glGetString": _glGetString, "_glGetUniformLocation": _glGetUniformLocation, "_glLinkProgram": _glLinkProgram, "_glPolygonOffset": _glPolygonOffset, "_glRenderbufferStorage": _glRenderbufferStorage, "_glScissor": _glScissor, "_glShaderSource": _glShaderSource, "_glStencilFunc": _glStencilFunc, "_glStencilFuncSeparate": _glStencilFuncSeparate, "_glStencilMask": _glStencilMask, "_glStencilOp": _glStencilOp, "_glStencilOpSeparate": _glStencilOpSeparate, "_glTexImage2D": _glTexImage2D, "_glTexParameteri": _glTexParameteri, "_glUniform1fv": _glUniform1fv, "_glUniform1i": _glUniform1i, "_glUniform2fv": _glUniform2fv, "_glUniform3fv": _glUniform3fv, "_glUniform4fv": _glUniform4fv, "_glUniformMatrix4fv": _glUniformMatrix4fv, "_glUseProgram": _glUseProgram, "_glVertexAttribDivisor": _glVertexAttribDivisor, "_glVertexAttribPointer": _glVertexAttribPointer, "_glViewport": _glViewport, "_llvm_trap": _llvm_trap, "_sapp_js_create_textfield": _sapp_js_create_textfield, "_sapp_js_focus_textfield": _sapp_js_focus_textfield, "_sapp_js_hook_beforeunload": _sapp_js_hook_beforeunload, "_sapp_js_unfocus_textfield": _sapp_js_unfocus_textfield, "abort": abort, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "demangle": demangle, "demangleAll": demangleAll, "emscriptenWebGLGet": emscriptenWebGLGet, "emscriptenWebGLGetTexPixelData": emscriptenWebGLGetTexPixelData, "getTempRet0": getTempRet0, "jsStackTrace": jsStackTrace, "nullFunc_idi": nullFunc_idi, "nullFunc_ii": nullFunc_ii, "nullFunc_iidiiii": nullFunc_iidiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "setTempRet0": setTempRet0, "stackTrace": stackTrace, "stringToNewUTF8": stringToNewUTF8, "tempDoublePtr": tempDoublePtr };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';

  var HEAP8 = new global.Int8Array(buffer),
  HEAP16 = new global.Int16Array(buffer),
  HEAP32 = new global.Int32Array(buffer),
  HEAPU8 = new global.Uint8Array(buffer),
  HEAPU16 = new global.Uint16Array(buffer),
  HEAPF32 = new global.Float32Array(buffer),
  HEAPF64 = new global.Float64Array(buffer),
  tempDoublePtr=env.tempDoublePtr|0,
  __THREW__ = 0,
  threwValue = 0,
  setjmpId = 0,
  tempInt = 0,
  tempBigInt = 0,
  tempBigIntS = 0,
  tempValue = 0,
  tempDouble = 0.0,
  Math_abs=global.Math.abs,
  Math_sqrt=global.Math.sqrt,
  Math_cos=global.Math.cos,
  Math_sin=global.Math.sin,
  Math_imul=global.Math.imul,
  Math_clz32=global.Math.clz32,
  abort=env.abort,
  setTempRet0=env.setTempRet0,
  getTempRet0=env.getTempRet0,
  abortStackOverflow=env.abortStackOverflow,
  nullFunc_idi=env.nullFunc_idi,
  nullFunc_ii=env.nullFunc_ii,
  nullFunc_iidiiii=env.nullFunc_iidiiii,
  nullFunc_iii=env.nullFunc_iii,
  nullFunc_iiii=env.nullFunc_iiii,
  nullFunc_iiiii=env.nullFunc_iiiii,
  nullFunc_v=env.nullFunc_v,
  nullFunc_vi=env.nullFunc_vi,
  nullFunc_vii=env.nullFunc_vii,
  nullFunc_viiii=env.nullFunc_viiii,
  nullFunc_viiiii=env.nullFunc_viiiii,
  nullFunc_viiiiii=env.nullFunc_viiiiii,
  ___assert_fail=env.___assert_fail,
  ___buildEnvironment=env.___buildEnvironment,
  ___cxa_allocate_exception=env.___cxa_allocate_exception,
  ___cxa_begin_catch=env.___cxa_begin_catch,
  ___cxa_throw=env.___cxa_throw,
  ___exception_addRef=env.___exception_addRef,
  ___exception_deAdjust=env.___exception_deAdjust,
  ___gxx_personality_v0=env.___gxx_personality_v0,
  ___lock=env.___lock,
  ___setErrNo=env.___setErrNo,
  ___syscall221=env.___syscall221,
  ___syscall5=env.___syscall5,
  ___syscall54=env.___syscall54,
  ___unlock=env.___unlock,
  ___wasi_fd_close=env.___wasi_fd_close,
  ___wasi_fd_read=env.___wasi_fd_read,
  ___wasi_fd_seek=env.___wasi_fd_seek,
  ___wasi_fd_write=env.___wasi_fd_write,
  __computeUnpackAlignedImageSize=env.__computeUnpackAlignedImageSize,
  __fillMouseEventData=env.__fillMouseEventData,
  __findCanvasEventTarget=env.__findCanvasEventTarget,
  __findEventTarget=env.__findEventTarget,
  __glGenObject=env.__glGenObject,
  __registerKeyEventCallback=env.__registerKeyEventCallback,
  __registerMouseEventCallback=env.__registerMouseEventCallback,
  __registerTouchEventCallback=env.__registerTouchEventCallback,
  __registerUiEventCallback=env.__registerUiEventCallback,
  __registerWebGlEventCallback=env.__registerWebGlEventCallback,
  __registerWheelEventCallback=env.__registerWheelEventCallback,
  _abort=env._abort,
  _emscripten_get_device_pixel_ratio=env._emscripten_get_device_pixel_ratio,
  _emscripten_get_element_css_size=env._emscripten_get_element_css_size,
  _emscripten_get_heap_size=env._emscripten_get_heap_size,
  _emscripten_memcpy_big=env._emscripten_memcpy_big,
  _emscripten_request_animation_frame_loop=env._emscripten_request_animation_frame_loop,
  _emscripten_resize_heap=env._emscripten_resize_heap,
  _emscripten_set_canvas_element_size=env._emscripten_set_canvas_element_size,
  _emscripten_set_keydown_callback_on_thread=env._emscripten_set_keydown_callback_on_thread,
  _emscripten_set_keypress_callback_on_thread=env._emscripten_set_keypress_callback_on_thread,
  _emscripten_set_keyup_callback_on_thread=env._emscripten_set_keyup_callback_on_thread,
  _emscripten_set_mousedown_callback_on_thread=env._emscripten_set_mousedown_callback_on_thread,
  _emscripten_set_mouseenter_callback_on_thread=env._emscripten_set_mouseenter_callback_on_thread,
  _emscripten_set_mouseleave_callback_on_thread=env._emscripten_set_mouseleave_callback_on_thread,
  _emscripten_set_mousemove_callback_on_thread=env._emscripten_set_mousemove_callback_on_thread,
  _emscripten_set_mouseup_callback_on_thread=env._emscripten_set_mouseup_callback_on_thread,
  _emscripten_set_resize_callback_on_thread=env._emscripten_set_resize_callback_on_thread,
  _emscripten_set_touchcancel_callback_on_thread=env._emscripten_set_touchcancel_callback_on_thread,
  _emscripten_set_touchend_callback_on_thread=env._emscripten_set_touchend_callback_on_thread,
  _emscripten_set_touchmove_callback_on_thread=env._emscripten_set_touchmove_callback_on_thread,
  _emscripten_set_touchstart_callback_on_thread=env._emscripten_set_touchstart_callback_on_thread,
  _emscripten_set_webglcontextlost_callback_on_thread=env._emscripten_set_webglcontextlost_callback_on_thread,
  _emscripten_set_webglcontextrestored_callback_on_thread=env._emscripten_set_webglcontextrestored_callback_on_thread,
  _emscripten_set_wheel_callback_on_thread=env._emscripten_set_wheel_callback_on_thread,
  _emscripten_webgl_create_context=env._emscripten_webgl_create_context,
  _emscripten_webgl_do_create_context=env._emscripten_webgl_do_create_context,
  _emscripten_webgl_enable_extension=env._emscripten_webgl_enable_extension,
  _emscripten_webgl_enable_extension_calling_thread=env._emscripten_webgl_enable_extension_calling_thread,
  _emscripten_webgl_init_context_attributes=env._emscripten_webgl_init_context_attributes,
  _emscripten_webgl_make_context_current=env._emscripten_webgl_make_context_current,
  _fd_close=env._fd_close,
  _fd_read=env._fd_read,
  _fd_seek=env._fd_seek,
  _fd_write=env._fd_write,
  _glActiveTexture=env._glActiveTexture,
  _glAttachShader=env._glAttachShader,
  _glBindBuffer=env._glBindBuffer,
  _glBindFramebuffer=env._glBindFramebuffer,
  _glBindRenderbuffer=env._glBindRenderbuffer,
  _glBindTexture=env._glBindTexture,
  _glBlendColor=env._glBlendColor,
  _glBlendEquationSeparate=env._glBlendEquationSeparate,
  _glBlendFuncSeparate=env._glBlendFuncSeparate,
  _glBufferData=env._glBufferData,
  _glBufferSubData=env._glBufferSubData,
  _glClear=env._glClear,
  _glClearColor=env._glClearColor,
  _glClearDepthf=env._glClearDepthf,
  _glClearStencil=env._glClearStencil,
  _glColorMask=env._glColorMask,
  _glCompileShader=env._glCompileShader,
  _glCompressedTexImage2D=env._glCompressedTexImage2D,
  _glCreateProgram=env._glCreateProgram,
  _glCreateShader=env._glCreateShader,
  _glCullFace=env._glCullFace,
  _glDeleteBuffers=env._glDeleteBuffers,
  _glDeleteFramebuffers=env._glDeleteFramebuffers,
  _glDeleteProgram=env._glDeleteProgram,
  _glDeleteRenderbuffers=env._glDeleteRenderbuffers,
  _glDeleteShader=env._glDeleteShader,
  _glDeleteTextures=env._glDeleteTextures,
  _glDepthFunc=env._glDepthFunc,
  _glDepthMask=env._glDepthMask,
  _glDisable=env._glDisable,
  _glDisableVertexAttribArray=env._glDisableVertexAttribArray,
  _glDrawArrays=env._glDrawArrays,
  _glDrawArraysInstanced=env._glDrawArraysInstanced,
  _glDrawElements=env._glDrawElements,
  _glDrawElementsInstanced=env._glDrawElementsInstanced,
  _glEnable=env._glEnable,
  _glEnableVertexAttribArray=env._glEnableVertexAttribArray,
  _glFrontFace=env._glFrontFace,
  _glGenBuffers=env._glGenBuffers,
  _glGenRenderbuffers=env._glGenRenderbuffers,
  _glGenTextures=env._glGenTextures,
  _glGetAttribLocation=env._glGetAttribLocation,
  _glGetError=env._glGetError,
  _glGetIntegerv=env._glGetIntegerv,
  _glGetProgramInfoLog=env._glGetProgramInfoLog,
  _glGetProgramiv=env._glGetProgramiv,
  _glGetShaderInfoLog=env._glGetShaderInfoLog,
  _glGetShaderiv=env._glGetShaderiv,
  _glGetString=env._glGetString,
  _glGetUniformLocation=env._glGetUniformLocation,
  _glLinkProgram=env._glLinkProgram,
  _glPolygonOffset=env._glPolygonOffset,
  _glRenderbufferStorage=env._glRenderbufferStorage,
  _glScissor=env._glScissor,
  _glShaderSource=env._glShaderSource,
  _glStencilFunc=env._glStencilFunc,
  _glStencilFuncSeparate=env._glStencilFuncSeparate,
  _glStencilMask=env._glStencilMask,
  _glStencilOp=env._glStencilOp,
  _glStencilOpSeparate=env._glStencilOpSeparate,
  _glTexImage2D=env._glTexImage2D,
  _glTexParameteri=env._glTexParameteri,
  _glUniform1fv=env._glUniform1fv,
  _glUniform1i=env._glUniform1i,
  _glUniform2fv=env._glUniform2fv,
  _glUniform3fv=env._glUniform3fv,
  _glUniform4fv=env._glUniform4fv,
  _glUniformMatrix4fv=env._glUniformMatrix4fv,
  _glUseProgram=env._glUseProgram,
  _glVertexAttribDivisor=env._glVertexAttribDivisor,
  _glVertexAttribPointer=env._glVertexAttribPointer,
  _glViewport=env._glViewport,
  _llvm_trap=env._llvm_trap,
  _sapp_js_create_textfield=env._sapp_js_create_textfield,
  _sapp_js_focus_textfield=env._sapp_js_focus_textfield,
  _sapp_js_hook_beforeunload=env._sapp_js_hook_beforeunload,
  _sapp_js_unfocus_textfield=env._sapp_js_unfocus_textfield,
  abortOnCannotGrowMemory=env.abortOnCannotGrowMemory,
  demangle=env.demangle,
  demangleAll=env.demangleAll,
  emscriptenWebGLGet=env.emscriptenWebGLGet,
  emscriptenWebGLGetTexPixelData=env.emscriptenWebGLGetTexPixelData,
  jsStackTrace=env.jsStackTrace,
  stackTrace=env.stackTrace,
  stringToNewUTF8=env.stringToNewUTF8,
  STACKTOP = 35536,
  STACK_MAX = 5278416,
  tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
    if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function __Z11sokolInitCbv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN2lm3App11GetInstanceEv()|0);
 __ZN2lm3App6onInitEv($call);
 return;
}
function __Z12sokolFrameCbv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN2lm3App11GetInstanceEv()|0);
 __ZN2lm3App7onFrameEv($call);
 return;
}
function __Z14sokolCleanupCbv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN2lm3App11GetInstanceEv()|0);
 __ZN2lm3App6onTermEv($call);
 return;
}
function __Z12sokolEventCbPK10sapp_event($_event) {
 $_event = $_event|0;
 var $0 = 0, $_event$addr = 0, $call = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $ref$tmp = sp;
 $_event$addr = $_event;
 $call = (__ZN2lm3App11GetInstanceEv()|0);
 $0 = $_event$addr;
 __ZN2lm8AppEvent15CreateFromSokolEPK10sapp_event($ref$tmp,$0);
 __ZN2lm3App7onEventERKNS_8AppEventE($call,$ref$tmp);
 __ZN2lm8AppEventD2Ev($ref$tmp);
 STACKTOP = sp;return;
}
function _sokol_main($agg$result,$argc,$argv) {
 $agg$result = $agg$result|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$addr$i$i$i = 0, $__r$addr$i$i$i$i$i = 0, $__x$addr$i$i$i$i$i$i = 0, $and$i$i$i$i = 0, $argc$addr = 0, $argv$addr = 0, $call = 0;
 var $call1 = 0, $call2 = 0, $call3 = 0, $call5 = 0, $call6 = 0, $cleanup_cb = 0, $cond$i$i$i = 0, $conv$i$i$i$i = 0, $event_cb = 0, $frame_cb = 0, $frombool = 0, $fullscreen = 0, $height = 0, $pApp = 0, $swap_interval = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i$i$i = 0;
 var $this$addr$i$i$i$i$i$i = 0, $this$addr$i$i$i13$i$i$i = 0, $this$addr$i$i$i4$i$i$i = 0, $this$addr$i$i14$i$i$i = 0, $this$addr$i$i5$i$i$i = 0, $this$addr$i15$i$i$i = 0, $this$addr$i6$i$i$i = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i$i = 0, $this1$i$i$i$i$i = 0, $this1$i$i$i$i$i$i = 0, $this1$i$i$i10$i$i$i = 0, $this1$i$i$i19$i$i$i = 0, $this1$i$i18$i$i$i = 0, $this1$i$i9$i$i$i = 0, $this1$i16$i$i$i = 0, $this1$i7$i$i$i = 0, $tobool$i$i$i$i = 0;
 var $width = 0, $window_title = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $argc$addr = $argc;
 $argv$addr = $argv;
 $call = (__Znwm(588)|0);
 __ZN2lm3AppC2Ev($call);
 $pApp = $call;
 $0 = $pApp;
 __ZN2lm3App11SetInstanceEPS0_($0);
 $1 = $pApp;
 __ZN2lm3App4initEv($1);
 dest=$agg$result; stop=dest+84|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$agg$result>>2] = 223;
 $frame_cb = ((($agg$result)) + 4|0);
 HEAP32[$frame_cb>>2] = 224;
 $cleanup_cb = ((($agg$result)) + 8|0);
 HEAP32[$cleanup_cb>>2] = 225;
 $event_cb = ((($agg$result)) + 12|0);
 HEAP32[$event_cb>>2] = 226;
 $2 = $pApp;
 $call1 = (__ZNK2lm3App8getWidthEv($2)|0);
 $width = ((($agg$result)) + 44|0);
 HEAP32[$width>>2] = $call1;
 $3 = $pApp;
 $call2 = (__ZNK2lm3App9getHeightEv($3)|0);
 $height = ((($agg$result)) + 48|0);
 HEAP32[$height>>2] = $call2;
 $4 = $pApp;
 $call3 = (__ZNK2lm3App8getTitleEv($4)|0);
 $this$addr$i = $call3;
 $this1$i = $this$addr$i;
 $this$addr$i$i = $this1$i;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 $this$addr$i$i$i$i = $this1$i$i$i;
 $this1$i$i$i$i = $this$addr$i$i$i$i;
 $this$addr$i$i$i$i$i = $this1$i$i$i$i;
 $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
 $this$addr$i$i$i$i$i$i = $this1$i$i$i$i$i;
 $this1$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i;
 $5 = ((($this1$i$i$i$i$i$i)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $conv$i$i$i$i = $6&255;
 $and$i$i$i$i = $conv$i$i$i$i & 128;
 $tobool$i$i$i$i = ($and$i$i$i$i|0)!=(0);
 if ($tobool$i$i$i$i) {
  $this$addr$i15$i$i$i = $this1$i$i$i;
  $this1$i16$i$i$i = $this$addr$i15$i$i$i;
  $this$addr$i$i14$i$i$i = $this1$i16$i$i$i;
  $this1$i$i18$i$i$i = $this$addr$i$i14$i$i$i;
  $this$addr$i$i$i13$i$i$i = $this1$i$i18$i$i$i;
  $this1$i$i$i19$i$i$i = $this$addr$i$i$i13$i$i$i;
  $7 = HEAP32[$this1$i$i$i19$i$i$i>>2]|0;
  $cond$i$i$i = $7;
  $__p$addr$i$i$i = $cond$i$i$i;
  $10 = $__p$addr$i$i$i;
  $window_title = ((($agg$result)) + 64|0);
  HEAP32[$window_title>>2] = $10;
  $11 = $pApp;
  $call5 = (__ZNK2lm3App13getFullscreenEv($11)|0);
  $fullscreen = ((($agg$result)) + 61|0);
  $frombool = $call5&1;
  HEAP8[$fullscreen>>0] = $frombool;
  $12 = $pApp;
  $call6 = (__ZNK2lm3App15getSwapIntervalEv($12)|0);
  $swap_interval = ((($agg$result)) + 56|0);
  HEAP32[$swap_interval>>2] = $call6;
  STACKTOP = sp;return;
 } else {
  $this$addr$i6$i$i$i = $this1$i$i$i;
  $this1$i7$i$i$i = $this$addr$i6$i$i$i;
  $this$addr$i$i5$i$i$i = $this1$i7$i$i$i;
  $this1$i$i9$i$i$i = $this$addr$i$i5$i$i$i;
  $this$addr$i$i$i4$i$i$i = $this1$i$i9$i$i$i;
  $this1$i$i$i10$i$i$i = $this$addr$i$i$i4$i$i$i;
  $__r$addr$i$i$i$i$i = $this1$i$i$i10$i$i$i;
  $8 = $__r$addr$i$i$i$i$i;
  $__x$addr$i$i$i$i$i$i = $8;
  $9 = $__x$addr$i$i$i$i$i$i;
  $cond$i$i$i = $9;
  $__p$addr$i$i$i = $cond$i$i$i;
  $10 = $__p$addr$i$i$i;
  $window_title = ((($agg$result)) + 64|0);
  HEAP32[$window_title>>2] = $10;
  $11 = $pApp;
  $call5 = (__ZNK2lm3App13getFullscreenEv($11)|0);
  $fullscreen = ((($agg$result)) + 61|0);
  $frombool = $call5&1;
  HEAP8[$fullscreen>>0] = $frombool;
  $12 = $pApp;
  $call6 = (__ZNK2lm3App15getSwapIntervalEv($12)|0);
  $swap_interval = ((($agg$result)) + 56|0);
  HEAP32[$swap_interval>>2] = $call6;
  STACKTOP = sp;return;
 }
}
function __ZNK2lm3App8getWidthEv($this) {
 $this = $this|0;
 var $0 = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $0 = HEAP32[$this1>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function __ZNK2lm3App9getHeightEv($this) {
 $this = $this|0;
 var $0 = 0, $m_height = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $m_height = ((($this1)) + 4|0);
 $0 = HEAP32[$m_height>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function __ZNK2lm3App8getTitleEv($this) {
 $this = $this|0;
 var $m_title = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $m_title = ((($this1)) + 8|0);
 STACKTOP = sp;return ($m_title|0);
}
function __ZNK2lm3App13getFullscreenEv($this) {
 $this = $this|0;
 var $0 = 0, $m_fullscreen = 0, $this$addr = 0, $this1 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $m_fullscreen = ((($this1)) + 20|0);
 $0 = HEAP8[$m_fullscreen>>0]|0;
 $tobool = $0&1;
 STACKTOP = sp;return ($tobool|0);
}
function __ZNK2lm3App15getSwapIntervalEv($this) {
 $this = $this|0;
 var $0 = 0, $m_swapInterval = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $m_swapInterval = ((($this1)) + 24|0);
 $0 = HEAP32[$m_swapInterval>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function __ZN2lm6ObjectD0Ev($this) {
 $this = $this|0;
 var $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 __ZN2lm6ObjectD2Ev($this1);
 __ZdlPv($this1);
 STACKTOP = sp;return;
}
function __ZN2lm6ObjectD2Ev($this) {
 $this = $this|0;
 var $this$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 STACKTOP = sp;return;
}
function __ZN2lm6ObjectC2Ev($this) {
 $this = $this|0;
 var $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 HEAP32[$this1>>2] = (3488);
 STACKTOP = sp;return;
}
function __ZN2lm3AppC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__a$i$i = 0, $__i$i$i = 0, $arrayidx$i$i = 0, $cmp$i$i = 0, $inc$i$i = 0, $m_event = 0, $m_input = 0, $m_title = 0, $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i2$i = 0, $this$addr$i$i3$i = 0, $this$addr$i2$i$i = 0;
 var $this$addr$i4$i = 0, $this1 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i7$i = 0, $this1$i$i6$i = 0, $this1$i3$i$i = 0, $this1$i5$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $m_title = ((($this1)) + 8|0);
 $this$addr$i = $m_title;
 $this1$i = $this$addr$i;
 $this$addr$i$i = $this1$i;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 ;HEAP32[$this1$i$i$i>>2]=0|0;HEAP32[$this1$i$i$i+4>>2]=0|0;HEAP32[$this1$i$i$i+8>>2]=0|0;
 $this$addr$i2$i$i = $this1$i$i;
 $this1$i3$i$i = $this$addr$i2$i$i;
 $this$addr$i$i$i$i = $this1$i3$i$i;
 $this$addr$i4$i = $this1$i;
 $this1$i5$i = $this$addr$i4$i;
 $this$addr$i$i3$i = $this1$i5$i;
 $this1$i$i6$i = $this$addr$i$i3$i;
 $this$addr$i$i$i2$i = $this1$i$i6$i;
 $this1$i$i$i7$i = $this$addr$i$i$i2$i;
 $__a$i$i = $this1$i$i$i7$i;
 $__i$i$i = 0;
 while(1) {
  $0 = $__i$i$i;
  $cmp$i$i = ($0>>>0)<(3);
  if (!($cmp$i$i)) {
   break;
  }
  $1 = $__a$i$i;
  $2 = $__i$i$i;
  $arrayidx$i$i = (($1) + ($2<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $3 = $__i$i$i;
  $inc$i$i = (($3) + 1)|0;
  $__i$i$i = $inc$i$i;
 }
 $m_input = ((($this1)) + 28|0);
 __ZN2lm5InputC2Ev($m_input);
 $m_event = ((($this1)) + 576|0);
 __ZN2lm5EventIJRKNS_8AppEventEEEC2Ev($m_event);
 STACKTOP = sp;return;
}
function __ZN2lm5EventIJRKNS_8AppEventEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $__end_$i$i = 0, $__end_cap_$i$i = 0, $__t$addr$i$i$i = 0, $__t$addr$i$i$i$i = 0, $__t$addr$i$i$i$i$i = 0, $__u$addr$i$i$i$i = 0, $ref$tmp$i$i = 0, $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i$i$i = 0, $this$addr$i2$i$i$i = 0, $this$addr$i3$i$i = 0, $this1 = 0, $this1$i = 0;
 var $this1$i$i = 0, $this1$i$i$i$i = 0, $this1$i3$i$i$i = 0, $this1$i4$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $ref$tmp$i$i = sp + 8|0;
 $this$addr = $this;
 $this1 = $this$addr;
 $this$addr$i = $this1;
 $this1$i = $this$addr$i;
 $this$addr$i$i = $this1$i;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 HEAP32[$this1$i$i>>2] = 0;
 $__end_$i$i = ((($this1$i$i)) + 4|0);
 HEAP32[$__end_$i$i>>2] = 0;
 $__end_cap_$i$i = ((($this1$i$i)) + 8|0);
 HEAP32[$ref$tmp$i$i>>2] = 0;
 $this$addr$i3$i$i = $__end_cap_$i$i;
 $__t$addr$i$i$i = $ref$tmp$i$i;
 $this1$i4$i$i = $this$addr$i3$i$i;
 $0 = $__t$addr$i$i$i;
 $__t$addr$i$i$i$i = $0;
 $1 = $__t$addr$i$i$i$i;
 $this$addr$i2$i$i$i = $this1$i4$i$i;
 $__u$addr$i$i$i$i = $1;
 $this1$i3$i$i$i = $this$addr$i2$i$i$i;
 $2 = $__u$addr$i$i$i$i;
 $__t$addr$i$i$i$i$i = $2;
 HEAP32[$this1$i3$i$i$i>>2] = 0;
 $this$addr$i$i$i$i = $this1$i4$i$i;
 $this1$i$i$i$i = $this$addr$i$i$i$i;
 $this$addr$i$i$i$i$i = $this1$i$i$i$i;
 STACKTOP = sp;return;
}
function __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($__ptr,$__size) {
 $__ptr = $__ptr|0;
 $__size = $__size|0;
 var $0 = 0, $__ptr$addr = 0, $__size$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__ptr$addr = $__ptr;
 $__size$addr = $__size;
 $0 = $__ptr$addr;
 __ZNSt3__217_DeallocateCaller9__do_callEPv($0);
 STACKTOP = sp;return;
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZNSt3__217_DeallocateCaller9__do_callEPv($__ptr) {
 $__ptr = $__ptr|0;
 var $0 = 0, $__ptr$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__ptr$addr = $__ptr;
 $0 = $__ptr$addr;
 __ZdlPv($0);
 STACKTOP = sp;return;
}
function __ZN2lm3App4initEv($this) {
 $this = $this|0;
 var $0 = 0, $__s$addr$i = 0, $m_fullscreen = 0, $m_height = 0, $m_swapInterval = 0, $m_title = 0, $this$addr = 0, $this$addr$i = 0, $this1 = 0, $this1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $m_title = ((($this1)) + 8|0);
 $this$addr$i = $m_title;
 $__s$addr$i = 7161;
 $this1$i = $this$addr$i;
 $0 = $__s$addr$i;
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this1$i,$0)|0);
 HEAP32[$this1>>2] = 1280;
 $m_height = ((($this1)) + 4|0);
 HEAP32[$m_height>>2] = 720;
 $m_fullscreen = ((($this1)) + 20|0);
 HEAP8[$m_fullscreen>>0] = 0;
 $m_swapInterval = ((($this1)) + 24|0);
 HEAP32[$m_swapInterval>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN2lm3App6onInitEv($this) {
 $this = $this|0;
 var $m_input = 0, $ref$tmp = 0, $ref$tmp4 = 0, $ref$tmp6 = 0, $this$addr = 0, $this1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $ref$tmp = sp + 64|0;
 $ref$tmp4 = sp + 60|0;
 $ref$tmp6 = sp;
 $this$addr = $this;
 $this1 = $this$addr;
 __ZN2lm3Gfx4InitEv();
 HEAP32[(33296)>>2] = 1;
 HEAPF32[(33300)>>2] = 1.0;
 HEAPF32[(33304)>>2] = 0.0;
 HEAPF32[(33308)>>2] = 0.0;
 HEAPF32[(33312)>>2] = 1.0;
 (__ZN2lm5Image12loadFromFileEPKc(3520,7166)|0);
 (__ZN2lm7Texture13loadFromImageERKNS_5ImageE(3540,3520)|0);
 (__ZN2lm9GfxBuffer4initEPKhjNS_13GfxBufferTypeENS_14GfxBufferUsageE(3496,16,168,1,1)|0);
 HEAPF32[$ref$tmp4>>2] = 1.0;
 __ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEC2ERKf($ref$tmp,$ref$tmp4);
 dest=33396; src=$ref$tmp; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 (__ZN2lm8Pipeline13CreateDefaultERS0_(3548)|0);
 __ZN2lm8BindingsC2EPNS_9GfxBufferES2_($ref$tmp6,3496,0);
 (__ZN2lm8BindingsaSERKS0_(3572,$ref$tmp6)|0);
 __ZN2lm8BindingsD2Ev($ref$tmp6);
 __ZN2lm8Bindings10setTextureEjPNS_7TextureE(3572,0,3540);
 $m_input = ((($this1)) + 28|0);
 __ZN2lm5Input4initEv($m_input);
 STACKTOP = sp;return;
}
function __ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEC2ERKf($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $arrayidx11 = 0, $arrayidx5 = 0, $arrayidx8 = 0, $ref$tmp = 0, $ref$tmp3 = 0, $ref$tmp6 = 0, $ref$tmp9 = 0, $s$addr = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $ref$tmp = sp + 48|0;
 $ref$tmp3 = sp + 32|0;
 $ref$tmp6 = sp + 16|0;
 $ref$tmp9 = sp;
 $this$addr = $this;
 $s$addr = $s;
 $this1 = $this$addr;
 $0 = $s$addr;
 $1 = +HEAPF32[$0>>2];
 __ZN3glm3vecILi4EfLNS_9qualifierE0EEC2IfiiiEET_T0_T1_T2_($ref$tmp,$1,0,0,0);
 ;HEAP32[$this1>>2]=HEAP32[$ref$tmp>>2]|0;HEAP32[$this1+4>>2]=HEAP32[$ref$tmp+4>>2]|0;HEAP32[$this1+8>>2]=HEAP32[$ref$tmp+8>>2]|0;HEAP32[$this1+12>>2]=HEAP32[$ref$tmp+12>>2]|0;
 $2 = $s$addr;
 $3 = +HEAPF32[$2>>2];
 __ZN3glm3vecILi4EfLNS_9qualifierE0EEC2IifiiEET_T0_T1_T2_($ref$tmp3,0,$3,0,0);
 $arrayidx5 = ((($this1)) + 16|0);
 ;HEAP32[$arrayidx5>>2]=HEAP32[$ref$tmp3>>2]|0;HEAP32[$arrayidx5+4>>2]=HEAP32[$ref$tmp3+4>>2]|0;HEAP32[$arrayidx5+8>>2]=HEAP32[$ref$tmp3+8>>2]|0;HEAP32[$arrayidx5+12>>2]=HEAP32[$ref$tmp3+12>>2]|0;
 $4 = $s$addr;
 $5 = +HEAPF32[$4>>2];
 __ZN3glm3vecILi4EfLNS_9qualifierE0EEC2IiifiEET_T0_T1_T2_($ref$tmp6,0,0,$5,0);
 $arrayidx8 = ((($this1)) + 32|0);
 ;HEAP32[$arrayidx8>>2]=HEAP32[$ref$tmp6>>2]|0;HEAP32[$arrayidx8+4>>2]=HEAP32[$ref$tmp6+4>>2]|0;HEAP32[$arrayidx8+8>>2]=HEAP32[$ref$tmp6+8>>2]|0;HEAP32[$arrayidx8+12>>2]=HEAP32[$ref$tmp6+12>>2]|0;
 $6 = $s$addr;
 $7 = +HEAPF32[$6>>2];
 __ZN3glm3vecILi4EfLNS_9qualifierE0EEC2IiiifEET_T0_T1_T2_($ref$tmp9,0,0,0,$7);
 $arrayidx11 = ((($this1)) + 48|0);
 ;HEAP32[$arrayidx11>>2]=HEAP32[$ref$tmp9>>2]|0;HEAP32[$arrayidx11+4>>2]=HEAP32[$ref$tmp9+4>>2]|0;HEAP32[$arrayidx11+8>>2]=HEAP32[$ref$tmp9+8>>2]|0;HEAP32[$arrayidx11+12>>2]=HEAP32[$ref$tmp9+12>>2]|0;
 STACKTOP = sp;return;
}
function __ZN2lm8BindingsaSERKS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $$addr = 0, $1 = 0, $2 = 0, $m_texture = 0, $m_texture2 = 0, $this$addr = 0, $this1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $$addr = $0;
 $this1 = $this$addr;
 $1 = $$addr;
 (__ZN2lm6ObjectaSERKS0_($this1,$1)|0);
 $m_texture = ((($this1)) + 4|0);
 $2 = $$addr;
 $m_texture2 = ((($2)) + 4|0);
 dest=$m_texture; src=$m_texture2; stop=dest+56|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return ($this1|0);
}
function __ZN2lm6ObjectaSERKS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $$addr = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $$addr = $0;
 $this1 = $this$addr;
 STACKTOP = sp;return ($this1|0);
}
function __ZN3glm3vecILi4EfLNS_9qualifierE0EEC2IfiiiEET_T0_T1_T2_($this,$_x,$_y,$_z,$_w) {
 $this = $this|0;
 $_x = +$_x;
 $_y = $_y|0;
 $_z = $_z|0;
 $_w = $_w|0;
 var $0 = 0.0, $1 = 0, $2 = 0, $3 = 0, $_w$addr = 0, $_x$addr = 0.0, $_y$addr = 0, $_z$addr = 0, $conv = 0.0, $conv2 = 0.0, $conv3 = 0.0, $this$addr = 0, $this1 = 0, $w = 0, $y = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $this$addr = $this;
 $_x$addr = $_x;
 $_y$addr = $_y;
 $_z$addr = $_z;
 $_w$addr = $_w;
 $this1 = $this$addr;
 $0 = $_x$addr;
 HEAPF32[$this1>>2] = $0;
 $y = ((($this1)) + 4|0);
 $1 = $_y$addr;
 $conv = (+($1|0));
 HEAPF32[$y>>2] = $conv;
 $z = ((($this1)) + 8|0);
 $2 = $_z$addr;
 $conv2 = (+($2|0));
 HEAPF32[$z>>2] = $conv2;
 $w = ((($this1)) + 12|0);
 $3 = $_w$addr;
 $conv3 = (+($3|0));
 HEAPF32[$w>>2] = $conv3;
 STACKTOP = sp;return;
}
function __ZN3glm3vecILi4EfLNS_9qualifierE0EEC2IifiiEET_T0_T1_T2_($this,$_x,$_y,$_z,$_w) {
 $this = $this|0;
 $_x = $_x|0;
 $_y = +$_y;
 $_z = $_z|0;
 $_w = $_w|0;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $_w$addr = 0, $_x$addr = 0, $_y$addr = 0.0, $_z$addr = 0, $conv = 0.0, $conv2 = 0.0, $conv3 = 0.0, $this$addr = 0, $this1 = 0, $w = 0, $y = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $this$addr = $this;
 $_x$addr = $_x;
 $_y$addr = $_y;
 $_z$addr = $_z;
 $_w$addr = $_w;
 $this1 = $this$addr;
 $0 = $_x$addr;
 $conv = (+($0|0));
 HEAPF32[$this1>>2] = $conv;
 $y = ((($this1)) + 4|0);
 $1 = $_y$addr;
 HEAPF32[$y>>2] = $1;
 $z = ((($this1)) + 8|0);
 $2 = $_z$addr;
 $conv2 = (+($2|0));
 HEAPF32[$z>>2] = $conv2;
 $w = ((($this1)) + 12|0);
 $3 = $_w$addr;
 $conv3 = (+($3|0));
 HEAPF32[$w>>2] = $conv3;
 STACKTOP = sp;return;
}
function __ZN3glm3vecILi4EfLNS_9qualifierE0EEC2IiifiEET_T0_T1_T2_($this,$_x,$_y,$_z,$_w) {
 $this = $this|0;
 $_x = $_x|0;
 $_y = $_y|0;
 $_z = +$_z;
 $_w = $_w|0;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $_w$addr = 0, $_x$addr = 0, $_y$addr = 0, $_z$addr = 0.0, $conv = 0.0, $conv2 = 0.0, $conv3 = 0.0, $this$addr = 0, $this1 = 0, $w = 0, $y = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $this$addr = $this;
 $_x$addr = $_x;
 $_y$addr = $_y;
 $_z$addr = $_z;
 $_w$addr = $_w;
 $this1 = $this$addr;
 $0 = $_x$addr;
 $conv = (+($0|0));
 HEAPF32[$this1>>2] = $conv;
 $y = ((($this1)) + 4|0);
 $1 = $_y$addr;
 $conv2 = (+($1|0));
 HEAPF32[$y>>2] = $conv2;
 $z = ((($this1)) + 8|0);
 $2 = $_z$addr;
 HEAPF32[$z>>2] = $2;
 $w = ((($this1)) + 12|0);
 $3 = $_w$addr;
 $conv3 = (+($3|0));
 HEAPF32[$w>>2] = $conv3;
 STACKTOP = sp;return;
}
function __ZN3glm3vecILi4EfLNS_9qualifierE0EEC2IiiifEET_T0_T1_T2_($this,$_x,$_y,$_z,$_w) {
 $this = $this|0;
 $_x = $_x|0;
 $_y = $_y|0;
 $_z = $_z|0;
 $_w = +$_w;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $_w$addr = 0.0, $_x$addr = 0, $_y$addr = 0, $_z$addr = 0, $conv = 0.0, $conv2 = 0.0, $conv3 = 0.0, $this$addr = 0, $this1 = 0, $w = 0, $y = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $this$addr = $this;
 $_x$addr = $_x;
 $_y$addr = $_y;
 $_z$addr = $_z;
 $_w$addr = $_w;
 $this1 = $this$addr;
 $0 = $_x$addr;
 $conv = (+($0|0));
 HEAPF32[$this1>>2] = $conv;
 $y = ((($this1)) + 4|0);
 $1 = $_y$addr;
 $conv2 = (+($1|0));
 HEAPF32[$y>>2] = $conv2;
 $z = ((($this1)) + 8|0);
 $2 = $_z$addr;
 $conv3 = (+($2|0));
 HEAPF32[$z>>2] = $conv3;
 $w = ((($this1)) + 12|0);
 $3 = $_w$addr;
 HEAPF32[$w>>2] = $3;
 STACKTOP = sp;return;
}
function __ZN2lm3App7onFrameEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $add = 0.0, $add23 = 0.0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $bindings = 0, $call = 0, $call2 = 0, $call25 = 0, $call27 = 0, $call32 = 0, $center = 0;
 var $cmp = 0, $cond = 0.0, $conv = 0.0, $conv5 = 0.0, $eye = 0, $fs_images = 0, $g = 0.0, $m_height = 0, $m_height31 = 0, $m_height4 = 0, $m_input = 0, $model = 0, $origi = 0, $proj = 0, $ref$tmp = 0, $ref$tmp10 = 0, $ref$tmp11 = 0, $ref$tmp12 = 0, $ref$tmp13 = 0, $ref$tmp14 = 0;
 var $ref$tmp15 = 0, $ref$tmp16 = 0, $ref$tmp17 = 0, $ref$tmp18 = 0, $ref$tmp19 = 0, $ref$tmp20 = 0, $ref$tmp21 = 0, $ref$tmp22 = 0, $ref$tmp24 = 0, $ref$tmp26 = 0, $ref$tmp6 = 0, $ref$tmp7 = 0, $ref$tmp8 = 0, $ref$tmp9 = 0, $rotat = 0, $scale = 0, $sub = 0.0, $this$addr = 0, $this1 = 0, $trans = 0;
 var $vertex_buffers = 0, $view = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1296|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1296|0);
 $agg$tmp$byval_copy = sp + 1280|0;
 $eye = sp + 1264|0;
 $center = sp + 1252|0;
 $ref$tmp = sp + 1240|0;
 $proj = sp + 1176|0;
 $view = sp + 1112|0;
 $ref$tmp6 = sp + 1096|0;
 $origi = sp + 1032|0;
 $ref$tmp7 = sp + 968|0;
 $ref$tmp8 = sp + 964|0;
 $ref$tmp9 = sp + 952|0;
 $trans = sp + 888|0;
 $ref$tmp10 = sp + 824|0;
 $ref$tmp11 = sp + 820|0;
 $ref$tmp12 = sp + 808|0;
 $scale = sp + 744|0;
 $ref$tmp13 = sp + 680|0;
 $ref$tmp14 = sp + 676|0;
 $ref$tmp15 = sp + 664|0;
 $rotat = sp + 600|0;
 $ref$tmp16 = sp + 536|0;
 $ref$tmp17 = sp + 532|0;
 $ref$tmp18 = sp + 520|0;
 $model = sp + 456|0;
 $ref$tmp19 = sp + 392|0;
 $ref$tmp20 = sp + 328|0;
 $ref$tmp21 = sp + 264|0;
 $ref$tmp22 = sp + 200|0;
 $bindings = sp + 16|0;
 $ref$tmp24 = sp + 8|0;
 $ref$tmp26 = sp + 4|0;
 $agg$tmp = sp;
 $this$addr = $this;
 $this1 = $this$addr;
 ;HEAP32[$eye>>2]=0|0;HEAP32[$eye+4>>2]=0|0;HEAP32[$eye+8>>2]=0|0;
 __ZN3glm3vecILi3EfLNS_9qualifierE0EEC2Efff($ref$tmp,0.0,0.0,1.0);
 __ZN3glmplIfLNS_9qualifierE0EEENS_3vecILi3ET_XT0_EEERKS4_S6_($center,$eye,$ref$tmp);
 $call = (_sapp_width()|0);
 HEAP32[$this1>>2] = $call;
 $call2 = (_sapp_height()|0);
 $m_height = ((($this1)) + 4|0);
 HEAP32[$m_height>>2] = $call2;
 $0 = HEAP32[$this1>>2]|0;
 $conv = (+($0>>>0));
 $m_height4 = ((($this1)) + 4|0);
 $1 = HEAP32[$m_height4>>2]|0;
 $conv5 = (+($1>>>0));
 $sub = - $conv5;
 __ZN3glm5orthoIfEENS_3matILi4ELi4ET_LNS_9qualifierE0EEES2_S2_S2_S2_S2_S2_($proj,0.0,$conv,$sub,0.0,-1.0,1.0);
 __ZN3glm3vecILi3EfLNS_9qualifierE0EEC2Efff($ref$tmp6,0.0,-1.0,0.0);
 __ZN3glm6lookAtIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKNS_3vecILi3ES3_XT0_EEES8_S8_($view,$eye,$center,$ref$tmp6);
 $2 = +HEAPF32[8365];
 $add = $2 + 0.0099999997764825821;
 HEAPF32[8365] = $add;
 HEAPF32[$ref$tmp8>>2] = 1.0;
 __ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEC2ERKf($ref$tmp7,$ref$tmp8);
 __ZN3glm3vecILi3EfLNS_9qualifierE0EEC2Efff($ref$tmp9,0.5,0.5,0.0);
 __ZN3glm9translateIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKS4_RKNS_3vecILi3ES3_XT0_EEE($origi,$ref$tmp7,$ref$tmp9);
 HEAPF32[$ref$tmp11>>2] = 1.0;
 __ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEC2ERKf($ref$tmp10,$ref$tmp11);
 __ZN3glm3vecILi3EfLNS_9qualifierE0EEC2Efff($ref$tmp12,320.0,240.0,0.0);
 __ZN3glm9translateIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKS4_RKNS_3vecILi3ES3_XT0_EEE($trans,$ref$tmp10,$ref$tmp12);
 HEAPF32[$ref$tmp14>>2] = 1.0;
 __ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEC2ERKf($ref$tmp13,$ref$tmp14);
 __ZN3glm3vecILi3EfLNS_9qualifierE0EEC2Efff($ref$tmp15,64.0,64.0,0.0);
 __ZN3glm5scaleIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKS4_RKNS_3vecILi3ES3_XT0_EEE($scale,$ref$tmp13,$ref$tmp15);
 HEAPF32[$ref$tmp17>>2] = 1.0;
 __ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEC2ERKf($ref$tmp16,$ref$tmp17);
 $3 = +HEAPF32[8365];
 __ZN3glm3vecILi3EfLNS_9qualifierE0EEC2Efff($ref$tmp18,0.0,0.0,1.0);
 __ZN3glm6rotateIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKS4_S3_RKNS_3vecILi3ES3_XT0_EEE($rotat,$ref$tmp16,$3,$ref$tmp18);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKS4_S6_($ref$tmp20,$trans,$rotat);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKS4_S6_($ref$tmp19,$ref$tmp20,$scale);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKS4_S6_($model,$ref$tmp19,$origi);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKS4_S6_($ref$tmp22,$proj,$view);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKS4_S6_($ref$tmp21,$ref$tmp22,$model);
 dest=33396; src=$ref$tmp21; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $4 = +HEAPF32[(33304)>>2];
 $add23 = $4 + 0.0099999997764825821;
 $g = $add23;
 $5 = $g;
 $cmp = $5 > 1.0;
 $6 = $g;
 $cond = $cmp ? 0.0 : $6;
 HEAPF32[(33304)>>2] = $cond;
 _memset(($bindings|0),0,176)|0;
 $call25 = (__ZN2lm9GfxBuffer9getHandleEv(3496)|0);
 HEAP32[$ref$tmp24>>2] = $call25;
 $vertex_buffers = ((($bindings)) + 4|0);
 ;HEAP32[$vertex_buffers>>2]=HEAP32[$ref$tmp24>>2]|0;
 $call27 = (__ZN2lm7Texture9getHandleEv(3540)|0);
 HEAP32[$ref$tmp26>>2] = $call27;
 $fs_images = ((($bindings)) + 124|0);
 ;HEAP32[$fs_images>>2]=HEAP32[$ref$tmp26>>2]|0;
 $7 = HEAP32[$this1>>2]|0;
 $m_height31 = ((($this1)) + 4|0);
 $8 = HEAP32[$m_height31>>2]|0;
 _sg_begin_default_pass(33292,$7,$8);
 $call32 = (__ZN2lm8Pipeline9getHandleEv(3548)|0);
 HEAP32[$agg$tmp>>2] = $call32;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 _sg_apply_pipeline($agg$tmp$byval_copy);
 _sg_apply_bindings($bindings);
 __ZN2lm6Shader17ApplyUniformBlockENS_11ShaderStageEPKvj(0,33396,64);
 _sg_draw(0,6,1);
 _sg_end_pass();
 __ZN2lm3Gfx6CommitEv();
 $m_input = ((($this1)) + 28|0);
 __ZN2lm5Input6updateEv($m_input);
 STACKTOP = sp;return;
}
function __ZN3glm3vecILi3EfLNS_9qualifierE0EEC2Efff($this,$_x,$_y,$_z) {
 $this = $this|0;
 $_x = +$_x;
 $_y = +$_y;
 $_z = +$_z;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $_x$addr = 0.0, $_y$addr = 0.0, $_z$addr = 0.0, $this$addr = 0, $this1 = 0, $y = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $_x$addr = $_x;
 $_y$addr = $_y;
 $_z$addr = $_z;
 $this1 = $this$addr;
 $0 = $_x$addr;
 HEAPF32[$this1>>2] = $0;
 $y = ((($this1)) + 4|0);
 $1 = $_y$addr;
 HEAPF32[$y>>2] = $1;
 $z = ((($this1)) + 8|0);
 $2 = $_z$addr;
 HEAPF32[$z>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN3glmplIfLNS_9qualifierE0EEENS_3vecILi3ET_XT0_EEERKS4_S6_($agg$result,$v1,$v2) {
 $agg$result = $agg$result|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $add = 0.0, $add3 = 0.0, $add5 = 0.0, $v1$addr = 0, $v2$addr = 0, $y = 0, $y2 = 0, $z = 0;
 var $z4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $v1$addr = $v1;
 $v2$addr = $v2;
 $0 = $v1$addr;
 $1 = +HEAPF32[$0>>2];
 $2 = $v2$addr;
 $3 = +HEAPF32[$2>>2];
 $add = $1 + $3;
 $4 = $v1$addr;
 $y = ((($4)) + 4|0);
 $5 = +HEAPF32[$y>>2];
 $6 = $v2$addr;
 $y2 = ((($6)) + 4|0);
 $7 = +HEAPF32[$y2>>2];
 $add3 = $5 + $7;
 $8 = $v1$addr;
 $z = ((($8)) + 8|0);
 $9 = +HEAPF32[$z>>2];
 $10 = $v2$addr;
 $z4 = ((($10)) + 8|0);
 $11 = +HEAPF32[$z4>>2];
 $add5 = $9 + $11;
 __ZN3glm3vecILi3EfLNS_9qualifierE0EEC2Efff($agg$result,$add,$add3,$add5);
 STACKTOP = sp;return;
}
function __ZN3glm5orthoIfEENS_3matILi4ELi4ET_LNS_9qualifierE0EEES2_S2_S2_S2_S2_S2_($agg$result,$left,$right,$bottom,$top,$zNear,$zFar) {
 $agg$result = $agg$result|0;
 $left = +$left;
 $right = +$right;
 $bottom = +$bottom;
 $top = +$top;
 $zNear = +$zNear;
 $zFar = +$zFar;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $bottom$addr = 0.0, $left$addr = 0.0, $right$addr = 0.0, $top$addr = 0.0, $zFar$addr = 0.0, $zNear$addr = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $left$addr = $left;
 $right$addr = $right;
 $bottom$addr = $bottom;
 $top$addr = $top;
 $zNear$addr = $zNear;
 $zFar$addr = $zFar;
 $0 = $left$addr;
 $1 = $right$addr;
 $2 = $bottom$addr;
 $3 = $top$addr;
 $4 = $zNear$addr;
 $5 = $zFar$addr;
 __ZN3glm10orthoRH_NOIfEENS_3matILi4ELi4ET_LNS_9qualifierE0EEES2_S2_S2_S2_S2_S2_($agg$result,$0,$1,$2,$3,$4,$5);
 STACKTOP = sp;return;
}
function __ZN3glm6lookAtIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKNS_3vecILi3ES3_XT0_EEES8_S8_($agg$result,$eye,$center,$up) {
 $agg$result = $agg$result|0;
 $eye = $eye|0;
 $center = $center|0;
 $up = $up|0;
 var $0 = 0, $1 = 0, $2 = 0, $center$addr = 0, $eye$addr = 0, $up$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $eye$addr = $eye;
 $center$addr = $center;
 $up$addr = $up;
 $0 = $eye$addr;
 $1 = $center$addr;
 $2 = $up$addr;
 __ZN3glm8lookAtRHIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKNS_3vecILi3ES3_XT0_EEES8_S8_($agg$result,$0,$1,$2);
 STACKTOP = sp;return;
}
function __ZN3glm9translateIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKS4_RKNS_3vecILi3ES3_XT0_EEE($agg$result,$m,$v) {
 $agg$result = $agg$result|0;
 $m = $m|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call = 0, $call10 = 0, $call11 = 0, $call12 = 0, $call4 = 0, $call6 = 0, $call7 = 0, $call9 = 0, $m$addr = 0, $ref$tmp = 0, $ref$tmp1 = 0, $ref$tmp2 = 0;
 var $ref$tmp3 = 0, $ref$tmp5 = 0, $ref$tmp8 = 0, $v$addr = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $ref$tmp = sp + 80|0;
 $ref$tmp1 = sp + 64|0;
 $ref$tmp2 = sp + 48|0;
 $ref$tmp3 = sp + 32|0;
 $ref$tmp5 = sp + 16|0;
 $ref$tmp8 = sp;
 $m$addr = $m;
 $v$addr = $v;
 $0 = $m$addr;
 dest=$agg$result; src=$0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $1 = $m$addr;
 $call = (__ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($1,0)|0);
 $2 = $v$addr;
 $call4 = (__ZNK3glm3vecILi3EfLNS_9qualifierE0EEixEi($2,0)|0);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_($ref$tmp3,$call,$call4);
 $3 = $m$addr;
 $call6 = (__ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($3,1)|0);
 $4 = $v$addr;
 $call7 = (__ZNK3glm3vecILi3EfLNS_9qualifierE0EEixEi($4,1)|0);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_($ref$tmp5,$call6,$call7);
 __ZN3glmplIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_S6_($ref$tmp2,$ref$tmp3,$ref$tmp5);
 $5 = $m$addr;
 $call9 = (__ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($5,2)|0);
 $6 = $v$addr;
 $call10 = (__ZNK3glm3vecILi3EfLNS_9qualifierE0EEixEi($6,2)|0);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_($ref$tmp8,$call9,$call10);
 __ZN3glmplIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_S6_($ref$tmp1,$ref$tmp2,$ref$tmp8);
 $7 = $m$addr;
 $call11 = (__ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($7,3)|0);
 __ZN3glmplIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_S6_($ref$tmp,$ref$tmp1,$call11);
 $call12 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($agg$result,3)|0);
 ;HEAP32[$call12>>2]=HEAP32[$ref$tmp>>2]|0;HEAP32[$call12+4>>2]=HEAP32[$ref$tmp+4>>2]|0;HEAP32[$call12+8>>2]=HEAP32[$ref$tmp+8>>2]|0;HEAP32[$call12+12>>2]=HEAP32[$ref$tmp+12>>2]|0;
 STACKTOP = sp;return;
}
function __ZN3glm5scaleIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKS4_RKNS_3vecILi3ES3_XT0_EEE($agg$result,$m,$v) {
 $agg$result = $agg$result|0;
 $m = $m|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $call1 = 0, $call10 = 0, $call11 = 0, $call12 = 0, $call2 = 0, $call4 = 0, $call5 = 0, $call6 = 0, $call8 = 0, $call9 = 0, $m$addr = 0, $ref$tmp = 0;
 var $ref$tmp3 = 0, $ref$tmp7 = 0, $v$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $ref$tmp = sp + 32|0;
 $ref$tmp3 = sp + 16|0;
 $ref$tmp7 = sp;
 $m$addr = $m;
 $v$addr = $v;
 $0 = $m$addr;
 $call = (__ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($0,0)|0);
 $1 = $v$addr;
 $call1 = (__ZNK3glm3vecILi3EfLNS_9qualifierE0EEixEi($1,0)|0);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_($ref$tmp,$call,$call1);
 $call2 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($agg$result,0)|0);
 ;HEAP32[$call2>>2]=HEAP32[$ref$tmp>>2]|0;HEAP32[$call2+4>>2]=HEAP32[$ref$tmp+4>>2]|0;HEAP32[$call2+8>>2]=HEAP32[$ref$tmp+8>>2]|0;HEAP32[$call2+12>>2]=HEAP32[$ref$tmp+12>>2]|0;
 $2 = $m$addr;
 $call4 = (__ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($2,1)|0);
 $3 = $v$addr;
 $call5 = (__ZNK3glm3vecILi3EfLNS_9qualifierE0EEixEi($3,1)|0);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_($ref$tmp3,$call4,$call5);
 $call6 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($agg$result,1)|0);
 ;HEAP32[$call6>>2]=HEAP32[$ref$tmp3>>2]|0;HEAP32[$call6+4>>2]=HEAP32[$ref$tmp3+4>>2]|0;HEAP32[$call6+8>>2]=HEAP32[$ref$tmp3+8>>2]|0;HEAP32[$call6+12>>2]=HEAP32[$ref$tmp3+12>>2]|0;
 $4 = $m$addr;
 $call8 = (__ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($4,2)|0);
 $5 = $v$addr;
 $call9 = (__ZNK3glm3vecILi3EfLNS_9qualifierE0EEixEi($5,2)|0);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_($ref$tmp7,$call8,$call9);
 $call10 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($agg$result,2)|0);
 ;HEAP32[$call10>>2]=HEAP32[$ref$tmp7>>2]|0;HEAP32[$call10+4>>2]=HEAP32[$ref$tmp7+4>>2]|0;HEAP32[$call10+8>>2]=HEAP32[$ref$tmp7+8>>2]|0;HEAP32[$call10+12>>2]=HEAP32[$ref$tmp7+12>>2]|0;
 $6 = $m$addr;
 $call11 = (__ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($6,3)|0);
 $call12 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($agg$result,3)|0);
 ;HEAP32[$call12>>2]=HEAP32[$call11>>2]|0;HEAP32[$call12+4>>2]=HEAP32[$call11+4>>2]|0;HEAP32[$call12+8>>2]=HEAP32[$call11+8>>2]|0;HEAP32[$call12+12>>2]=HEAP32[$call11+12>>2]|0;
 STACKTOP = sp;return;
}
function __ZN3glm6rotateIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKS4_S3_RKNS_3vecILi3ES3_XT0_EEE($agg$result,$m,$angle,$v) {
 $agg$result = $agg$result|0;
 $m = $m|0;
 $angle = +$angle;
 $v = $v|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $Rotate = 0, $__lcpp_x$addr$i = 0.0, $__lcpp_x$addr$i112 = 0.0, $a = 0.0, $add = 0.0, $add11 = 0.0, $add33 = 0.0, $add41 = 0.0;
 var $add49 = 0.0, $add63 = 0.0, $angle$addr = 0.0, $axis = 0, $c = 0.0, $call100 = 0, $call102 = 0, $call103 = 0, $call104 = 0, $call106 = 0, $call107 = 0, $call108 = 0, $call109 = 0, $call110 = 0, $call111 = 0, $call12 = 0, $call13 = 0, $call14 = 0, $call15 = 0, $call17 = 0;
 var $call2 = 0, $call20 = 0, $call21 = 0, $call22 = 0, $call23 = 0, $call25 = 0, $call28 = 0, $call29 = 0, $call3 = 0, $call30 = 0, $call31 = 0, $call34 = 0, $call35 = 0, $call36 = 0, $call37 = 0, $call39 = 0, $call4 = 0, $call42 = 0, $call43 = 0, $call44 = 0;
 var $call45 = 0, $call47 = 0, $call5 = 0, $call50 = 0, $call51 = 0, $call52 = 0, $call53 = 0, $call55 = 0, $call58 = 0, $call59 = 0, $call6 = 0, $call60 = 0, $call61 = 0, $call64 = 0, $call65 = 0, $call68 = 0, $call69 = 0, $call7 = 0, $call70 = 0, $call72 = 0;
 var $call73 = 0, $call74 = 0, $call76 = 0, $call77 = 0, $call78 = 0, $call79 = 0, $call83 = 0, $call84 = 0, $call85 = 0, $call87 = 0, $call88 = 0, $call89 = 0, $call9 = 0, $call91 = 0, $call92 = 0, $call93 = 0, $call94 = 0, $call98 = 0, $call99 = 0, $m$addr = 0;
 var $mul = 0.0, $mul10 = 0.0, $mul16 = 0.0, $mul18 = 0.0, $mul24 = 0.0, $mul26 = 0.0, $mul32 = 0.0, $mul38 = 0.0, $mul40 = 0.0, $mul46 = 0.0, $mul48 = 0.0, $mul54 = 0.0, $mul56 = 0.0, $mul62 = 0.0, $mul8 = 0.0, $ref$tmp = 0, $ref$tmp101 = 0, $ref$tmp105 = 0, $ref$tmp66 = 0, $ref$tmp67 = 0;
 var $ref$tmp71 = 0, $ref$tmp75 = 0, $ref$tmp80 = 0, $ref$tmp81 = 0, $ref$tmp82 = 0, $ref$tmp86 = 0, $ref$tmp90 = 0, $ref$tmp95 = 0, $ref$tmp96 = 0, $ref$tmp97 = 0, $s = 0.0, $sub = 0.0, $sub19 = 0.0, $sub27 = 0.0, $sub57 = 0.0, $temp = 0, $v$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(368|0);
 $axis = sp + 316|0;
 $temp = sp + 304|0;
 $Rotate = sp + 240|0;
 $ref$tmp = sp + 224|0;
 $ref$tmp66 = sp + 208|0;
 $ref$tmp67 = sp + 192|0;
 $ref$tmp71 = sp + 176|0;
 $ref$tmp75 = sp + 160|0;
 $ref$tmp80 = sp + 144|0;
 $ref$tmp81 = sp + 128|0;
 $ref$tmp82 = sp + 112|0;
 $ref$tmp86 = sp + 96|0;
 $ref$tmp90 = sp + 80|0;
 $ref$tmp95 = sp + 64|0;
 $ref$tmp96 = sp + 48|0;
 $ref$tmp97 = sp + 32|0;
 $ref$tmp101 = sp + 16|0;
 $ref$tmp105 = sp;
 $m$addr = $m;
 $angle$addr = $angle;
 $v$addr = $v;
 $0 = $angle$addr;
 $a = $0;
 $1 = $a;
 $__lcpp_x$addr$i = $1;
 $2 = $__lcpp_x$addr$i;
 $3 = (+Math_cos((+$2)));
 $c = $3;
 $4 = $a;
 $__lcpp_x$addr$i112 = $4;
 $5 = $__lcpp_x$addr$i112;
 $6 = (+Math_sin((+$5)));
 $s = $6;
 $7 = $v$addr;
 __ZN3glm9normalizeILi3EfLNS_9qualifierE0EEENS_3vecIXT_ET0_XT1_EEERKS4_($axis,$7);
 $8 = $c;
 $sub = 1.0 - $8;
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi3ET_XT0_EEES3_RKS4_($temp,$sub,$axis);
 $9 = $c;
 $call2 = (__ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi($temp,0)|0);
 $10 = +HEAPF32[$call2>>2];
 $call3 = (__ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi($axis,0)|0);
 $11 = +HEAPF32[$call3>>2];
 $mul = $10 * $11;
 $add = $9 + $mul;
 $call4 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($Rotate,0)|0);
 $call5 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($call4,0)|0);
 HEAPF32[$call5>>2] = $add;
 $call6 = (__ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi($temp,0)|0);
 $12 = +HEAPF32[$call6>>2];
 $call7 = (__ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi($axis,1)|0);
 $13 = +HEAPF32[$call7>>2];
 $mul8 = $12 * $13;
 $14 = $s;
 $call9 = (__ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi($axis,2)|0);
 $15 = +HEAPF32[$call9>>2];
 $mul10 = $14 * $15;
 $add11 = $mul8 + $mul10;
 $call12 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($Rotate,0)|0);
 $call13 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($call12,1)|0);
 HEAPF32[$call13>>2] = $add11;
 $call14 = (__ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi($temp,0)|0);
 $16 = +HEAPF32[$call14>>2];
 $call15 = (__ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi($axis,2)|0);
 $17 = +HEAPF32[$call15>>2];
 $mul16 = $16 * $17;
 $18 = $s;
 $call17 = (__ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi($axis,1)|0);
 $19 = +HEAPF32[$call17>>2];
 $mul18 = $18 * $19;
 $sub19 = $mul16 - $mul18;
 $call20 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($Rotate,0)|0);
 $call21 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($call20,2)|0);
 HEAPF32[$call21>>2] = $sub19;
 $call22 = (__ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi($temp,1)|0);
 $20 = +HEAPF32[$call22>>2];
 $call23 = (__ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi($axis,0)|0);
 $21 = +HEAPF32[$call23>>2];
 $mul24 = $20 * $21;
 $22 = $s;
 $call25 = (__ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi($axis,2)|0);
 $23 = +HEAPF32[$call25>>2];
 $mul26 = $22 * $23;
 $sub27 = $mul24 - $mul26;
 $call28 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($Rotate,1)|0);
 $call29 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($call28,0)|0);
 HEAPF32[$call29>>2] = $sub27;
 $24 = $c;
 $call30 = (__ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi($temp,1)|0);
 $25 = +HEAPF32[$call30>>2];
 $call31 = (__ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi($axis,1)|0);
 $26 = +HEAPF32[$call31>>2];
 $mul32 = $25 * $26;
 $add33 = $24 + $mul32;
 $call34 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($Rotate,1)|0);
 $call35 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($call34,1)|0);
 HEAPF32[$call35>>2] = $add33;
 $call36 = (__ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi($temp,1)|0);
 $27 = +HEAPF32[$call36>>2];
 $call37 = (__ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi($axis,2)|0);
 $28 = +HEAPF32[$call37>>2];
 $mul38 = $27 * $28;
 $29 = $s;
 $call39 = (__ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi($axis,0)|0);
 $30 = +HEAPF32[$call39>>2];
 $mul40 = $29 * $30;
 $add41 = $mul38 + $mul40;
 $call42 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($Rotate,1)|0);
 $call43 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($call42,2)|0);
 HEAPF32[$call43>>2] = $add41;
 $call44 = (__ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi($temp,2)|0);
 $31 = +HEAPF32[$call44>>2];
 $call45 = (__ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi($axis,0)|0);
 $32 = +HEAPF32[$call45>>2];
 $mul46 = $31 * $32;
 $33 = $s;
 $call47 = (__ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi($axis,1)|0);
 $34 = +HEAPF32[$call47>>2];
 $mul48 = $33 * $34;
 $add49 = $mul46 + $mul48;
 $call50 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($Rotate,2)|0);
 $call51 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($call50,0)|0);
 HEAPF32[$call51>>2] = $add49;
 $call52 = (__ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi($temp,2)|0);
 $35 = +HEAPF32[$call52>>2];
 $call53 = (__ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi($axis,1)|0);
 $36 = +HEAPF32[$call53>>2];
 $mul54 = $35 * $36;
 $37 = $s;
 $call55 = (__ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi($axis,0)|0);
 $38 = +HEAPF32[$call55>>2];
 $mul56 = $37 * $38;
 $sub57 = $mul54 - $mul56;
 $call58 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($Rotate,2)|0);
 $call59 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($call58,1)|0);
 HEAPF32[$call59>>2] = $sub57;
 $39 = $c;
 $call60 = (__ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi($temp,2)|0);
 $40 = +HEAPF32[$call60>>2];
 $call61 = (__ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi($axis,2)|0);
 $41 = +HEAPF32[$call61>>2];
 $mul62 = $40 * $41;
 $add63 = $39 + $mul62;
 $call64 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($Rotate,2)|0);
 $call65 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($call64,2)|0);
 HEAPF32[$call65>>2] = $add63;
 $42 = $m$addr;
 $call68 = (__ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($42,0)|0);
 $call69 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($Rotate,0)|0);
 $call70 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($call69,0)|0);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_($ref$tmp67,$call68,$call70);
 $43 = $m$addr;
 $call72 = (__ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($43,1)|0);
 $call73 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($Rotate,0)|0);
 $call74 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($call73,1)|0);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_($ref$tmp71,$call72,$call74);
 __ZN3glmplIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_S6_($ref$tmp66,$ref$tmp67,$ref$tmp71);
 $44 = $m$addr;
 $call76 = (__ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($44,2)|0);
 $call77 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($Rotate,0)|0);
 $call78 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($call77,2)|0);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_($ref$tmp75,$call76,$call78);
 __ZN3glmplIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_S6_($ref$tmp,$ref$tmp66,$ref$tmp75);
 $call79 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($agg$result,0)|0);
 ;HEAP32[$call79>>2]=HEAP32[$ref$tmp>>2]|0;HEAP32[$call79+4>>2]=HEAP32[$ref$tmp+4>>2]|0;HEAP32[$call79+8>>2]=HEAP32[$ref$tmp+8>>2]|0;HEAP32[$call79+12>>2]=HEAP32[$ref$tmp+12>>2]|0;
 $45 = $m$addr;
 $call83 = (__ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($45,0)|0);
 $call84 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($Rotate,1)|0);
 $call85 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($call84,0)|0);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_($ref$tmp82,$call83,$call85);
 $46 = $m$addr;
 $call87 = (__ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($46,1)|0);
 $call88 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($Rotate,1)|0);
 $call89 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($call88,1)|0);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_($ref$tmp86,$call87,$call89);
 __ZN3glmplIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_S6_($ref$tmp81,$ref$tmp82,$ref$tmp86);
 $47 = $m$addr;
 $call91 = (__ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($47,2)|0);
 $call92 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($Rotate,1)|0);
 $call93 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($call92,2)|0);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_($ref$tmp90,$call91,$call93);
 __ZN3glmplIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_S6_($ref$tmp80,$ref$tmp81,$ref$tmp90);
 $call94 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($agg$result,1)|0);
 ;HEAP32[$call94>>2]=HEAP32[$ref$tmp80>>2]|0;HEAP32[$call94+4>>2]=HEAP32[$ref$tmp80+4>>2]|0;HEAP32[$call94+8>>2]=HEAP32[$ref$tmp80+8>>2]|0;HEAP32[$call94+12>>2]=HEAP32[$ref$tmp80+12>>2]|0;
 $48 = $m$addr;
 $call98 = (__ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($48,0)|0);
 $call99 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($Rotate,2)|0);
 $call100 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($call99,0)|0);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_($ref$tmp97,$call98,$call100);
 $49 = $m$addr;
 $call102 = (__ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($49,1)|0);
 $call103 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($Rotate,2)|0);
 $call104 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($call103,1)|0);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_($ref$tmp101,$call102,$call104);
 __ZN3glmplIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_S6_($ref$tmp96,$ref$tmp97,$ref$tmp101);
 $50 = $m$addr;
 $call106 = (__ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($50,2)|0);
 $call107 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($Rotate,2)|0);
 $call108 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($call107,2)|0);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_($ref$tmp105,$call106,$call108);
 __ZN3glmplIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_S6_($ref$tmp95,$ref$tmp96,$ref$tmp105);
 $call109 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($agg$result,2)|0);
 ;HEAP32[$call109>>2]=HEAP32[$ref$tmp95>>2]|0;HEAP32[$call109+4>>2]=HEAP32[$ref$tmp95+4>>2]|0;HEAP32[$call109+8>>2]=HEAP32[$ref$tmp95+8>>2]|0;HEAP32[$call109+12>>2]=HEAP32[$ref$tmp95+12>>2]|0;
 $51 = $m$addr;
 $call110 = (__ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($51,3)|0);
 $call111 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($agg$result,3)|0);
 ;HEAP32[$call111>>2]=HEAP32[$call110>>2]|0;HEAP32[$call111+4>>2]=HEAP32[$call110+4>>2]|0;HEAP32[$call111+8>>2]=HEAP32[$call110+8>>2]|0;HEAP32[$call111+12>>2]=HEAP32[$call110+12>>2]|0;
 STACKTOP = sp;return;
}
function __ZN3glmmlIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKS4_S6_($agg$result,$m1,$m2) {
 $agg$result = $agg$result|0;
 $m1 = $m1|0;
 $m2 = $m2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $SrcA0 = 0, $SrcA1 = 0, $SrcA2 = 0, $SrcA3 = 0, $SrcB0 = 0, $SrcB1 = 0, $SrcB2 = 0, $SrcB3 = 0, $call = 0, $call1 = 0, $call11 = 0, $call13 = 0;
 var $call15 = 0, $call17 = 0, $call18 = 0, $call2 = 0, $call23 = 0, $call25 = 0, $call27 = 0, $call29 = 0, $call3 = 0, $call30 = 0, $call35 = 0, $call37 = 0, $call39 = 0, $call4 = 0, $call41 = 0, $call42 = 0, $call47 = 0, $call49 = 0, $call5 = 0, $call51 = 0;
 var $call53 = 0, $call54 = 0, $call6 = 0, $call7 = 0, $m1$addr = 0, $m2$addr = 0, $ref$tmp = 0, $ref$tmp10 = 0, $ref$tmp12 = 0, $ref$tmp14 = 0, $ref$tmp16 = 0, $ref$tmp19 = 0, $ref$tmp20 = 0, $ref$tmp21 = 0, $ref$tmp22 = 0, $ref$tmp24 = 0, $ref$tmp26 = 0, $ref$tmp28 = 0, $ref$tmp31 = 0, $ref$tmp32 = 0;
 var $ref$tmp33 = 0, $ref$tmp34 = 0, $ref$tmp36 = 0, $ref$tmp38 = 0, $ref$tmp40 = 0, $ref$tmp43 = 0, $ref$tmp44 = 0, $ref$tmp45 = 0, $ref$tmp46 = 0, $ref$tmp48 = 0, $ref$tmp50 = 0, $ref$tmp52 = 0, $ref$tmp8 = 0, $ref$tmp9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(592|0);
 $SrcA0 = sp + 560|0;
 $SrcA1 = sp + 544|0;
 $SrcA2 = sp + 528|0;
 $SrcA3 = sp + 512|0;
 $SrcB0 = sp + 496|0;
 $SrcB1 = sp + 480|0;
 $SrcB2 = sp + 464|0;
 $SrcB3 = sp + 448|0;
 $ref$tmp = sp + 432|0;
 $ref$tmp8 = sp + 416|0;
 $ref$tmp9 = sp + 400|0;
 $ref$tmp10 = sp + 384|0;
 $ref$tmp12 = sp + 368|0;
 $ref$tmp14 = sp + 352|0;
 $ref$tmp16 = sp + 336|0;
 $ref$tmp19 = sp + 320|0;
 $ref$tmp20 = sp + 304|0;
 $ref$tmp21 = sp + 288|0;
 $ref$tmp22 = sp + 272|0;
 $ref$tmp24 = sp + 256|0;
 $ref$tmp26 = sp + 240|0;
 $ref$tmp28 = sp + 224|0;
 $ref$tmp31 = sp + 208|0;
 $ref$tmp32 = sp + 192|0;
 $ref$tmp33 = sp + 176|0;
 $ref$tmp34 = sp + 160|0;
 $ref$tmp36 = sp + 144|0;
 $ref$tmp38 = sp + 128|0;
 $ref$tmp40 = sp + 112|0;
 $ref$tmp43 = sp + 96|0;
 $ref$tmp44 = sp + 80|0;
 $ref$tmp45 = sp + 64|0;
 $ref$tmp46 = sp + 48|0;
 $ref$tmp48 = sp + 32|0;
 $ref$tmp50 = sp + 16|0;
 $ref$tmp52 = sp;
 $m1$addr = $m1;
 $m2$addr = $m2;
 $0 = $m1$addr;
 $call = (__ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($0,0)|0);
 ;HEAP32[$SrcA0>>2]=HEAP32[$call>>2]|0;HEAP32[$SrcA0+4>>2]=HEAP32[$call+4>>2]|0;HEAP32[$SrcA0+8>>2]=HEAP32[$call+8>>2]|0;HEAP32[$SrcA0+12>>2]=HEAP32[$call+12>>2]|0;
 $1 = $m1$addr;
 $call1 = (__ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($1,1)|0);
 ;HEAP32[$SrcA1>>2]=HEAP32[$call1>>2]|0;HEAP32[$SrcA1+4>>2]=HEAP32[$call1+4>>2]|0;HEAP32[$SrcA1+8>>2]=HEAP32[$call1+8>>2]|0;HEAP32[$SrcA1+12>>2]=HEAP32[$call1+12>>2]|0;
 $2 = $m1$addr;
 $call2 = (__ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($2,2)|0);
 ;HEAP32[$SrcA2>>2]=HEAP32[$call2>>2]|0;HEAP32[$SrcA2+4>>2]=HEAP32[$call2+4>>2]|0;HEAP32[$SrcA2+8>>2]=HEAP32[$call2+8>>2]|0;HEAP32[$SrcA2+12>>2]=HEAP32[$call2+12>>2]|0;
 $3 = $m1$addr;
 $call3 = (__ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($3,3)|0);
 ;HEAP32[$SrcA3>>2]=HEAP32[$call3>>2]|0;HEAP32[$SrcA3+4>>2]=HEAP32[$call3+4>>2]|0;HEAP32[$SrcA3+8>>2]=HEAP32[$call3+8>>2]|0;HEAP32[$SrcA3+12>>2]=HEAP32[$call3+12>>2]|0;
 $4 = $m2$addr;
 $call4 = (__ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($4,0)|0);
 ;HEAP32[$SrcB0>>2]=HEAP32[$call4>>2]|0;HEAP32[$SrcB0+4>>2]=HEAP32[$call4+4>>2]|0;HEAP32[$SrcB0+8>>2]=HEAP32[$call4+8>>2]|0;HEAP32[$SrcB0+12>>2]=HEAP32[$call4+12>>2]|0;
 $5 = $m2$addr;
 $call5 = (__ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($5,1)|0);
 ;HEAP32[$SrcB1>>2]=HEAP32[$call5>>2]|0;HEAP32[$SrcB1+4>>2]=HEAP32[$call5+4>>2]|0;HEAP32[$SrcB1+8>>2]=HEAP32[$call5+8>>2]|0;HEAP32[$SrcB1+12>>2]=HEAP32[$call5+12>>2]|0;
 $6 = $m2$addr;
 $call6 = (__ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($6,2)|0);
 ;HEAP32[$SrcB2>>2]=HEAP32[$call6>>2]|0;HEAP32[$SrcB2+4>>2]=HEAP32[$call6+4>>2]|0;HEAP32[$SrcB2+8>>2]=HEAP32[$call6+8>>2]|0;HEAP32[$SrcB2+12>>2]=HEAP32[$call6+12>>2]|0;
 $7 = $m2$addr;
 $call7 = (__ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($7,3)|0);
 ;HEAP32[$SrcB3>>2]=HEAP32[$call7>>2]|0;HEAP32[$SrcB3+4>>2]=HEAP32[$call7+4>>2]|0;HEAP32[$SrcB3+8>>2]=HEAP32[$call7+8>>2]|0;HEAP32[$SrcB3+12>>2]=HEAP32[$call7+12>>2]|0;
 $call11 = (__ZNK3glm3vecILi4EfLNS_9qualifierE0EEixEi($SrcB0,0)|0);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_($ref$tmp10,$SrcA0,$call11);
 $call13 = (__ZNK3glm3vecILi4EfLNS_9qualifierE0EEixEi($SrcB0,1)|0);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_($ref$tmp12,$SrcA1,$call13);
 __ZN3glmplIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_S6_($ref$tmp9,$ref$tmp10,$ref$tmp12);
 $call15 = (__ZNK3glm3vecILi4EfLNS_9qualifierE0EEixEi($SrcB0,2)|0);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_($ref$tmp14,$SrcA2,$call15);
 __ZN3glmplIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_S6_($ref$tmp8,$ref$tmp9,$ref$tmp14);
 $call17 = (__ZNK3glm3vecILi4EfLNS_9qualifierE0EEixEi($SrcB0,3)|0);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_($ref$tmp16,$SrcA3,$call17);
 __ZN3glmplIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_S6_($ref$tmp,$ref$tmp8,$ref$tmp16);
 $call18 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($agg$result,0)|0);
 ;HEAP32[$call18>>2]=HEAP32[$ref$tmp>>2]|0;HEAP32[$call18+4>>2]=HEAP32[$ref$tmp+4>>2]|0;HEAP32[$call18+8>>2]=HEAP32[$ref$tmp+8>>2]|0;HEAP32[$call18+12>>2]=HEAP32[$ref$tmp+12>>2]|0;
 $call23 = (__ZNK3glm3vecILi4EfLNS_9qualifierE0EEixEi($SrcB1,0)|0);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_($ref$tmp22,$SrcA0,$call23);
 $call25 = (__ZNK3glm3vecILi4EfLNS_9qualifierE0EEixEi($SrcB1,1)|0);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_($ref$tmp24,$SrcA1,$call25);
 __ZN3glmplIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_S6_($ref$tmp21,$ref$tmp22,$ref$tmp24);
 $call27 = (__ZNK3glm3vecILi4EfLNS_9qualifierE0EEixEi($SrcB1,2)|0);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_($ref$tmp26,$SrcA2,$call27);
 __ZN3glmplIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_S6_($ref$tmp20,$ref$tmp21,$ref$tmp26);
 $call29 = (__ZNK3glm3vecILi4EfLNS_9qualifierE0EEixEi($SrcB1,3)|0);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_($ref$tmp28,$SrcA3,$call29);
 __ZN3glmplIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_S6_($ref$tmp19,$ref$tmp20,$ref$tmp28);
 $call30 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($agg$result,1)|0);
 ;HEAP32[$call30>>2]=HEAP32[$ref$tmp19>>2]|0;HEAP32[$call30+4>>2]=HEAP32[$ref$tmp19+4>>2]|0;HEAP32[$call30+8>>2]=HEAP32[$ref$tmp19+8>>2]|0;HEAP32[$call30+12>>2]=HEAP32[$ref$tmp19+12>>2]|0;
 $call35 = (__ZNK3glm3vecILi4EfLNS_9qualifierE0EEixEi($SrcB2,0)|0);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_($ref$tmp34,$SrcA0,$call35);
 $call37 = (__ZNK3glm3vecILi4EfLNS_9qualifierE0EEixEi($SrcB2,1)|0);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_($ref$tmp36,$SrcA1,$call37);
 __ZN3glmplIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_S6_($ref$tmp33,$ref$tmp34,$ref$tmp36);
 $call39 = (__ZNK3glm3vecILi4EfLNS_9qualifierE0EEixEi($SrcB2,2)|0);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_($ref$tmp38,$SrcA2,$call39);
 __ZN3glmplIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_S6_($ref$tmp32,$ref$tmp33,$ref$tmp38);
 $call41 = (__ZNK3glm3vecILi4EfLNS_9qualifierE0EEixEi($SrcB2,3)|0);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_($ref$tmp40,$SrcA3,$call41);
 __ZN3glmplIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_S6_($ref$tmp31,$ref$tmp32,$ref$tmp40);
 $call42 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($agg$result,2)|0);
 ;HEAP32[$call42>>2]=HEAP32[$ref$tmp31>>2]|0;HEAP32[$call42+4>>2]=HEAP32[$ref$tmp31+4>>2]|0;HEAP32[$call42+8>>2]=HEAP32[$ref$tmp31+8>>2]|0;HEAP32[$call42+12>>2]=HEAP32[$ref$tmp31+12>>2]|0;
 $call47 = (__ZNK3glm3vecILi4EfLNS_9qualifierE0EEixEi($SrcB3,0)|0);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_($ref$tmp46,$SrcA0,$call47);
 $call49 = (__ZNK3glm3vecILi4EfLNS_9qualifierE0EEixEi($SrcB3,1)|0);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_($ref$tmp48,$SrcA1,$call49);
 __ZN3glmplIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_S6_($ref$tmp45,$ref$tmp46,$ref$tmp48);
 $call51 = (__ZNK3glm3vecILi4EfLNS_9qualifierE0EEixEi($SrcB3,2)|0);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_($ref$tmp50,$SrcA2,$call51);
 __ZN3glmplIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_S6_($ref$tmp44,$ref$tmp45,$ref$tmp50);
 $call53 = (__ZNK3glm3vecILi4EfLNS_9qualifierE0EEixEi($SrcB3,3)|0);
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_($ref$tmp52,$SrcA3,$call53);
 __ZN3glmplIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_S6_($ref$tmp43,$ref$tmp44,$ref$tmp52);
 $call54 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($agg$result,3)|0);
 ;HEAP32[$call54>>2]=HEAP32[$ref$tmp43>>2]|0;HEAP32[$call54+4>>2]=HEAP32[$ref$tmp43+4>>2]|0;HEAP32[$call54+8>>2]=HEAP32[$ref$tmp43+8>>2]|0;HEAP32[$call54+12>>2]=HEAP32[$ref$tmp43+12>>2]|0;
 STACKTOP = sp;return;
}
function __ZNK3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $i$addr = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $i$addr = $i;
 $this1 = $this$addr;
 $0 = $i$addr;
 $call = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EE6lengthEv()|0);
 $cmp = ($0|0)<($call|0);
 if ($cmp) {
  $1 = $i$addr;
  $arrayidx = (($this1) + ($1<<4)|0);
  STACKTOP = sp;return ($arrayidx|0);
 } else {
  ___assert_fail((7182|0),(7201|0),242,(25952|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZNK3glm3vecILi4EfLNS_9qualifierE0EEixEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp2 = 0, $i$addr = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $i$addr = $i;
 $this1 = $this$addr;
 $0 = $i$addr;
 $cmp = ($0|0)>=(0);
 if (!($cmp)) {
  ___assert_fail((7240|0),(7269|0),337,(25952|0));
  // unreachable;
 }
 $1 = $i$addr;
 $call = (__ZN3glm3vecILi4EfLNS_9qualifierE0EE6lengthEv()|0);
 $cmp2 = ($1|0)<($call|0);
 if ($cmp2) {
  $2 = $i$addr;
  $arrayidx = (($this1) + ($2<<2)|0);
  STACKTOP = sp;return ($arrayidx|0);
 } else {
  ___assert_fail((7240|0),(7269|0),337,(25952|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_RKS3_($agg$result,$v,$scalar) {
 $agg$result = $agg$result|0;
 $v = $v|0;
 $scalar = $scalar|0;
 var $0 = 0, $1 = 0.0, $2 = 0, $call = 0, $scalar$addr = 0, $tmp = 0, $v$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmp = sp;
 $v$addr = $v;
 $scalar$addr = $scalar;
 $0 = $scalar$addr;
 $1 = +HEAPF32[$0>>2];
 $2 = $v$addr;
 ;HEAP32[$tmp>>2]=HEAP32[$2>>2]|0;HEAP32[$tmp+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$tmp+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$tmp+12>>2]=HEAP32[$2+12>>2]|0;
 $call = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEmLIfEERS2_T_($tmp,$1)|0);
 ;HEAP32[$agg$result>>2]=HEAP32[$call>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$call+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$call+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$call+12>>2]|0;
 STACKTOP = sp;return;
}
function __ZN3glmplIfLNS_9qualifierE0EEENS_3vecILi4ET_XT0_EEERKS4_S6_($agg$result,$v1,$v2) {
 $agg$result = $agg$result|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $0 = 0, $1 = 0, $call = 0, $tmp = 0, $v1$addr = 0, $v2$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmp = sp;
 $v1$addr = $v1;
 $v2$addr = $v2;
 $0 = $v2$addr;
 $1 = $v1$addr;
 ;HEAP32[$tmp>>2]=HEAP32[$1>>2]|0;HEAP32[$tmp+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$tmp+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$tmp+12>>2]=HEAP32[$1+12>>2]|0;
 $call = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEpLIfEERS2_RKNS0_ILi4ET_LS1_0EEE($tmp,$0)|0);
 ;HEAP32[$agg$result>>2]=HEAP32[$call>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$call+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$call+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$call+12>>2]|0;
 STACKTOP = sp;return;
}
function __ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $i$addr = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $i$addr = $i;
 $this1 = $this$addr;
 $0 = $i$addr;
 $call = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EE6lengthEv()|0);
 $cmp = ($0|0)<($call|0);
 if ($cmp) {
  $1 = $i$addr;
  $arrayidx = (($this1) + ($1<<4)|0);
  STACKTOP = sp;return ($arrayidx|0);
 } else {
  ___assert_fail((7182|0),(7201|0),235,(25952|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZN3glm3matILi4ELi4EfLNS_9qualifierE0EE6lengthEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZN3glm3vecILi4EfLNS_9qualifierE0EEpLIfEERS2_RKNS0_ILi4ET_LS1_0EEE($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $0 = 0, $ref$tmp = 0, $ref$tmp2 = 0, $this$addr = 0, $this1 = 0, $v$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $ref$tmp = sp + 16|0;
 $ref$tmp2 = sp;
 $this$addr = $this;
 $v$addr = $v;
 $this1 = $this$addr;
 $0 = $v$addr;
 ;HEAP32[$ref$tmp2>>2]=HEAP32[$0>>2]|0;HEAP32[$ref$tmp2+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$ref$tmp2+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$ref$tmp2+12>>2]=HEAP32[$0+12>>2]|0;
 __ZN3glm6detail16compute_vec4_addIfLNS_9qualifierE0ELb0EE4callERKNS_3vecILi4EfLS2_0EEES7_($ref$tmp,$this1,$ref$tmp2);
 ;HEAP32[$this1>>2]=HEAP32[$ref$tmp>>2]|0;HEAP32[$this1+4>>2]=HEAP32[$ref$tmp+4>>2]|0;HEAP32[$this1+8>>2]=HEAP32[$ref$tmp+8>>2]|0;HEAP32[$this1+12>>2]=HEAP32[$ref$tmp+12>>2]|0;
 STACKTOP = sp;return ($this1|0);
}
function __ZN3glm6detail16compute_vec4_addIfLNS_9qualifierE0ELb0EE4callERKNS_3vecILi4EfLS2_0EEES7_($agg$result,$a,$b) {
 $agg$result = $agg$result|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $a$addr = 0, $add = 0.0, $add3 = 0.0, $add5 = 0.0;
 var $add7 = 0.0, $b$addr = 0, $w = 0, $w6 = 0, $y = 0, $y2 = 0, $z = 0, $z4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $a$addr = $a;
 $b$addr = $b;
 $0 = $a$addr;
 $1 = +HEAPF32[$0>>2];
 $2 = $b$addr;
 $3 = +HEAPF32[$2>>2];
 $add = $1 + $3;
 $4 = $a$addr;
 $y = ((($4)) + 4|0);
 $5 = +HEAPF32[$y>>2];
 $6 = $b$addr;
 $y2 = ((($6)) + 4|0);
 $7 = +HEAPF32[$y2>>2];
 $add3 = $5 + $7;
 $8 = $a$addr;
 $z = ((($8)) + 8|0);
 $9 = +HEAPF32[$z>>2];
 $10 = $b$addr;
 $z4 = ((($10)) + 8|0);
 $11 = +HEAPF32[$z4>>2];
 $add5 = $9 + $11;
 $12 = $a$addr;
 $w = ((($12)) + 12|0);
 $13 = +HEAPF32[$w>>2];
 $14 = $b$addr;
 $w6 = ((($14)) + 12|0);
 $15 = +HEAPF32[$w6>>2];
 $add7 = $13 + $15;
 __ZN3glm3vecILi4EfLNS_9qualifierE0EEC2Effff($agg$result,$add,$add3,$add5,$add7);
 STACKTOP = sp;return;
}
function __ZN3glm3vecILi4EfLNS_9qualifierE0EEC2Effff($this,$_x,$_y,$_z,$_w) {
 $this = $this|0;
 $_x = +$_x;
 $_y = +$_y;
 $_z = +$_z;
 $_w = +$_w;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $_w$addr = 0.0, $_x$addr = 0.0, $_y$addr = 0.0, $_z$addr = 0.0, $this$addr = 0, $this1 = 0, $w = 0, $y = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $this$addr = $this;
 $_x$addr = $_x;
 $_y$addr = $_y;
 $_z$addr = $_z;
 $_w$addr = $_w;
 $this1 = $this$addr;
 $0 = $_x$addr;
 HEAPF32[$this1>>2] = $0;
 $y = ((($this1)) + 4|0);
 $1 = $_y$addr;
 HEAPF32[$y>>2] = $1;
 $z = ((($this1)) + 8|0);
 $2 = $_z$addr;
 HEAPF32[$z>>2] = $2;
 $w = ((($this1)) + 12|0);
 $3 = $_w$addr;
 HEAPF32[$w>>2] = $3;
 STACKTOP = sp;return;
}
function __ZN3glm3vecILi4EfLNS_9qualifierE0EEmLIfEERS2_T_($this,$scalar) {
 $this = $this|0;
 $scalar = +$scalar;
 var $0 = 0.0, $ref$tmp = 0, $ref$tmp2 = 0, $scalar$addr = 0.0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $ref$tmp = sp + 16|0;
 $ref$tmp2 = sp;
 $this$addr = $this;
 $scalar$addr = $scalar;
 $this1 = $this$addr;
 $0 = $scalar$addr;
 __ZN3glm3vecILi4EfLNS_9qualifierE0EEC2Ef($ref$tmp2,$0);
 __ZN3glm6detail16compute_vec4_mulIfLNS_9qualifierE0ELb0EE4callERKNS_3vecILi4EfLS2_0EEES7_($ref$tmp,$this1,$ref$tmp2);
 ;HEAP32[$this1>>2]=HEAP32[$ref$tmp>>2]|0;HEAP32[$this1+4>>2]=HEAP32[$ref$tmp+4>>2]|0;HEAP32[$this1+8>>2]=HEAP32[$ref$tmp+8>>2]|0;HEAP32[$this1+12>>2]=HEAP32[$ref$tmp+12>>2]|0;
 STACKTOP = sp;return ($this1|0);
}
function __ZN3glm3vecILi4EfLNS_9qualifierE0EEC2Ef($this,$scalar) {
 $this = $this|0;
 $scalar = +$scalar;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $scalar$addr = 0.0, $this$addr = 0, $this1 = 0, $w = 0, $y = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $scalar$addr = $scalar;
 $this1 = $this$addr;
 $0 = $scalar$addr;
 HEAPF32[$this1>>2] = $0;
 $y = ((($this1)) + 4|0);
 $1 = $scalar$addr;
 HEAPF32[$y>>2] = $1;
 $z = ((($this1)) + 8|0);
 $2 = $scalar$addr;
 HEAPF32[$z>>2] = $2;
 $w = ((($this1)) + 12|0);
 $3 = $scalar$addr;
 HEAPF32[$w>>2] = $3;
 STACKTOP = sp;return;
}
function __ZN3glm6detail16compute_vec4_mulIfLNS_9qualifierE0ELb0EE4callERKNS_3vecILi4EfLS2_0EEES7_($agg$result,$a,$b) {
 $agg$result = $agg$result|0;
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $a$addr = 0, $b$addr = 0, $mul = 0.0, $mul3 = 0.0;
 var $mul5 = 0.0, $mul7 = 0.0, $w = 0, $w6 = 0, $y = 0, $y2 = 0, $z = 0, $z4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $a$addr = $a;
 $b$addr = $b;
 $0 = $a$addr;
 $1 = +HEAPF32[$0>>2];
 $2 = $b$addr;
 $3 = +HEAPF32[$2>>2];
 $mul = $1 * $3;
 $4 = $a$addr;
 $y = ((($4)) + 4|0);
 $5 = +HEAPF32[$y>>2];
 $6 = $b$addr;
 $y2 = ((($6)) + 4|0);
 $7 = +HEAPF32[$y2>>2];
 $mul3 = $5 * $7;
 $8 = $a$addr;
 $z = ((($8)) + 8|0);
 $9 = +HEAPF32[$z>>2];
 $10 = $b$addr;
 $z4 = ((($10)) + 8|0);
 $11 = +HEAPF32[$z4>>2];
 $mul5 = $9 * $11;
 $12 = $a$addr;
 $w = ((($12)) + 12|0);
 $13 = +HEAPF32[$w>>2];
 $14 = $b$addr;
 $w6 = ((($14)) + 12|0);
 $15 = +HEAPF32[$w6>>2];
 $mul7 = $13 * $15;
 __ZN3glm3vecILi4EfLNS_9qualifierE0EEC2Effff($agg$result,$mul,$mul3,$mul5,$mul7);
 STACKTOP = sp;return;
}
function __ZN3glm3vecILi4EfLNS_9qualifierE0EE6lengthEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 4;
}
function __ZN3glm9normalizeILi3EfLNS_9qualifierE0EEENS_3vecIXT_ET0_XT1_EEERKS4_($agg$result,$x) {
 $agg$result = $agg$result|0;
 $x = $x|0;
 var $0 = 0, $x$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $0 = $x$addr;
 __ZN3glm6detail17compute_normalizeILi3EfLNS_9qualifierE0ELb0EE4callERKNS_3vecILi3EfLS2_0EEE($agg$result,$0);
 STACKTOP = sp;return;
}
function __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi3ET_XT0_EEES3_RKS4_($agg$result,$scalar,$v) {
 $agg$result = $agg$result|0;
 $scalar = +$scalar;
 $v = $v|0;
 var $0 = 0.0, $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $mul = 0.0, $mul1 = 0.0, $mul2 = 0.0, $scalar$addr = 0.0, $v$addr = 0, $y = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $scalar$addr = $scalar;
 $v$addr = $v;
 $0 = $scalar$addr;
 $1 = $v$addr;
 $2 = +HEAPF32[$1>>2];
 $mul = $0 * $2;
 $3 = $scalar$addr;
 $4 = $v$addr;
 $y = ((($4)) + 4|0);
 $5 = +HEAPF32[$y>>2];
 $mul1 = $3 * $5;
 $6 = $scalar$addr;
 $7 = $v$addr;
 $z = ((($7)) + 8|0);
 $8 = +HEAPF32[$z>>2];
 $mul2 = $6 * $8;
 __ZN3glm3vecILi3EfLNS_9qualifierE0EEC2Efff($agg$result,$mul,$mul1,$mul2);
 STACKTOP = sp;return;
}
function __ZN3glm3vecILi3EfLNS_9qualifierE0EEixEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp2 = 0, $i$addr = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $i$addr = $i;
 $this1 = $this$addr;
 $0 = $i$addr;
 $cmp = ($0|0)>=(0);
 if (!($cmp)) {
  ___assert_fail((7240|0),(7306|0),115,(25952|0));
  // unreachable;
 }
 $1 = $i$addr;
 $call = (__ZN3glm3vecILi3EfLNS_9qualifierE0EE6lengthEv()|0);
 $cmp2 = ($1|0)<($call|0);
 if ($cmp2) {
  $2 = $i$addr;
  $arrayidx = (($this1) + ($2<<2)|0);
  STACKTOP = sp;return ($arrayidx|0);
 } else {
  ___assert_fail((7240|0),(7306|0),115,(25952|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp2 = 0, $i$addr = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $i$addr = $i;
 $this1 = $this$addr;
 $0 = $i$addr;
 $cmp = ($0|0)>=(0);
 if (!($cmp)) {
  ___assert_fail((7240|0),(7269|0),330,(25952|0));
  // unreachable;
 }
 $1 = $i$addr;
 $call = (__ZN3glm3vecILi4EfLNS_9qualifierE0EE6lengthEv()|0);
 $cmp2 = ($1|0)<($call|0);
 if ($cmp2) {
  $2 = $i$addr;
  $arrayidx = (($this1) + ($2<<2)|0);
  STACKTOP = sp;return ($arrayidx|0);
 } else {
  ___assert_fail((7240|0),(7269|0),330,(25952|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZN3glm3vecILi3EfLNS_9qualifierE0EE6lengthEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 3;
}
function __ZN3glm6detail17compute_normalizeILi3EfLNS_9qualifierE0ELb0EE4callERKNS_3vecILi3EfLS2_0EEE($agg$result,$v) {
 $agg$result = $agg$result|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0.0, $call1 = 0.0, $v$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $v$addr = $v;
 $0 = $v$addr;
 $1 = $v$addr;
 $2 = $v$addr;
 $call = (+__ZN3glm3dotILi3EfLNS_9qualifierE0EEET0_RKNS_3vecIXT_ES2_XT1_EEES6_($1,$2));
 $call1 = (+__ZN3glm11inversesqrtIfEET_S1_($call));
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi3ET_XT0_EEERKS4_S3_($agg$result,$0,$call1);
 STACKTOP = sp;return;
}
function __ZN3glm3dotILi3EfLNS_9qualifierE0EEET0_RKNS_3vecIXT_ES2_XT1_EEES6_($x,$y) {
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $call = 0.0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $y$addr = $y;
 $0 = $x$addr;
 $1 = $y$addr;
 $call = (+__ZN3glm6detail11compute_dotINS_3vecILi3EfLNS_9qualifierE0EEEfLb0EE4callERKS4_S7_($0,$1));
 STACKTOP = sp;return (+$call);
}
function __ZN3glm11inversesqrtIfEET_S1_($x) {
 $x = +$x;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $__lcpp_x$addr$i = 0.0, $div = 0.0, $x$addr = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $0 = $x$addr;
 $__lcpp_x$addr$i = $0;
 $1 = $__lcpp_x$addr$i;
 $2 = (+Math_sqrt((+$1)));
 $div = 1.0 / $2;
 STACKTOP = sp;return (+$div);
}
function __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi3ET_XT0_EEERKS4_S3_($agg$result,$v,$scalar) {
 $agg$result = $agg$result|0;
 $v = $v|0;
 $scalar = +$scalar;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $mul = 0.0, $mul1 = 0.0, $mul2 = 0.0, $scalar$addr = 0.0, $v$addr = 0, $y = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $v$addr = $v;
 $scalar$addr = $scalar;
 $0 = $v$addr;
 $1 = +HEAPF32[$0>>2];
 $2 = $scalar$addr;
 $mul = $1 * $2;
 $3 = $v$addr;
 $y = ((($3)) + 4|0);
 $4 = +HEAPF32[$y>>2];
 $5 = $scalar$addr;
 $mul1 = $4 * $5;
 $6 = $v$addr;
 $z = ((($6)) + 8|0);
 $7 = +HEAPF32[$z>>2];
 $8 = $scalar$addr;
 $mul2 = $7 * $8;
 __ZN3glm3vecILi3EfLNS_9qualifierE0EEC2Efff($agg$result,$mul,$mul1,$mul2);
 STACKTOP = sp;return;
}
function __ZN3glm6detail11compute_dotINS_3vecILi3EfLNS_9qualifierE0EEEfLb0EE4callERKS4_S7_($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $a$addr = 0, $add = 0.0, $add1 = 0.0, $b$addr = 0, $tmp = 0, $y = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmp = sp;
 $a$addr = $a;
 $b$addr = $b;
 $0 = $a$addr;
 $1 = $b$addr;
 __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi3ET_XT0_EEERKS4_S6_($tmp,$0,$1);
 $2 = +HEAPF32[$tmp>>2];
 $y = ((($tmp)) + 4|0);
 $3 = +HEAPF32[$y>>2];
 $add = $2 + $3;
 $z = ((($tmp)) + 8|0);
 $4 = +HEAPF32[$z>>2];
 $add1 = $add + $4;
 STACKTOP = sp;return (+$add1);
}
function __ZN3glmmlIfLNS_9qualifierE0EEENS_3vecILi3ET_XT0_EEERKS4_S6_($agg$result,$v1,$v2) {
 $agg$result = $agg$result|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $mul = 0.0, $mul3 = 0.0, $mul5 = 0.0, $v1$addr = 0, $v2$addr = 0, $y = 0, $y2 = 0, $z = 0;
 var $z4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $v1$addr = $v1;
 $v2$addr = $v2;
 $0 = $v1$addr;
 $1 = +HEAPF32[$0>>2];
 $2 = $v2$addr;
 $3 = +HEAPF32[$2>>2];
 $mul = $1 * $3;
 $4 = $v1$addr;
 $y = ((($4)) + 4|0);
 $5 = +HEAPF32[$y>>2];
 $6 = $v2$addr;
 $y2 = ((($6)) + 4|0);
 $7 = +HEAPF32[$y2>>2];
 $mul3 = $5 * $7;
 $8 = $v1$addr;
 $z = ((($8)) + 8|0);
 $9 = +HEAPF32[$z>>2];
 $10 = $v2$addr;
 $z4 = ((($10)) + 8|0);
 $11 = +HEAPF32[$z4>>2];
 $mul5 = $9 * $11;
 __ZN3glm3vecILi3EfLNS_9qualifierE0EEC2Efff($agg$result,$mul,$mul3,$mul5);
 STACKTOP = sp;return;
}
function __ZNK3glm3vecILi3EfLNS_9qualifierE0EEixEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp2 = 0, $i$addr = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $i$addr = $i;
 $this1 = $this$addr;
 $0 = $i$addr;
 $cmp = ($0|0)>=(0);
 if (!($cmp)) {
  ___assert_fail((7240|0),(7306|0),122,(25952|0));
  // unreachable;
 }
 $1 = $i$addr;
 $call = (__ZN3glm3vecILi3EfLNS_9qualifierE0EE6lengthEv()|0);
 $cmp2 = ($1|0)<($call|0);
 if ($cmp2) {
  $2 = $i$addr;
  $arrayidx = (($this1) + ($2<<2)|0);
  STACKTOP = sp;return ($arrayidx|0);
 } else {
  ___assert_fail((7240|0),(7306|0),122,(25952|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZN3glm8lookAtRHIfLNS_9qualifierE0EEENS_3matILi4ELi4ET_XT0_EEERKNS_3vecILi3ES3_XT0_EEES8_S8_($agg$result,$eye,$center,$up) {
 $agg$result = $agg$result|0;
 $eye = $eye|0;
 $center = $center|0;
 $up = $up|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $call = 0, $call10 = 0, $call12 = 0, $call13 = 0, $call15 = 0;
 var $call16 = 0, $call18 = 0, $call19 = 0, $call22 = 0, $call23 = 0, $call26 = 0, $call27 = 0, $call28 = 0.0, $call3 = 0, $call30 = 0, $call31 = 0, $call32 = 0.0, $call34 = 0, $call35 = 0, $call36 = 0.0, $call37 = 0, $call38 = 0, $call4 = 0, $call5 = 0, $call6 = 0;
 var $call7 = 0, $call9 = 0, $center$addr = 0, $eye$addr = 0, $f = 0, $ref$tmp = 0, $ref$tmp1 = 0, $ref$tmp2 = 0, $s = 0, $sub = 0.0, $sub21 = 0.0, $sub25 = 0.0, $sub29 = 0.0, $sub33 = 0.0, $u = 0, $up$addr = 0, $y = 0, $y11 = 0, $y20 = 0, $z = 0;
 var $z14 = 0, $z24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $f = sp + 52|0;
 $ref$tmp = sp + 40|0;
 $s = sp + 28|0;
 $ref$tmp1 = sp + 16|0;
 $u = sp + 4|0;
 $ref$tmp2 = sp;
 $eye$addr = $eye;
 $center$addr = $center;
 $up$addr = $up;
 $0 = $center$addr;
 $1 = $eye$addr;
 __ZN3glmmiIfLNS_9qualifierE0EEENS_3vecILi3ET_XT0_EEERKS4_S6_($ref$tmp,$0,$1);
 __ZN3glm9normalizeILi3EfLNS_9qualifierE0EEENS_3vecIXT_ET0_XT1_EEERKS4_($f,$ref$tmp);
 $2 = $up$addr;
 __ZN3glm5crossIfLNS_9qualifierE0EEENS_3vecILi3ET_XT0_EEERKS4_S6_($ref$tmp1,$f,$2);
 __ZN3glm9normalizeILi3EfLNS_9qualifierE0EEENS_3vecIXT_ET0_XT1_EEERKS4_($s,$ref$tmp1);
 __ZN3glm5crossIfLNS_9qualifierE0EEENS_3vecILi3ET_XT0_EEERKS4_S6_($u,$s,$f);
 HEAPF32[$ref$tmp2>>2] = 1.0;
 __ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEC2ERKf($agg$result,$ref$tmp2);
 $3 = +HEAPF32[$s>>2];
 $call = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($agg$result,0)|0);
 $call3 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($call,0)|0);
 HEAPF32[$call3>>2] = $3;
 $y = ((($s)) + 4|0);
 $4 = +HEAPF32[$y>>2];
 $call4 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($agg$result,1)|0);
 $call5 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($call4,0)|0);
 HEAPF32[$call5>>2] = $4;
 $z = ((($s)) + 8|0);
 $5 = +HEAPF32[$z>>2];
 $call6 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($agg$result,2)|0);
 $call7 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($call6,0)|0);
 HEAPF32[$call7>>2] = $5;
 $6 = +HEAPF32[$u>>2];
 $call9 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($agg$result,0)|0);
 $call10 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($call9,1)|0);
 HEAPF32[$call10>>2] = $6;
 $y11 = ((($u)) + 4|0);
 $7 = +HEAPF32[$y11>>2];
 $call12 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($agg$result,1)|0);
 $call13 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($call12,1)|0);
 HEAPF32[$call13>>2] = $7;
 $z14 = ((($u)) + 8|0);
 $8 = +HEAPF32[$z14>>2];
 $call15 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($agg$result,2)|0);
 $call16 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($call15,1)|0);
 HEAPF32[$call16>>2] = $8;
 $9 = +HEAPF32[$f>>2];
 $sub = - $9;
 $call18 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($agg$result,0)|0);
 $call19 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($call18,2)|0);
 HEAPF32[$call19>>2] = $sub;
 $y20 = ((($f)) + 4|0);
 $10 = +HEAPF32[$y20>>2];
 $sub21 = - $10;
 $call22 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($agg$result,1)|0);
 $call23 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($call22,2)|0);
 HEAPF32[$call23>>2] = $sub21;
 $z24 = ((($f)) + 8|0);
 $11 = +HEAPF32[$z24>>2];
 $sub25 = - $11;
 $call26 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($agg$result,2)|0);
 $call27 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($call26,2)|0);
 HEAPF32[$call27>>2] = $sub25;
 $12 = $eye$addr;
 $call28 = (+__ZN3glm3dotILi3EfLNS_9qualifierE0EEET0_RKNS_3vecIXT_ES2_XT1_EEES6_($s,$12));
 $sub29 = - $call28;
 $call30 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($agg$result,3)|0);
 $call31 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($call30,0)|0);
 HEAPF32[$call31>>2] = $sub29;
 $13 = $eye$addr;
 $call32 = (+__ZN3glm3dotILi3EfLNS_9qualifierE0EEET0_RKNS_3vecIXT_ES2_XT1_EEES6_($u,$13));
 $sub33 = - $call32;
 $call34 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($agg$result,3)|0);
 $call35 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($call34,1)|0);
 HEAPF32[$call35>>2] = $sub33;
 $14 = $eye$addr;
 $call36 = (+__ZN3glm3dotILi3EfLNS_9qualifierE0EEET0_RKNS_3vecIXT_ES2_XT1_EEES6_($f,$14));
 $call37 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($agg$result,3)|0);
 $call38 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($call37,2)|0);
 HEAPF32[$call38>>2] = $call36;
 STACKTOP = sp;return;
}
function __ZN3glmmiIfLNS_9qualifierE0EEENS_3vecILi3ET_XT0_EEERKS4_S6_($agg$result,$v1,$v2) {
 $agg$result = $agg$result|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $sub = 0.0, $sub3 = 0.0, $sub5 = 0.0, $v1$addr = 0, $v2$addr = 0, $y = 0, $y2 = 0, $z = 0;
 var $z4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $v1$addr = $v1;
 $v2$addr = $v2;
 $0 = $v1$addr;
 $1 = +HEAPF32[$0>>2];
 $2 = $v2$addr;
 $3 = +HEAPF32[$2>>2];
 $sub = $1 - $3;
 $4 = $v1$addr;
 $y = ((($4)) + 4|0);
 $5 = +HEAPF32[$y>>2];
 $6 = $v2$addr;
 $y2 = ((($6)) + 4|0);
 $7 = +HEAPF32[$y2>>2];
 $sub3 = $5 - $7;
 $8 = $v1$addr;
 $z = ((($8)) + 8|0);
 $9 = +HEAPF32[$z>>2];
 $10 = $v2$addr;
 $z4 = ((($10)) + 8|0);
 $11 = +HEAPF32[$z4>>2];
 $sub5 = $9 - $11;
 __ZN3glm3vecILi3EfLNS_9qualifierE0EEC2Efff($agg$result,$sub,$sub3,$sub5);
 STACKTOP = sp;return;
}
function __ZN3glm5crossIfLNS_9qualifierE0EEENS_3vecILi3ET_XT0_EEERKS4_S6_($agg$result,$x,$y) {
 $agg$result = $agg$result|0;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $y$addr = $y;
 $0 = $x$addr;
 $1 = $y$addr;
 __ZN3glm6detail13compute_crossIfLNS_9qualifierE0ELb0EE4callERKNS_3vecILi3EfLS2_0EEES7_($agg$result,$0,$1);
 STACKTOP = sp;return;
}
function __ZN3glm6detail13compute_crossIfLNS_9qualifierE0ELb0EE4callERKNS_3vecILi3EfLS2_0EEES7_($agg$result,$x,$y) {
 $agg$result = $agg$result|0;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0;
 var $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $mul = 0.0, $mul10 = 0.0, $mul14 = 0.0, $mul17 = 0.0, $mul4 = 0.0, $mul7 = 0.0, $sub = 0.0, $sub11 = 0.0, $sub18 = 0.0, $x$addr = 0, $y$addr = 0, $y1 = 0, $y13 = 0, $y16 = 0, $y2 = 0, $z = 0;
 var $z3 = 0, $z5 = 0, $z8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $x$addr = $x;
 $y$addr = $y;
 $0 = $x$addr;
 $y1 = ((($0)) + 4|0);
 $1 = +HEAPF32[$y1>>2];
 $2 = $y$addr;
 $z = ((($2)) + 8|0);
 $3 = +HEAPF32[$z>>2];
 $mul = $1 * $3;
 $4 = $y$addr;
 $y2 = ((($4)) + 4|0);
 $5 = +HEAPF32[$y2>>2];
 $6 = $x$addr;
 $z3 = ((($6)) + 8|0);
 $7 = +HEAPF32[$z3>>2];
 $mul4 = $5 * $7;
 $sub = $mul - $mul4;
 $8 = $x$addr;
 $z5 = ((($8)) + 8|0);
 $9 = +HEAPF32[$z5>>2];
 $10 = $y$addr;
 $11 = +HEAPF32[$10>>2];
 $mul7 = $9 * $11;
 $12 = $y$addr;
 $z8 = ((($12)) + 8|0);
 $13 = +HEAPF32[$z8>>2];
 $14 = $x$addr;
 $15 = +HEAPF32[$14>>2];
 $mul10 = $13 * $15;
 $sub11 = $mul7 - $mul10;
 $16 = $x$addr;
 $17 = +HEAPF32[$16>>2];
 $18 = $y$addr;
 $y13 = ((($18)) + 4|0);
 $19 = +HEAPF32[$y13>>2];
 $mul14 = $17 * $19;
 $20 = $y$addr;
 $21 = +HEAPF32[$20>>2];
 $22 = $x$addr;
 $y16 = ((($22)) + 4|0);
 $23 = +HEAPF32[$y16>>2];
 $mul17 = $21 * $23;
 $sub18 = $mul14 - $mul17;
 __ZN3glm3vecILi3EfLNS_9qualifierE0EEC2Efff($agg$result,$sub,$sub11,$sub18);
 STACKTOP = sp;return;
}
function __ZN3glm10orthoRH_NOIfEENS_3matILi4ELi4ET_LNS_9qualifierE0EEES2_S2_S2_S2_S2_S2_($agg$result,$left,$right,$bottom,$top,$zNear,$zFar) {
 $agg$result = $agg$result|0;
 $left = +$left;
 $right = +$right;
 $bottom = +$bottom;
 $top = +$top;
 $zNear = +$zNear;
 $zFar = +$zFar;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $add = 0.0, $add15 = 0.0;
 var $add21 = 0.0, $bottom$addr = 0.0, $call = 0, $call1 = 0, $call13 = 0, $call14 = 0, $call19 = 0, $call20 = 0, $call25 = 0, $call26 = 0, $call4 = 0, $call5 = 0, $call8 = 0, $call9 = 0, $div = 0.0, $div12 = 0.0, $div18 = 0.0, $div24 = 0.0, $div3 = 0.0, $div7 = 0.0;
 var $left$addr = 0.0, $ref$tmp = 0, $right$addr = 0.0, $sub = 0.0, $sub10 = 0.0, $sub11 = 0.0, $sub16 = 0.0, $sub17 = 0.0, $sub2 = 0.0, $sub22 = 0.0, $sub23 = 0.0, $sub6 = 0.0, $top$addr = 0.0, $zFar$addr = 0.0, $zNear$addr = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $ref$tmp = sp;
 $left$addr = $left;
 $right$addr = $right;
 $bottom$addr = $bottom;
 $top$addr = $top;
 $zNear$addr = $zNear;
 $zFar$addr = $zFar;
 HEAPF32[$ref$tmp>>2] = 1.0;
 __ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEC2ERKf($agg$result,$ref$tmp);
 $0 = $right$addr;
 $1 = $left$addr;
 $sub = $0 - $1;
 $div = 2.0 / $sub;
 $call = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($agg$result,0)|0);
 $call1 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($call,0)|0);
 HEAPF32[$call1>>2] = $div;
 $2 = $top$addr;
 $3 = $bottom$addr;
 $sub2 = $2 - $3;
 $div3 = 2.0 / $sub2;
 $call4 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($agg$result,1)|0);
 $call5 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($call4,1)|0);
 HEAPF32[$call5>>2] = $div3;
 $4 = $zFar$addr;
 $5 = $zNear$addr;
 $sub6 = $4 - $5;
 $div7 = -2.0 / $sub6;
 $call8 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($agg$result,2)|0);
 $call9 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($call8,2)|0);
 HEAPF32[$call9>>2] = $div7;
 $6 = $right$addr;
 $7 = $left$addr;
 $add = $6 + $7;
 $sub10 = - $add;
 $8 = $right$addr;
 $9 = $left$addr;
 $sub11 = $8 - $9;
 $div12 = $sub10 / $sub11;
 $call13 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($agg$result,3)|0);
 $call14 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($call13,0)|0);
 HEAPF32[$call14>>2] = $div12;
 $10 = $top$addr;
 $11 = $bottom$addr;
 $add15 = $10 + $11;
 $sub16 = - $add15;
 $12 = $top$addr;
 $13 = $bottom$addr;
 $sub17 = $12 - $13;
 $div18 = $sub16 / $sub17;
 $call19 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($agg$result,3)|0);
 $call20 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($call19,1)|0);
 HEAPF32[$call20>>2] = $div18;
 $14 = $zFar$addr;
 $15 = $zNear$addr;
 $add21 = $14 + $15;
 $sub22 = - $add21;
 $16 = $zFar$addr;
 $17 = $zNear$addr;
 $sub23 = $16 - $17;
 $div24 = $sub22 / $sub23;
 $call25 = (__ZN3glm3matILi4ELi4EfLNS_9qualifierE0EEixEi($agg$result,3)|0);
 $call26 = (__ZN3glm3vecILi4EfLNS_9qualifierE0EEixEi($call25,2)|0);
 HEAPF32[$call26>>2] = $div24;
 STACKTOP = sp;return;
}
function __ZN2lm3App6onTermEv($this) {
 $this = $this|0;
 var $m_input = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 __ZN2lm9GfxBuffer4termEv(3496);
 __ZN2lm5Image4termEv(3520);
 __ZN2lm7Texture4termEv(3540);
 __ZN2lm8Pipeline4termEv(3548);
 __ZN2lm3Gfx4TermEv();
 $m_input = ((($this1)) + 28|0);
 __ZN2lm5Input4termEv($m_input);
 STACKTOP = sp;return;
}
function __ZN2lm3App7onEventERKNS_8AppEventE($this,$_event) {
 $this = $this|0;
 $_event = $_event|0;
 var $0 = 0, $_event$addr = 0, $agg$tmp = 0, $m_event = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp = sp;
 $this$addr = $this;
 $_event$addr = $_event;
 $this1 = $this$addr;
 $m_event = ((($this1)) + 576|0);
 $0 = $_event$addr;
 ;HEAP32[$agg$tmp>>2]=HEAP32[$0>>2]|0;HEAP32[$agg$tmp+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$agg$tmp+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$agg$tmp+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$agg$tmp+16>>2]=HEAP32[$0+16>>2]|0;
 __ZN2lm5EventIJRKNS_8AppEventEEE5raiseIJS1_EEEvDpT_($m_event,$agg$tmp);
 __ZN2lm8AppEventD2Ev($agg$tmp);
 STACKTOP = sp;return;
}
function __ZN2lm5EventIJRKNS_8AppEventEEE5raiseIJS1_EEEvDpT_($this,$_args) {
 $this = $this|0;
 $_args = $_args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__end_$i = 0, $__n$addr$i = 0, $arrayidx$i = 0, $cmp = 0, $i = 0, $inc = 0, $sub$ptr$div$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, $this$addr = 0;
 var $this$addr$i = 0, $this$addr$i4 = 0, $this1 = 0, $this1$i = 0, $this1$i5 = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $i = 0;
 while(1) {
  $0 = $i;
  $this$addr$i = $this1;
  $this1$i = $this$addr$i;
  $__end_$i = ((($this1$i)) + 4|0);
  $1 = HEAP32[$__end_$i>>2]|0;
  $2 = HEAP32[$this1$i>>2]|0;
  $sub$ptr$lhs$cast$i = $1;
  $sub$ptr$rhs$cast$i = $2;
  $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
  $sub$ptr$div$i = (($sub$ptr$sub$i|0) / 4)&-1;
  $cmp = ($0>>>0)<($sub$ptr$div$i>>>0);
  if (!($cmp)) {
   break;
  }
  $3 = $i;
  $this$addr$i4 = $this1;
  $__n$addr$i = $3;
  $this1$i5 = $this$addr$i4;
  $4 = HEAP32[$this1$i5>>2]|0;
  $5 = $__n$addr$i;
  $arrayidx$i = (($4) + ($5<<2)|0);
  $6 = HEAP32[$arrayidx$i>>2]|0;
  $vtable = HEAP32[$6>>2]|0;
  $7 = HEAP32[$vtable>>2]|0;
  FUNCTION_TABLE_vii[$7 & 255]($6,$_args);
  $8 = $i;
  $inc = (($8) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function __ZN2lm3App11GetInstanceEv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[8322]|0;
 return ($0|0);
}
function __ZN2lm3App11SetInstanceEPS0_($_pInstance) {
 $_pInstance = $_pInstance|0;
 var $0 = 0, $_pInstance$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_pInstance$addr = $_pInstance;
 $0 = $_pInstance$addr;
 HEAP32[8322] = $0;
 STACKTOP = sp;return;
}
function __ZN2lm8AppEventC2Ev($this) {
 $this = $this|0;
 var $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 HEAP32[$this1>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN2lm8AppEventD2Ev($this) {
 $this = $this|0;
 var $this$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 STACKTOP = sp;return;
}
function __ZN2lm8AppEvent15CreateFromSokolEPK10sapp_event($agg$result,$_event) {
 $agg$result = $agg$result|0;
 $_event = $_event|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $_event$addr = 0, $conv = 0, $conv13 = 0, $conv16 = 0, $conv21 = 0, $conv24 = 0, $conv7 = 0, $key_code = 0, $key_code3 = 0, $m_key = 0, $m_key4 = 0, $m_mouseKey = 0, $m_mouseKey11 = 0, $m_mouseX = 0, $m_mouseX14 = 0, $m_mouseX22 = 0;
 var $m_mouseY = 0, $m_mouseY17 = 0, $m_mouseY25 = 0, $mouse_button = 0, $mouse_button10 = 0, $mouse_x = 0, $mouse_x12 = 0, $mouse_x20 = 0, $mouse_y = 0, $mouse_y15 = 0, $mouse_y23 = 0, $nrvo = 0, $nrvo$val = 0, $nrvo$val$pre_trunc = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $nrvo = sp + 4|0;
 $_event$addr = $_event;
 $$expand_i1_val = 0;
 HEAP8[$nrvo>>0] = $$expand_i1_val;
 __ZN2lm8AppEventC2Ev($agg$result);
 $0 = $_event$addr;
 $type = ((($0)) + 8|0);
 $1 = HEAP32[$type>>2]|0;
 switch ($1|0) {
 case 1:  {
  HEAP32[$agg$result>>2] = 1;
  $2 = $_event$addr;
  $key_code = ((($2)) + 12|0);
  $3 = HEAP32[$key_code>>2]|0;
  $m_key = ((($agg$result)) + 4|0);
  HEAP32[$m_key>>2] = $3;
  break;
 }
 case 2:  {
  HEAP32[$agg$result>>2] = 2;
  $4 = $_event$addr;
  $key_code3 = ((($4)) + 12|0);
  $5 = HEAP32[$key_code3>>2]|0;
  $m_key4 = ((($agg$result)) + 4|0);
  HEAP32[$m_key4>>2] = $5;
  break;
 }
 case 4:  {
  HEAP32[$agg$result>>2] = 3;
  $6 = $_event$addr;
  $mouse_button = ((($6)) + 28|0);
  $7 = HEAP32[$mouse_button>>2]|0;
  $m_mouseKey = ((($agg$result)) + 8|0);
  HEAP32[$m_mouseKey>>2] = $7;
  $8 = $_event$addr;
  $mouse_x = ((($8)) + 32|0);
  $9 = +HEAPF32[$mouse_x>>2];
  $conv = (~~(($9))>>>0);
  $m_mouseX = ((($agg$result)) + 12|0);
  HEAP32[$m_mouseX>>2] = $conv;
  $10 = $_event$addr;
  $mouse_y = ((($10)) + 36|0);
  $11 = +HEAPF32[$mouse_y>>2];
  $conv7 = (~~(($11))>>>0);
  $m_mouseY = ((($agg$result)) + 16|0);
  HEAP32[$m_mouseY>>2] = $conv7;
  break;
 }
 case 5:  {
  HEAP32[$agg$result>>2] = 4;
  $12 = $_event$addr;
  $mouse_button10 = ((($12)) + 28|0);
  $13 = HEAP32[$mouse_button10>>2]|0;
  $m_mouseKey11 = ((($agg$result)) + 8|0);
  HEAP32[$m_mouseKey11>>2] = $13;
  $14 = $_event$addr;
  $mouse_x12 = ((($14)) + 32|0);
  $15 = +HEAPF32[$mouse_x12>>2];
  $conv13 = (~~(($15))>>>0);
  $m_mouseX14 = ((($agg$result)) + 12|0);
  HEAP32[$m_mouseX14>>2] = $conv13;
  $16 = $_event$addr;
  $mouse_y15 = ((($16)) + 36|0);
  $17 = +HEAPF32[$mouse_y15>>2];
  $conv16 = (~~(($17))>>>0);
  $m_mouseY17 = ((($agg$result)) + 16|0);
  HEAP32[$m_mouseY17>>2] = $conv16;
  break;
 }
 case 7:  {
  HEAP32[$agg$result>>2] = 5;
  $18 = $_event$addr;
  $mouse_x20 = ((($18)) + 32|0);
  $19 = +HEAPF32[$mouse_x20>>2];
  $conv21 = (~~(($19))>>>0);
  $m_mouseX22 = ((($agg$result)) + 12|0);
  HEAP32[$m_mouseX22>>2] = $conv21;
  $20 = $_event$addr;
  $mouse_y23 = ((($20)) + 36|0);
  $21 = +HEAPF32[$mouse_y23>>2];
  $conv24 = (~~(($21))>>>0);
  $m_mouseY25 = ((($agg$result)) + 16|0);
  HEAP32[$m_mouseY25>>2] = $conv24;
  break;
 }
 default: {
 }
 }
 $$expand_i1_val2 = 1;
 HEAP8[$nrvo>>0] = $$expand_i1_val2;
 $nrvo$val$pre_trunc = HEAP8[$nrvo>>0]|0;
 $nrvo$val = $nrvo$val$pre_trunc&1;
 if ($nrvo$val) {
  STACKTOP = sp;return;
 }
 __ZN2lm8AppEventD2Ev($agg$result);
 STACKTOP = sp;return;
}
function __ZN2lm5InputC2Ev($this) {
 $this = $this|0;
 var $indirect$arg$temp$byval_copy2D2D = 0, $indirect$arg$temp$index12D2D = 0, $indirect$arg$temp2D2D = 0, $m_appEventCallback = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $indirect$arg$temp$byval_copy2D2D = sp + 16|0;
 $indirect$arg$temp2D2D = sp;
 $this$addr = $this;
 $this1 = $this$addr;
 $m_appEventCallback = ((($this1)) + 532|0);
 HEAP32[$indirect$arg$temp2D2D>>2] = (227);
 $indirect$arg$temp$index12D2D = ((($indirect$arg$temp2D2D)) + 4|0);
 HEAP32[$indirect$arg$temp$index12D2D>>2] = 0;
 ;HEAP32[$indirect$arg$temp$byval_copy2D2D>>2]=HEAP32[$indirect$arg$temp2D2D>>2]|0;HEAP32[$indirect$arg$temp$byval_copy2D2D+4>>2]=HEAP32[$indirect$arg$temp2D2D+4>>2]|0;
 __ZN2lm8CallbackINS_5InputEJRKNS_8AppEventEEEC2EPS1_MS1_FvS4_E($m_appEventCallback,$this1,$indirect$arg$temp$byval_copy2D2D);
 STACKTOP = sp;return;
}
function __ZN2lm5Input10onAppEventERKNS_8AppEventE($this,$_event) {
 $this = $this|0;
 $_event = $_event|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_event$addr = 0, $call = 0, $call10 = 0, $call11 = 0, $call12 = 0, $call14 = 0, $call15 = 0, $call2 = 0, $call4 = 0;
 var $call6 = 0, $call7 = 0, $call8 = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $_event$addr = $_event;
 $this1 = $this$addr;
 $0 = $_event$addr;
 $call = (__ZNK2lm8AppEvent7getTypeEv($0)|0);
 switch ($call|0) {
 case 1:  {
  $1 = $_event$addr;
  $call2 = (__ZNK2lm8AppEvent6getKeyEv($1)|0);
  __ZN2lm5Input9onKeyDownENS_3KeyE($this1,$call2);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $2 = $_event$addr;
  $call4 = (__ZNK2lm8AppEvent6getKeyEv($2)|0);
  __ZN2lm5Input7onKeyUpENS_3KeyE($this1,$call4);
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $3 = $_event$addr;
  $call6 = (__ZNK2lm8AppEvent11getMouseKeyEv($3)|0);
  __ZN2lm5Input14onMouseKeyDownENS_8MouseKeyE($this1,$call6);
  $4 = $_event$addr;
  $call7 = (__ZNK2lm8AppEvent9getMouseXEv($4)|0);
  $5 = $_event$addr;
  $call8 = (__ZNK2lm8AppEvent9getMouseYEv($5)|0);
  __ZN2lm5Input11onMouseMoveEjj($this1,$call7,$call8);
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $6 = $_event$addr;
  $call10 = (__ZNK2lm8AppEvent11getMouseKeyEv($6)|0);
  __ZN2lm5Input12onMouseKeyUpENS_8MouseKeyE($this1,$call10);
  $7 = $_event$addr;
  $call11 = (__ZNK2lm8AppEvent9getMouseXEv($7)|0);
  $8 = $_event$addr;
  $call12 = (__ZNK2lm8AppEvent9getMouseYEv($8)|0);
  __ZN2lm5Input11onMouseMoveEjj($this1,$call11,$call12);
  STACKTOP = sp;return;
  break;
 }
 case 5:  {
  $9 = $_event$addr;
  $call14 = (__ZNK2lm8AppEvent9getMouseXEv($9)|0);
  $10 = $_event$addr;
  $call15 = (__ZNK2lm8AppEvent9getMouseYEv($10)|0);
  __ZN2lm5Input11onMouseMoveEjj($this1,$call14,$call15);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function __ZN2lm8CallbackINS_5InputEJRKNS_8AppEventEEEC2EPS1_MS1_FvS4_E($this,$_object,$0) {
 $this = $this|0;
 $_object = $_object|0;
 $0 = $0|0;
 var $$field = 0, $$field6 = 0, $$index5 = 0, $1 = 0, $_function$addr = 0, $_function$addr$index4 = 0, $_function$field = 0, $_function$field2 = 0, $_function$index1 = 0, $_object$addr = 0, $m_function = 0, $m_function$index8 = 0, $m_object = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_function$addr = sp;
 $_function$field = HEAP32[$0>>2]|0;
 $_function$index1 = ((($0)) + 4|0);
 $_function$field2 = HEAP32[$_function$index1>>2]|0;
 $this$addr = $this;
 $_object$addr = $_object;
 HEAP32[$_function$addr>>2] = $_function$field;
 $_function$addr$index4 = ((($_function$addr)) + 4|0);
 HEAP32[$_function$addr$index4>>2] = $_function$field2;
 $this1 = $this$addr;
 __ZN2lm17CallbackContainerIJRKNS_8AppEventEEEC2Ev($this1);
 HEAP32[$this1>>2] = (3640);
 $m_object = ((($this1)) + 4|0);
 $1 = $_object$addr;
 HEAP32[$m_object>>2] = $1;
 $m_function = ((($this1)) + 8|0);
 $$field = HEAP32[$_function$addr>>2]|0;
 $$index5 = ((($_function$addr)) + 4|0);
 $$field6 = HEAP32[$$index5>>2]|0;
 HEAP32[$m_function>>2] = $$field;
 $m_function$index8 = ((($m_function)) + 4|0);
 HEAP32[$m_function$index8>>2] = $$field6;
 STACKTOP = sp;return;
}
function __ZN2lm17CallbackContainerIJRKNS_8AppEventEEEC2Ev($this) {
 $this = $this|0;
 var $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 HEAP32[$this1>>2] = (3652);
 STACKTOP = sp;return;
}
function __ZN2lm8CallbackINS_5InputEJRKNS_8AppEventEEE7executeES4_($this,$_args) {
 $this = $this|0;
 $_args = $_args|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_args$addr = 0, $m_function = 0, $m_object = 0, $memptr$adj$shifted = 0, $memptr$isvirtual = 0, $memptr$nonvirtualfn = 0, $memptr$virtualfn = 0, $this$addr = 0, $this1 = 0, $vtable = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $_args$addr = $_args;
 $this1 = $this$addr;
 $m_object = ((($this1)) + 4|0);
 $0 = HEAP32[$m_object>>2]|0;
 $m_function = ((($this1)) + 8|0);
 $$field = HEAP32[$m_function>>2]|0;
 $$index1 = ((($m_function)) + 4|0);
 $$field2 = HEAP32[$$index1>>2]|0;
 $memptr$adj$shifted = $$field2 >> 1;
 $1 = (($0) + ($memptr$adj$shifted)|0);
 $2 = $$field2 & 1;
 $memptr$isvirtual = ($2|0)!=(0);
 if ($memptr$isvirtual) {
  $vtable = HEAP32[$1>>2]|0;
  $3 = (($vtable) + ($$field)|0);
  $memptr$virtualfn = HEAP32[$3>>2]|0;
  $5 = $memptr$virtualfn;
  $4 = $_args$addr;
  FUNCTION_TABLE_vii[$5 & 255]($1,$4);
  STACKTOP = sp;return;
 } else {
  $memptr$nonvirtualfn = $$field;
  $5 = $memptr$nonvirtualfn;
  $4 = $_args$addr;
  FUNCTION_TABLE_vii[$5 & 255]($1,$4);
  STACKTOP = sp;return;
 }
}
function __ZNK2lm8AppEvent7getTypeEv($this) {
 $this = $this|0;
 var $0 = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $0 = HEAP32[$this1>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function __ZNK2lm8AppEvent6getKeyEv($this) {
 $this = $this|0;
 var $0 = 0, $m_key = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $m_key = ((($this1)) + 4|0);
 $0 = HEAP32[$m_key>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function __ZN2lm5Input9onKeyDownENS_3KeyE($this,$_key) {
 $this = $this|0;
 $_key = $_key|0;
 var $0 = 0, $_key$addr = 0, $arrayidx = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $_key$addr = $_key;
 $this1 = $this$addr;
 $0 = $_key$addr;
 $arrayidx = (($this1) + ($0<<2)|0);
 HEAP32[$arrayidx>>2] = 1;
 STACKTOP = sp;return;
}
function __ZN2lm5Input7onKeyUpENS_3KeyE($this,$_key) {
 $this = $this|0;
 $_key = $_key|0;
 var $0 = 0, $_key$addr = 0, $arrayidx = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $_key$addr = $_key;
 $this1 = $this$addr;
 $0 = $_key$addr;
 $arrayidx = (($this1) + ($0<<2)|0);
 HEAP32[$arrayidx>>2] = 4;
 STACKTOP = sp;return;
}
function __ZNK2lm8AppEvent11getMouseKeyEv($this) {
 $this = $this|0;
 var $0 = 0, $m_mouseKey = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $m_mouseKey = ((($this1)) + 8|0);
 $0 = HEAP32[$m_mouseKey>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function __ZN2lm5Input14onMouseKeyDownENS_8MouseKeyE($this,$_mouseKey) {
 $this = $this|0;
 $_mouseKey = $_mouseKey|0;
 var $0 = 0, $_mouseKey$addr = 0, $arrayidx = 0, $m_mouseKeyStates = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $_mouseKey$addr = $_mouseKey;
 $this1 = $this$addr;
 $m_mouseKeyStates = ((($this1)) + 512|0);
 $0 = $_mouseKey$addr;
 $arrayidx = (($m_mouseKeyStates) + ($0<<2)|0);
 HEAP32[$arrayidx>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK2lm8AppEvent9getMouseXEv($this) {
 $this = $this|0;
 var $0 = 0, $m_mouseX = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $m_mouseX = ((($this1)) + 12|0);
 $0 = HEAP32[$m_mouseX>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function __ZNK2lm8AppEvent9getMouseYEv($this) {
 $this = $this|0;
 var $0 = 0, $m_mouseY = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $m_mouseY = ((($this1)) + 16|0);
 $0 = HEAP32[$m_mouseY>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function __ZN2lm5Input11onMouseMoveEjj($this,$_x,$_y) {
 $this = $this|0;
 $_x = $_x|0;
 $_y = $_y|0;
 var $0 = 0, $1 = 0, $_x$addr = 0, $_y$addr = 0, $m_mouseX = 0, $m_mouseY = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $_x$addr = $_x;
 $_y$addr = $_y;
 $this1 = $this$addr;
 $0 = $_x$addr;
 $m_mouseX = ((($this1)) + 524|0);
 HEAP32[$m_mouseX>>2] = $0;
 $1 = $_y$addr;
 $m_mouseY = ((($this1)) + 528|0);
 HEAP32[$m_mouseY>>2] = $1;
 STACKTOP = sp;return;
}
function __ZN2lm5Input12onMouseKeyUpENS_8MouseKeyE($this,$_mouseKey) {
 $this = $this|0;
 $_mouseKey = $_mouseKey|0;
 var $0 = 0, $_mouseKey$addr = 0, $arrayidx = 0, $m_mouseKeyStates = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $_mouseKey$addr = $_mouseKey;
 $this1 = $this$addr;
 $m_mouseKeyStates = ((($this1)) + 512|0);
 $0 = $_mouseKey$addr;
 $arrayidx = (($m_mouseKeyStates) + ($0<<2)|0);
 HEAP32[$arrayidx>>2] = 4;
 STACKTOP = sp;return;
}
function __ZN2lm5Input4initEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $arrayidx = 0, $arrayidx6 = 0, $call = 0, $call10 = 0, $cmp = 0, $cmp4 = 0, $i = 0, $i2 = 0, $inc = 0, $inc8 = 0, $m_appEventCallback = 0, $m_mouseKeyStates = 0, $m_mouseX = 0, $m_mouseY = 0;
 var $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(128);
  if (!($cmp)) {
   break;
  }
  $1 = $i;
  $arrayidx = (($this1) + ($1<<2)|0);
  HEAP32[$arrayidx>>2] = 0;
  $2 = $i;
  $inc = (($2) + 1)|0;
  $i = $inc;
 }
 $i2 = 0;
 while(1) {
  $3 = $i2;
  $cmp4 = ($3|0)<(3);
  if (!($cmp4)) {
   break;
  }
  $m_mouseKeyStates = ((($this1)) + 512|0);
  $4 = $i2;
  $arrayidx6 = (($m_mouseKeyStates) + ($4<<2)|0);
  HEAP32[$arrayidx6>>2] = 0;
  $5 = $i2;
  $inc8 = (($5) + 1)|0;
  $i2 = $inc8;
 }
 $m_mouseX = ((($this1)) + 524|0);
 HEAP32[$m_mouseX>>2] = 0;
 $m_mouseY = ((($this1)) + 528|0);
 HEAP32[$m_mouseY>>2] = 0;
 $call = (__ZN2lm3App11GetInstanceEv()|0);
 $call10 = (__ZN2lm3App8getEventEv($call)|0);
 $m_appEventCallback = ((($this1)) + 532|0);
 __ZN2lm5EventIJRKNS_8AppEventEEE3addEPNS_17CallbackContainerIJS3_EEE($call10,$m_appEventCallback);
 STACKTOP = sp;return;
}
function __ZN2lm3App8getEventEv($this) {
 $this = $this|0;
 var $m_event = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $m_event = ((($this1)) + 576|0);
 STACKTOP = sp;return ($m_event|0);
}
function __ZN2lm5EventIJRKNS_8AppEventEEE3addEPNS_17CallbackContainerIJS3_EEE($this,$_callback) {
 $this = $this|0;
 $_callback = $_callback|0;
 var $$addr$i$i = 0, $$addr1$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__a$addr$i$i = 0, $__a$addr$i$i$i = 0, $__annotator$i = 0, $__args$addr$i$i = 0, $__args$addr$i$i$i = 0, $__args$addr$i$i$i$i = 0, $__end_$i = 0, $__end_3$i = 0, $__end_5$i = 0, $__end_cap_$i$i = 0, $__end_cap_$i16$i = 0, $__p$addr$i$i = 0, $__p$addr$i$i$i = 0, $__p$addr$i$i$i$i = 0, $__p$addr$i11$i = 0, $__t$addr$i$i$i = 0, $__t$addr$i$i$i$i = 0, $__t$addr$i$i$i$i$i = 0, $__x$addr$i = 0;
 var $_callback$addr = 0, $agg$tmp$i$i = 0, $agg$tmp1$i$i = 0, $cmp$i = 0, $incdec$ptr$i = 0, $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i12$i = 0, $this$addr$i$i$i9$i = 0, $this$addr$i$i13$i = 0, $this$addr$i14$i = 0, $this$addr$i6$i = 0, $this$addr$i7$i = 0, $this1 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0;
 var $this1$i$i$i$i = 0, $this1$i$i$i18$i = 0, $this1$i$i17$i = 0, $this1$i15$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $agg$tmp1$i$i = sp;
 $agg$tmp$i$i = sp + 113|0;
 $__annotator$i = sp + 112|0;
 $_callback$addr = sp + 4|0;
 $this$addr = $this;
 HEAP32[$_callback$addr>>2] = $_callback;
 $this1 = $this$addr;
 $this$addr$i = $this1;
 $__x$addr$i = $_callback$addr;
 $this1$i = $this$addr$i;
 $__end_$i = ((($this1$i)) + 4|0);
 $0 = HEAP32[$__end_$i>>2]|0;
 $this$addr$i$i = $this1$i;
 $this1$i$i = $this$addr$i$i;
 $__end_cap_$i$i = ((($this1$i$i)) + 8|0);
 $this$addr$i$i$i = $__end_cap_$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 $this$addr$i$i$i$i = $this1$i$i$i;
 $this1$i$i$i$i = $this$addr$i$i$i$i;
 $1 = HEAP32[$this1$i$i$i$i>>2]|0;
 $cmp$i = ($0|0)!=($1|0);
 if ($cmp$i) {
  $this$addr$i6$i = $__annotator$i;
  $$addr$i$i = $this1$i;
  $$addr1$i$i = 1;
  $this$addr$i14$i = $this1$i;
  $this1$i15$i = $this$addr$i14$i;
  $__end_cap_$i16$i = ((($this1$i15$i)) + 8|0);
  $this$addr$i$i13$i = $__end_cap_$i16$i;
  $this1$i$i17$i = $this$addr$i$i13$i;
  $this$addr$i$i$i12$i = $this1$i$i17$i;
  $this1$i$i$i18$i = $this$addr$i$i$i12$i;
  $__end_3$i = ((($this1$i)) + 4|0);
  $2 = HEAP32[$__end_3$i>>2]|0;
  $__p$addr$i11$i = $2;
  $3 = $__p$addr$i11$i;
  $4 = $__x$addr$i;
  $__a$addr$i$i = $this1$i$i$i18$i;
  $__p$addr$i$i = $3;
  $__args$addr$i$i = $4;
  $5 = $__a$addr$i$i;
  $6 = $__p$addr$i$i;
  $7 = $__args$addr$i$i;
  $__t$addr$i$i$i = $7;
  $8 = $__t$addr$i$i$i;
  ;HEAP8[$agg$tmp1$i$i>>0]=HEAP8[$agg$tmp$i$i>>0]|0;
  $__a$addr$i$i$i = $5;
  $__p$addr$i$i$i = $6;
  $__args$addr$i$i$i = $8;
  $9 = $__a$addr$i$i$i;
  $10 = $__p$addr$i$i$i;
  $11 = $__args$addr$i$i$i;
  $__t$addr$i$i$i$i = $11;
  $12 = $__t$addr$i$i$i$i;
  $this$addr$i$i$i9$i = $9;
  $__p$addr$i$i$i$i = $10;
  $__args$addr$i$i$i$i = $12;
  $13 = $__p$addr$i$i$i$i;
  $14 = $__args$addr$i$i$i$i;
  $__t$addr$i$i$i$i$i = $14;
  $15 = $__t$addr$i$i$i$i$i;
  $16 = HEAP32[$15>>2]|0;
  HEAP32[$13>>2] = $16;
  $this$addr$i7$i = $__annotator$i;
  $__end_5$i = ((($this1$i)) + 4|0);
  $17 = HEAP32[$__end_5$i>>2]|0;
  $incdec$ptr$i = ((($17)) + 4|0);
  HEAP32[$__end_5$i>>2] = $incdec$ptr$i;
  STACKTOP = sp;return;
 } else {
  $18 = $__x$addr$i;
  __ZNSt3__26vectorIPN2lm17CallbackContainerIJRKNS1_8AppEventEEEENS_9allocatorIS7_EEE21__push_back_slow_pathIRKS7_EEvOT_($this1$i,$18);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__26vectorIPN2lm17CallbackContainerIJRKNS1_8AppEventEEEENS_9allocatorIS7_EEE21__push_back_slow_pathIRKS7_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__a$addr$i = 0, $__a$addr$i$i = 0, $__a$addr$i$i$i = 0, $__a$addr$i$i27 = 0, $__args$addr$i = 0, $__args$addr$i$i = 0, $__args$addr$i$i$i = 0, $__b$addr$i$i = 0, $__b$addr$i$i$i = 0, $__cap$i = 0, $__end_ = 0, $__end_$i = 0, $__end_$i20 = 0, $__end_7 = 0, $__end_cap_$i = 0, $__end_cap_$i$i$i$i = 0;
 var $__ms$i = 0, $__new_size$addr$i = 0, $__p$addr$i = 0, $__p$addr$i$i = 0, $__p$addr$i$i$i = 0, $__p$addr$i28 = 0, $__t$addr$i = 0, $__t$addr$i$i = 0, $__t$addr$i$i$i = 0, $__t$addr$i$i$i$i = 0, $__v = 0, $__x$addr = 0, $__x$addr$i$i$i$i = 0, $__y$addr$i$i$i$i = 0, $add = 0, $agg$tmp$i = 0, $agg$tmp$i$i = 0, $agg$tmp1$i = 0, $agg$tmp1$i$i = 0, $call$i = 0;
 var $cmp$i = 0, $cmp$i$i$i$i = 0, $cmp3$i = 0, $cond$lvalue$i$i$i2D = 0, $div$i = 0, $incdec$ptr = 0, $mul$i = 0, $ref$tmp$i = 0, $retval$i = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i$i$i = 0, $sub$ptr$div$i25 = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$lhs$cast$i$i$i = 0, $sub$ptr$lhs$cast$i22 = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$rhs$cast$i$i$i = 0, $sub$ptr$rhs$cast$i23 = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i$i = 0;
 var $sub$ptr$sub$i24 = 0, $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i$i$i = 0, $this$addr$i$i$i$i$i$i = 0, $this$addr$i$i$i12 = 0, $this$addr$i$i$i26 = 0, $this$addr$i$i$i7$i = 0, $this$addr$i$i13 = 0, $this$addr$i10 = 0, $this$addr$i14 = 0, $this$addr$i18 = 0, $this1 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i$i = 0;
 var $this1$i$i$i$i$i = 0, $this1$i$i$i$i$i$i = 0, $this1$i$i$i17 = 0, $this1$i$i16 = 0, $this1$i11 = 0, $this1$i15 = 0, $this1$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $agg$tmp1$i = sp + 8|0;
 $agg$tmp$i = sp + 193|0;
 $agg$tmp1$i$i = sp;
 $agg$tmp$i$i = sp + 192|0;
 $__new_size$addr$i = sp + 72|0;
 $ref$tmp$i = sp + 60|0;
 $__v = sp + 12|0;
 $this$addr = $this;
 $__x$addr = $__x;
 $this1 = $this$addr;
 $this$addr$i = $this1;
 $this1$i = $this$addr$i;
 $__end_cap_$i = ((($this1$i)) + 8|0);
 $this$addr$i$i = $__end_cap_$i;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 $__a = $this1$i$i$i;
 $this$addr$i10 = $this1;
 $this1$i11 = $this$addr$i10;
 $__end_$i = ((($this1$i11)) + 4|0);
 $0 = HEAP32[$__end_$i>>2]|0;
 $1 = HEAP32[$this1$i11>>2]|0;
 $sub$ptr$lhs$cast$i = $0;
 $sub$ptr$rhs$cast$i = $1;
 $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
 $sub$ptr$div$i = (($sub$ptr$sub$i|0) / 4)&-1;
 $add = (($sub$ptr$div$i) + 1)|0;
 $this$addr$i14 = $this1;
 HEAP32[$__new_size$addr$i>>2] = $add;
 $this1$i15 = $this$addr$i14;
 $call$i = (__ZNKSt3__26vectorIPN2lm17CallbackContainerIJRKNS1_8AppEventEEEENS_9allocatorIS7_EEE8max_sizeEv($this1$i15)|0);
 $__ms$i = $call$i;
 $2 = HEAP32[$__new_size$addr$i>>2]|0;
 $3 = $__ms$i;
 $cmp$i = ($2>>>0)>($3>>>0);
 if ($cmp$i) {
  __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this1$i15);
  // unreachable;
 }
 $this$addr$i$i13 = $this1$i15;
 $this1$i$i16 = $this$addr$i$i13;
 $this$addr$i$i$i12 = $this1$i$i16;
 $this1$i$i$i17 = $this$addr$i$i$i12;
 $this$addr$i$i$i$i = $this1$i$i$i17;
 $this1$i$i$i$i = $this$addr$i$i$i$i;
 $__end_cap_$i$i$i$i = ((($this1$i$i$i$i)) + 8|0);
 $this$addr$i$i$i$i$i = $__end_cap_$i$i$i$i;
 $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
 $this$addr$i$i$i$i$i$i = $this1$i$i$i$i$i;
 $this1$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i;
 $4 = HEAP32[$this1$i$i$i$i$i$i>>2]|0;
 $5 = HEAP32[$this1$i$i$i17>>2]|0;
 $sub$ptr$lhs$cast$i$i$i = $4;
 $sub$ptr$rhs$cast$i$i$i = $5;
 $sub$ptr$sub$i$i$i = (($sub$ptr$lhs$cast$i$i$i) - ($sub$ptr$rhs$cast$i$i$i))|0;
 $sub$ptr$div$i$i$i = (($sub$ptr$sub$i$i$i|0) / 4)&-1;
 $__cap$i = $sub$ptr$div$i$i$i;
 $6 = $__cap$i;
 $7 = $__ms$i;
 $div$i = (($7>>>0) / 2)&-1;
 $cmp3$i = ($6>>>0)>=($div$i>>>0);
 if ($cmp3$i) {
  $8 = $__ms$i;
  $retval$i = $8;
 } else {
  $9 = $__cap$i;
  $mul$i = $9<<1;
  HEAP32[$ref$tmp$i>>2] = $mul$i;
  $__a$addr$i$i = $ref$tmp$i;
  $__b$addr$i$i = $__new_size$addr$i;
  $10 = $__a$addr$i$i;
  $11 = $__b$addr$i$i;
  ;HEAP8[$agg$tmp1$i$i>>0]=HEAP8[$agg$tmp$i$i>>0]|0;
  $__a$addr$i$i$i = $10;
  $__b$addr$i$i$i = $11;
  $12 = $__a$addr$i$i$i;
  $13 = $__b$addr$i$i$i;
  $this$addr$i$i$i7$i = $agg$tmp1$i$i;
  $__x$addr$i$i$i$i = $12;
  $__y$addr$i$i$i$i = $13;
  $14 = $__x$addr$i$i$i$i;
  $15 = HEAP32[$14>>2]|0;
  $16 = $__y$addr$i$i$i$i;
  $17 = HEAP32[$16>>2]|0;
  $cmp$i$i$i$i = ($15>>>0)<($17>>>0);
  $18 = $__b$addr$i$i$i;
  $19 = $__a$addr$i$i$i;
  $cond$lvalue$i$i$i2D = $cmp$i$i$i$i ? $18 : $19;
  $20 = HEAP32[$cond$lvalue$i$i$i2D>>2]|0;
  $retval$i = $20;
 }
 $21 = $retval$i;
 $this$addr$i18 = $this1;
 $this1$i19 = $this$addr$i18;
 $__end_$i20 = ((($this1$i19)) + 4|0);
 $22 = HEAP32[$__end_$i20>>2]|0;
 $23 = HEAP32[$this1$i19>>2]|0;
 $sub$ptr$lhs$cast$i22 = $22;
 $sub$ptr$rhs$cast$i23 = $23;
 $sub$ptr$sub$i24 = (($sub$ptr$lhs$cast$i22) - ($sub$ptr$rhs$cast$i23))|0;
 $sub$ptr$div$i25 = (($sub$ptr$sub$i24|0) / 4)&-1;
 $24 = $__a;
 __ZNSt3__214__split_bufferIPN2lm17CallbackContainerIJRKNS1_8AppEventEEEERNS_9allocatorIS7_EEEC2EmmSA_($__v,$21,$sub$ptr$div$i25,$24);
 $25 = $__a;
 $__end_ = ((($__v)) + 8|0);
 $26 = HEAP32[$__end_>>2]|0;
 $__p$addr$i = $26;
 $27 = $__p$addr$i;
 $28 = $__x$addr;
 $__t$addr$i = $28;
 $29 = $__t$addr$i;
 $__a$addr$i = $25;
 $__p$addr$i28 = $27;
 $__args$addr$i = $29;
 $30 = $__a$addr$i;
 $31 = $__p$addr$i28;
 $32 = $__args$addr$i;
 $__t$addr$i$i = $32;
 $33 = $__t$addr$i$i;
 ;HEAP8[$agg$tmp1$i>>0]=HEAP8[$agg$tmp$i>>0]|0;
 $__a$addr$i$i27 = $30;
 $__p$addr$i$i = $31;
 $__args$addr$i$i = $33;
 $34 = $__a$addr$i$i27;
 $35 = $__p$addr$i$i;
 $36 = $__args$addr$i$i;
 $__t$addr$i$i$i = $36;
 $37 = $__t$addr$i$i$i;
 $this$addr$i$i$i26 = $34;
 $__p$addr$i$i$i = $35;
 $__args$addr$i$i$i = $37;
 $38 = $__p$addr$i$i$i;
 $39 = $__args$addr$i$i$i;
 $__t$addr$i$i$i$i = $39;
 $40 = $__t$addr$i$i$i$i;
 $41 = HEAP32[$40>>2]|0;
 HEAP32[$38>>2] = $41;
 $__end_7 = ((($__v)) + 8|0);
 $42 = HEAP32[$__end_7>>2]|0;
 $incdec$ptr = ((($42)) + 4|0);
 HEAP32[$__end_7>>2] = $incdec$ptr;
 __ZNSt3__26vectorIPN2lm17CallbackContainerIJRKNS1_8AppEventEEEENS_9allocatorIS7_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS7_RS9_EE($this1,$__v);
 __ZNSt3__214__split_bufferIPN2lm17CallbackContainerIJRKNS1_8AppEventEEEERNS_9allocatorIS7_EEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__26vectorIPN2lm17CallbackContainerIJRKNS1_8AppEventEEEENS_9allocatorIS7_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$addr$i = 0, $__a$addr$i$i = 0, $__a$addr$i$i9 = 0, $__a$addr$i11 = 0, $__b$addr$i = 0, $__b$addr$i$i = 0, $__end_cap_$i = 0;
 var $__x$addr$i$i$i = 0, $__y$addr$i$i$i = 0, $agg$tmp$i = 0, $agg$tmp$i12 = 0, $agg$tmp1$i = 0, $agg$tmp1$i10 = 0, $cmp$i$i$i = 0, $cond$lvalue$i$i2D = 0, $ref$tmp = 0, $ref$tmp3 = 0, $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i6 = 0, $this$addr$i$i$i8 = 0, $this1 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $agg$tmp1$i10 = sp + 8|0;
 $agg$tmp$i12 = sp + 77|0;
 $agg$tmp1$i = sp;
 $agg$tmp$i = sp + 76|0;
 $ref$tmp = sp + 16|0;
 $ref$tmp3 = sp + 12|0;
 $this$addr = $this;
 $this1 = $this$addr;
 $this$addr$i = $this1;
 $this1$i = $this$addr$i;
 $__end_cap_$i = ((($this1$i)) + 8|0);
 $this$addr$i$i = $__end_cap_$i;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 $__a$addr$i = $this1$i$i$i;
 $0 = $__a$addr$i;
 ;HEAP8[$agg$tmp1$i>>0]=HEAP8[$agg$tmp$i>>0]|0;
 $__a$addr$i$i = $0;
 $1 = $__a$addr$i$i;
 $this$addr$i$i$i6 = $1;
 HEAP32[$ref$tmp>>2] = 1073741823;
 HEAP32[$ref$tmp3>>2] = 2147483647;
 $__a$addr$i11 = $ref$tmp;
 $__b$addr$i = $ref$tmp3;
 $2 = $__a$addr$i11;
 $3 = $__b$addr$i;
 ;HEAP8[$agg$tmp1$i10>>0]=HEAP8[$agg$tmp$i12>>0]|0;
 $__a$addr$i$i9 = $2;
 $__b$addr$i$i = $3;
 $4 = $__b$addr$i$i;
 $5 = $__a$addr$i$i9;
 $this$addr$i$i$i8 = $agg$tmp1$i10;
 $__x$addr$i$i$i = $4;
 $__y$addr$i$i$i = $5;
 $6 = $__x$addr$i$i$i;
 $7 = HEAP32[$6>>2]|0;
 $8 = $__y$addr$i$i$i;
 $9 = HEAP32[$8>>2]|0;
 $cmp$i$i$i = ($7>>>0)<($9>>>0);
 $10 = $__b$addr$i$i;
 $11 = $__a$addr$i$i9;
 $cond$lvalue$i$i2D = $cmp$i$i$i ? $10 : $11;
 $12 = HEAP32[$cond$lvalue$i$i2D>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function __ZNSt3__214__split_bufferIPN2lm17CallbackContainerIJRKNS1_8AppEventEEEERNS_9allocatorIS7_EEEC2EmmSA_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $$addr$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$addr = 0, $__a$addr$i = 0, $__align$addr$i$i$i = 0, $__begin_ = 0, $__cap$addr = 0, $__end_ = 0, $__end_cap_ = 0, $__end_cap_$i = 0, $__end_cap_$i19 = 0, $__msg$addr$i$i$i = 0, $__n$addr$i = 0, $__n$addr$i$i = 0, $__s$addr$i$i$i$i = 0, $__size$addr$i$i$i = 0, $__start$addr = 0, $__t$addr$i$i = 0;
 var $__t$addr$i$i$i = 0, $__t$addr$i$i4$i = 0, $__t$addr$i3$i = 0, $__t1$addr$i = 0, $__t2$addr$i = 0, $__u$addr$i$i = 0, $__u$addr$i6$i = 0, $add$ptr = 0, $add$ptr$i$i = 0, $add$ptr5 = 0, $call$i$i$i = 0, $cmp = 0, $cmp$i$i = 0, $cond = 0, $exception$i$i$i = 0, $mul$i$i = 0, $ref$tmp = 0, $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0;
 var $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i11 = 0, $this$addr$i$i$i15 = 0, $this$addr$i$i12 = 0, $this$addr$i$i16 = 0, $this$addr$i$i7 = 0, $this$addr$i17 = 0, $this$addr$i5$i = 0, $this$addr$i8 = 0, $this1 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i$i = 0, $this1$i$i$i21 = 0, $this1$i$i10 = 0, $this1$i$i13 = 0, $this1$i$i20 = 0, $this1$i18 = 0;
 var $this1$i7$i = 0, $this1$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $ref$tmp = sp;
 $this$addr = $this;
 $__cap$addr = $__cap;
 $__start$addr = $__start;
 $__a$addr = $__a;
 $this1 = $this$addr;
 $__end_cap_ = ((($this1)) + 12|0);
 HEAP32[$ref$tmp>>2] = 0;
 $0 = $__a$addr;
 $this$addr$i = $__end_cap_;
 $__t1$addr$i = $ref$tmp;
 $__t2$addr$i = $0;
 $this1$i = $this$addr$i;
 $1 = $__t1$addr$i;
 $__t$addr$i$i = $1;
 $2 = $__t$addr$i$i;
 $this$addr$i5$i = $this1$i;
 $__u$addr$i6$i = $2;
 $this1$i7$i = $this$addr$i5$i;
 $3 = $__u$addr$i6$i;
 $__t$addr$i$i4$i = $3;
 HEAP32[$this1$i7$i>>2] = 0;
 $4 = ((($this1$i)) + 4|0);
 $5 = $__t2$addr$i;
 $__t$addr$i3$i = $5;
 $6 = $__t$addr$i3$i;
 $this$addr$i$i = $4;
 $__u$addr$i$i = $6;
 $this1$i$i = $this$addr$i$i;
 $7 = $__u$addr$i$i;
 $__t$addr$i$i$i = $7;
 $8 = $__t$addr$i$i$i;
 HEAP32[$this1$i$i>>2] = $8;
 $9 = $__cap$addr;
 $cmp = ($9|0)!=(0);
 do {
  if ($cmp) {
   $this$addr$i17 = $this1;
   $this1$i18 = $this$addr$i17;
   $__end_cap_$i19 = ((($this1$i18)) + 12|0);
   $this$addr$i$i16 = $__end_cap_$i19;
   $this1$i$i20 = $this$addr$i$i16;
   $add$ptr$i$i = ((($this1$i$i20)) + 4|0);
   $this$addr$i$i$i15 = $add$ptr$i$i;
   $this1$i$i$i21 = $this$addr$i$i$i15;
   $10 = HEAP32[$this1$i$i$i21>>2]|0;
   $11 = $__cap$addr;
   $__a$addr$i = $10;
   $__n$addr$i = $11;
   $12 = $__a$addr$i;
   $13 = $__n$addr$i;
   $this$addr$i$i12 = $12;
   $__n$addr$i$i = $13;
   $$addr$i$i = 0;
   $this1$i$i13 = $this$addr$i$i12;
   $14 = $__n$addr$i$i;
   $this$addr$i$i$i11 = $this1$i$i13;
   $cmp$i$i = ($14>>>0)>(1073741823);
   if ($cmp$i$i) {
    $__msg$addr$i$i$i = 7431;
    $exception$i$i$i = (___cxa_allocate_exception(8)|0);
    $15 = $__msg$addr$i$i$i;
    $this$addr$i$i$i$i = $exception$i$i$i;
    $__s$addr$i$i$i$i = $15;
    $this1$i$i$i$i = $this$addr$i$i$i$i;
    $16 = $__s$addr$i$i$i$i;
    __ZNSt11logic_errorC2EPKc($this1$i$i$i$i,$16);
    HEAP32[$this1$i$i$i$i>>2] = (7136);
    ___cxa_throw(($exception$i$i$i|0),(3432|0),(219|0));
    // unreachable;
   } else {
    $17 = $__n$addr$i$i;
    $mul$i$i = $17<<2;
    $__size$addr$i$i$i = $mul$i$i;
    $__align$addr$i$i$i = 4;
    $18 = $__size$addr$i$i$i;
    $call$i$i$i = (__Znwm($18)|0);
    $cond = $call$i$i$i;
    break;
   }
  } else {
   $cond = 0;
  }
 } while(0);
 HEAP32[$this1>>2] = $cond;
 $19 = HEAP32[$this1>>2]|0;
 $20 = $__start$addr;
 $add$ptr = (($19) + ($20<<2)|0);
 $__end_ = ((($this1)) + 8|0);
 HEAP32[$__end_>>2] = $add$ptr;
 $__begin_ = ((($this1)) + 4|0);
 HEAP32[$__begin_>>2] = $add$ptr;
 $21 = HEAP32[$this1>>2]|0;
 $22 = $__cap$addr;
 $add$ptr5 = (($21) + ($22<<2)|0);
 $this$addr$i8 = $this1;
 $this1$i9 = $this$addr$i8;
 $__end_cap_$i = ((($this1$i9)) + 12|0);
 $this$addr$i$i7 = $__end_cap_$i;
 $this1$i$i10 = $this$addr$i$i7;
 $this$addr$i$i$i = $this1$i$i10;
 $this1$i$i$i = $this$addr$i$i$i;
 HEAP32[$this1$i$i$i>>2] = $add$ptr5;
 STACKTOP = sp;return;
}
function __ZNSt3__26vectorIPN2lm17CallbackContainerIJRKNS1_8AppEventEEEENS_9allocatorIS7_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS7_RS9_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $$addr$i = 0, $$addr$i$i = 0, $$addr$i$i20 = 0, $$addr1$i$i = 0, $$addr1$i$i21 = 0, $$addr2$i$i = 0, $$addr2$i$i22 = 0, $$addr3$i$i = 0, $$addr3$i$i23 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $_Np$i = 0, $__begin1$addr$i = 0, $__begin_2 = 0, $__begin_4 = 0, $__begin_9 = 0, $__current_size$addr$i = 0, $__end1$addr$i = 0, $__end2$addr$i = 0, $__end_ = 0, $__end_$i = 0, $__end_$i$i = 0, $__end_5 = 0, $__end_6 = 0;
 var $__end_cap_$i = 0, $__end_cap_$i$i$i$i = 0, $__end_cap_$i$i$i$i36 = 0, $__end_cap_$i$i$i28$i = 0, $__end_cap_$i$i$i32$i = 0, $__end_cap_$i60 = 0, $__end_cap_$i85 = 0, $__p$addr$i$i$i = 0, $__p$addr$i$i$i24 = 0, $__p$addr$i$i10$i = 0, $__p$addr$i$i13$i = 0, $__p$addr$i$i16$i = 0, $__p$addr$i$i20$i = 0, $__p$addr$i$i37$i = 0, $__p$addr$i$i41$i = 0, $__t$addr$i$i = 0, $__t$addr$i$i66 = 0, $__t$addr$i$i72 = 0, $__t$addr$i3$i = 0, $__t$addr$i3$i65 = 0;
 var $__t$addr$i3$i71 = 0, $__t$addr$i4$i = 0, $__t$addr$i4$i64 = 0, $__t$addr$i4$i70 = 0, $__t$i = 0, $__t$i69 = 0, $__t$i75 = 0, $__v$addr = 0, $__x$addr$i = 0, $__x$addr$i67 = 0, $__x$addr$i73 = 0, $__y$addr$i = 0, $__y$addr$i68 = 0, $__y$addr$i74 = 0, $add$ptr$i = 0, $add$ptr$i30 = 0, $add$ptr$i80 = 0, $add$ptr6$i = 0, $add$ptr6$i45 = 0, $add$ptr8$i = 0;
 var $add$ptr9$i = 0, $cmp$i = 0, $idx$neg$i = 0, $mul$i = 0, $sub$ptr$div$i = 0, $sub$ptr$div$i$i = 0, $sub$ptr$div$i$i$i = 0, $sub$ptr$div$i$i$i44 = 0, $sub$ptr$div$i$i36$i = 0, $sub$ptr$div$i$i40$i = 0, $sub$ptr$div$i79 = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$lhs$cast$i$i$i = 0, $sub$ptr$lhs$cast$i$i$i41 = 0, $sub$ptr$lhs$cast$i$i33$i = 0, $sub$ptr$lhs$cast$i$i37$i = 0, $sub$ptr$lhs$cast$i76 = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$rhs$cast$i$i = 0;
 var $sub$ptr$rhs$cast$i$i$i = 0, $sub$ptr$rhs$cast$i$i$i42 = 0, $sub$ptr$rhs$cast$i$i34$i = 0, $sub$ptr$rhs$cast$i$i38$i = 0, $sub$ptr$rhs$cast$i77 = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i = 0, $sub$ptr$sub$i$i$i = 0, $sub$ptr$sub$i$i$i43 = 0, $sub$ptr$sub$i$i35$i = 0, $sub$ptr$sub$i$i39$i = 0, $sub$ptr$sub$i78 = 0, $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i$i$i = 0, $this$addr$i$i$i$i$i$i = 0, $this$addr$i$i$i$i$i$i14 = 0;
 var $this$addr$i$i$i$i$i15 = 0, $this$addr$i$i$i$i$i20$i = 0, $this$addr$i$i$i$i$i24$i = 0, $this$addr$i$i$i$i16 = 0, $this$addr$i$i$i$i21$i = 0, $this$addr$i$i$i$i25$i = 0, $this$addr$i$i$i17 = 0, $this$addr$i$i$i22$i = 0, $this$addr$i$i$i26$i = 0, $this$addr$i$i$i50 = 0, $this$addr$i$i$i56 = 0, $this$addr$i$i$i81 = 0, $this$addr$i$i23$i = 0, $this$addr$i$i25 = 0, $this$addr$i$i27$i = 0, $this$addr$i$i51 = 0, $this$addr$i$i57 = 0, $this$addr$i$i82 = 0, $this$addr$i10$i = 0, $this$addr$i11 = 0;
 var $this$addr$i11$i = 0, $this$addr$i11$i19 = 0, $this$addr$i14$i = 0, $this$addr$i14$i18 = 0, $this$addr$i17$i = 0, $this$addr$i17$i13 = 0, $this$addr$i21$i = 0, $this$addr$i24$i = 0, $this$addr$i26 = 0, $this$addr$i28$i = 0, $this$addr$i38$i = 0, $this$addr$i42$i = 0, $this$addr$i48 = 0, $this$addr$i52 = 0, $this$addr$i58 = 0, $this$addr$i83 = 0, $this$addr$i9$i = 0, $this1 = 0, $this1$i = 0, $this1$i$i = 0;
 var $this1$i$i$i = 0, $this1$i$i$i$i = 0, $this1$i$i$i$i$i = 0, $this1$i$i$i$i$i$i = 0, $this1$i$i$i$i$i$i38 = 0, $this1$i$i$i$i$i30$i = 0, $this1$i$i$i$i$i34$i = 0, $this1$i$i$i$i$i37 = 0, $this1$i$i$i$i29$i = 0, $this1$i$i$i$i33$i = 0, $this1$i$i$i$i35 = 0, $this1$i$i$i27$i = 0, $this1$i$i$i31$i = 0, $this1$i$i$i34 = 0, $this1$i$i$i55 = 0, $this1$i$i$i62 = 0, $this1$i$i$i87 = 0, $this1$i$i26$i = 0, $this1$i$i28 = 0, $this1$i$i30$i = 0;
 var $this1$i$i54 = 0, $this1$i$i61 = 0, $this1$i$i86 = 0, $this1$i12$i = 0, $this1$i12$i46 = 0, $this1$i15$i = 0, $this1$i15$i33 = 0, $this1$i18$i = 0, $this1$i18$i31 = 0, $this1$i22$i = 0, $this1$i25$i = 0, $this1$i27 = 0, $this1$i29$i = 0, $this1$i39$i = 0, $this1$i43$i = 0, $this1$i49 = 0, $this1$i53 = 0, $this1$i59 = 0, $this1$i84 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $__t$i75 = sp + 288|0;
 $__t$i69 = sp + 264|0;
 $__t$i = sp + 216|0;
 $this$addr = $this;
 $__v$addr = $__v;
 $this1 = $this$addr;
 $this$addr$i = $this1;
 $this1$i = $this$addr$i;
 $this$addr$i$i = $this1$i;
 $this1$i$i = $this$addr$i$i;
 $0 = HEAP32[$this1$i$i>>2]|0;
 $__p$addr$i$i$i = $0;
 $1 = $__p$addr$i$i$i;
 $this$addr$i42$i = $this1$i;
 $this1$i43$i = $this$addr$i42$i;
 $2 = HEAP32[$this1$i43$i>>2]|0;
 $__p$addr$i$i41$i = $2;
 $3 = $__p$addr$i$i41$i;
 $this$addr$i28$i = $this1$i;
 $this1$i29$i = $this$addr$i28$i;
 $this$addr$i$i27$i = $this1$i29$i;
 $this1$i$i30$i = $this$addr$i$i27$i;
 $this$addr$i$i$i26$i = $this1$i$i30$i;
 $this1$i$i$i31$i = $this$addr$i$i$i26$i;
 $__end_cap_$i$i$i32$i = ((($this1$i$i$i31$i)) + 8|0);
 $this$addr$i$i$i$i25$i = $__end_cap_$i$i$i32$i;
 $this1$i$i$i$i33$i = $this$addr$i$i$i$i25$i;
 $this$addr$i$i$i$i$i24$i = $this1$i$i$i$i33$i;
 $this1$i$i$i$i$i34$i = $this$addr$i$i$i$i$i24$i;
 $4 = HEAP32[$this1$i$i$i$i$i34$i>>2]|0;
 $5 = HEAP32[$this1$i$i30$i>>2]|0;
 $sub$ptr$lhs$cast$i$i37$i = $4;
 $sub$ptr$rhs$cast$i$i38$i = $5;
 $sub$ptr$sub$i$i39$i = (($sub$ptr$lhs$cast$i$i37$i) - ($sub$ptr$rhs$cast$i$i38$i))|0;
 $sub$ptr$div$i$i40$i = (($sub$ptr$sub$i$i39$i|0) / 4)&-1;
 $add$ptr$i = (($3) + ($sub$ptr$div$i$i40$i<<2)|0);
 $this$addr$i21$i = $this1$i;
 $this1$i22$i = $this$addr$i21$i;
 $6 = HEAP32[$this1$i22$i>>2]|0;
 $__p$addr$i$i20$i = $6;
 $7 = $__p$addr$i$i20$i;
 $this$addr$i17$i = $this1$i;
 $this1$i18$i = $this$addr$i17$i;
 $__end_$i$i = ((($this1$i18$i)) + 4|0);
 $8 = HEAP32[$__end_$i$i>>2]|0;
 $9 = HEAP32[$this1$i18$i>>2]|0;
 $sub$ptr$lhs$cast$i$i = $8;
 $sub$ptr$rhs$cast$i$i = $9;
 $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
 $sub$ptr$div$i$i = (($sub$ptr$sub$i$i|0) / 4)&-1;
 $add$ptr6$i = (($7) + ($sub$ptr$div$i$i<<2)|0);
 $this$addr$i14$i = $this1$i;
 $this1$i15$i = $this$addr$i14$i;
 $10 = HEAP32[$this1$i15$i>>2]|0;
 $__p$addr$i$i13$i = $10;
 $11 = $__p$addr$i$i13$i;
 $this$addr$i11$i = $this1$i;
 $this1$i12$i = $this$addr$i11$i;
 $this$addr$i$i$i = $this1$i12$i;
 $this1$i$i$i = $this$addr$i$i$i;
 $this$addr$i$i$i$i = $this1$i$i$i;
 $this1$i$i$i$i = $this$addr$i$i$i$i;
 $__end_cap_$i$i$i$i = ((($this1$i$i$i$i)) + 8|0);
 $this$addr$i$i$i$i$i = $__end_cap_$i$i$i$i;
 $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
 $this$addr$i$i$i$i$i$i = $this1$i$i$i$i$i;
 $this1$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i;
 $12 = HEAP32[$this1$i$i$i$i$i$i>>2]|0;
 $13 = HEAP32[$this1$i$i$i>>2]|0;
 $sub$ptr$lhs$cast$i$i$i = $12;
 $sub$ptr$rhs$cast$i$i$i = $13;
 $sub$ptr$sub$i$i$i = (($sub$ptr$lhs$cast$i$i$i) - ($sub$ptr$rhs$cast$i$i$i))|0;
 $sub$ptr$div$i$i$i = (($sub$ptr$sub$i$i$i|0) / 4)&-1;
 $add$ptr9$i = (($11) + ($sub$ptr$div$i$i$i<<2)|0);
 $this$addr$i10$i = $this1$i;
 $$addr$i$i = $1;
 $$addr1$i$i = $add$ptr$i;
 $$addr2$i$i = $add$ptr6$i;
 $$addr3$i$i = $add$ptr9$i;
 $this$addr$i83 = $this1;
 $this1$i84 = $this$addr$i83;
 $__end_cap_$i85 = ((($this1$i84)) + 8|0);
 $this$addr$i$i82 = $__end_cap_$i85;
 $this1$i$i86 = $this$addr$i$i82;
 $this$addr$i$i$i81 = $this1$i$i86;
 $this1$i$i$i87 = $this$addr$i$i$i81;
 $14 = HEAP32[$this1>>2]|0;
 $__end_ = ((($this1)) + 4|0);
 $15 = HEAP32[$__end_>>2]|0;
 $16 = $__v$addr;
 $__begin_2 = ((($16)) + 4|0);
 $$addr$i = $this1$i$i$i87;
 $__begin1$addr$i = $14;
 $__end1$addr$i = $15;
 $__end2$addr$i = $__begin_2;
 $17 = $__end1$addr$i;
 $18 = $__begin1$addr$i;
 $sub$ptr$lhs$cast$i76 = $17;
 $sub$ptr$rhs$cast$i77 = $18;
 $sub$ptr$sub$i78 = (($sub$ptr$lhs$cast$i76) - ($sub$ptr$rhs$cast$i77))|0;
 $sub$ptr$div$i79 = (($sub$ptr$sub$i78|0) / 4)&-1;
 $_Np$i = $sub$ptr$div$i79;
 $19 = $_Np$i;
 $20 = $__end2$addr$i;
 $21 = HEAP32[$20>>2]|0;
 $idx$neg$i = (0 - ($19))|0;
 $add$ptr$i80 = (($21) + ($idx$neg$i<<2)|0);
 HEAP32[$20>>2] = $add$ptr$i80;
 $22 = $_Np$i;
 $cmp$i = ($22|0)>(0);
 if ($cmp$i) {
  $23 = $__end2$addr$i;
  $24 = HEAP32[$23>>2]|0;
  $25 = $__begin1$addr$i;
  $26 = $_Np$i;
  $mul$i = $26<<2;
  _memcpy(($24|0),($25|0),($mul$i|0))|0;
 }
 $27 = $__v$addr;
 $__begin_4 = ((($27)) + 4|0);
 $__x$addr$i73 = $this1;
 $__y$addr$i74 = $__begin_4;
 $28 = $__x$addr$i73;
 $__t$addr$i$i72 = $28;
 $29 = $__t$addr$i$i72;
 $30 = HEAP32[$29>>2]|0;
 HEAP32[$__t$i75>>2] = $30;
 $31 = $__y$addr$i74;
 $__t$addr$i4$i70 = $31;
 $32 = $__t$addr$i4$i70;
 $33 = HEAP32[$32>>2]|0;
 $34 = $__x$addr$i73;
 HEAP32[$34>>2] = $33;
 $__t$addr$i3$i71 = $__t$i75;
 $35 = $__t$addr$i3$i71;
 $36 = HEAP32[$35>>2]|0;
 $37 = $__y$addr$i74;
 HEAP32[$37>>2] = $36;
 $__end_5 = ((($this1)) + 4|0);
 $38 = $__v$addr;
 $__end_6 = ((($38)) + 8|0);
 $__x$addr$i67 = $__end_5;
 $__y$addr$i68 = $__end_6;
 $39 = $__x$addr$i67;
 $__t$addr$i$i66 = $39;
 $40 = $__t$addr$i$i66;
 $41 = HEAP32[$40>>2]|0;
 HEAP32[$__t$i69>>2] = $41;
 $42 = $__y$addr$i68;
 $__t$addr$i4$i64 = $42;
 $43 = $__t$addr$i4$i64;
 $44 = HEAP32[$43>>2]|0;
 $45 = $__x$addr$i67;
 HEAP32[$45>>2] = $44;
 $__t$addr$i3$i65 = $__t$i69;
 $46 = $__t$addr$i3$i65;
 $47 = HEAP32[$46>>2]|0;
 $48 = $__y$addr$i68;
 HEAP32[$48>>2] = $47;
 $this$addr$i58 = $this1;
 $this1$i59 = $this$addr$i58;
 $__end_cap_$i60 = ((($this1$i59)) + 8|0);
 $this$addr$i$i57 = $__end_cap_$i60;
 $this1$i$i61 = $this$addr$i$i57;
 $this$addr$i$i$i56 = $this1$i$i61;
 $this1$i$i$i62 = $this$addr$i$i$i56;
 $49 = $__v$addr;
 $this$addr$i52 = $49;
 $this1$i53 = $this$addr$i52;
 $__end_cap_$i = ((($this1$i53)) + 12|0);
 $this$addr$i$i51 = $__end_cap_$i;
 $this1$i$i54 = $this$addr$i$i51;
 $this$addr$i$i$i50 = $this1$i$i54;
 $this1$i$i$i55 = $this$addr$i$i$i50;
 $__x$addr$i = $this1$i$i$i62;
 $__y$addr$i = $this1$i$i$i55;
 $50 = $__x$addr$i;
 $__t$addr$i$i = $50;
 $51 = $__t$addr$i$i;
 $52 = HEAP32[$51>>2]|0;
 HEAP32[$__t$i>>2] = $52;
 $53 = $__y$addr$i;
 $__t$addr$i4$i = $53;
 $54 = $__t$addr$i4$i;
 $55 = HEAP32[$54>>2]|0;
 $56 = $__x$addr$i;
 HEAP32[$56>>2] = $55;
 $__t$addr$i3$i = $__t$i;
 $57 = $__t$addr$i3$i;
 $58 = HEAP32[$57>>2]|0;
 $59 = $__y$addr$i;
 HEAP32[$59>>2] = $58;
 $60 = $__v$addr;
 $__begin_9 = ((($60)) + 4|0);
 $61 = HEAP32[$__begin_9>>2]|0;
 $62 = $__v$addr;
 HEAP32[$62>>2] = $61;
 $this$addr$i48 = $this1;
 $this1$i49 = $this$addr$i48;
 $__end_$i = ((($this1$i49)) + 4|0);
 $63 = HEAP32[$__end_$i>>2]|0;
 $64 = HEAP32[$this1$i49>>2]|0;
 $sub$ptr$lhs$cast$i = $63;
 $sub$ptr$rhs$cast$i = $64;
 $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
 $sub$ptr$div$i = (($sub$ptr$sub$i|0) / 4)&-1;
 $this$addr$i26 = $this1;
 $__current_size$addr$i = $sub$ptr$div$i;
 $this1$i27 = $this$addr$i26;
 $this$addr$i$i25 = $this1$i27;
 $this1$i$i28 = $this$addr$i$i25;
 $65 = HEAP32[$this1$i$i28>>2]|0;
 $__p$addr$i$i$i24 = $65;
 $66 = $__p$addr$i$i$i24;
 $this$addr$i38$i = $this1$i27;
 $this1$i39$i = $this$addr$i38$i;
 $67 = HEAP32[$this1$i39$i>>2]|0;
 $__p$addr$i$i37$i = $67;
 $68 = $__p$addr$i$i37$i;
 $this$addr$i24$i = $this1$i27;
 $this1$i25$i = $this$addr$i24$i;
 $this$addr$i$i23$i = $this1$i25$i;
 $this1$i$i26$i = $this$addr$i$i23$i;
 $this$addr$i$i$i22$i = $this1$i$i26$i;
 $this1$i$i$i27$i = $this$addr$i$i$i22$i;
 $__end_cap_$i$i$i28$i = ((($this1$i$i$i27$i)) + 8|0);
 $this$addr$i$i$i$i21$i = $__end_cap_$i$i$i28$i;
 $this1$i$i$i$i29$i = $this$addr$i$i$i$i21$i;
 $this$addr$i$i$i$i$i20$i = $this1$i$i$i$i29$i;
 $this1$i$i$i$i$i30$i = $this$addr$i$i$i$i$i20$i;
 $69 = HEAP32[$this1$i$i$i$i$i30$i>>2]|0;
 $70 = HEAP32[$this1$i$i26$i>>2]|0;
 $sub$ptr$lhs$cast$i$i33$i = $69;
 $sub$ptr$rhs$cast$i$i34$i = $70;
 $sub$ptr$sub$i$i35$i = (($sub$ptr$lhs$cast$i$i33$i) - ($sub$ptr$rhs$cast$i$i34$i))|0;
 $sub$ptr$div$i$i36$i = (($sub$ptr$sub$i$i35$i|0) / 4)&-1;
 $add$ptr$i30 = (($68) + ($sub$ptr$div$i$i36$i<<2)|0);
 $this$addr$i17$i13 = $this1$i27;
 $this1$i18$i31 = $this$addr$i17$i13;
 $71 = HEAP32[$this1$i18$i31>>2]|0;
 $__p$addr$i$i16$i = $71;
 $72 = $__p$addr$i$i16$i;
 $this$addr$i14$i18 = $this1$i27;
 $this1$i15$i33 = $this$addr$i14$i18;
 $this$addr$i$i$i17 = $this1$i15$i33;
 $this1$i$i$i34 = $this$addr$i$i$i17;
 $this$addr$i$i$i$i16 = $this1$i$i$i34;
 $this1$i$i$i$i35 = $this$addr$i$i$i$i16;
 $__end_cap_$i$i$i$i36 = ((($this1$i$i$i$i35)) + 8|0);
 $this$addr$i$i$i$i$i15 = $__end_cap_$i$i$i$i36;
 $this1$i$i$i$i$i37 = $this$addr$i$i$i$i$i15;
 $this$addr$i$i$i$i$i$i14 = $this1$i$i$i$i$i37;
 $this1$i$i$i$i$i$i38 = $this$addr$i$i$i$i$i$i14;
 $73 = HEAP32[$this1$i$i$i$i$i$i38>>2]|0;
 $74 = HEAP32[$this1$i$i$i34>>2]|0;
 $sub$ptr$lhs$cast$i$i$i41 = $73;
 $sub$ptr$rhs$cast$i$i$i42 = $74;
 $sub$ptr$sub$i$i$i43 = (($sub$ptr$lhs$cast$i$i$i41) - ($sub$ptr$rhs$cast$i$i$i42))|0;
 $sub$ptr$div$i$i$i44 = (($sub$ptr$sub$i$i$i43|0) / 4)&-1;
 $add$ptr6$i45 = (($72) + ($sub$ptr$div$i$i$i44<<2)|0);
 $this$addr$i11$i19 = $this1$i27;
 $this1$i12$i46 = $this$addr$i11$i19;
 $75 = HEAP32[$this1$i12$i46>>2]|0;
 $__p$addr$i$i10$i = $75;
 $76 = $__p$addr$i$i10$i;
 $77 = $__current_size$addr$i;
 $add$ptr8$i = (($76) + ($77<<2)|0);
 $this$addr$i9$i = $this1$i27;
 $$addr$i$i20 = $66;
 $$addr1$i$i21 = $add$ptr$i30;
 $$addr2$i$i22 = $add$ptr6$i45;
 $$addr3$i$i23 = $add$ptr8$i;
 $this$addr$i11 = $this1;
 STACKTOP = sp;return;
}
function __ZNSt3__214__split_bufferIPN2lm17CallbackContainerIJRKNS1_8AppEventEEEERNS_9allocatorIS7_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$addr$i = 0, $__a$addr$i$i$i$i = 0, $__a$addr$i$i$i$i$i = 0, $__align$addr$i$i$i = 0, $__align$addr$i$i$i$i = 0, $__begin_$i = 0, $__end_$i$i$i = 0, $__end_2$i$i$i = 0, $__end_cap_$i = 0, $__end_cap_$i$i = 0, $__end_cap_$i$i$i$i = 0, $__n$addr$i = 0, $__n$addr$i$i = 0, $__new_last$addr$i$i = 0;
 var $__new_last$addr$i$i$i = 0, $__p$addr$i = 0, $__p$addr$i$i = 0, $__p$addr$i$i$i$i = 0, $__p$addr$i$i$i$i$i = 0, $__p$addr$i$i$i$i$i$i = 0, $__p$addr$i5$i$i$i = 0, $__ptr$addr$i$i$i = 0, $__ptr$addr$i$i$i$i = 0, $__size$addr$i$i$i = 0, $__size$addr$i$i$i$i = 0, $add$ptr$i$i = 0, $add$ptr$i$i$i$i$i = 0, $agg$tmp$i$i = 0, $agg$tmp$i$i$i$i = 0, $agg$tmp1$i$i$i$i = 0, $agg$tmp2$i$i = 0, $cmp$i$i$i = 0, $incdec$ptr$i$i$i = 0, $mul$i$i = 0;
 var $sub$ptr$div$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$sub$i = 0, $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i$i$i = 0, $this$addr$i$i$i$i$i$i = 0, $this$addr$i$i$i$i12 = 0, $this$addr$i$i$i13 = 0, $this$addr$i$i$i4 = 0, $this$addr$i$i$i4$i$i$i = 0, $this$addr$i$i10 = 0, $this$addr$i$i14 = 0, $this$addr$i$i5 = 0, $this$addr$i15 = 0, $this$addr$i6 = 0;
 var $this1 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i$i = 0, $this1$i$i$i$i$i = 0, $this1$i$i$i$i$i$i = 0, $this1$i$i$i$i19 = 0, $this1$i$i$i18 = 0, $this1$i$i$i9 = 0, $this1$i$i17 = 0, $this1$i$i8 = 0, $this1$i16 = 0, $this1$i7 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $agg$tmp1$i$i$i$i = sp + 8|0;
 $agg$tmp$i$i$i$i = sp + 153|0;
 $agg$tmp2$i$i = sp;
 $agg$tmp$i$i = sp + 152|0;
 $this$addr = $this;
 $this1 = $this$addr;
 $this$addr$i = $this1;
 $this1$i = $this$addr$i;
 $__begin_$i = ((($this1$i)) + 4|0);
 $0 = HEAP32[$__begin_$i>>2]|0;
 $this$addr$i$i = $this1$i;
 $__new_last$addr$i$i = $0;
 $this1$i$i = $this$addr$i$i;
 $1 = $__new_last$addr$i$i;
 ;HEAP8[$agg$tmp2$i$i>>0]=HEAP8[$agg$tmp$i$i>>0]|0;
 $this$addr$i$i$i = $this1$i$i;
 $__new_last$addr$i$i$i = $1;
 $this1$i$i$i = $this$addr$i$i$i;
 while(1) {
  $2 = $__new_last$addr$i$i$i;
  $__end_$i$i$i = ((($this1$i$i$i)) + 8|0);
  $3 = HEAP32[$__end_$i$i$i>>2]|0;
  $cmp$i$i$i = ($2|0)!=($3|0);
  if (!($cmp$i$i$i)) {
   break;
  }
  $this$addr$i$i$i$i = $this1$i$i$i;
  $this1$i$i$i$i = $this$addr$i$i$i$i;
  $__end_cap_$i$i$i$i = ((($this1$i$i$i$i)) + 12|0);
  $this$addr$i$i$i$i$i = $__end_cap_$i$i$i$i;
  $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
  $add$ptr$i$i$i$i$i = ((($this1$i$i$i$i$i)) + 4|0);
  $this$addr$i$i$i$i$i$i = $add$ptr$i$i$i$i$i;
  $this1$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i;
  $4 = HEAP32[$this1$i$i$i$i$i$i>>2]|0;
  $__end_2$i$i$i = ((($this1$i$i$i)) + 8|0);
  $5 = HEAP32[$__end_2$i$i$i>>2]|0;
  $incdec$ptr$i$i$i = ((($5)) + -4|0);
  HEAP32[$__end_2$i$i$i>>2] = $incdec$ptr$i$i$i;
  $__p$addr$i$i$i$i = $incdec$ptr$i$i$i;
  $6 = $__p$addr$i$i$i$i;
  $__a$addr$i$i$i$i = $4;
  $__p$addr$i5$i$i$i = $6;
  $7 = $__a$addr$i$i$i$i;
  $8 = $__p$addr$i5$i$i$i;
  ;HEAP8[$agg$tmp1$i$i$i$i>>0]=HEAP8[$agg$tmp$i$i$i$i>>0]|0;
  $__a$addr$i$i$i$i$i = $7;
  $__p$addr$i$i$i$i$i = $8;
  $9 = $__a$addr$i$i$i$i$i;
  $10 = $__p$addr$i$i$i$i$i;
  $this$addr$i$i$i4$i$i$i = $9;
  $__p$addr$i$i$i$i$i$i = $10;
 }
 $11 = HEAP32[$this1>>2]|0;
 $tobool = ($11|0)!=(0|0);
 if (!($tobool)) {
  STACKTOP = sp;return;
 }
 $this$addr$i6 = $this1;
 $this1$i7 = $this$addr$i6;
 $__end_cap_$i = ((($this1$i7)) + 12|0);
 $this$addr$i$i5 = $__end_cap_$i;
 $this1$i$i8 = $this$addr$i$i5;
 $add$ptr$i$i = ((($this1$i$i8)) + 4|0);
 $this$addr$i$i$i4 = $add$ptr$i$i;
 $this1$i$i$i9 = $this$addr$i$i$i4;
 $12 = HEAP32[$this1$i$i$i9>>2]|0;
 $13 = HEAP32[$this1>>2]|0;
 $this$addr$i15 = $this1;
 $this1$i16 = $this$addr$i15;
 $this$addr$i$i14 = $this1$i16;
 $this1$i$i17 = $this$addr$i$i14;
 $__end_cap_$i$i = ((($this1$i$i17)) + 12|0);
 $this$addr$i$i$i13 = $__end_cap_$i$i;
 $this1$i$i$i18 = $this$addr$i$i$i13;
 $this$addr$i$i$i$i12 = $this1$i$i$i18;
 $this1$i$i$i$i19 = $this$addr$i$i$i$i12;
 $14 = HEAP32[$this1$i$i$i$i19>>2]|0;
 $15 = HEAP32[$this1$i16>>2]|0;
 $sub$ptr$lhs$cast$i = $14;
 $sub$ptr$rhs$cast$i = $15;
 $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
 $sub$ptr$div$i = (($sub$ptr$sub$i|0) / 4)&-1;
 $__a$addr$i = $12;
 $__p$addr$i = $13;
 $__n$addr$i = $sub$ptr$div$i;
 $16 = $__a$addr$i;
 $17 = $__p$addr$i;
 $18 = $__n$addr$i;
 $this$addr$i$i10 = $16;
 $__p$addr$i$i = $17;
 $__n$addr$i$i = $18;
 $19 = $__p$addr$i$i;
 $20 = $__n$addr$i$i;
 $mul$i$i = $20<<2;
 $__ptr$addr$i$i$i = $19;
 $__size$addr$i$i$i = $mul$i$i;
 $__align$addr$i$i$i = 4;
 $21 = $__ptr$addr$i$i$i;
 $22 = $__size$addr$i$i$i;
 $23 = $__align$addr$i$i$i;
 $__ptr$addr$i$i$i$i = $21;
 $__size$addr$i$i$i$i = $22;
 $__align$addr$i$i$i$i = $23;
 $24 = $__ptr$addr$i$i$i$i;
 $25 = $__size$addr$i$i$i$i;
 __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($24,$25);
 STACKTOP = sp;return;
}
function __ZN2lm5Input4termEv($this) {
 $this = $this|0;
 var $call = 0, $call2 = 0, $m_appEventCallback = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $call = (__ZN2lm3App11GetInstanceEv()|0);
 $call2 = (__ZN2lm3App8getEventEv($call)|0);
 $m_appEventCallback = ((($this1)) + 532|0);
 __ZN2lm5EventIJRKNS_8AppEventEEE6removeEPNS_17CallbackContainerIJS3_EEE($call2,$m_appEventCallback);
 STACKTOP = sp;return;
}
function __ZN2lm5EventIJRKNS_8AppEventEEE6removeEPNS_17CallbackContainerIJS3_EEE($this,$_callback) {
 $this = $this|0;
 $_callback = $_callback|0;
 var $$addr$i = 0, $$addr$i$i$i$i = 0, $$addr1$i$i$i$i = 0, $$addr2$i$i$i$i = 0, $$addr3$i$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0;
 var $__a$addr$i$i$i$i = 0, $__a$addr$i$i$i$i$i = 0, $__end_$i = 0, $__end_$i$i$i = 0, $__end_$i$i$i$i = 0, $__end_$i14$i$i = 0, $__end_$i39 = 0, $__end_3$i$i$i = 0, $__end_cap_$i$i$i$i = 0, $__end_cap_$i$i$i$i$i$i = 0, $__first$addr$i$i = 0, $__first$addr$i$i$i = 0, $__i$addr$i$i$i = 0, $__i$addr$i4$i$i = 0, $__i$addr$i5$i$i = 0, $__last$addr$i$i = 0, $__last$addr$i$i$i = 0, $__n$i$i$i = 0, $__new_last$addr$i$i = 0, $__new_last$addr$i$i$i = 0;
 var $__new_last$addr$i12$i$i = 0, $__new_last$addr$i22$i = 0, $__old_size$addr$i$i$i = 0, $__old_size$i$i = 0, $__p$addr$i$i = 0, $__p$addr$i$i$i$i = 0, $__p$addr$i$i$i$i$i = 0, $__p$addr$i$i$i$i$i$i = 0, $__p$addr$i$i$i17$i = 0, $__p$addr$i$i$i7$i$i = 0, $__p$addr$i$i13$i$i$i = 0, $__p$addr$i$i14 = 0, $__p$addr$i$i17$i$i$i = 0, $__p$addr$i$i23$i$i$i = 0, $__p$addr$i$i35 = 0, $__p$addr$i5$i$i$i = 0, $__p$i = 0, $__ps$i = 0, $__result$addr$i$i = 0, $__result$addr$i$i$i = 0;
 var $__soon_to_be_end$i$i$i = 0, $__u$addr$i = 0, $__x$addr$i$i = 0, $__x$addr$i$i$i = 0, $__x$addr$i$i$i$i$i = 0, $__x$addr$i$i$i13 = 0, $__x$addr$i$i$i32 = 0, $__y$addr$i$i = 0, $_callback$addr = 0, $add$ptr$i = 0, $add$ptr$i$i$i = 0, $add$ptr$i$i33$i = 0, $add$ptr3$i = 0, $add$ptr5$i = 0, $add$ptr5$i$i$i = 0, $add$ptr8$i$i$i = 0, $agg$tmp = 0, $agg$tmp$i$i$i$i = 0, $agg$tmp1$i$i$i$i = 0, $agg$tmp12 = 0;
 var $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, $call8 = 0, $cmp$i$i$i = 0, $cmp$i$i32$i = 0, $coerce = 0, $incdec$ptr$i$i$i = 0, $mul$i$i$i = 0, $ref$tmp = 0, $ref$tmp$i = 0, $retval$i = 0, $retval$i$i = 0, $retval$i$i$i = 0, $retval$i$i$i$i = 0, $retval$i$i16 = 0, $retval$i$i33 = 0, $retval$i10$i = 0, $retval$i18 = 0;
 var $retval$i36 = 0, $sub$ptr$div$i$i = 0, $sub$ptr$div$i$i$i = 0, $sub$ptr$div$i$i$i$i = 0, $sub$ptr$div$i$i$i$i$i = 0, $sub$ptr$div$i$i31$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$lhs$cast$i$i$i = 0, $sub$ptr$lhs$cast$i$i$i$i = 0, $sub$ptr$lhs$cast$i$i$i$i$i = 0, $sub$ptr$lhs$cast$i$i28$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$rhs$cast$i$i$i = 0, $sub$ptr$rhs$cast$i$i$i$i = 0, $sub$ptr$rhs$cast$i$i$i$i$i = 0, $sub$ptr$rhs$cast$i$i29$i = 0, $sub$ptr$sub$i$i = 0, $sub$ptr$sub$i$i$i = 0, $sub$ptr$sub$i$i$i$i = 0, $sub$ptr$sub$i$i$i$i$i = 0;
 var $sub$ptr$sub$i$i30$i = 0, $this$addr = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i$i$i = 0, $this$addr$i$i$i$i$i$i = 0, $this$addr$i$i$i$i$i$i$i = 0, $this$addr$i$i$i$i$i$i$i$i = 0, $this$addr$i$i$i$i18$i = 0, $this$addr$i$i$i$i8$i$i = 0, $this$addr$i$i$i15 = 0, $this$addr$i$i$i19$i = 0, $this$addr$i$i$i31 = 0, $this$addr$i$i$i4$i$i$i = 0, $this$addr$i$i$i9$i$i = 0, $this$addr$i$i10$i$i = 0, $this$addr$i$i17 = 0, $this$addr$i$i20$i = 0;
 var $this$addr$i$i27 = 0, $this$addr$i$i34 = 0, $this$addr$i$i34$i = 0, $this$addr$i$i9$i = 0, $this$addr$i10$i$i$i = 0, $this$addr$i11$i = 0, $this$addr$i11$i$i = 0, $this$addr$i14$i$i$i = 0, $this$addr$i15$i = 0, $this$addr$i18$i$i$i = 0, $this$addr$i19 = 0, $this$addr$i2$i$i = 0, $this$addr$i21$i = 0, $this$addr$i21$i$i$i = 0, $this$addr$i24$i$i$i = 0, $this$addr$i28 = 0, $this$addr$i3$i$i = 0, $this$addr$i37 = 0, $this$addr$i5$i$i = 0, $this$addr$i9$i$i$i = 0;
 var $this1 = 0, $this1$i = 0, $this1$i$i$i = 0, $this1$i$i$i$i$i = 0, $this1$i$i$i$i$i$i = 0, $this1$i$i$i$i$i$i$i = 0, $this1$i$i$i$i$i$i$i$i = 0, $this1$i$i$i$i17$i$i = 0, $this1$i$i$i$i27$i = 0, $this1$i$i$i16$i$i = 0, $this1$i$i$i22 = 0, $this1$i$i$i26$i = 0, $this1$i$i$i41 = 0, $this1$i$i13$i = 0, $this1$i$i15$i$i = 0, $this1$i$i21 = 0, $this1$i$i30 = 0, $this1$i$i35$i = 0, $this1$i11$i$i$i = 0, $this1$i13$i$i = 0;
 var $this1$i15$i$i$i = 0, $this1$i19$i$i$i = 0, $this1$i20 = 0, $this1$i22$i$i$i = 0, $this1$i23$i = 0, $this1$i25$i$i$i = 0, $this1$i29 = 0, $this1$i3$i$i = 0, $this1$i38 = 0, $this1$i4$i$i = 0, $this1$i6$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(432|0);
 $agg$tmp4$byval_copy = sp + 416|0;
 $agg$tmp2$byval_copy = sp + 412|0;
 $retval$i$i33 = sp + 400|0;
 $retval$i36 = sp + 388|0;
 $agg$tmp1$i$i$i$i = sp + 8|0;
 $agg$tmp$i$i$i$i = sp + 420|0;
 $retval$i10$i = sp + 132|0;
 $retval$i$i$i$i = sp + 112|0;
 $retval$i$i$i = sp + 100|0;
 $retval$i$i16 = sp + 92|0;
 $retval$i18 = sp + 84|0;
 $ref$tmp$i = sp + 72|0;
 $agg$tmp12 = sp;
 $retval$i$i = sp + 56|0;
 $retval$i = sp + 44|0;
 $_callback$addr = sp + 32|0;
 $agg$tmp = sp + 28|0;
 $ref$tmp = sp + 24|0;
 $agg$tmp2 = sp + 20|0;
 $agg$tmp4 = sp + 16|0;
 $coerce = sp + 12|0;
 $this$addr = $this;
 HEAP32[$_callback$addr>>2] = $_callback;
 $this1 = $this$addr;
 $this$addr$i = $this1;
 $this1$i = $this$addr$i;
 $0 = HEAP32[$this1$i>>2]|0;
 $this$addr$i$i = $this1$i;
 $__p$addr$i$i = $0;
 $1 = $__p$addr$i$i;
 $this$addr$i$i$i = $retval$i$i;
 $__x$addr$i$i$i = $1;
 $this1$i$i$i = $this$addr$i$i$i;
 $2 = $__x$addr$i$i$i;
 HEAP32[$this1$i$i$i>>2] = $2;
 $3 = HEAP32[$retval$i$i>>2]|0;
 HEAP32[$retval$i>>2] = $3;
 $4 = HEAP32[$retval$i>>2]|0;
 HEAP32[$agg$tmp2>>2] = $4;
 $this$addr$i37 = $this1;
 $this1$i38 = $this$addr$i37;
 $__end_$i39 = ((($this1$i38)) + 4|0);
 $5 = HEAP32[$__end_$i39>>2]|0;
 $this$addr$i$i34 = $this1$i38;
 $__p$addr$i$i35 = $5;
 $6 = $__p$addr$i$i35;
 $this$addr$i$i$i31 = $retval$i$i33;
 $__x$addr$i$i$i32 = $6;
 $this1$i$i$i41 = $this$addr$i$i$i31;
 $7 = $__x$addr$i$i$i32;
 HEAP32[$this1$i$i$i41>>2] = $7;
 $8 = HEAP32[$retval$i$i33>>2]|0;
 HEAP32[$retval$i36>>2] = $8;
 $9 = HEAP32[$retval$i36>>2]|0;
 HEAP32[$agg$tmp4>>2] = $9;
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;
 ;HEAP32[$agg$tmp4$byval_copy>>2]=HEAP32[$agg$tmp4>>2]|0;
 $call8 = (__ZNSt3__26removeINS_11__wrap_iterIPPN2lm17CallbackContainerIJRKNS2_8AppEventEEEEEES8_EET_SB_SB_RKT0_($agg$tmp2$byval_copy,$agg$tmp4$byval_copy,$_callback$addr)|0);
 HEAP32[$ref$tmp>>2] = $call8;
 $this$addr$i28 = $agg$tmp;
 $__u$addr$i = $ref$tmp;
 $$addr$i = 0;
 $this1$i29 = $this$addr$i28;
 $10 = $__u$addr$i;
 $this$addr$i$i27 = $10;
 $this1$i$i30 = $this$addr$i$i27;
 $11 = HEAP32[$this1$i$i30>>2]|0;
 HEAP32[$this1$i29>>2] = $11;
 ;HEAP8[$agg$tmp12>>0]=HEAP8[$agg$tmp>>0]|0;HEAP8[$agg$tmp12+1>>0]=HEAP8[$agg$tmp+1>>0]|0;HEAP8[$agg$tmp12+2>>0]=HEAP8[$agg$tmp+2>>0]|0;HEAP8[$agg$tmp12+3>>0]=HEAP8[$agg$tmp+3>>0]|0;
 $this$addr$i19 = $this1;
 $this1$i20 = $this$addr$i19;
 $this$addr$i$i17 = $this1$i20;
 $this1$i$i21 = $this$addr$i$i17;
 $this$addr$i$i$i15 = $this1$i$i21;
 $this1$i$i$i22 = $this$addr$i$i$i15;
 $12 = HEAP32[$this1$i$i$i22>>2]|0;
 $this$addr$i$i$i$i = $this1$i$i$i22;
 $__p$addr$i$i$i$i = $12;
 $13 = $__p$addr$i$i$i$i;
 $this$addr$i$i$i$i$i = $retval$i$i$i$i;
 $__x$addr$i$i$i$i$i = $13;
 $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
 $14 = $__x$addr$i$i$i$i$i;
 HEAP32[$this1$i$i$i$i$i>>2] = $14;
 $15 = HEAP32[$retval$i$i$i$i>>2]|0;
 HEAP32[$retval$i$i$i>>2] = $15;
 $16 = HEAP32[$retval$i$i$i>>2]|0;
 HEAP32[$retval$i$i16>>2] = $16;
 $17 = HEAP32[$retval$i$i16>>2]|0;
 HEAP32[$ref$tmp$i>>2] = $17;
 $__x$addr$i$i = $agg$tmp12;
 $__y$addr$i$i = $ref$tmp$i;
 $18 = $__x$addr$i$i;
 $this$addr$i$i34$i = $18;
 $this1$i$i35$i = $this$addr$i$i34$i;
 $19 = HEAP32[$this1$i$i35$i>>2]|0;
 $20 = $__y$addr$i$i;
 $this$addr$i2$i$i = $20;
 $this1$i3$i$i = $this$addr$i2$i$i;
 $21 = HEAP32[$this1$i3$i$i>>2]|0;
 $sub$ptr$lhs$cast$i$i = $19;
 $sub$ptr$rhs$cast$i$i = $21;
 $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
 $sub$ptr$div$i$i = (($sub$ptr$sub$i$i|0) / 4)&-1;
 $__ps$i = $sub$ptr$div$i$i;
 $22 = HEAP32[$this1$i20>>2]|0;
 $23 = $__ps$i;
 $add$ptr$i = (($22) + ($23<<2)|0);
 $__p$i = $add$ptr$i;
 $24 = $__p$i;
 $add$ptr3$i = ((($24)) + 4|0);
 $__end_$i = ((($this1$i20)) + 4|0);
 $25 = HEAP32[$__end_$i>>2]|0;
 $26 = $__p$i;
 $__first$addr$i$i = $add$ptr3$i;
 $__last$addr$i$i = $25;
 $__result$addr$i$i = $26;
 $27 = $__first$addr$i$i;
 $__i$addr$i$i$i = $27;
 $28 = $__i$addr$i$i$i;
 $29 = $__last$addr$i$i;
 $__i$addr$i5$i$i = $29;
 $30 = $__i$addr$i5$i$i;
 $31 = $__result$addr$i$i;
 $__i$addr$i4$i$i = $31;
 $32 = $__i$addr$i4$i$i;
 $__first$addr$i$i$i = $28;
 $__last$addr$i$i$i = $30;
 $__result$addr$i$i$i = $32;
 $33 = $__last$addr$i$i$i;
 $34 = $__first$addr$i$i$i;
 $sub$ptr$lhs$cast$i$i28$i = $33;
 $sub$ptr$rhs$cast$i$i29$i = $34;
 $sub$ptr$sub$i$i30$i = (($sub$ptr$lhs$cast$i$i28$i) - ($sub$ptr$rhs$cast$i$i29$i))|0;
 $sub$ptr$div$i$i31$i = (($sub$ptr$sub$i$i30$i|0) / 4)&-1;
 $__n$i$i$i = $sub$ptr$div$i$i31$i;
 $35 = $__n$i$i$i;
 $cmp$i$i32$i = ($35>>>0)>(0);
 if ($cmp$i$i32$i) {
  $36 = $__result$addr$i$i$i;
  $37 = $__first$addr$i$i$i;
  $38 = $__n$i$i$i;
  $mul$i$i$i = $38<<2;
  _memmove(($36|0),($37|0),($mul$i$i$i|0))|0;
 }
 $39 = $__result$addr$i$i$i;
 $40 = $__n$i$i$i;
 $add$ptr$i$i33$i = (($39) + ($40<<2)|0);
 $this$addr$i21$i = $this1$i20;
 $__new_last$addr$i22$i = $add$ptr$i$i33$i;
 $this1$i23$i = $this$addr$i21$i;
 $41 = $__new_last$addr$i22$i;
 $this$addr$i$i20$i = $this1$i23$i;
 $__new_last$addr$i$i$i = $41;
 $this$addr$i3$i$i = $this1$i23$i;
 $this1$i4$i$i = $this$addr$i3$i$i;
 $__end_$i$i$i = ((($this1$i4$i$i)) + 4|0);
 $42 = HEAP32[$__end_$i$i$i>>2]|0;
 $43 = HEAP32[$this1$i4$i$i>>2]|0;
 $sub$ptr$lhs$cast$i$i$i = $42;
 $sub$ptr$rhs$cast$i$i$i = $43;
 $sub$ptr$sub$i$i$i = (($sub$ptr$lhs$cast$i$i$i) - ($sub$ptr$rhs$cast$i$i$i))|0;
 $sub$ptr$div$i$i$i = (($sub$ptr$sub$i$i$i|0) / 4)&-1;
 $__old_size$i$i = $sub$ptr$div$i$i$i;
 $44 = $__new_last$addr$i22$i;
 $this$addr$i11$i$i = $this1$i23$i;
 $__new_last$addr$i12$i$i = $44;
 $this1$i13$i$i = $this$addr$i11$i$i;
 $__end_$i14$i$i = ((($this1$i13$i$i)) + 4|0);
 $45 = HEAP32[$__end_$i14$i$i>>2]|0;
 $__soon_to_be_end$i$i$i = $45;
 while(1) {
  $46 = $__new_last$addr$i12$i$i;
  $47 = $__soon_to_be_end$i$i$i;
  $cmp$i$i$i = ($46|0)!=($47|0);
  if (!($cmp$i$i$i)) {
   break;
  }
  $this$addr$i$i10$i$i = $this1$i13$i$i;
  $this1$i$i15$i$i = $this$addr$i$i10$i$i;
  $__end_cap_$i$i$i$i = ((($this1$i$i15$i$i)) + 8|0);
  $this$addr$i$i$i9$i$i = $__end_cap_$i$i$i$i;
  $this1$i$i$i16$i$i = $this$addr$i$i$i9$i$i;
  $this$addr$i$i$i$i8$i$i = $this1$i$i$i16$i$i;
  $this1$i$i$i$i17$i$i = $this$addr$i$i$i$i8$i$i;
  $48 = $__soon_to_be_end$i$i$i;
  $incdec$ptr$i$i$i = ((($48)) + -4|0);
  $__soon_to_be_end$i$i$i = $incdec$ptr$i$i$i;
  $__p$addr$i$i$i17$i = $incdec$ptr$i$i$i;
  $49 = $__p$addr$i$i$i17$i;
  $__a$addr$i$i$i$i = $this1$i$i$i$i17$i$i;
  $__p$addr$i5$i$i$i = $49;
  $50 = $__a$addr$i$i$i$i;
  $51 = $__p$addr$i5$i$i$i;
  ;HEAP8[$agg$tmp1$i$i$i$i>>0]=HEAP8[$agg$tmp$i$i$i$i>>0]|0;
  $__a$addr$i$i$i$i$i = $50;
  $__p$addr$i$i$i7$i$i = $51;
  $52 = $__a$addr$i$i$i$i$i;
  $53 = $__p$addr$i$i$i7$i$i;
  $this$addr$i$i$i4$i$i$i = $52;
  $__p$addr$i$i$i$i$i$i = $53;
 }
 $54 = $__new_last$addr$i12$i$i;
 $__end_3$i$i$i = ((($this1$i13$i$i)) + 4|0);
 HEAP32[$__end_3$i$i$i>>2] = $54;
 $55 = $__old_size$i$i;
 $this$addr$i5$i$i = $this1$i23$i;
 $__old_size$addr$i$i$i = $55;
 $this1$i6$i$i = $this$addr$i5$i$i;
 $this$addr$i$i$i19$i = $this1$i6$i$i;
 $this1$i$i$i26$i = $this$addr$i$i$i19$i;
 $56 = HEAP32[$this1$i$i$i26$i>>2]|0;
 $__p$addr$i$i$i$i$i = $56;
 $57 = $__p$addr$i$i$i$i$i;
 $this$addr$i24$i$i$i = $this1$i6$i$i;
 $this1$i25$i$i$i = $this$addr$i24$i$i$i;
 $58 = HEAP32[$this1$i25$i$i$i>>2]|0;
 $__p$addr$i$i23$i$i$i = $58;
 $59 = $__p$addr$i$i23$i$i$i;
 $this$addr$i21$i$i$i = $this1$i6$i$i;
 $this1$i22$i$i$i = $this$addr$i21$i$i$i;
 $this$addr$i$i$i$i18$i = $this1$i22$i$i$i;
 $this1$i$i$i$i27$i = $this$addr$i$i$i$i18$i;
 $this$addr$i$i$i$i$i$i = $this1$i$i$i$i27$i;
 $this1$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i;
 $__end_cap_$i$i$i$i$i$i = ((($this1$i$i$i$i$i$i)) + 8|0);
 $this$addr$i$i$i$i$i$i$i = $__end_cap_$i$i$i$i$i$i;
 $this1$i$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i$i;
 $this$addr$i$i$i$i$i$i$i$i = $this1$i$i$i$i$i$i$i;
 $this1$i$i$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i$i$i;
 $60 = HEAP32[$this1$i$i$i$i$i$i$i$i>>2]|0;
 $61 = HEAP32[$this1$i$i$i$i27$i>>2]|0;
 $sub$ptr$lhs$cast$i$i$i$i$i = $60;
 $sub$ptr$rhs$cast$i$i$i$i$i = $61;
 $sub$ptr$sub$i$i$i$i$i = (($sub$ptr$lhs$cast$i$i$i$i$i) - ($sub$ptr$rhs$cast$i$i$i$i$i))|0;
 $sub$ptr$div$i$i$i$i$i = (($sub$ptr$sub$i$i$i$i$i|0) / 4)&-1;
 $add$ptr$i$i$i = (($59) + ($sub$ptr$div$i$i$i$i$i<<2)|0);
 $this$addr$i18$i$i$i = $this1$i6$i$i;
 $this1$i19$i$i$i = $this$addr$i18$i$i$i;
 $62 = HEAP32[$this1$i19$i$i$i>>2]|0;
 $__p$addr$i$i17$i$i$i = $62;
 $63 = $__p$addr$i$i17$i$i$i;
 $64 = $__old_size$addr$i$i$i;
 $add$ptr5$i$i$i = (($63) + ($64<<2)|0);
 $this$addr$i14$i$i$i = $this1$i6$i$i;
 $this1$i15$i$i$i = $this$addr$i14$i$i$i;
 $65 = HEAP32[$this1$i15$i$i$i>>2]|0;
 $__p$addr$i$i13$i$i$i = $65;
 $66 = $__p$addr$i$i13$i$i$i;
 $this$addr$i10$i$i$i = $this1$i6$i$i;
 $this1$i11$i$i$i = $this$addr$i10$i$i$i;
 $__end_$i$i$i$i = ((($this1$i11$i$i$i)) + 4|0);
 $67 = HEAP32[$__end_$i$i$i$i>>2]|0;
 $68 = HEAP32[$this1$i11$i$i$i>>2]|0;
 $sub$ptr$lhs$cast$i$i$i$i = $67;
 $sub$ptr$rhs$cast$i$i$i$i = $68;
 $sub$ptr$sub$i$i$i$i = (($sub$ptr$lhs$cast$i$i$i$i) - ($sub$ptr$rhs$cast$i$i$i$i))|0;
 $sub$ptr$div$i$i$i$i = (($sub$ptr$sub$i$i$i$i|0) / 4)&-1;
 $add$ptr8$i$i$i = (($66) + ($sub$ptr$div$i$i$i$i<<2)|0);
 $this$addr$i9$i$i$i = $this1$i6$i$i;
 $$addr$i$i$i$i = $57;
 $$addr1$i$i$i$i = $add$ptr$i$i$i;
 $$addr2$i$i$i$i = $add$ptr5$i$i$i;
 $$addr3$i$i$i$i = $add$ptr8$i$i$i;
 $69 = $__p$i;
 $add$ptr5$i = ((($69)) + -4|0);
 $this$addr$i15$i = $this1$i20;
 $__new_last$addr$i$i = $add$ptr5$i;
 $70 = $__p$i;
 $this$addr$i11$i = $this1$i20;
 $__p$addr$i$i14 = $70;
 $71 = $__p$addr$i$i14;
 $this$addr$i$i9$i = $retval$i10$i;
 $__x$addr$i$i$i13 = $71;
 $this1$i$i13$i = $this$addr$i$i9$i;
 $72 = $__x$addr$i$i$i13;
 HEAP32[$this1$i$i13$i>>2] = $72;
 $73 = HEAP32[$retval$i10$i>>2]|0;
 HEAP32[$retval$i18>>2] = $73;
 $74 = HEAP32[$retval$i18>>2]|0;
 HEAP32[$coerce>>2] = $74;
 STACKTOP = sp;return;
}
function __ZNSt3__26removeINS_11__wrap_iterIPPN2lm17CallbackContainerIJRKNS2_8AppEventEEEEEES8_EET_SB_SB_RKT0_($__first,$__last,$__value_) {
 $__first = $__first|0;
 $__last = $__last|0;
 $__value_ = $__value_|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i = 0, $__t$addr$i = 0, $__value_$addr = 0, $__value_$addr$i = 0;
 var $__x$addr$i = 0, $__x$addr$i$i = 0, $__x$addr$i$i$i = 0, $__x$addr$i$i24 = 0, $__x$addr$i$i32 = 0, $__x$addr$i34 = 0, $__y$addr$i = 0, $__y$addr$i$i = 0, $__y$addr$i$i$i = 0, $__y$addr$i$i25 = 0, $__y$addr$i$i33 = 0, $__y$addr$i35 = 0, $agg$tmp = 0, $agg$tmp1 = 0, $agg$tmp114 = 0, $agg$tmp13 = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i = 0, $cmp$i$i$i = 0;
 var $cmp$i$i40 = 0, $incdec$ptr$i = 0, $incdec$ptr$i$i = 0, $incdec$ptr$i29 = 0, $lnot$i = 0, $lnot$i$i = 0, $lnot$i41 = 0, $ref$tmp = 0, $retval = 0, $retval$i = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i31 = 0, $this$addr$i15 = 0, $this$addr$i18 = 0, $this$addr$i2$i$i = 0, $this$addr$i2$i$i$i = 0, $this$addr$i2$i$i30 = 0;
 var $this$addr$i21 = 0, $this$addr$i26 = 0, $this$addr$i3$i = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i$i = 0, $this1$i$i$i36 = 0, $this1$i16 = 0, $this1$i19 = 0, $this1$i22 = 0, $this1$i27 = 0, $this1$i3$i$i = 0, $this1$i3$i$i$i = 0, $this1$i3$i$i38 = 0, $this1$i4$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $retval$i = sp + 40|0;
 $agg$tmp114 = sp + 8|0;
 $agg$tmp13 = sp;
 $retval = sp + 32|0;
 $ref$tmp = sp + 24|0;
 $agg$tmp = sp + 20|0;
 $agg$tmp1 = sp + 16|0;
 $__i = sp + 12|0;
 $__value_$addr = $__value_;
 ;HEAP32[$agg$tmp>>2]=HEAP32[$__first>>2]|0;
 ;HEAP32[$agg$tmp1>>2]=HEAP32[$__last>>2]|0;
 $0 = $__value_$addr;
 ;HEAP8[$agg$tmp114>>0]=HEAP8[$agg$tmp1>>0]|0;HEAP8[$agg$tmp114+1>>0]=HEAP8[$agg$tmp1+1>>0]|0;HEAP8[$agg$tmp114+2>>0]=HEAP8[$agg$tmp1+2>>0]|0;HEAP8[$agg$tmp114+3>>0]=HEAP8[$agg$tmp1+3>>0]|0;
 ;HEAP8[$agg$tmp13>>0]=HEAP8[$agg$tmp>>0]|0;HEAP8[$agg$tmp13+1>>0]=HEAP8[$agg$tmp+1>>0]|0;HEAP8[$agg$tmp13+2>>0]=HEAP8[$agg$tmp+2>>0]|0;HEAP8[$agg$tmp13+3>>0]=HEAP8[$agg$tmp+3>>0]|0;
 $__value_$addr$i = $0;
 while(1) {
  $__x$addr$i$i = $agg$tmp13;
  $__y$addr$i$i = $agg$tmp114;
  $1 = $__x$addr$i$i;
  $2 = $__y$addr$i$i;
  $__x$addr$i$i$i = $1;
  $__y$addr$i$i$i = $2;
  $3 = $__x$addr$i$i$i;
  $this$addr$i$i$i$i = $3;
  $this1$i$i$i$i = $this$addr$i$i$i$i;
  $4 = HEAP32[$this1$i$i$i$i>>2]|0;
  $5 = $__y$addr$i$i$i;
  $this$addr$i2$i$i$i = $5;
  $this1$i3$i$i$i = $this$addr$i2$i$i$i;
  $6 = HEAP32[$this1$i3$i$i$i>>2]|0;
  $cmp$i$i$i = ($4|0)==($6|0);
  $lnot$i$i = $cmp$i$i$i ^ 1;
  if (!($lnot$i$i)) {
   break;
  }
  $this$addr$i3$i = $agg$tmp13;
  $this1$i4$i = $this$addr$i3$i;
  $7 = HEAP32[$this1$i4$i>>2]|0;
  $8 = HEAP32[$7>>2]|0;
  $9 = $__value_$addr$i;
  $10 = HEAP32[$9>>2]|0;
  $cmp$i = ($8|0)==($10|0);
  if ($cmp$i) {
   break;
  }
  $this$addr$i$i = $agg$tmp13;
  $this1$i$i = $this$addr$i$i;
  $11 = HEAP32[$this1$i$i>>2]|0;
  $incdec$ptr$i$i = ((($11)) + 4|0);
  HEAP32[$this1$i$i>>2] = $incdec$ptr$i$i;
 }
 ;HEAP32[$retval$i>>2]=HEAP32[$agg$tmp13>>2]|0;
 $12 = HEAP32[$retval$i>>2]|0;
 HEAP32[$ref$tmp>>2] = $12;
 ;HEAP32[$__first>>2]=HEAP32[$ref$tmp>>2]|0;
 $__x$addr$i34 = $__first;
 $__y$addr$i35 = $__last;
 $13 = $__x$addr$i34;
 $14 = $__y$addr$i35;
 $__x$addr$i$i32 = $13;
 $__y$addr$i$i33 = $14;
 $15 = $__x$addr$i$i32;
 $this$addr$i$i$i31 = $15;
 $this1$i$i$i36 = $this$addr$i$i$i31;
 $16 = HEAP32[$this1$i$i$i36>>2]|0;
 $17 = $__y$addr$i$i33;
 $this$addr$i2$i$i30 = $17;
 $this1$i3$i$i38 = $this$addr$i2$i$i30;
 $18 = HEAP32[$this1$i3$i$i38>>2]|0;
 $cmp$i$i40 = ($16|0)==($18|0);
 $lnot$i41 = $cmp$i$i40 ^ 1;
 if (!($lnot$i41)) {
  ;HEAP32[$retval>>2]=HEAP32[$__first>>2]|0;
  $35 = HEAP32[$retval>>2]|0;
  STACKTOP = sp;return ($35|0);
 }
 ;HEAP32[$__i>>2]=HEAP32[$__first>>2]|0;
 while(1) {
  $this$addr$i26 = $__i;
  $this1$i27 = $this$addr$i26;
  $19 = HEAP32[$this1$i27>>2]|0;
  $incdec$ptr$i29 = ((($19)) + 4|0);
  HEAP32[$this1$i27>>2] = $incdec$ptr$i29;
  $__x$addr$i = $this1$i27;
  $__y$addr$i = $__last;
  $20 = $__x$addr$i;
  $21 = $__y$addr$i;
  $__x$addr$i$i24 = $20;
  $__y$addr$i$i25 = $21;
  $22 = $__x$addr$i$i24;
  $this$addr$i$i$i = $22;
  $this1$i$i$i = $this$addr$i$i$i;
  $23 = HEAP32[$this1$i$i$i>>2]|0;
  $24 = $__y$addr$i$i25;
  $this$addr$i2$i$i = $24;
  $this1$i3$i$i = $this$addr$i2$i$i;
  $25 = HEAP32[$this1$i3$i$i>>2]|0;
  $cmp$i$i = ($23|0)==($25|0);
  $lnot$i = $cmp$i$i ^ 1;
  if (!($lnot$i)) {
   break;
  }
  $this$addr$i21 = $__i;
  $this1$i22 = $this$addr$i21;
  $26 = HEAP32[$this1$i22>>2]|0;
  $27 = HEAP32[$26>>2]|0;
  $28 = $__value_$addr;
  $29 = HEAP32[$28>>2]|0;
  $cmp = ($27|0)==($29|0);
  if (!($cmp)) {
   $this$addr$i18 = $__i;
   $this1$i19 = $this$addr$i18;
   $30 = HEAP32[$this1$i19>>2]|0;
   $__t$addr$i = $30;
   $31 = $__t$addr$i;
   $32 = HEAP32[$31>>2]|0;
   $this$addr$i15 = $__first;
   $this1$i16 = $this$addr$i15;
   $33 = HEAP32[$this1$i16>>2]|0;
   HEAP32[$33>>2] = $32;
   $this$addr$i = $__first;
   $this1$i = $this$addr$i;
   $34 = HEAP32[$this1$i>>2]|0;
   $incdec$ptr$i = ((($34)) + 4|0);
   HEAP32[$this1$i>>2] = $incdec$ptr$i;
  }
 }
 ;HEAP32[$retval>>2]=HEAP32[$__first>>2]|0;
 $35 = HEAP32[$retval>>2]|0;
 STACKTOP = sp;return ($35|0);
}
function __ZN2lm5Input6updateEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx10 = 0, $arrayidx16 = 0, $arrayidx20 = 0;
 var $arrayidx23 = 0, $arrayidx27 = 0, $arrayidx4 = 0, $arrayidx6 = 0, $cmp = 0, $cmp14 = 0, $cmp17 = 0, $cmp2 = 0, $cmp24 = 0, $cmp7 = 0, $i = 0, $i12 = 0, $inc = 0, $inc30 = 0, $m_mouseKeyStates = 0, $m_mouseKeyStates19 = 0, $m_mouseKeyStates22 = 0, $m_mouseKeyStates26 = 0, $this$addr = 0, $this1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(128);
  if (!($cmp)) {
   break;
  }
  $1 = $i;
  $arrayidx = (($this1) + ($1<<2)|0);
  $2 = HEAP32[$arrayidx>>2]|0;
  $cmp2 = ($2|0)==(1);
  if ($cmp2) {
   $3 = $i;
   $arrayidx4 = (($this1) + ($3<<2)|0);
   HEAP32[$arrayidx4>>2] = 3;
  }
  $4 = $i;
  $arrayidx6 = (($this1) + ($4<<2)|0);
  $5 = HEAP32[$arrayidx6>>2]|0;
  $cmp7 = ($5|0)==(4);
  if ($cmp7) {
   $6 = $i;
   $arrayidx10 = (($this1) + ($6<<2)|0);
   HEAP32[$arrayidx10>>2] = 0;
  }
  $7 = $i;
  $inc = (($7) + 1)|0;
  $i = $inc;
 }
 $i12 = 0;
 while(1) {
  $8 = $i12;
  $cmp14 = ($8|0)<(3);
  if (!($cmp14)) {
   break;
  }
  $m_mouseKeyStates = ((($this1)) + 512|0);
  $9 = $i12;
  $arrayidx16 = (($m_mouseKeyStates) + ($9<<2)|0);
  $10 = HEAP32[$arrayidx16>>2]|0;
  $cmp17 = ($10|0)==(1);
  if ($cmp17) {
   $m_mouseKeyStates19 = ((($this1)) + 512|0);
   $11 = $i12;
   $arrayidx20 = (($m_mouseKeyStates19) + ($11<<2)|0);
   HEAP32[$arrayidx20>>2] = 3;
  }
  $m_mouseKeyStates22 = ((($this1)) + 512|0);
  $12 = $i12;
  $arrayidx23 = (($m_mouseKeyStates22) + ($12<<2)|0);
  $13 = HEAP32[$arrayidx23>>2]|0;
  $cmp24 = ($13|0)==(4);
  if ($cmp24) {
   $m_mouseKeyStates26 = ((($this1)) + 512|0);
   $14 = $i12;
   $arrayidx27 = (($m_mouseKeyStates26) + ($14<<2)|0);
   HEAP32[$arrayidx27>>2] = 0;
  }
  $15 = $i12;
  $inc30 = (($15) + 1)|0;
  $i12 = $inc30;
 }
 STACKTOP = sp;return;
}
function __ZN2lm4FileD0Ev($this) {
 $this = $this|0;
 var $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 __ZN2lm4FileD2Ev($this1);
 __ZdlPv($this1);
 STACKTOP = sp;return;
}
function __ZN2lm4FileD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $cmp = 0, $isnull = 0, $m_pBuffer = 0, $m_pBuffer2 = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 HEAP32[$this1>>2] = (3664);
 $m_pBuffer = ((($this1)) + 4|0);
 $0 = HEAP32[$m_pBuffer>>2]|0;
 $cmp = ($0|0)!=(0|0);
 if ($cmp) {
  $m_pBuffer2 = ((($this1)) + 4|0);
  $1 = HEAP32[$m_pBuffer2>>2]|0;
  $isnull = ($1|0)==(0|0);
  if (!($isnull)) {
   __ZdaPv($1);
  }
 }
 __ZN2lm6ObjectD2Ev($this1);
 STACKTOP = sp;return;
}
function __ZN2lm4FileC2Ev($this) {
 $this = $this|0;
 var $m_bufferSize = 0, $m_isValid = 0, $m_pBuffer = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 __ZN2lm6ObjectC2Ev($this1);
 HEAP32[$this1>>2] = (3664);
 $m_pBuffer = ((($this1)) + 4|0);
 HEAP32[$m_pBuffer>>2] = 0;
 $m_bufferSize = ((($this1)) + 8|0);
 HEAP32[$m_bufferSize>>2] = 0;
 $m_isValid = ((($this1)) + 12|0);
 HEAP8[$m_isValid>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN2lm4File4LoadEPKc($agg$result,$_path) {
 $agg$result = $agg$result|0;
 $_path = $_path|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_path$addr = 0, $add = 0, $arrayidx = 0, $call = 0, $call4 = 0, $call9 = 0;
 var $cmp = 0, $m_bufferSize = 0, $m_bufferSize11 = 0, $m_bufferSize13 = 0, $m_bufferSize7 = 0, $m_isValid = 0, $m_isValid18 = 0, $m_pBuffer = 0, $m_pBuffer10 = 0, $m_pBuffer12 = 0, $nrvo = 0, $nrvo$val = 0, $nrvo$val$pre_trunc = 0, $pFile = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $nrvo = sp + 8|0;
 $_path$addr = $_path;
 $$expand_i1_val = 0;
 HEAP8[$nrvo>>0] = $$expand_i1_val;
 __ZN2lm4FileC2Ev($agg$result);
 $0 = $_path$addr;
 $call = (_fopen($0,7510)|0);
 $pFile = $call;
 $1 = $pFile;
 $cmp = ($1|0)!=(0|0);
 if ($cmp) {
  $2 = $pFile;
  (_fseek($2,0,2)|0);
  $3 = $pFile;
  $call4 = (_ftell($3)|0);
  $m_bufferSize = ((($agg$result)) + 8|0);
  HEAP32[$m_bufferSize>>2] = $call4;
  $4 = $pFile;
  (_fseek($4,0,0)|0);
  $m_bufferSize7 = ((($agg$result)) + 8|0);
  $5 = HEAP32[$m_bufferSize7>>2]|0;
  $add = (($5) + 1)|0;
  $call9 = (__Znam($add)|0);
  $m_pBuffer = ((($agg$result)) + 4|0);
  HEAP32[$m_pBuffer>>2] = $call9;
  $m_pBuffer10 = ((($agg$result)) + 4|0);
  $6 = HEAP32[$m_pBuffer10>>2]|0;
  $m_bufferSize11 = ((($agg$result)) + 8|0);
  $7 = HEAP32[$m_bufferSize11>>2]|0;
  $arrayidx = (($6) + ($7)|0);
  HEAP8[$arrayidx>>0] = 0;
  $m_pBuffer12 = ((($agg$result)) + 4|0);
  $8 = HEAP32[$m_pBuffer12>>2]|0;
  $m_bufferSize13 = ((($agg$result)) + 8|0);
  $9 = HEAP32[$m_bufferSize13>>2]|0;
  $10 = $pFile;
  (_fread($8,1,$9,$10)|0);
  $11 = $pFile;
  (_fclose($11)|0);
  $m_isValid = ((($agg$result)) + 12|0);
  HEAP8[$m_isValid>>0] = 1;
 } else {
  $m_isValid18 = ((($agg$result)) + 12|0);
  HEAP8[$m_isValid18>>0] = 0;
 }
 $$expand_i1_val2 = 1;
 HEAP8[$nrvo>>0] = $$expand_i1_val2;
 $nrvo$val$pre_trunc = HEAP8[$nrvo>>0]|0;
 $nrvo$val = $nrvo$val$pre_trunc&1;
 if ($nrvo$val) {
  STACKTOP = sp;return;
 }
 __ZN2lm4FileD2Ev($agg$result);
 STACKTOP = sp;return;
}
function __ZN2lm7TextureD0Ev($this) {
 $this = $this|0;
 var $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 __ZN2lm7TextureD2Ev($this1);
 __ZdlPv($this1);
 STACKTOP = sp;return;
}
function __ZN2lm7TextureD2Ev($this) {
 $this = $this|0;
 var $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 HEAP32[$this1>>2] = (3680);
 __ZN2lm7Texture4termEv($this1);
 __ZN2lm6ObjectD2Ev($this1);
 STACKTOP = sp;return;
}
function __ZN2lm7Texture4termEv($this) {
 $this = $this|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, $call = 0, $cmp = 0, $cmp3 = 0, $m_handle = 0, $m_handle2 = 0, $m_handle5 = 0, $m_handle6 = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp4$byval_copy = sp + 16|0;
 $agg$tmp$byval_copy = sp + 12|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp4 = sp;
 $this$addr = $this;
 $this1 = $this$addr;
 $m_handle = ((($this1)) + 4|0);
 $0 = HEAP32[$m_handle>>2]|0;
 $cmp = ($0|0)!=(0);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $m_handle2 = ((($this1)) + 4|0);
 ;HEAP32[$agg$tmp>>2]=HEAP32[$m_handle2>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (_sg_query_image_state($agg$tmp$byval_copy)|0);
 $cmp3 = ($call|0)!=(4);
 if (!($cmp3)) {
  STACKTOP = sp;return;
 }
 $m_handle5 = ((($this1)) + 4|0);
 ;HEAP32[$agg$tmp4>>2]=HEAP32[$m_handle5>>2]|0;
 ;HEAP32[$agg$tmp4$byval_copy>>2]=HEAP32[$agg$tmp4>>2]|0;
 _sg_destroy_image($agg$tmp4$byval_copy);
 $m_handle6 = ((($this1)) + 4|0);
 HEAP32[$m_handle6>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN2lm7Texture13loadFromImageERKNS_5ImageE($this,$_image) {
 $this = $this|0;
 $_image = $_image|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $_image$addr = 0, $call = 0, $call10 = 0, $call2 = 0, $call3 = 0, $call5 = 0, $content = 0, $content6 = 0, $height = 0, $imageDesc = 0, $m_handle = 0, $mag_filter = 0, $min_filter = 0, $num_mipmaps = 0, $pixel_format = 0, $ref$tmp = 0;
 var $size = 0, $this$addr = 0, $this1 = 0, $type = 0, $usage = 0, $width = 0, $wrap_u = 0, $wrap_v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 896|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(896|0);
 $imageDesc = sp + 8|0;
 $ref$tmp = sp;
 $this$addr = $this;
 $_image$addr = $_image;
 $this1 = $this$addr;
 _memset(($imageDesc|0),0,872)|0;
 $type = ((($imageDesc)) + 4|0);
 HEAP32[$type>>2] = 1;
 $0 = $_image$addr;
 $call = (__ZNK2lm5Image8getWidthEv($0)|0);
 $width = ((($imageDesc)) + 12|0);
 HEAP32[$width>>2] = $call;
 $1 = $_image$addr;
 $call2 = (__ZNK2lm5Image9getHeightEv($1)|0);
 $height = ((($imageDesc)) + 16|0);
 HEAP32[$height>>2] = $call2;
 $num_mipmaps = ((($imageDesc)) + 24|0);
 HEAP32[$num_mipmaps>>2] = 1;
 $usage = ((($imageDesc)) + 28|0);
 HEAP32[$usage>>2] = 1;
 $pixel_format = ((($imageDesc)) + 32|0);
 HEAP32[$pixel_format>>2] = 23;
 $wrap_u = ((($imageDesc)) + 48|0);
 HEAP32[$wrap_u>>2] = 2;
 $wrap_v = ((($imageDesc)) + 52|0);
 HEAP32[$wrap_v>>2] = 2;
 $min_filter = ((($imageDesc)) + 40|0);
 HEAP32[$min_filter>>2] = 1;
 $mag_filter = ((($imageDesc)) + 44|0);
 HEAP32[$mag_filter>>2] = 1;
 $2 = $_image$addr;
 $call3 = (__ZNK2lm5Image9getBufferEv($2)|0);
 $content = ((($imageDesc)) + 76|0);
 HEAP32[$content>>2] = $call3;
 $3 = $_image$addr;
 $call5 = (__ZNK2lm5Image13getBufferSizeEv($3)|0);
 $content6 = ((($imageDesc)) + 76|0);
 $size = ((($content6)) + 4|0);
 HEAP32[$size>>2] = $call5;
 $call10 = (_sg_make_image($imageDesc)|0);
 HEAP32[$ref$tmp>>2] = $call10;
 $m_handle = ((($this1)) + 4|0);
 ;HEAP32[$m_handle>>2]=HEAP32[$ref$tmp>>2]|0;
 STACKTOP = sp;return 1;
}
function __ZNK2lm5Image8getWidthEv($this) {
 $this = $this|0;
 var $0 = 0, $m_width = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $m_width = ((($this1)) + 8|0);
 $0 = HEAP32[$m_width>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function __ZNK2lm5Image9getHeightEv($this) {
 $this = $this|0;
 var $0 = 0, $m_height = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $m_height = ((($this1)) + 12|0);
 $0 = HEAP32[$m_height>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function __ZNK2lm5Image9getBufferEv($this) {
 $this = $this|0;
 var $0 = 0, $m_buffer = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $m_buffer = ((($this1)) + 4|0);
 $0 = HEAP32[$m_buffer>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function __ZNK2lm5Image13getBufferSizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $m_height = 0, $m_nbChannels = 0, $m_width = 0, $mul = 0, $mul2 = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $m_width = ((($this1)) + 8|0);
 $0 = HEAP32[$m_width>>2]|0;
 $m_height = ((($this1)) + 12|0);
 $1 = HEAP32[$m_height>>2]|0;
 $mul = Math_imul($0, $1)|0;
 $m_nbChannels = ((($this1)) + 16|0);
 $2 = HEAP32[$m_nbChannels>>2]|0;
 $mul2 = Math_imul($mul, $2)|0;
 STACKTOP = sp;return ($mul2|0);
}
function __ZN2lm7Texture9getHandleEv($this) {
 $this = $this|0;
 var $0 = 0, $m_handle = 0, $retval = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $retval = sp + 4|0;
 $this$addr = $this;
 $this1 = $this$addr;
 $m_handle = ((($this1)) + 4|0);
 ;HEAP32[$retval>>2]=HEAP32[$m_handle>>2]|0;
 $0 = HEAP32[$retval>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function __ZN2lm6ShaderD0Ev($this) {
 $this = $this|0;
 var $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 __ZN2lm6ShaderD2Ev($this1);
 __ZdlPv($this1);
 STACKTOP = sp;return;
}
function __ZN2lm6ShaderD2Ev($this) {
 $this = $this|0;
 var $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 HEAP32[$this1>>2] = (3696);
 __ZN2lm6Shader4termEv($this1);
 __ZN2lm6ObjectD2Ev($this1);
 STACKTOP = sp;return;
}
function __ZN2lm6Shader4termEv($this) {
 $this = $this|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, $call = 0, $cmp = 0, $cmp3 = 0, $m_handle = 0, $m_handle2 = 0, $m_handle5 = 0, $m_handle6 = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp4$byval_copy = sp + 16|0;
 $agg$tmp$byval_copy = sp + 12|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp4 = sp;
 $this$addr = $this;
 $this1 = $this$addr;
 $m_handle = ((($this1)) + 4|0);
 $0 = HEAP32[$m_handle>>2]|0;
 $cmp = ($0|0)!=(0);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $m_handle2 = ((($this1)) + 4|0);
 ;HEAP32[$agg$tmp>>2]=HEAP32[$m_handle2>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (_sg_query_shader_state($agg$tmp$byval_copy)|0);
 $cmp3 = ($call|0)!=(4);
 if (!($cmp3)) {
  STACKTOP = sp;return;
 }
 $m_handle5 = ((($this1)) + 4|0);
 ;HEAP32[$agg$tmp4>>2]=HEAP32[$m_handle5>>2]|0;
 ;HEAP32[$agg$tmp4$byval_copy>>2]=HEAP32[$agg$tmp4>>2]|0;
 _sg_destroy_shader($agg$tmp4$byval_copy);
 $m_handle6 = ((($this1)) + 4|0);
 HEAP32[$m_handle6>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN2lm6Shader13CreateDefaultERS0_($_shader) {
 $_shader = $_shader|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$addr$i$i$i = 0, $__p$addr$i$i$i69 = 0, $__r$addr$i$i$i$i$i = 0;
 var $__r$addr$i$i$i$i$i74 = 0, $__s$addr$i = 0, $__s$addr$i51 = 0, $__x$addr$i$i$i$i$i$i = 0, $__x$addr$i$i$i$i$i$i73 = 0, $_shader$addr = 0, $and$i$i$i$i = 0, $and$i$i$i$i95 = 0, $arrayidx17 = 0, $arrayidx20 = 0, $attrs = 0, $attrs16 = 0, $attrs19 = 0, $call = 0, $call$i = 0, $call$i59 = 0, $call42 = 0, $call6 = 0, $cond$i$i$i = 0, $cond$i$i$i114 = 0;
 var $conv$i$i$i$i = 0, $conv$i$i$i$i94 = 0, $frag = 0, $fragSrc = 0, $fs = 0, $fs34 = 0, $fs37 = 0, $images = 0, $images38 = 0, $m_handle = 0, $ref$tmp = 0, $shaderDesc = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i$i$i = 0, $this$addr$i$i$i$i$i$i = 0, $this$addr$i$i$i$i$i$i78 = 0, $this$addr$i$i$i$i$i79 = 0;
 var $this$addr$i$i$i$i46 = 0, $this$addr$i$i$i$i61 = 0, $this$addr$i$i$i$i80 = 0, $this$addr$i$i$i13$i$i$i = 0, $this$addr$i$i$i13$i$i$i70 = 0, $this$addr$i$i$i4$i$i$i = 0, $this$addr$i$i$i4$i$i$i75 = 0, $this$addr$i$i$i48 = 0, $this$addr$i$i$i62 = 0, $this$addr$i$i$i81 = 0, $this$addr$i$i14$i$i$i = 0, $this$addr$i$i14$i$i$i71 = 0, $this$addr$i$i49 = 0, $this$addr$i$i5$i$i$i = 0, $this$addr$i$i5$i$i$i76 = 0, $this$addr$i$i63 = 0, $this$addr$i$i82 = 0, $this$addr$i15$i$i$i = 0, $this$addr$i15$i$i$i72 = 0, $this$addr$i2$i$i = 0;
 var $this$addr$i2$i$i47 = 0, $this$addr$i50 = 0, $this$addr$i6$i$i$i = 0, $this$addr$i6$i$i$i77 = 0, $this$addr$i64 = 0, $this$addr$i83 = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i$i$i = 0, $this1$i$i$i$i$i$i = 0, $this1$i$i$i$i$i$i90 = 0, $this1$i$i$i$i$i89 = 0, $this1$i$i$i$i68 = 0, $this1$i$i$i$i87 = 0, $this1$i$i$i10$i$i$i = 0, $this1$i$i$i10$i$i$i108 = 0, $this1$i$i$i19$i$i$i = 0, $this1$i$i$i19$i$i$i100 = 0, $this1$i$i$i55 = 0;
 var $this1$i$i$i67 = 0, $this1$i$i$i86 = 0, $this1$i$i18$i$i$i = 0, $this1$i$i18$i$i$i99 = 0, $this1$i$i54 = 0, $this1$i$i66 = 0, $this1$i$i85 = 0, $this1$i$i9$i$i$i = 0, $this1$i$i9$i$i$i107 = 0, $this1$i16$i$i$i = 0, $this1$i16$i$i$i97 = 0, $this1$i3$i$i = 0, $this1$i3$i$i57 = 0, $this1$i52 = 0, $this1$i65 = 0, $this1$i7$i$i$i = 0, $this1$i7$i$i$i105 = 0, $this1$i84 = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i96 = 0;
 var $type = 0, $type40 = 0, $uniform_blocks = 0, $uniform_blocks25 = 0, $uniform_blocks30 = 0, $uniforms = 0, $uniforms32 = 0, $vert = 0, $vertSrc = 0, $vs = 0, $vs22 = 0, $vs24 = 0, $vs29 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2240|0);
 $shaderDesc = sp + 64|0;
 $vert = sp + 48|0;
 $frag = sp + 32|0;
 $vertSrc = sp + 16|0;
 $fragSrc = sp + 4|0;
 $ref$tmp = sp;
 $_shader$addr = $_shader;
 _memset(($shaderDesc|0),0,1996)|0;
 __ZN2lm4File4LoadEPKc($vert,7541);
 __ZN2lm4File4LoadEPKc($frag,7556);
 $call = (__ZNK2lm4File9getBufferEv($vert)|0);
 $this$addr$i = $vertSrc;
 $__s$addr$i = $call;
 $this1$i = $this$addr$i;
 $this$addr$i$i = $this1$i;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 ;HEAP32[$this1$i$i$i>>2]=0|0;HEAP32[$this1$i$i$i+4>>2]=0|0;HEAP32[$this1$i$i$i+8>>2]=0|0;
 $this$addr$i2$i$i = $this1$i$i;
 $this1$i3$i$i = $this$addr$i2$i$i;
 $this$addr$i$i$i$i = $this1$i3$i$i;
 $0 = $__s$addr$i;
 $1 = $__s$addr$i;
 $call$i = (__ZNSt3__211char_traitsIcE6lengthEPKc($1)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($this1$i,$0,$call$i);
 $call6 = (__ZNK2lm4File9getBufferEv($frag)|0);
 $this$addr$i50 = $fragSrc;
 $__s$addr$i51 = $call6;
 $this1$i52 = $this$addr$i50;
 $this$addr$i$i49 = $this1$i52;
 $this1$i$i54 = $this$addr$i$i49;
 $this$addr$i$i$i48 = $this1$i$i54;
 $this1$i$i$i55 = $this$addr$i$i$i48;
 ;HEAP32[$this1$i$i$i55>>2]=0|0;HEAP32[$this1$i$i$i55+4>>2]=0|0;HEAP32[$this1$i$i$i55+8>>2]=0|0;
 $this$addr$i2$i$i47 = $this1$i$i54;
 $this1$i3$i$i57 = $this$addr$i2$i$i47;
 $this$addr$i$i$i$i46 = $this1$i3$i$i57;
 $2 = $__s$addr$i51;
 $3 = $__s$addr$i51;
 $call$i59 = (__ZNSt3__211char_traitsIcE6lengthEPKc($3)|0);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($this1$i52,$2,$call$i59);
 (__ZN2lm6Shader13ConvertToGLESERNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($vertSrc)|0);
 (__ZN2lm6Shader13ConvertToGLESERNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($fragSrc)|0);
 $this$addr$i64 = $vertSrc;
 $this1$i65 = $this$addr$i64;
 $this$addr$i$i63 = $this1$i65;
 $this1$i$i66 = $this$addr$i$i63;
 $this$addr$i$i$i62 = $this1$i$i66;
 $this1$i$i$i67 = $this$addr$i$i$i62;
 $this$addr$i$i$i$i61 = $this1$i$i$i67;
 $this1$i$i$i$i68 = $this$addr$i$i$i$i61;
 $this$addr$i$i$i$i$i = $this1$i$i$i$i68;
 $this1$i$i$i$i$i = $this$addr$i$i$i$i$i;
 $this$addr$i$i$i$i$i$i = $this1$i$i$i$i$i;
 $this1$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i;
 $4 = ((($this1$i$i$i$i$i$i)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 $conv$i$i$i$i = $5&255;
 $and$i$i$i$i = $conv$i$i$i$i & 128;
 $tobool$i$i$i$i = ($and$i$i$i$i|0)!=(0);
 if ($tobool$i$i$i$i) {
  $this$addr$i15$i$i$i = $this1$i$i$i67;
  $this1$i16$i$i$i = $this$addr$i15$i$i$i;
  $this$addr$i$i14$i$i$i = $this1$i16$i$i$i;
  $this1$i$i18$i$i$i = $this$addr$i$i14$i$i$i;
  $this$addr$i$i$i13$i$i$i = $this1$i$i18$i$i$i;
  $this1$i$i$i19$i$i$i = $this$addr$i$i$i13$i$i$i;
  $6 = HEAP32[$this1$i$i$i19$i$i$i>>2]|0;
  $cond$i$i$i = $6;
 } else {
  $this$addr$i6$i$i$i = $this1$i$i$i67;
  $this1$i7$i$i$i = $this$addr$i6$i$i$i;
  $this$addr$i$i5$i$i$i = $this1$i7$i$i$i;
  $this1$i$i9$i$i$i = $this$addr$i$i5$i$i$i;
  $this$addr$i$i$i4$i$i$i = $this1$i$i9$i$i$i;
  $this1$i$i$i10$i$i$i = $this$addr$i$i$i4$i$i$i;
  $__r$addr$i$i$i$i$i = $this1$i$i$i10$i$i$i;
  $7 = $__r$addr$i$i$i$i$i;
  $__x$addr$i$i$i$i$i$i = $7;
  $8 = $__x$addr$i$i$i$i$i$i;
  $cond$i$i$i = $8;
 }
 $__p$addr$i$i$i = $cond$i$i$i;
 $9 = $__p$addr$i$i$i;
 $vs = ((($shaderDesc)) + 196|0);
 HEAP32[$vs>>2] = $9;
 $this$addr$i83 = $fragSrc;
 $this1$i84 = $this$addr$i83;
 $this$addr$i$i82 = $this1$i84;
 $this1$i$i85 = $this$addr$i$i82;
 $this$addr$i$i$i81 = $this1$i$i85;
 $this1$i$i$i86 = $this$addr$i$i$i81;
 $this$addr$i$i$i$i80 = $this1$i$i$i86;
 $this1$i$i$i$i87 = $this$addr$i$i$i$i80;
 $this$addr$i$i$i$i$i79 = $this1$i$i$i$i87;
 $this1$i$i$i$i$i89 = $this$addr$i$i$i$i$i79;
 $this$addr$i$i$i$i$i$i78 = $this1$i$i$i$i$i89;
 $this1$i$i$i$i$i$i90 = $this$addr$i$i$i$i$i$i78;
 $10 = ((($this1$i$i$i$i$i$i90)) + 11|0);
 $11 = HEAP8[$10>>0]|0;
 $conv$i$i$i$i94 = $11&255;
 $and$i$i$i$i95 = $conv$i$i$i$i94 & 128;
 $tobool$i$i$i$i96 = ($and$i$i$i$i95|0)!=(0);
 if ($tobool$i$i$i$i96) {
  $this$addr$i15$i$i$i72 = $this1$i$i$i86;
  $this1$i16$i$i$i97 = $this$addr$i15$i$i$i72;
  $this$addr$i$i14$i$i$i71 = $this1$i16$i$i$i97;
  $this1$i$i18$i$i$i99 = $this$addr$i$i14$i$i$i71;
  $this$addr$i$i$i13$i$i$i70 = $this1$i$i18$i$i$i99;
  $this1$i$i$i19$i$i$i100 = $this$addr$i$i$i13$i$i$i70;
  $12 = HEAP32[$this1$i$i$i19$i$i$i100>>2]|0;
  $cond$i$i$i114 = $12;
 } else {
  $this$addr$i6$i$i$i77 = $this1$i$i$i86;
  $this1$i7$i$i$i105 = $this$addr$i6$i$i$i77;
  $this$addr$i$i5$i$i$i76 = $this1$i7$i$i$i105;
  $this1$i$i9$i$i$i107 = $this$addr$i$i5$i$i$i76;
  $this$addr$i$i$i4$i$i$i75 = $this1$i$i9$i$i$i107;
  $this1$i$i$i10$i$i$i108 = $this$addr$i$i$i4$i$i$i75;
  $__r$addr$i$i$i$i$i74 = $this1$i$i$i10$i$i$i108;
  $13 = $__r$addr$i$i$i$i$i74;
  $__x$addr$i$i$i$i$i$i73 = $13;
  $14 = $__x$addr$i$i$i$i$i$i73;
  $cond$i$i$i114 = $14;
 }
 $__p$addr$i$i$i69 = $cond$i$i$i114;
 $15 = $__p$addr$i$i$i69;
 $fs = ((($shaderDesc)) + 1092|0);
 HEAP32[$fs>>2] = $15;
 $attrs = ((($shaderDesc)) + 4|0);
 HEAP32[$attrs>>2] = 7571;
 $attrs16 = ((($shaderDesc)) + 4|0);
 $arrayidx17 = ((($attrs16)) + 12|0);
 HEAP32[$arrayidx17>>2] = 7580;
 $attrs19 = ((($shaderDesc)) + 4|0);
 $arrayidx20 = ((($attrs19)) + 24|0);
 HEAP32[$arrayidx20>>2] = 7590;
 $vs22 = ((($shaderDesc)) + 196|0);
 $uniform_blocks = ((($vs22)) + 16|0);
 HEAP32[$uniform_blocks>>2] = 64;
 $vs24 = ((($shaderDesc)) + 196|0);
 $uniform_blocks25 = ((($vs24)) + 16|0);
 $uniforms = ((($uniform_blocks25)) + 4|0);
 HEAP32[$uniforms>>2] = 7600;
 $vs29 = ((($shaderDesc)) + 196|0);
 $uniform_blocks30 = ((($vs29)) + 16|0);
 $uniforms32 = ((($uniform_blocks30)) + 4|0);
 $type = ((($uniforms32)) + 4|0);
 HEAP32[$type>>2] = 5;
 $fs34 = ((($shaderDesc)) + 1092|0);
 $images = ((($fs34)) + 800|0);
 HEAP32[$images>>2] = 7604;
 $fs37 = ((($shaderDesc)) + 1092|0);
 $images38 = ((($fs37)) + 800|0);
 $type40 = ((($images38)) + 4|0);
 HEAP32[$type40>>2] = 1;
 $call42 = (_sg_make_shader($shaderDesc)|0);
 HEAP32[$ref$tmp>>2] = $call42;
 $16 = $_shader$addr;
 $m_handle = ((($16)) + 4|0);
 ;HEAP32[$m_handle>>2]=HEAP32[$ref$tmp>>2]|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($fragSrc);
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($vertSrc);
 __ZN2lm4FileD2Ev($frag);
 __ZN2lm4FileD2Ev($vert);
 STACKTOP = sp;return 1;
}
function __ZNK2lm4File9getBufferEv($this) {
 $this = $this|0;
 var $0 = 0, $m_pBuffer = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $m_pBuffer = ((($this1)) + 4|0);
 $0 = HEAP32[$m_pBuffer>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__211char_traitsIcE6lengthEPKc($__s) {
 $__s = $__s|0;
 var $0 = 0, $__s$addr = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__s$addr = $__s;
 $0 = $__s$addr;
 $call = (_strlen($0)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZN2lm6Shader13ConvertToGLESERNSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($_shader) {
 $_shader = $_shader|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$addr$i$i$i$i = 0;
 var $__a$i$i$i = 0, $__align$addr$i$i$i$i$i$i = 0, $__align$addr$i$i$i$i$i$i$i = 0, $__c$addr$i$i$i$i = 0, $__cap_$i$i$i$i = 0, $__cap_$i$i$i$i$i = 0, $__i$i$i$i = 0, $__n$addr$i$i$i$i = 0, $__n$addr$i$i$i$i$i = 0, $__p$addr$i$i$i$i = 0, $__p$addr$i$i$i$i$i = 0, $__ptr$addr$i$i$i$i$i$i = 0, $__ptr$addr$i$i$i$i$i$i$i = 0, $__r$addr$i$i$i$i$i$i = 0, $__s$addr$i$i$i$i = 0, $__s$addr$i$i$i$i$i = 0, $__s$addr$i31$i$i$i = 0, $__s$addr$i38$i$i$i$i = 0, $__size$addr$i$i$i$i$i$i = 0, $__size$addr$i$i$i$i$i$i$i = 0;
 var $__size_$i45$i$i$i$i = 0, $__str$addr$i = 0, $__str$addr$i$i = 0, $__str$addr$i$i$i = 0, $__t$addr$i$i$i$i$i = 0, $__x$addr$i$i$i$i$i$i$i = 0, $_shader$addr = 0, $agg$tmp$i = 0, $agg$tmp$i$i$i = 0, $agg$tmp2$i = 0, $agg$tmp2$i$i$i = 0, $and$i$i$i$i = 0, $and$i$i$i$i$i = 0, $and$i$i62$i$i$i = 0, $and$i11$i$i$i$i = 0, $arrayidx$i$i$i = 0, $cmp$i$i$i = 0, $cond$i$i$i$i = 0, $conv$i$i$i$i = 0, $conv$i$i$i$i$i = 0;
 var $conv$i$i61$i$i$i = 0, $conv$i11$i$i$i$i = 0, $conv$i22$i$i$i = 0, $inc$i$i$i = 0, $or$i$i$i$i = 0, $ref$tmp = 0, $ref$tmp$i$i$i$i = 0, $ref$tmp4$i$i$i$i = 0, $this$addr$i = 0, $this$addr$i$i = 0, $this$addr$i$i$i = 0, $this$addr$i$i$i$i = 0, $this$addr$i$i$i$i$i = 0, $this$addr$i$i$i$i$i$i = 0, $this$addr$i$i$i$i$i$i$i = 0, $this$addr$i$i$i$i$i13$i$i = 0, $this$addr$i$i$i$i14$i$i = 0, $this$addr$i$i$i$i49$i$i$i = 0, $this$addr$i$i$i11$i$i$i = 0, $this$addr$i$i$i15$i$i = 0;
 var $this$addr$i$i$i17$i$i$i$i = 0, $this$addr$i$i$i18$i$i$i = 0, $this$addr$i$i$i24$i$i = 0, $this$addr$i$i$i25$i$i$i$i = 0, $this$addr$i$i$i28$i$i$i = 0, $this$addr$i$i$i3$i$i$i$i = 0, $this$addr$i$i$i35$i$i$i$i = 0, $this$addr$i$i$i39$i$i$i = 0, $this$addr$i$i$i4$i$i$i$i = 0, $this$addr$i$i$i5$i$i$i = 0, $this$addr$i$i$i50$i$i$i = 0, $this$addr$i$i$i7$i$i$i$i = 0, $this$addr$i$i12$i$i$i = 0, $this$addr$i$i16$i$i = 0, $this$addr$i$i18$i$i$i$i = 0, $this$addr$i$i19$i$i$i = 0, $this$addr$i$i25$i$i = 0, $this$addr$i$i26$i$i$i$i = 0, $this$addr$i$i29$i$i$i = 0, $this$addr$i$i36$i$i$i$i = 0;
 var $this$addr$i$i37$i$i$i = 0, $this$addr$i$i4$i$i = 0, $this$addr$i$i4$i$i$i$i = 0, $this$addr$i$i40$i$i$i = 0, $this$addr$i$i5$i$i$i$i = 0, $this$addr$i$i51$i$i$i = 0, $this$addr$i$i6$i$i$i = 0, $this$addr$i$i8$i$i = 0, $this$addr$i$i8$i$i$i$i = 0, $this$addr$i13$i$i$i = 0, $this$addr$i17$i$i = 0, $this$addr$i19$i$i$i$i = 0, $this$addr$i20$i$i$i = 0, $this$addr$i26$i$i = 0, $this$addr$i27$i$i$i$i = 0, $this$addr$i30$i$i$i = 0, $this$addr$i37$i$i$i$i = 0, $this$addr$i41$i$i$i = 0, $this$addr$i5$i$i = 0, $this$addr$i5$i$i$i$i = 0;
 var $this$addr$i5$i48$i$i$i = 0, $this$addr$i52$i$i$i = 0, $this$addr$i6$i$i$i$i = 0, $this$addr$i7$i$i$i = 0, $this$addr$i9$i$i = 0, $this$addr$i9$i$i$i$i = 0, $this1$i = 0, $this1$i$i = 0, $this1$i$i$i = 0, $this1$i$i$i$i = 0, $this1$i$i$i$i$i$i = 0, $this1$i$i$i$i$i$i$i = 0, $this1$i$i$i$i$i23$i$i = 0, $this1$i$i$i$i22$i$i = 0, $this1$i$i$i$i57$i$i$i = 0, $this1$i$i$i10$i$i$i = 0, $this1$i$i$i14$i$i$i$i = 0, $this1$i$i$i17$i$i$i = 0, $this1$i$i$i20$i$i = 0, $this1$i$i$i23$i$i$i$i = 0;
 var $this1$i$i$i25$i$i$i = 0, $this1$i$i$i29$i$i = 0, $this1$i$i$i31$i$i$i$i = 0, $this1$i$i$i35$i$i$i = 0, $this1$i$i$i42$i$i$i$i = 0, $this1$i$i$i45$i$i$i = 0, $this1$i$i$i56$i$i$i = 0, $this1$i$i$i9$i$i$i$i = 0, $this1$i$i11$i$i = 0, $this1$i$i13$i$i$i$i = 0, $this1$i$i16$i$i$i = 0, $this1$i$i19$i$i = 0, $this1$i$i22$i$i$i$i = 0, $this1$i$i24$i$i$i = 0, $this1$i$i28$i$i = 0, $this1$i$i30$i$i$i$i = 0, $this1$i$i34$i$i$i = 0, $this1$i$i41$i$i$i$i = 0, $this1$i$i44$i$i$i = 0, $this1$i$i54$i$i$i = 0;
 var $this1$i$i7$i$i = 0, $this1$i$i8$i$i$i$i = 0, $this1$i$i9$i$i$i = 0, $this1$i$i9$i$i$i$i = 0, $this1$i10$i$i = 0, $this1$i10$i$i$i$i = 0, $this1$i14$i$i$i = 0, $this1$i18$i$i = 0, $this1$i20$i$i$i$i = 0, $this1$i21$i$i$i = 0, $this1$i27$i$i = 0, $this1$i28$i$i$i$i = 0, $this1$i32$i$i$i = 0, $this1$i39$i$i$i$i = 0, $this1$i42$i$i$i = 0, $this1$i53$i$i$i = 0, $this1$i6$i$i = 0, $this1$i6$i$i$i$i = 0, $this1$i6$i64$i$i$i = 0, $this1$i7$i$i$i$i = 0;
 var $this1$i8$i$i$i = 0, $tobool$i$i$i$i = 0, $tobool$i$i$i$i$i = 0, $tobool$i$i63$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(368|0);
 $agg$tmp2$i$i$i = sp + 8|0;
 $agg$tmp$i$i$i = sp + 359|0;
 $ref$tmp$i$i$i$i = sp + 358|0;
 $ref$tmp4$i$i$i$i = sp + 357|0;
 $agg$tmp2$i = sp;
 $agg$tmp$i = sp + 356|0;
 $ref$tmp = sp + 12|0;
 $_shader$addr = $_shader;
 $0 = $_shader$addr;
 __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_($ref$tmp,7608,$0);
 $1 = $_shader$addr;
 $this$addr$i = $1;
 $__str$addr$i = $ref$tmp;
 $this1$i = $this$addr$i;
 $2 = $__str$addr$i;
 ;HEAP8[$agg$tmp2$i>>0]=HEAP8[$agg$tmp$i>>0]|0;
 $this$addr$i$i = $this1$i;
 $__str$addr$i$i = $2;
 $this1$i$i = $this$addr$i$i;
 $this$addr$i$i$i = $this1$i$i;
 $this1$i$i$i = $this$addr$i$i$i;
 $this$addr$i$i$i$i = $this1$i$i$i;
 $this1$i$i$i$i = $this$addr$i$i$i$i;
 $this$addr$i$i$i$i$i = $this1$i$i$i$i;
 $this$addr$i5$i$i$i$i = $this1$i$i$i$i;
 $this1$i6$i$i$i$i = $this$addr$i5$i$i$i$i;
 $this$addr$i$i$i$i$i$i = $this1$i6$i$i$i$i;
 $this1$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i;
 $this$addr$i$i$i$i$i$i$i = $this1$i$i$i$i$i$i;
 $this1$i$i$i$i$i$i$i = $this$addr$i$i$i$i$i$i$i;
 $3 = ((($this1$i$i$i$i$i$i$i)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $conv$i$i$i$i$i = $4&255;
 $and$i$i$i$i$i = $conv$i$i$i$i$i & 128;
 $tobool$i$i$i$i$i = ($and$i$i$i$i$i|0)!=(0);
 if ($tobool$i$i$i$i$i) {
  $this$addr$i19$i$i$i$i = $this1$i$i$i$i;
  $this1$i20$i$i$i$i = $this$addr$i19$i$i$i$i;
  $this$addr$i$i18$i$i$i$i = $this1$i20$i$i$i$i;
  $this1$i$i22$i$i$i$i = $this$addr$i$i18$i$i$i$i;
  $this$addr$i$i$i17$i$i$i$i = $this1$i$i22$i$i$i$i;
  $this1$i$i$i23$i$i$i$i = $this$addr$i$i$i17$i$i$i$i;
  $5 = HEAP32[$this1$i$i$i23$i$i$i$i>>2]|0;
  HEAP8[$ref$tmp$i$i$i$i>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($5,$ref$tmp$i$i$i$i);
  $this$addr$i37$i$i$i$i = $this1$i$i$i$i;
  $__s$addr$i38$i$i$i$i = 0;
  $this1$i39$i$i$i$i = $this$addr$i37$i$i$i$i;
  $6 = $__s$addr$i38$i$i$i$i;
  $this$addr$i$i36$i$i$i$i = $this1$i39$i$i$i$i;
  $this1$i$i41$i$i$i$i = $this$addr$i$i36$i$i$i$i;
  $this$addr$i$i$i35$i$i$i$i = $this1$i$i41$i$i$i$i;
  $this1$i$i$i42$i$i$i$i = $this$addr$i$i$i35$i$i$i$i;
  $__size_$i45$i$i$i$i = ((($this1$i$i$i42$i$i$i$i)) + 4|0);
  HEAP32[$__size_$i45$i$i$i$i>>2] = $6;
 } else {
  $this$addr$i27$i$i$i$i = $this1$i$i$i$i;
  $this1$i28$i$i$i$i = $this$addr$i27$i$i$i$i;
  $this$addr$i$i26$i$i$i$i = $this1$i28$i$i$i$i;
  $this1$i$i30$i$i$i$i = $this$addr$i$i26$i$i$i$i;
  $this$addr$i$i$i25$i$i$i$i = $this1$i$i30$i$i$i$i;
  $this1$i$i$i31$i$i$i$i = $this$addr$i$i$i25$i$i$i$i;
  $__r$addr$i$i$i$i$i$i = $this1$i$i$i31$i$i$i$i;
  $7 = $__r$addr$i$i$i$i$i$i;
  $__x$addr$i$i$i$i$i$i$i = $7;
  $8 = $__x$addr$i$i$i$i$i$i$i;
  HEAP8[$ref$tmp4$i$i$i$i>>0] = 0;
  __ZNSt3__211char_traitsIcE6assignERcRKc($8,$ref$tmp4$i$i$i$i);
  $this$addr$i9$i$i$i$i = $this1$i$i$i$i;
  $__s$addr$i$i$i$i$i = 0;
  $this1$i10$i$i$i$i = $this$addr$i9$i$i$i$i;
  $9 = $__s$addr$i$i$i$i$i;
  $conv$i11$i$i$i$i = $9&255;
  $this$addr$i$i8$i$i$i$i = $this1$i10$i$i$i$i;
  $this1$i$i13$i$i$i$i = $this$addr$i$i8$i$i$i$i;
  $this$addr$i$i$i7$i$i$i$i = $this1$i$i13$i$i$i$i;
  $this1$i$i$i14$i$i$i$i = $this$addr$i$i$i7$i$i$i$i;
  $10 = ((($this1$i$i$i14$i$i$i$i)) + 11|0);
  HEAP8[$10>>0] = $conv$i11$i$i$i$i;
 }
 $this$addr$i7$i$i$i = $this1$i$i$i;
 $this1$i8$i$i$i = $this$addr$i7$i$i$i;
 $this$addr$i$i6$i$i$i = $this1$i8$i$i$i;
 $this1$i$i9$i$i$i = $this$addr$i$i6$i$i$i;
 $this$addr$i$i$i5$i$i$i = $this1$i$i9$i$i$i;
 $this1$i$i$i10$i$i$i = $this$addr$i$i$i5$i$i$i;
 $11 = ((($this1$i$i$i10$i$i$i)) + 11|0);
 $12 = HEAP8[$11>>0]|0;
 $conv$i$i$i$i = $12&255;
 $and$i$i$i$i = $conv$i$i$i$i & 128;
 $tobool$i$i$i$i = ($and$i$i$i$i|0)!=(0);
 if ($tobool$i$i$i$i) {
  $this$addr$i13$i$i$i = $this1$i$i$i;
  $this1$i14$i$i$i = $this$addr$i13$i$i$i;
  $this$addr$i$i12$i$i$i = $this1$i14$i$i$i;
  $this1$i$i16$i$i$i = $this$addr$i$i12$i$i$i;
  $this$addr$i$i$i11$i$i$i = $this1$i$i16$i$i$i;
  $this1$i$i$i17$i$i$i = $this$addr$i$i$i11$i$i$i;
  $this$addr$i41$i$i$i = $this1$i$i$i;
  $this1$i42$i$i$i = $this$addr$i41$i$i$i;
  $this$addr$i$i40$i$i$i = $this1$i42$i$i$i;
  $this1$i$i44$i$i$i = $this$addr$i$i40$i$i$i;
  $this$addr$i$i$i39$i$i$i = $this1$i$i44$i$i$i;
  $this1$i$i$i45$i$i$i = $this$addr$i$i$i39$i$i$i;
  $13 = HEAP32[$this1$i$i$i45$i$i$i>>2]|0;
  $this$addr$i52$i$i$i = $this1$i$i$i;
  $this1$i53$i$i$i = $this$addr$i52$i$i$i;
  $this$addr$i$i51$i$i$i = $this1$i53$i$i$i;
  $this1$i$i54$i$i$i = $this$addr$i$i51$i$i$i;
  $this$addr$i$i$i50$i$i$i = $this1$i$i54$i$i$i;
  $this1$i$i$i56$i$i$i = $this$addr$i$i$i50$i$i$i;
  $this$addr$i$i$i$i49$i$i$i = $this1$i$i$i56$i$i$i;
  $this1$i$i$i$i57$i$i$i = $this$addr$i$i$i$i49$i$i$i;
  $14 = ((($this1$i$i$i$i57$i$i$i)) + 11|0);
  $15 = HEAP8[$14>>0]|0;
  $conv$i$i61$i$i$i = $15&255;
  $and$i$i62$i$i$i = $conv$i$i61$i$i$i & 128;
  $tobool$i$i63$i$i$i = ($and$i$i62$i$i$i|0)!=(0);
  if ($tobool$i$i63$i$i$i) {
   $this$addr$i5$i48$i$i$i = $this1$i53$i$i$i;
   $this1$i6$i64$i$i$i = $this$addr$i5$i48$i$i$i;
   $this$addr$i$i4$i$i$i$i = $this1$i6$i64$i$i$i;
   $this1$i$i8$i$i$i$i = $this$addr$i$i4$i$i$i$i;
   $this$addr$i$i$i3$i$i$i$i = $this1$i$i8$i$i$i$i;
   $this1$i$i$i9$i$i$i$i = $this$addr$i$i$i3$i$i$i$i;
   $__cap_$i$i$i$i$i = ((($this1$i$i$i9$i$i$i$i)) + 8|0);
   $16 = HEAP32[$__cap_$i$i$i$i$i>>2]|0;
   $and$i11$i$i$i$i = $16 & 2147483647;
   $cond$i$i$i$i = $and$i11$i$i$i$i;
  } else {
   $cond$i$i$i$i = 11;
  }
  $__a$addr$i$i$i$i = $this1$i$i$i17$i$i$i;
  $__p$addr$i$i$i$i = $13;
  $__n$addr$i$i$i$i = $cond$i$i$i$i;
  $17 = $__a$addr$i$i$i$i;
  $18 = $__p$addr$i$i$i$i;
  $19 = $__n$addr$i$i$i$i;
  $this$addr$i$i37$i$i$i = $17;
  $__p$addr$i$i$i$i$i = $18;
  $__n$addr$i$i$i$i$i = $19;
  $20 = $__p$addr$i$i$i$i$i;
  $21 = $__n$addr$i$i$i$i$i;
  $__ptr$addr$i$i$i$i$i$i = $20;
  $__size$addr$i$i$i$i$i$i = $21;
  $__align$addr$i$i$i$i$i$i = 1;
  $22 = $__ptr$addr$i$i$i$i$i$i;
  $23 = $__size$addr$i$i$i$i$i$i;
  $24 = $__align$addr$i$i$i$i$i$i;
  $__ptr$addr$i$i$i$i$i$i$i = $22;
  $__size$addr$i$i$i$i$i$i$i = $23;
  $__align$addr$i$i$i$i$i$i$i = $24;
  $25 = $__ptr$addr$i$i$i$i$i$i$i;
  $26 = $__size$addr$i$i$i$i$i$i$i;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($25,$26);
  $this$addr$i30$i$i$i = $this1$i$i$i;
  $__s$addr$i31$i$i$i = 0;
  $this1$i32$i$i$i = $this$addr$i30$i$i$i;
  $27 = $__s$addr$i31$i$i$i;
  $or$i$i$i$i = -2147483648 | $27;
  $this$addr$i$i29$i$i$i = $this1$i32$i$i$i;
  $this1$i$i34$i$i$i = $this$addr$i$i29$i$i$i;
  $this$addr$i$i$i28$i$i$i = $this1$i$i34$i$i$i;
  $this1$i$i$i35$i$i$i = $this$addr$i$i$i28$i$i$i;
  $__cap_$i$i$i$i = ((($this1$i$i$i35$i$i$i)) + 8|0);
  HEAP32[$__cap_$i$i$i$i>>2] = $or$i$i$i$i;
  $this$addr$i20$i$i$i = $this1$i$i$i;
  $__s$addr$i$i$i$i = 0;
  $this1$i21$i$i$i = $this$addr$i20$i$i$i;
  $28 = $__s$addr$i$i$i$i;
  $conv$i22$i$i$i = $28&255;
  $this$addr$i$i19$i$i$i = $this1$i21$i$i$i;
  $this1$i$i24$i$i$i = $this$addr$i$i19$i$i$i;
  $this$addr$i$i$i18$i$i$i = $this1$i$i24$i$i$i;
  $this1$i$i$i25$i$i$i = $this$addr$i$i$i18$i$i$i;
  $29 = ((($this1$i$i$i25$i$i$i)) + 11|0);
  HEAP8[$29>>0] = $conv$i22$i$i$i;
 }
 $30 = $__str$addr$i$i;
 $this$addr$i5$i$i = $30;
 $this1$i6$i$i = $this$addr$i5$i$i;
 $this$addr$i$i4$i$i = $this1$i6$i$i;
 $this1$i$i7$i$i = $this$addr$i$i4$i$i;
 $this$addr$i9$i$i = $this1$i$i;
 $this1$i10$i$i = $this$addr$i9$i$i;
 $this$addr$i$i8$i$i = $this1$i10$i$i;
 $this1$i$i11$i$i = $this$addr$i$i8$i$i;
 ;HEAP32[$this1$i$i11$i$i>>2]=HEAP32[$this1$i$i7$i$i>>2]|0;HEAP32[$this1$i$i11$i$i+4>>2]=HEAP32[$this1$i$i7$i$i+4>>2]|0;HEAP32[$this1$i$i11$i$i+8>>2]=HEAP32[$this1$i$i7$i$i+8>>2]|0;
 $31 = $__str$addr$i$i;
 $this$addr$i17$i$i = $this1$i$i;
 $__str$addr$i$i$i = $31;
 $this1$i18$i$i = $this$addr$i17$i$i;
 $32 = $__str$addr$i$i$i;
 ;HEAP8[$agg$tmp2$i$i$i>>0]=HEAP8[$agg$tmp$i$i$i>>0]|0;
 $this$addr$i$i16$i$i = $this1$i18$i$i;
 $__c$addr$i$i$i$i = $32;
 $this1$i$i19$i$i = $this$addr$i$i16$i$i;
 $33 = $__c$addr$i$i$i$i;
 $this$addr$i$i$i15$i$i = $33;
 $this1$i$i$i20$i$i = $this$addr$i$i$i15$i$i;
 $this$addr$i$i$i$i14$i$i = $this1$i$i$i20$i$i;
 $this1$i$i$i$i22$i$i = $this$addr$i$i$i$i14$i$i;
 $this$addr$i$i$i$i$i13$i$i = $this1$i$i$i$i22$i$i;
 $this1$i$i$i$i$i23$i$i = $this$addr$i$i$i$i$i13$i$i;
 $__t$addr$i$i$i$i$i = $this1$i$i$i$i$i23$i$i;
 $this$addr$i6$i$i$i$i = $this1$i$i19$i$i;
 $this1$i7$i$i$i$i = $this$addr$i6$i$i$i$i;
 $this$addr$i$i5$i$i$i$i = $this1$i7$i$i$i$i;
 $this1$i$i9$i$i$i$i = $this$addr$i$i5$i$i$i$i;
 $this$addr$i$i$i4$i$i$i$i = $this1$i$i9$i$i$i$i;
 $34 = $__str$addr$i$i;
 $this$addr$i26$i$i = $34;
 $this1$i27$i$i = $this$addr$i26$i$i;
 $this$addr$i$i25$i$i = $this1$i27$i$i;
 $this1$i$i28$i$i = $this$addr$i$i25$i$i;
 $this$addr$i$i$i24$i$i = $this1$i$i28$i$i;
 $this1$i$i$i29$i$i = $this$addr$i$i$i24$i$i;
 $__a$i$i$i = $this1$i$i$i29$i$i;
 $__i$i$i$i = 0;
 while(1) {
  $35 = $__i$i$i$i;
  $cmp$i$i$i = ($35>>>0)<(3);
  if (!($cmp$i$i$i)) {
   break;
  }
  $36 = $__a$i$i$i;
  $37 = $__i$i$i$i;
  $arrayidx$i$i$i = (($36) + ($37<<2)|0);
  HEAP32[$arrayidx$i$i$i>>2] = 0;
  $38 = $__i$i$i$i;
  $inc$i$i$i = (($38) + 1)|0;
  $__i$i$i$i = $inc$i$i$i;
 }
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($ref$tmp);
 STACKTOP = sp;return 1;
}
function __ZNSt3__211char_traitsIcE6assignERcRKc($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $2 = 0, $__c1$addr = 0, $__c2$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $__c1$addr = $__c1;
 $__c2$addr = $__c2;
 $0 = $__c2$addr;
 $1 = HEAP8[$0>>0]|0;
 $2 = $__c1$addr;
 HEAP8[$2>>0] = $1;
 STACKTOP = sp;return;
}
function __ZN2lm6Shader17ApplyUniformBlockENS_11ShaderStageEPKvj($_stage,$_buffer,$_size) {
 $_stage = $_stage|0;
 $_buffer = $_buffer|0;
 $_size = $_size|0;
 var $0 = 0, $1 = 0, $2 = 0, $_buffer$addr = 0, $_size$addr = 0, $_stage$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $_stage$addr = $_stage;
 $_buffer$addr = $_buffer;
 $_size$addr = $_size;
 $0 = $_stage$addr;
 $1 = $_buffer$addr;
 $2 = $_size$addr;
 _sg_apply_uniforms($0,0,$1,$2);
 STACKTOP = sp;return;
}
function __ZN2lm6Shader9getHandleEv($this) {
 $this = $this|0;
 var $0 = 0, $m_handle = 0, $retval = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $retval = sp + 4|0;
 $this$addr = $this;
 $this1 = $this$addr;
 $m_handle = ((($this1)) + 4|0);
 ;HEAP32[$retval>>2]=HEAP32[$m_handle>>2]|0;
 $0 = HEAP32[$retval>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function __ZN2lm8PipelineD0Ev($this) {
 $this = $this|0;
 var $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 __ZN2lm8PipelineD2Ev($this1);
 __ZdlPv($this1);
 STACKTOP = sp;return;
}
function __ZN2lm8PipelineD2Ev($this) {
 $this = $this|0;
 var $m_shader = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 HEAP32[$this1>>2] = (3712);
 __ZN2lm8Pipeline4termEv($this1);
 $m_shader = ((($this1)) + 8|0);
 __ZN2lm6ShaderD2Ev($m_shader);
 __ZN2lm6ObjectD2Ev($this1);
 STACKTOP = sp;return;
}
function __ZN2lm8Pipeline4termEv($this) {
 $this = $this|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, $call = 0, $cmp = 0, $cmp3 = 0, $m_handle = 0, $m_handle2 = 0, $m_handle5 = 0, $m_handle6 = 0, $m_shader = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp4$byval_copy = sp + 16|0;
 $agg$tmp$byval_copy = sp + 12|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp4 = sp;
 $this$addr = $this;
 $this1 = $this$addr;
 $m_shader = ((($this1)) + 8|0);
 __ZN2lm6Shader4termEv($m_shader);
 $m_handle = ((($this1)) + 4|0);
 $0 = HEAP32[$m_handle>>2]|0;
 $cmp = ($0|0)!=(0);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $m_handle2 = ((($this1)) + 4|0);
 ;HEAP32[$agg$tmp>>2]=HEAP32[$m_handle2>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (_sg_query_pipeline_state($agg$tmp$byval_copy)|0);
 $cmp3 = ($call|0)!=(4);
 if (!($cmp3)) {
  STACKTOP = sp;return;
 }
 $m_handle5 = ((($this1)) + 4|0);
 ;HEAP32[$agg$tmp4>>2]=HEAP32[$m_handle5>>2]|0;
 ;HEAP32[$agg$tmp4$byval_copy>>2]=HEAP32[$agg$tmp4>>2]|0;
 _sg_destroy_pipeline($agg$tmp4$byval_copy);
 $m_handle6 = ((($this1)) + 4|0);
 HEAP32[$m_handle6>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN2lm8Pipeline13CreateDefaultERS0_($_pipeline) {
 $_pipeline = $_pipeline|0;
 var $0 = 0, $1 = 0, $2 = 0, $_pipeline$addr = 0, $arrayidx5 = 0, $arrayidx9 = 0, $attrs = 0, $attrs4 = 0, $attrs8 = 0, $blend = 0, $blend11 = 0, $blend12 = 0, $blend13 = 0, $blend14 = 0, $call17 = 0, $call2 = 0, $cull_mode = 0, $dst_factor_alpha = 0, $dst_factor_rgb = 0, $face_winding = 0;
 var $format = 0, $format10 = 0, $format6 = 0, $index_type = 0, $layout = 0, $layout3 = 0, $layout7 = 0, $m_handle = 0, $m_shader = 0, $m_shader1 = 0, $pipelineDesc = 0, $primitive_type = 0, $rasterizer = 0, $rasterizer15 = 0, $ref$tmp = 0, $ref$tmp16 = 0, $shader = 0, $src_factor_alpha = 0, $src_factor_rgb = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 464|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(464|0);
 $pipelineDesc = sp + 8|0;
 $ref$tmp = sp + 4|0;
 $ref$tmp16 = sp;
 $_pipeline$addr = $_pipeline;
 _memset(($pipelineDesc|0),0,444)|0;
 $0 = $_pipeline$addr;
 $m_shader = ((($0)) + 8|0);
 (__ZN2lm6Shader13CreateDefaultERS0_($m_shader)|0);
 $1 = $_pipeline$addr;
 $m_shader1 = ((($1)) + 8|0);
 $call2 = (__ZN2lm6Shader9getHandleEv($m_shader1)|0);
 HEAP32[$ref$tmp>>2] = $call2;
 $shader = ((($pipelineDesc)) + 292|0);
 ;HEAP32[$shader>>2]=HEAP32[$ref$tmp>>2]|0;
 $layout = ((($pipelineDesc)) + 4|0);
 $attrs = ((($layout)) + 96|0);
 $format = ((($attrs)) + 8|0);
 HEAP32[$format>>2] = 3;
 $layout3 = ((($pipelineDesc)) + 4|0);
 $attrs4 = ((($layout3)) + 96|0);
 $arrayidx5 = ((($attrs4)) + 12|0);
 $format6 = ((($arrayidx5)) + 8|0);
 HEAP32[$format6>>2] = 2;
 $layout7 = ((($pipelineDesc)) + 4|0);
 $attrs8 = ((($layout7)) + 96|0);
 $arrayidx9 = ((($attrs8)) + 24|0);
 $format10 = ((($arrayidx9)) + 8|0);
 HEAP32[$format10>>2] = 2;
 $primitive_type = ((($pipelineDesc)) + 296|0);
 HEAP32[$primitive_type>>2] = 4;
 $index_type = ((($pipelineDesc)) + 300|0);
 HEAP32[$index_type>>2] = 1;
 $blend = ((($pipelineDesc)) + 348|0);
 HEAP8[$blend>>0] = 1;
 $blend11 = ((($pipelineDesc)) + 348|0);
 $src_factor_rgb = ((($blend11)) + 4|0);
 HEAP32[$src_factor_rgb>>2] = 5;
 $blend12 = ((($pipelineDesc)) + 348|0);
 $dst_factor_rgb = ((($blend12)) + 8|0);
 HEAP32[$dst_factor_rgb>>2] = 6;
 $blend13 = ((($pipelineDesc)) + 348|0);
 $src_factor_alpha = ((($blend13)) + 16|0);
 HEAP32[$src_factor_alpha>>2] = 2;
 $blend14 = ((($pipelineDesc)) + 348|0);
 $dst_factor_alpha = ((($blend14)) + 20|0);
 HEAP32[$dst_factor_alpha>>2] = 6;
 $rasterizer = ((($pipelineDesc)) + 408|0);
 $face_winding = ((($rasterizer)) + 8|0);
 HEAP32[$face_winding>>2] = 1;
 $rasterizer15 = ((($pipelineDesc)) + 408|0);
 $cull_mode = ((($rasterizer15)) + 4|0);
 HEAP32[$cull_mode>>2] = 3;
 $call17 = (_sg_make_pipeline($pipelineDesc)|0);
 HEAP32[$ref$tmp16>>2] = $call17;
 $2 = $_pipeline$addr;
 $m_handle = ((($2)) + 4|0);
 ;HEAP32[$m_handle>>2]=HEAP32[$ref$tmp16>>2]|0;
 STACKTOP = sp;return 1;
}
function __ZN2lm8Pipeline9getHandleEv($this) {
 $this = $this|0;
 var $0 = 0, $m_handle = 0, $retval = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $retval = sp + 4|0;
 $this$addr = $this;
 $this1 = $this$addr;
 $m_handle = ((($this1)) + 4|0);
 ;HEAP32[$retval>>2]=HEAP32[$m_handle>>2]|0;
 $0 = HEAP32[$retval>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function __ZN2lm5ImageD0Ev($this) {
 $this = $this|0;
 var $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 __ZN2lm5ImageD2Ev($this1);
 __ZdlPv($this1);
 STACKTOP = sp;return;
}
function __ZN2lm5ImageD2Ev($this) {
 $this = $this|0;
 var $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 HEAP32[$this1>>2] = (3728);
 __ZN2lm5Image4termEv($this1);
 __ZN2lm6ObjectD2Ev($this1);
 STACKTOP = sp;return;
}
function __ZN2lm5Image4termEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $cmp = 0, $isnull = 0, $m_buffer = 0, $m_buffer2 = 0, $m_buffer3 = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 $m_buffer = ((($this1)) + 4|0);
 $0 = HEAP32[$m_buffer>>2]|0;
 $cmp = ($0|0)!=(0|0);
 if (!($cmp)) {
  STACKTOP = sp;return;
 }
 $m_buffer2 = ((($this1)) + 4|0);
 $1 = HEAP32[$m_buffer2>>2]|0;
 $isnull = ($1|0)==(0|0);
 if (!($isnull)) {
  __ZdlPv($1);
 }
 $m_buffer3 = ((($this1)) + 4|0);
 HEAP32[$m_buffer3>>2] = 0;
 STACKTOP = sp;return;
}
function _stbi_load($filename,$x,$y,$comp,$req_comp) {
 $filename = $filename|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call1 = 0, $call3 = 0, $comp$addr = 0, $cond = 0, $f = 0, $filename$addr = 0, $req_comp$addr = 0, $result = 0;
 var $retval = 0, $tobool = 0, $tobool2 = 0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $filename$addr = $filename;
 $x$addr = $x;
 $y$addr = $y;
 $comp$addr = $comp;
 $req_comp$addr = $req_comp;
 $0 = $filename$addr;
 $call = (__ZL11stbi__fopenPKcS0_($0,7661)|0);
 $f = $call;
 $1 = $f;
 $tobool = ($1|0)!=(0|0);
 if ($tobool) {
  $3 = $f;
  $4 = $x$addr;
  $5 = $y$addr;
  $6 = $comp$addr;
  $7 = $req_comp$addr;
  $call3 = (_stbi_load_from_file($3,$4,$5,$6,$7)|0);
  $result = $call3;
  $8 = $f;
  (_fclose($8)|0);
  $9 = $result;
  $retval = $9;
  $10 = $retval;
  STACKTOP = sp;return ($10|0);
 } else {
  $call1 = (__ZL9stbi__errPKc(7664)|0);
  $tobool2 = ($call1|0)!=(0);
  $cond = $tobool2 ? 0 : 0;
  $2 = $cond;
  $retval = $2;
  $10 = $retval;
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function __ZL11stbi__fopenPKcS0_($filename,$mode) {
 $filename = $filename|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $f = 0, $filename$addr = 0, $mode$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $filename$addr = $filename;
 $mode$addr = $mode;
 $0 = $filename$addr;
 $1 = $mode$addr;
 $call = (_fopen($0,$1)|0);
 $f = $call;
 $2 = $f;
 STACKTOP = sp;return ($2|0);
}
function __ZL9stbi__errPKc($str) {
 $str = $str|0;
 var $0 = 0, $str$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $str$addr = $str;
 $0 = $str$addr;
 HEAP32[8366] = $0;
 STACKTOP = sp;return 0;
}
function _stbi_load_from_file($f,$x,$y,$comp,$req_comp) {
 $f = $f|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $comp$addr = 0, $f$addr = 0, $img_buffer = 0, $img_buffer_end = 0, $req_comp$addr = 0, $result = 0, $s = 0, $sub = 0, $sub$ptr$lhs$cast = 0;
 var $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $s = sp;
 $f$addr = $f;
 $x$addr = $x;
 $y$addr = $y;
 $comp$addr = $comp;
 $req_comp$addr = $req_comp;
 $0 = $f$addr;
 __ZL16stbi__start_fileP13stbi__contextP8_IO_FILE($s,$0);
 $1 = $x$addr;
 $2 = $y$addr;
 $3 = $comp$addr;
 $4 = $req_comp$addr;
 $call = (__ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i($s,$1,$2,$3,$4)|0);
 $result = $call;
 $5 = $result;
 $tobool = ($5|0)!=(0|0);
 if (!($tobool)) {
  $9 = $result;
  STACKTOP = sp;return ($9|0);
 }
 $6 = $f$addr;
 $img_buffer_end = ((($s)) + 172|0);
 $7 = HEAP32[$img_buffer_end>>2]|0;
 $img_buffer = ((($s)) + 168|0);
 $8 = HEAP32[$img_buffer>>2]|0;
 $sub$ptr$lhs$cast = $7;
 $sub$ptr$rhs$cast = $8;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $sub = (0 - ($sub$ptr$sub))|0;
 (_fseek($6,$sub,1)|0);
 $9 = $result;
 STACKTOP = sp;return ($9|0);
}
function __ZL16stbi__start_fileP13stbi__contextP8_IO_FILE($s,$f) {
 $s = $s|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $f$addr = 0, $s$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $s$addr = $s;
 $f$addr = $f;
 $0 = $s$addr;
 $1 = $f$addr;
 __ZL21stbi__start_callbacksP13stbi__contextP17stbi_io_callbacksPv($0,3736,$1);
 STACKTOP = sp;return;
}
function __ZL31stbi__load_and_postprocess_8bitP13stbi__contextPiS1_S1_i($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call6 = 0, $channels = 0, $cmp = 0, $cmp1 = 0, $cmp4 = 0, $cmp5 = 0, $comp$addr = 0, $cond = 0, $cond14 = 0, $mul = 0;
 var $req_comp$addr = 0, $result = 0, $retval = 0, $ri = 0, $s$addr = 0, $tobool = 0, $tobool10 = 0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $ri = sp + 8|0;
 $s$addr = $s;
 $x$addr = $x;
 $y$addr = $y;
 $comp$addr = $comp;
 $req_comp$addr = $req_comp;
 $0 = $s$addr;
 $1 = $x$addr;
 $2 = $y$addr;
 $3 = $comp$addr;
 $4 = $req_comp$addr;
 $call = (__ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi($0,$1,$2,$3,$4,$ri,8)|0);
 $result = $call;
 $5 = $result;
 $cmp = ($5|0)==(0|0);
 if ($cmp) {
  $retval = 0;
  $28 = $retval;
  STACKTOP = sp;return ($28|0);
 }
 $6 = HEAP32[$ri>>2]|0;
 $cmp1 = ($6|0)!=(8);
 if ($cmp1) {
  $7 = HEAP32[$ri>>2]|0;
  $cmp4 = ($7|0)==(16);
  if (!($cmp4)) {
   ___assert_fail((7676|0),(7702|0),1094,(7730|0));
   // unreachable;
  }
  $8 = $result;
  $9 = $x$addr;
  $10 = HEAP32[$9>>2]|0;
  $11 = $y$addr;
  $12 = HEAP32[$11>>2]|0;
  $13 = $req_comp$addr;
  $cmp5 = ($13|0)==(0);
  if ($cmp5) {
   $14 = $comp$addr;
   $15 = HEAP32[$14>>2]|0;
   $cond = $15;
  } else {
   $16 = $req_comp$addr;
   $cond = $16;
  }
  $call6 = (__ZL21stbi__convert_16_to_8Ptiii($8,$10,$12,$cond)|0);
  $result = $call6;
  HEAP32[$ri>>2] = 8;
 }
 $tobool = (0)!=(0);
 if ($tobool) {
  $17 = $req_comp$addr;
  $tobool10 = ($17|0)!=(0);
  if ($tobool10) {
   $18 = $req_comp$addr;
   $cond14 = $18;
  } else {
   $19 = $comp$addr;
   $20 = HEAP32[$19>>2]|0;
   $cond14 = $20;
  }
  $channels = $cond14;
  $21 = $result;
  $22 = $x$addr;
  $23 = HEAP32[$22>>2]|0;
  $24 = $y$addr;
  $25 = HEAP32[$24>>2]|0;
  $26 = $channels;
  $mul = $26;
  __ZL19stbi__vertical_flipPviii($21,$23,$25,$mul);
 }
 $27 = $result;
 $retval = $27;
 $28 = $retval;
 STACKTOP = sp;return ($28|0);
}
function __ZL15stbi__load_mainP13stbi__contextPiS1_S1_iP17stbi__result_infoi($s,$x,$y,$comp,$req_comp,$ri,$bpc) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 $ri = $ri|0;
 $bpc = $bpc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bpc$addr = 0, $call = 0, $call1 = 0, $call2 = 0, $channel_order = 0, $comp$addr = 0, $cond = 0;
 var $num_channels = 0, $req_comp$addr = 0, $retval = 0, $ri$addr = 0, $s$addr = 0, $tobool = 0, $tobool3 = 0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $s$addr = $s;
 $x$addr = $x;
 $y$addr = $y;
 $comp$addr = $comp;
 $req_comp$addr = $req_comp;
 $ri$addr = $ri;
 $bpc$addr = $bpc;
 $0 = $ri$addr;
 ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 $1 = $ri$addr;
 HEAP32[$1>>2] = 8;
 $2 = $ri$addr;
 $channel_order = ((($2)) + 8|0);
 HEAP32[$channel_order>>2] = 0;
 $3 = $ri$addr;
 $num_channels = ((($3)) + 4|0);
 HEAP32[$num_channels>>2] = 0;
 $4 = $s$addr;
 $call = (__ZL14stbi__png_testP13stbi__context($4)|0);
 $tobool = ($call|0)!=(0);
 if ($tobool) {
  $5 = $s$addr;
  $6 = $x$addr;
  $7 = $y$addr;
  $8 = $comp$addr;
  $9 = $req_comp$addr;
  $10 = $ri$addr;
  $call1 = (__ZL14stbi__png_loadP13stbi__contextPiS1_S1_iP17stbi__result_info($5,$6,$7,$8,$9,$10)|0);
  $retval = $call1;
  $12 = $retval;
  STACKTOP = sp;return ($12|0);
 } else {
  $call2 = (__ZL9stbi__errPKc(7771)|0);
  $tobool3 = ($call2|0)!=(0);
  $cond = $tobool3 ? 0 : 0;
  $11 = $cond;
  $retval = $11;
  $12 = $retval;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function __ZL21stbi__convert_16_to_8Ptiii($orig,$w,$h,$channels) {
 $orig = $orig|0;
 $w = $w|0;
 $h = $h|0;
 $channels = $channels|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $arrayidx = 0, $arrayidx5 = 0, $call = 0;
 var $call2 = 0, $channels$addr = 0, $cmp = 0, $cmp3 = 0, $cond = 0, $conv = 0, $conv4 = 0, $h$addr = 0, $i = 0, $img_len = 0, $inc = 0, $mul = 0, $mul1 = 0, $orig$addr = 0, $reduced = 0, $retval = 0, $shr = 0, $tobool = 0, $w$addr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $orig$addr = $orig;
 $w$addr = $w;
 $h$addr = $h;
 $channels$addr = $channels;
 $0 = $w$addr;
 $1 = $h$addr;
 $mul = Math_imul($0, $1)|0;
 $2 = $channels$addr;
 $mul1 = Math_imul($mul, $2)|0;
 $img_len = $mul1;
 $3 = $img_len;
 $call = (__ZL12stbi__mallocm($3)|0);
 $reduced = $call;
 $4 = $reduced;
 $cmp = ($4|0)==(0|0);
 if ($cmp) {
  $call2 = (__ZL9stbi__errPKc(7762)|0);
  $tobool = ($call2|0)!=(0);
  $cond = $tobool ? 0 : 0;
  $5 = $cond;
  $retval = $5;
  $15 = $retval;
  STACKTOP = sp;return ($15|0);
 }
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = $img_len;
  $cmp3 = ($6|0)<($7|0);
  $8 = $orig$addr;
  if (!($cmp3)) {
   break;
  }
  $9 = $i;
  $arrayidx = (($8) + ($9<<1)|0);
  $10 = HEAP16[$arrayidx>>1]|0;
  $conv = $10&65535;
  $shr = $conv >> 8;
  $and = $shr & 255;
  $conv4 = $and&255;
  $11 = $reduced;
  $12 = $i;
  $arrayidx5 = (($11) + ($12)|0);
  HEAP8[$arrayidx5>>0] = $conv4;
  $13 = $i;
  $inc = (($13) + 1)|0;
  $i = $inc;
 }
 _free($8);
 $14 = $reduced;
 $retval = $14;
 $15 = $retval;
 STACKTOP = sp;return ($15|0);
}
function __ZL19stbi__vertical_flipPviii($image,$w,$h,$bytes_per_pixel) {
 $image = $image|0;
 $w = $w|0;
 $h = $h|0;
 $bytes_per_pixel = $bytes_per_pixel|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr4 = 0, $add$ptr7 = 0, $add$ptr8 = 0, $bytes = 0, $bytes_copy = 0, $bytes_left = 0, $bytes_per_pixel$addr = 0, $bytes_per_row = 0, $cmp = 0;
 var $cmp5 = 0, $cond = 0, $h$addr = 0, $image$addr = 0, $inc = 0, $mul = 0, $mul1 = 0, $mul3 = 0, $row = 0, $row0 = 0, $row1 = 0, $shr = 0, $sub = 0, $sub2 = 0, $sub9 = 0, $temp = 0, $tobool = 0, $w$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2096|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2096|0);
 $temp = sp;
 $image$addr = $image;
 $w$addr = $w;
 $h$addr = $h;
 $bytes_per_pixel$addr = $bytes_per_pixel;
 $0 = $w$addr;
 $1 = $bytes_per_pixel$addr;
 $mul = Math_imul($0, $1)|0;
 $bytes_per_row = $mul;
 $2 = $image$addr;
 $bytes = $2;
 $row = 0;
 while(1) {
  $3 = $row;
  $4 = $h$addr;
  $shr = $4 >> 1;
  $cmp = ($3|0)<($shr|0);
  if (!($cmp)) {
   break;
  }
  $5 = $bytes;
  $6 = $row;
  $7 = $bytes_per_row;
  $mul1 = Math_imul($6, $7)|0;
  $add$ptr = (($5) + ($mul1)|0);
  $row0 = $add$ptr;
  $8 = $bytes;
  $9 = $h$addr;
  $10 = $row;
  $sub = (($9) - ($10))|0;
  $sub2 = (($sub) - 1)|0;
  $11 = $bytes_per_row;
  $mul3 = Math_imul($sub2, $11)|0;
  $add$ptr4 = (($8) + ($mul3)|0);
  $row1 = $add$ptr4;
  $12 = $bytes_per_row;
  $bytes_left = $12;
  while(1) {
   $13 = $bytes_left;
   $tobool = ($13|0)!=(0);
   if (!($tobool)) {
    break;
   }
   $14 = $bytes_left;
   $cmp5 = ($14>>>0)<(2048);
   $15 = $bytes_left;
   $cond = $cmp5 ? $15 : 2048;
   $bytes_copy = $cond;
   $16 = $row0;
   $17 = $bytes_copy;
   _memcpy(($temp|0),($16|0),($17|0))|0;
   $18 = $row0;
   $19 = $row1;
   $20 = $bytes_copy;
   _memcpy(($18|0),($19|0),($20|0))|0;
   $21 = $row1;
   $22 = $bytes_copy;
   _memcpy(($21|0),($temp|0),($22|0))|0;
   $23 = $bytes_copy;
   $24 = $row0;
   $add$ptr7 = (($24) + ($23)|0);
   $row0 = $add$ptr7;
   $25 = $bytes_copy;
   $26 = $row1;
   $add$ptr8 = (($26) + ($25)|0);
   $row1 = $add$ptr8;
   $27 = $bytes_copy;
   $28 = $bytes_left;
   $sub9 = (($28) - ($27))|0;
   $bytes_left = $sub9;
  }
  $29 = $row;
  $inc = (($29) + 1)|0;
  $row = $inc;
 }
 STACKTOP = sp;return;
}
function __ZL12stbi__mallocm($size) {
 $size = $size|0;
 var $0 = 0, $call = 0, $size$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $size$addr = $size;
 $0 = $size$addr;
 $call = (_malloc($0)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZL14stbi__png_testP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $r = 0, $s$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $s$addr = $s;
 $0 = $s$addr;
 $call = (__ZL22stbi__check_png_headerP13stbi__context($0)|0);
 $r = $call;
 $1 = $s$addr;
 __ZL12stbi__rewindP13stbi__context($1);
 $2 = $r;
 STACKTOP = sp;return ($2|0);
}
function __ZL14stbi__png_loadP13stbi__contextPiS1_S1_iP17stbi__result_info($s,$x,$y,$comp,$req_comp,$ri) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 $ri = $ri|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $comp$addr = 0, $p = 0, $req_comp$addr = 0, $ri$addr = 0, $s$addr = 0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $p = sp;
 $s$addr = $s;
 $x$addr = $x;
 $y$addr = $y;
 $comp$addr = $comp;
 $req_comp$addr = $req_comp;
 $ri$addr = $ri;
 $0 = $s$addr;
 HEAP32[$p>>2] = $0;
 $1 = $x$addr;
 $2 = $y$addr;
 $3 = $comp$addr;
 $4 = $req_comp$addr;
 $5 = $ri$addr;
 $call = (__ZL12stbi__do_pngP9stbi__pngPiS1_S1_iP17stbi__result_info($p,$1,$2,$3,$4,$5)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZL12stbi__do_pngP9stbi__pngPiS1_S1_iP17stbi__result_info($p,$x,$y,$n,$req_comp,$ri) {
 $p = $p|0;
 $x = $x|0;
 $y = $y|0;
 $n = $n|0;
 $req_comp = $req_comp|0;
 $ri = $ri|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $call = 0, $call2 = 0, $call21 = 0, $call29 = 0, $cmp = 0, $cmp1 = 0, $cmp12 = 0, $cmp15 = 0, $cmp33 = 0;
 var $cmp5 = 0, $cond = 0, $depth = 0, $depth7 = 0, $expanded = 0, $expanded48 = 0, $idata = 0, $idata49 = 0, $img_n = 0, $img_out_n = 0, $img_out_n18 = 0, $img_out_n24 = 0, $img_out_n32 = 0, $img_y = 0, $img_y28 = 0, $img_y40 = 0, $n$addr = 0, $or$cond = 0, $out = 0, $out10 = 0;
 var $out46 = 0, $out47 = 0, $p$addr = 0, $req_comp$addr = 0, $result = 0, $retval = 0, $ri$addr = 0, $tobool = 0, $tobool11 = 0, $tobool3 = 0, $tobool41 = 0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $p$addr = $p;
 $x$addr = $x;
 $y$addr = $y;
 $n$addr = $n;
 $req_comp$addr = $req_comp;
 $ri$addr = $ri;
 $result = 0;
 $0 = $req_comp$addr;
 $cmp = ($0|0)<(0);
 $1 = $req_comp$addr;
 $cmp1 = ($1|0)>(4);
 $or$cond = $cmp | $cmp1;
 if ($or$cond) {
  $call = (__ZL9stbi__errPKc(7790)|0);
  $tobool = ($call|0)!=(0);
  $cond = $tobool ? 0 : 0;
  $2 = $cond;
  $retval = $2;
  $70 = $retval;
  STACKTOP = sp;return ($70|0);
 }
 $3 = $p$addr;
 $4 = $req_comp$addr;
 $call2 = (__ZL20stbi__parse_png_fileP9stbi__pngii($3,0,$4)|0);
 $tobool3 = ($call2|0)!=(0);
 if ($tobool3) {
  $5 = $p$addr;
  $depth = ((($5)) + 16|0);
  $6 = HEAP32[$depth>>2]|0;
  $cmp5 = ($6|0)<(8);
  if ($cmp5) {
   $7 = $ri$addr;
   HEAP32[$7>>2] = 8;
  } else {
   $8 = $p$addr;
   $depth7 = ((($8)) + 16|0);
   $9 = HEAP32[$depth7>>2]|0;
   $10 = $ri$addr;
   HEAP32[$10>>2] = $9;
  }
  $11 = $p$addr;
  $out = ((($11)) + 12|0);
  $12 = HEAP32[$out>>2]|0;
  $result = $12;
  $13 = $p$addr;
  $out10 = ((($13)) + 12|0);
  HEAP32[$out10>>2] = 0;
  $14 = $req_comp$addr;
  $tobool11 = ($14|0)!=(0);
  if ($tobool11) {
   $15 = $req_comp$addr;
   $16 = $p$addr;
   $17 = HEAP32[$16>>2]|0;
   $img_out_n = ((($17)) + 12|0);
   $18 = HEAP32[$img_out_n>>2]|0;
   $cmp12 = ($15|0)!=($18|0);
   if ($cmp12) {
    $19 = $ri$addr;
    $20 = HEAP32[$19>>2]|0;
    $cmp15 = ($20|0)==(8);
    $21 = $result;
    if ($cmp15) {
     $22 = $p$addr;
     $23 = HEAP32[$22>>2]|0;
     $img_out_n18 = ((($23)) + 12|0);
     $24 = HEAP32[$img_out_n18>>2]|0;
     $25 = $req_comp$addr;
     $26 = $p$addr;
     $27 = HEAP32[$26>>2]|0;
     $28 = HEAP32[$27>>2]|0;
     $29 = $p$addr;
     $30 = HEAP32[$29>>2]|0;
     $img_y = ((($30)) + 4|0);
     $31 = HEAP32[$img_y>>2]|0;
     $call21 = (__ZL20stbi__convert_formatPhiijj($21,$24,$25,$28,$31)|0);
     $result = $call21;
    } else {
     $32 = $p$addr;
     $33 = HEAP32[$32>>2]|0;
     $img_out_n24 = ((($33)) + 12|0);
     $34 = HEAP32[$img_out_n24>>2]|0;
     $35 = $req_comp$addr;
     $36 = $p$addr;
     $37 = HEAP32[$36>>2]|0;
     $38 = HEAP32[$37>>2]|0;
     $39 = $p$addr;
     $40 = HEAP32[$39>>2]|0;
     $img_y28 = ((($40)) + 4|0);
     $41 = HEAP32[$img_y28>>2]|0;
     $call29 = (__ZL22stbi__convert_format16Ptiijj($21,$34,$35,$38,$41)|0);
     $result = $call29;
    }
    $42 = $req_comp$addr;
    $43 = $p$addr;
    $44 = HEAP32[$43>>2]|0;
    $img_out_n32 = ((($44)) + 12|0);
    HEAP32[$img_out_n32>>2] = $42;
    $45 = $result;
    $cmp33 = ($45|0)==(0|0);
    if ($cmp33) {
     $46 = $result;
     $retval = $46;
     $70 = $retval;
     STACKTOP = sp;return ($70|0);
    }
   }
  }
  $47 = $p$addr;
  $48 = HEAP32[$47>>2]|0;
  $49 = HEAP32[$48>>2]|0;
  $50 = $x$addr;
  HEAP32[$50>>2] = $49;
  $51 = $p$addr;
  $52 = HEAP32[$51>>2]|0;
  $img_y40 = ((($52)) + 4|0);
  $53 = HEAP32[$img_y40>>2]|0;
  $54 = $y$addr;
  HEAP32[$54>>2] = $53;
  $55 = $n$addr;
  $tobool41 = ($55|0)!=(0|0);
  if ($tobool41) {
   $56 = $p$addr;
   $57 = HEAP32[$56>>2]|0;
   $img_n = ((($57)) + 8|0);
   $58 = HEAP32[$img_n>>2]|0;
   $59 = $n$addr;
   HEAP32[$59>>2] = $58;
  }
 }
 $60 = $p$addr;
 $out46 = ((($60)) + 12|0);
 $61 = HEAP32[$out46>>2]|0;
 _free($61);
 $62 = $p$addr;
 $out47 = ((($62)) + 12|0);
 HEAP32[$out47>>2] = 0;
 $63 = $p$addr;
 $expanded = ((($63)) + 8|0);
 $64 = HEAP32[$expanded>>2]|0;
 _free($64);
 $65 = $p$addr;
 $expanded48 = ((($65)) + 8|0);
 HEAP32[$expanded48>>2] = 0;
 $66 = $p$addr;
 $idata = ((($66)) + 4|0);
 $67 = HEAP32[$idata>>2]|0;
 _free($67);
 $68 = $p$addr;
 $idata49 = ((($68)) + 4|0);
 HEAP32[$idata49>>2] = 0;
 $69 = $result;
 $retval = $69;
 $70 = $retval;
 STACKTOP = sp;return ($70|0);
}
function __ZL20stbi__parse_png_fileP9stbi__pngii($z,$scan,$req_comp) {
 $z = $z|0;
 $scan = $scan|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add$ptr = 0, $add138 = 0, $add141 = 0;
 var $add145 = 0, $add148 = 0, $add181 = 0, $add250 = 0, $add255 = 0, $add266 = 0, $add285 = 0, $add302 = 0, $add309 = 0, $add322 = 0, $add332 = 0, $and = 0, $and188 = 0, $and219 = 0, $and401 = 0, $and405 = 0, $and409 = 0, $and413 = 0, $and417 = 0, $and90 = 0;
 var $and92 = 0, $arrayidx = 0, $arrayidx142 = 0, $arrayidx146 = 0, $arrayidx149 = 0, $arrayidx182 = 0, $arrayidx209 = 0, $arrayidx223 = 0, $arrayidx227 = 0, $bpl = 0, $c = 0, $call = 0, $call101 = 0, $call114 = 0, $call12 = 0, $call120 = 0, $call125 = 0, $call132 = 0, $call136 = 0, $call139 = 0;
 var $call14 = 0, $call143 = 0, $call153 = 0, $call158 = 0, $call168 = 0, $call173 = 0, $call179 = 0, $call18 = 0, $call191 = 0, $call198 = 0, $call20 = 0, $call207 = 0, $call218 = 0, $call236 = 0, $call24 = 0, $call242 = 0, $call26 = 0, $call270 = 0, $call273 = 0, $call279 = 0;
 var $call282 = 0, $call289 = 0, $call297 = 0, $call313 = 0, $call340 = 0, $call350 = 0, $call357 = 0, $call383 = 0, $call398 = 0, $call41 = 0, $call419 = 0, $call43 = 0, $call47 = 0, $call54 = 0, $call60 = 0, $call63 = 0, $call67 = 0, $call69 = 0, $call7 = 0, $call73 = 0;
 var $call75 = 0, $call79 = 0, $call86 = 0, $cmp = 0, $cmp10 = 0, $cmp103 = 0, $cmp112 = 0, $cmp123 = 0, $cmp130 = 0, $cmp135 = 0, $cmp16 = 0, $cmp162 = 0, $cmp166 = 0, $cmp171 = 0, $cmp177 = 0, $cmp196 = 0, $cmp201 = 0, $cmp205 = 0, $cmp216 = 0, $cmp22 = 0;
 var $cmp244 = 0, $cmp251 = 0, $cmp256 = 0, $cmp258 = 0, $cmp261 = 0, $cmp267 = 0, $cmp271 = 0, $cmp28 = 0, $cmp291 = 0, $cmp295 = 0, $cmp30 = 0, $cmp316 = 0, $cmp323 = 0, $cmp325 = 0, $cmp33 = 0, $cmp347 = 0, $cmp36 = 0, $cmp368 = 0, $cmp377 = 0, $cmp39 = 0;
 var $cmp402 = 0, $cmp45 = 0, $cmp49 = 0, $cmp52 = 0, $cmp56 = 0, $cmp77 = 0, $cmp99 = 0, $color = 0, $comp = 0, $cond = 0, $cond263 = 0, $cond94 = 0, $conv = 0, $conv208 = 0, $conv220 = 0, $conv221 = 0, $conv224 = 0, $conv226 = 0, $conv246 = 0, $conv312 = 0;
 var $conv373 = 0, $conv375 = 0, $conv406 = 0, $conv410 = 0, $conv414 = 0, $conv418 = 0, $conv44 = 0, $conv64 = 0, $conv70 = 0, $conv76 = 0, $depth = 0, $depth200 = 0, $depth222 = 0, $depth27 = 0, $depth29 = 0, $depth300 = 0, $depth32 = 0, $depth339 = 0, $depth346 = 0, $depth35 = 0;
 var $depth38 = 0, $depth51 = 0, $div = 0, $div109 = 0, $div110 = 0, $div128 = 0, $div303 = 0, $div97 = 0, $expanded = 0, $expanded314 = 0, $expanded315 = 0, $expanded337 = 0, $expanded394 = 0, $expanded395 = 0, $filter = 0, $first = 0, $has_trans = 0, $i = 0, $idata = 0, $idata155 = 0;
 var $idata269 = 0, $idata275 = 0, $idata277 = 0, $idata294 = 0, $idata310 = 0, $idata319 = 0, $idata320 = 0, $idata_limit = 0, $idata_limit_old = 0, $img_n = 0, $img_n107 = 0, $img_n164 = 0, $img_n187 = 0, $img_n194 = 0, $img_n204 = 0, $img_n215 = 0, $img_n247 = 0, $img_n306 = 0, $img_n321 = 0, $img_n331 = 0;
 var $img_n374 = 0, $img_n390 = 0, $img_n96 = 0, $img_out_n = 0, $img_out_n335 = 0, $img_out_n338 = 0, $img_out_n349 = 0, $img_out_n356 = 0, $img_out_n367 = 0, $img_out_n376 = 0, $img_out_n379 = 0, $img_out_n382 = 0, $img_y = 0, $img_y111 = 0, $img_y21 = 0, $img_y304 = 0, $img_y308 = 0, $img_y83 = 0, $img_y98 = 0, $inc = 0;
 var $inc184 = 0, $inc211 = 0, $inc229 = 0, $inc391 = 0, $interlace = 0, $ioff = 0, $is_iphone = 0, $k = 0, $lnot = 0, $mul = 0, $mul137 = 0, $mul140 = 0, $mul144 = 0, $mul147 = 0, $mul180 = 0, $mul195 = 0, $mul225 = 0, $mul268 = 0, $mul301 = 0, $mul305 = 0;
 var $mul307 = 0, $or$cond = 0, $or$cond1 = 0, $or$cond1$not = 0, $or$cond2 = 0, $or$cond2$not = 0, $or$cond3 = 0, $or$cond4 = 0, $out = 0, $p = 0, $pal_img_n = 0, $pal_len = 0, $palette = 0, $raw_len = 0, $req_comp$addr = 0, $retval = 0, $s = 0, $scan$addr = 0, $shr = 0, $shr408 = 0;
 var $shr412 = 0, $shr416 = 0, $switch$split112D = 0, $switch$split142D = 0, $switch$split2D = 0, $switch$split52D = 0, $switch$split82D = 0, $tc = 0, $tc16 = 0, $tobool = 0, $tobool118 = 0, $tobool151 = 0, $tobool156 = 0, $tobool160 = 0, $tobool189 = 0, $tobool234 = 0, $tobool238 = 0, $tobool240 = 0, $tobool280 = 0, $tobool287 = 0;
 var $tobool311 = 0, $tobool327 = 0, $tobool329 = 0, $tobool341 = 0, $tobool344 = 0, $tobool351 = 0, $tobool358 = 0, $tobool363 = 0, $tobool365 = 0, $tobool371 = 0, $tobool384 = 0, $tobool388 = 0, $tobool396 = 0, $tobool5 = 0, $tobool58 = 0, $tobool65 = 0, $tobool71 = 0, $tobool82 = 0, $tobool84 = 0, $tobool88 = 0;
 var $tobool91 = 0, $tobool93 = 0, $type = 0, $type400 = 0, $type404 = 0, $type407 = 0, $type411 = 0, $type415 = 0, $z$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1136|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1136|0);
 $palette = sp;
 $tc = sp + 1118|0;
 $tc16 = sp + 1112|0;
 $c = sp + 1048|0;
 $raw_len = sp + 1028|0;
 $z$addr = $z;
 $scan$addr = $scan;
 $req_comp$addr = $req_comp;
 $pal_img_n = 0;
 $has_trans = 0;
 $ioff = 0;
 $idata_limit = 0;
 $pal_len = 0;
 $first = 1;
 $interlace = 0;
 $color = 0;
 $is_iphone = 0;
 $0 = $z$addr;
 $1 = HEAP32[$0>>2]|0;
 $s = $1;
 $2 = $z$addr;
 $expanded = ((($2)) + 8|0);
 HEAP32[$expanded>>2] = 0;
 $3 = $z$addr;
 $idata = ((($3)) + 4|0);
 HEAP32[$idata>>2] = 0;
 $4 = $z$addr;
 $out = ((($4)) + 12|0);
 HEAP32[$out>>2] = 0;
 $5 = $s;
 $call = (__ZL22stbi__check_png_headerP13stbi__context($5)|0);
 $tobool = ($call|0)!=(0);
 if (!($tobool)) {
  $retval = 0;
  $235 = $retval;
  STACKTOP = sp;return ($235|0);
 }
 $6 = $scan$addr;
 $cmp = ($6|0)==(1);
 if ($cmp) {
  $retval = 1;
  $235 = $retval;
  STACKTOP = sp;return ($235|0);
 }
 L9: while(1) {
  $7 = $s;
  __ZL22stbi__get_chunk_headerP13stbi__context($c,$7);
  $type = ((($c)) + 4|0);
  $8 = HEAP32[$type>>2]|0;
  $switch$split2D = ($8|0)<(1229472850);
  L11: do {
   if ($switch$split2D) {
    $switch$split52D = ($8|0)<(1229209940);
    if ($switch$split52D) {
     switch ($8|0) {
     case 1130840649:  {
      break;
     }
     default: {
      label = 131;
      break L11;
     }
     }
     $is_iphone = 1;
     $9 = $s;
     $10 = HEAP32[$c>>2]|0;
     __ZL10stbi__skipP13stbi__contexti($9,$10);
     break;
    }
    $switch$split112D = ($8|0)<(1229278788);
    if (!($switch$split112D)) {
     switch ($8|0) {
     case 1229278788:  {
      label = 101;
      break L9;
      break;
     }
     default: {
      label = 131;
      break L11;
     }
     }
    }
    switch ($8|0) {
    case 1229209940:  {
     break;
    }
    default: {
     label = 131;
     break L11;
    }
    }
    $117 = $first;
    $tobool234 = ($117|0)!=(0);
    if ($tobool234) {
     label = 82;
     break L9;
    }
    $118 = $pal_img_n;
    $tobool238 = ($118<<24>>24)==(0);
    $119 = $pal_len;
    $tobool240 = ($119|0)!=(0);
    $or$cond = $tobool238 | $tobool240;
    if (!($or$cond)) {
     label = 84;
     break L9;
    }
    $120 = $scan$addr;
    $cmp244 = ($120|0)==(2);
    if ($cmp244) {
     label = 86;
     break L9;
    }
    $123 = $ioff;
    $124 = HEAP32[$c>>2]|0;
    $add250 = (($123) + ($124))|0;
    $125 = $ioff;
    $cmp251 = ($add250|0)<($125|0);
    if ($cmp251) {
     label = 88;
     break L9;
    }
    $126 = $ioff;
    $127 = HEAP32[$c>>2]|0;
    $add255 = (($126) + ($127))|0;
    $128 = $idata_limit;
    $cmp256 = ($add255>>>0)>($128>>>0);
    if ($cmp256) {
     $129 = $idata_limit;
     $idata_limit_old = $129;
     $130 = $idata_limit;
     $cmp258 = ($130|0)==(0);
     if ($cmp258) {
      $131 = HEAP32[$c>>2]|0;
      $cmp261 = ($131>>>0)>(4096);
      $132 = HEAP32[$c>>2]|0;
      $cond263 = $cmp261 ? $132 : 4096;
      $idata_limit = $cond263;
     }
     while(1) {
      $133 = $ioff;
      $134 = HEAP32[$c>>2]|0;
      $add266 = (($133) + ($134))|0;
      $135 = $idata_limit;
      $cmp267 = ($add266>>>0)>($135>>>0);
      if (!($cmp267)) {
       break;
      }
      $136 = $idata_limit;
      $mul268 = $136<<1;
      $idata_limit = $mul268;
     }
     $137 = $z$addr;
     $idata269 = ((($137)) + 4|0);
     $138 = HEAP32[$idata269>>2]|0;
     $139 = $idata_limit;
     $call270 = (_realloc($138,$139)|0);
     $p = $call270;
     $140 = $p;
     $cmp271 = ($140|0)==(0|0);
     if ($cmp271) {
      label = 96;
      break L9;
     }
     $141 = $p;
     $142 = $z$addr;
     $idata275 = ((($142)) + 4|0);
     HEAP32[$idata275>>2] = $141;
    }
    $143 = $s;
    $144 = $z$addr;
    $idata277 = ((($144)) + 4|0);
    $145 = HEAP32[$idata277>>2]|0;
    $146 = $ioff;
    $add$ptr = (($145) + ($146)|0);
    $147 = HEAP32[$c>>2]|0;
    $call279 = (__ZL10stbi__getnP13stbi__contextPhi($143,$add$ptr,$147)|0);
    $tobool280 = ($call279|0)!=(0);
    if (!($tobool280)) {
     label = 99;
     break L9;
    }
    $148 = HEAP32[$c>>2]|0;
    $149 = $ioff;
    $add285 = (($149) + ($148))|0;
    $ioff = $add285;
   } else {
    $switch$split82D = ($8|0)<(1347179589);
    if ($switch$split82D) {
     switch ($8|0) {
     case 1229472850:  {
      break;
     }
     default: {
      label = 131;
      break L11;
     }
     }
     $11 = $first;
     $tobool5 = ($11|0)!=(0);
     if (!($tobool5)) {
      label = 9;
      break L9;
     }
     $first = 0;
     $12 = HEAP32[$c>>2]|0;
     $cmp10 = ($12|0)!=(13);
     if ($cmp10) {
      label = 11;
      break L9;
     }
     $13 = $s;
     $call14 = (__ZL13stbi__get32beP13stbi__context($13)|0);
     $14 = $s;
     HEAP32[$14>>2] = $call14;
     $15 = $s;
     $16 = HEAP32[$15>>2]|0;
     $cmp16 = ($16>>>0)>(16777216);
     if ($cmp16) {
      label = 13;
      break L9;
     }
     $17 = $s;
     $call20 = (__ZL13stbi__get32beP13stbi__context($17)|0);
     $18 = $s;
     $img_y = ((($18)) + 4|0);
     HEAP32[$img_y>>2] = $call20;
     $19 = $s;
     $img_y21 = ((($19)) + 4|0);
     $20 = HEAP32[$img_y21>>2]|0;
     $cmp22 = ($20>>>0)>(16777216);
     if ($cmp22) {
      label = 15;
      break L9;
     }
     $21 = $s;
     $call26 = (__ZL10stbi__get8P13stbi__context($21)|0);
     $conv = $call26&255;
     $22 = $z$addr;
     $depth = ((($22)) + 16|0);
     HEAP32[$depth>>2] = $conv;
     $23 = $z$addr;
     $depth27 = ((($23)) + 16|0);
     $24 = HEAP32[$depth27>>2]|0;
     $cmp28 = ($24|0)!=(1);
     if ($cmp28) {
      $25 = $z$addr;
      $depth29 = ((($25)) + 16|0);
      $26 = HEAP32[$depth29>>2]|0;
      $cmp30 = ($26|0)!=(2);
      if ($cmp30) {
       $27 = $z$addr;
       $depth32 = ((($27)) + 16|0);
       $28 = HEAP32[$depth32>>2]|0;
       $cmp33 = ($28|0)!=(4);
       if ($cmp33) {
        $29 = $z$addr;
        $depth35 = ((($29)) + 16|0);
        $30 = HEAP32[$depth35>>2]|0;
        $cmp36 = ($30|0)!=(8);
        if ($cmp36) {
         $31 = $z$addr;
         $depth38 = ((($31)) + 16|0);
         $32 = HEAP32[$depth38>>2]|0;
         $cmp39 = ($32|0)!=(16);
         if ($cmp39) {
          label = 21;
          break L9;
         }
        }
       }
      }
     }
     $33 = $s;
     $call43 = (__ZL10stbi__get8P13stbi__context($33)|0);
     $conv44 = $call43&255;
     $color = $conv44;
     $34 = $color;
     $cmp45 = ($34|0)>(6);
     if ($cmp45) {
      label = 23;
      break L9;
     }
     $35 = $color;
     $cmp49 = ($35|0)==(3);
     if ($cmp49) {
      $36 = $z$addr;
      $depth51 = ((($36)) + 16|0);
      $37 = HEAP32[$depth51>>2]|0;
      $cmp52 = ($37|0)==(16);
      if ($cmp52) {
       label = 26;
       break L9;
      }
     }
     $38 = $color;
     $cmp56 = ($38|0)==(3);
     if ($cmp56) {
      $pal_img_n = 3;
     } else {
      $39 = $color;
      $and = $39 & 1;
      $tobool58 = ($and|0)!=(0);
      if ($tobool58) {
       label = 30;
       break L9;
      }
     }
     $40 = $s;
     $call63 = (__ZL10stbi__get8P13stbi__context($40)|0);
     $conv64 = $call63&255;
     $comp = $conv64;
     $41 = $comp;
     $tobool65 = ($41|0)!=(0);
     if ($tobool65) {
      label = 32;
      break L9;
     }
     $42 = $s;
     $call69 = (__ZL10stbi__get8P13stbi__context($42)|0);
     $conv70 = $call69&255;
     $filter = $conv70;
     $43 = $filter;
     $tobool71 = ($43|0)!=(0);
     if ($tobool71) {
      label = 34;
      break L9;
     }
     $44 = $s;
     $call75 = (__ZL10stbi__get8P13stbi__context($44)|0);
     $conv76 = $call75&255;
     $interlace = $conv76;
     $45 = $interlace;
     $cmp77 = ($45|0)>(1);
     if ($cmp77) {
      label = 36;
      break L9;
     }
     $46 = $s;
     $47 = HEAP32[$46>>2]|0;
     $tobool82 = ($47|0)!=(0);
     if (!($tobool82)) {
      label = 39;
      break L9;
     }
     $48 = $s;
     $img_y83 = ((($48)) + 4|0);
     $49 = HEAP32[$img_y83>>2]|0;
     $tobool84 = ($49|0)!=(0);
     if (!($tobool84)) {
      label = 39;
      break L9;
     }
     $50 = $pal_img_n;
     $tobool88 = ($50<<24>>24)!=(0);
     if ($tobool88) {
      $61 = $s;
      $img_n107 = ((($61)) + 8|0);
      HEAP32[$img_n107>>2] = 1;
      $62 = $s;
      $63 = HEAP32[$62>>2]|0;
      $div109 = (1073741824 / ($63>>>0))&-1;
      $div110 = (($div109>>>0) / 4)&-1;
      $64 = $s;
      $img_y111 = ((($64)) + 4|0);
      $65 = HEAP32[$img_y111>>2]|0;
      $cmp112 = ($div110>>>0)<($65>>>0);
      if ($cmp112) {
       label = 46;
       break L9;
      } else {
       break;
      }
     }
     $51 = $color;
     $and90 = $51 & 2;
     $tobool91 = ($and90|0)!=(0);
     $cond = $tobool91 ? 3 : 1;
     $52 = $color;
     $and92 = $52 & 4;
     $tobool93 = ($and92|0)!=(0);
     $cond94 = $tobool93 ? 1 : 0;
     $add = (($cond) + ($cond94))|0;
     $53 = $s;
     $img_n = ((($53)) + 8|0);
     HEAP32[$img_n>>2] = $add;
     $54 = $s;
     $55 = HEAP32[$54>>2]|0;
     $div = (1073741824 / ($55>>>0))&-1;
     $56 = $s;
     $img_n96 = ((($56)) + 8|0);
     $57 = HEAP32[$img_n96>>2]|0;
     $div97 = (($div>>>0) / ($57>>>0))&-1;
     $58 = $s;
     $img_y98 = ((($58)) + 4|0);
     $59 = HEAP32[$img_y98>>2]|0;
     $cmp99 = ($div97>>>0)<($59>>>0);
     if ($cmp99) {
      label = 42;
      break L9;
     }
     $60 = $scan$addr;
     $cmp103 = ($60|0)==(2);
     if ($cmp103) {
      label = 44;
      break L9;
     } else {
      break;
     }
    }
    $switch$split142D = ($8|0)<(1951551059);
    if ($switch$split142D) {
     switch ($8|0) {
     case 1347179589:  {
      break;
     }
     default: {
      label = 131;
      break L11;
     }
     }
     $66 = $first;
     $tobool118 = ($66|0)!=(0);
     if ($tobool118) {
      label = 48;
      break L9;
     }
     $67 = HEAP32[$c>>2]|0;
     $cmp123 = ($67>>>0)>(768);
     if ($cmp123) {
      label = 50;
      break L9;
     }
     $68 = HEAP32[$c>>2]|0;
     $div128 = (($68>>>0) / 3)&-1;
     $pal_len = $div128;
     $69 = $pal_len;
     $mul = ($69*3)|0;
     $70 = HEAP32[$c>>2]|0;
     $cmp130 = ($mul|0)!=($70|0);
     if ($cmp130) {
      label = 52;
      break L9;
     }
     $i = 0;
     while(1) {
      $71 = $i;
      $72 = $pal_len;
      $cmp135 = ($71>>>0)<($72>>>0);
      if (!($cmp135)) {
       break L11;
      }
      $73 = $s;
      $call136 = (__ZL10stbi__get8P13stbi__context($73)|0);
      $74 = $i;
      $mul137 = $74<<2;
      $add138 = (($mul137) + 0)|0;
      $arrayidx = (($palette) + ($add138)|0);
      HEAP8[$arrayidx>>0] = $call136;
      $75 = $s;
      $call139 = (__ZL10stbi__get8P13stbi__context($75)|0);
      $76 = $i;
      $mul140 = $76<<2;
      $add141 = (($mul140) + 1)|0;
      $arrayidx142 = (($palette) + ($add141)|0);
      HEAP8[$arrayidx142>>0] = $call139;
      $77 = $s;
      $call143 = (__ZL10stbi__get8P13stbi__context($77)|0);
      $78 = $i;
      $mul144 = $78<<2;
      $add145 = (($mul144) + 2)|0;
      $arrayidx146 = (($palette) + ($add145)|0);
      HEAP8[$arrayidx146>>0] = $call143;
      $79 = $i;
      $mul147 = $79<<2;
      $add148 = (($mul147) + 3)|0;
      $arrayidx149 = (($palette) + ($add148)|0);
      HEAP8[$arrayidx149>>0] = -1;
      $80 = $i;
      $inc = (($80) + 1)|0;
      $i = $inc;
     }
    }
    switch ($8|0) {
    case 1951551059:  {
     break;
    }
    default: {
     label = 131;
     break L11;
    }
    }
    $81 = $first;
    $tobool151 = ($81|0)!=(0);
    if ($tobool151) {
     label = 57;
     break L9;
    }
    $82 = $z$addr;
    $idata155 = ((($82)) + 4|0);
    $83 = HEAP32[$idata155>>2]|0;
    $tobool156 = ($83|0)!=(0|0);
    if ($tobool156) {
     label = 59;
     break L9;
    }
    $84 = $pal_img_n;
    $tobool160 = ($84<<24>>24)!=(0);
    if ($tobool160) {
     $85 = $scan$addr;
     $cmp162 = ($85|0)==(2);
     if ($cmp162) {
      label = 62;
      break L9;
     }
     $87 = $pal_len;
     $cmp166 = ($87|0)==(0);
     if ($cmp166) {
      label = 64;
      break L9;
     }
     $88 = HEAP32[$c>>2]|0;
     $89 = $pal_len;
     $cmp171 = ($88>>>0)>($89>>>0);
     if ($cmp171) {
      label = 66;
      break L9;
     }
     $pal_img_n = 4;
     $i = 0;
     while(1) {
      $90 = $i;
      $91 = HEAP32[$c>>2]|0;
      $cmp177 = ($90>>>0)<($91>>>0);
      if (!($cmp177)) {
       break L11;
      }
      $92 = $s;
      $call179 = (__ZL10stbi__get8P13stbi__context($92)|0);
      $93 = $i;
      $mul180 = $93<<2;
      $add181 = (($mul180) + 3)|0;
      $arrayidx182 = (($palette) + ($add181)|0);
      HEAP8[$arrayidx182>>0] = $call179;
      $94 = $i;
      $inc184 = (($94) + 1)|0;
      $i = $inc184;
     }
    }
    $95 = $s;
    $img_n187 = ((($95)) + 8|0);
    $96 = HEAP32[$img_n187>>2]|0;
    $and188 = $96 & 1;
    $tobool189 = ($and188|0)!=(0);
    if (!($tobool189)) {
     label = 71;
     break L9;
    }
    $97 = HEAP32[$c>>2]|0;
    $98 = $s;
    $img_n194 = ((($98)) + 8|0);
    $99 = HEAP32[$img_n194>>2]|0;
    $mul195 = $99<<1;
    $cmp196 = ($97|0)!=($mul195|0);
    if ($cmp196) {
     label = 73;
     break L9;
    }
    $has_trans = 1;
    $100 = $z$addr;
    $depth200 = ((($100)) + 16|0);
    $101 = HEAP32[$depth200>>2]|0;
    $cmp201 = ($101|0)==(16);
    $k = 0;
    if ($cmp201) {
     while(1) {
      $102 = $k;
      $103 = $s;
      $img_n204 = ((($103)) + 8|0);
      $104 = HEAP32[$img_n204>>2]|0;
      $cmp205 = ($102|0)<($104|0);
      if (!($cmp205)) {
       break L11;
      }
      $105 = $s;
      $call207 = (__ZL13stbi__get16beP13stbi__context($105)|0);
      $conv208 = $call207&65535;
      $106 = $k;
      $arrayidx209 = (($tc16) + ($106<<1)|0);
      HEAP16[$arrayidx209>>1] = $conv208;
      $107 = $k;
      $inc211 = (($107) + 1)|0;
      $k = $inc211;
     }
    } else {
     while(1) {
      $108 = $k;
      $109 = $s;
      $img_n215 = ((($109)) + 8|0);
      $110 = HEAP32[$img_n215>>2]|0;
      $cmp216 = ($108|0)<($110|0);
      if (!($cmp216)) {
       break L11;
      }
      $111 = $s;
      $call218 = (__ZL13stbi__get16beP13stbi__context($111)|0);
      $and219 = $call218 & 255;
      $conv220 = $and219&255;
      $conv221 = $conv220&255;
      $112 = $z$addr;
      $depth222 = ((($112)) + 16|0);
      $113 = HEAP32[$depth222>>2]|0;
      $arrayidx223 = (8106 + ($113)|0);
      $114 = HEAP8[$arrayidx223>>0]|0;
      $conv224 = $114&255;
      $mul225 = Math_imul($conv221, $conv224)|0;
      $conv226 = $mul225&255;
      $115 = $k;
      $arrayidx227 = (($tc) + ($115)|0);
      HEAP8[$arrayidx227>>0] = $conv226;
      $116 = $k;
      $inc229 = (($116) + 1)|0;
      $k = $inc229;
     }
    }
   }
  } while(0);
  if ((label|0) == 131) {
   label = 0;
   $226 = $first;
   $tobool396 = ($226|0)!=(0);
   if ($tobool396) {
    label = 132;
    break;
   }
   $type400 = ((($c)) + 4|0);
   $227 = HEAP32[$type400>>2]|0;
   $and401 = $227 & 536870912;
   $cmp402 = ($and401|0)==(0);
   if ($cmp402) {
    label = 134;
    break;
   }
   $232 = $s;
   $233 = HEAP32[$c>>2]|0;
   __ZL10stbi__skipP13stbi__contexti($232,$233);
  }
  $234 = $s;
  (__ZL13stbi__get32beP13stbi__context($234)|0);
 }
 switch (label|0) {
  case 9: {
   $call7 = (__ZL9stbi__errPKc(7880)|0);
   $retval = $call7;
   $235 = $retval;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 11: {
   $call12 = (__ZL9stbi__errPKc(7894)|0);
   $retval = $call12;
   $235 = $retval;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 13: {
   $call18 = (__ZL9stbi__errPKc(7907)|0);
   $retval = $call18;
   $235 = $retval;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 15: {
   $call24 = (__ZL9stbi__errPKc(7907)|0);
   $retval = $call24;
   $235 = $retval;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 21: {
   $call41 = (__ZL9stbi__errPKc(7917)|0);
   $retval = $call41;
   $235 = $retval;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 23: {
   $call47 = (__ZL9stbi__errPKc(7937)|0);
   $retval = $call47;
   $235 = $retval;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 26: {
   $call54 = (__ZL9stbi__errPKc(7937)|0);
   $retval = $call54;
   $235 = $retval;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 30: {
   $call60 = (__ZL9stbi__errPKc(7937)|0);
   $retval = $call60;
   $235 = $retval;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 32: {
   $call67 = (__ZL9stbi__errPKc(7947)|0);
   $retval = $call67;
   $235 = $retval;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 34: {
   $call73 = (__ZL9stbi__errPKc(7963)|0);
   $retval = $call73;
   $235 = $retval;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 36: {
   $call79 = (__ZL9stbi__errPKc(7981)|0);
   $retval = $call79;
   $235 = $retval;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 39: {
   $call86 = (__ZL9stbi__errPKc(8002)|0);
   $retval = $call86;
   $235 = $retval;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 42: {
   $call101 = (__ZL9stbi__errPKc(7907)|0);
   $retval = $call101;
   $235 = $retval;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 44: {
   $retval = 1;
   $235 = $retval;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 46: {
   $call114 = (__ZL9stbi__errPKc(7907)|0);
   $retval = $call114;
   $235 = $retval;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 48: {
   $call120 = (__ZL9stbi__errPKc(8016)|0);
   $retval = $call120;
   $235 = $retval;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 50: {
   $call125 = (__ZL9stbi__errPKc(8031)|0);
   $retval = $call125;
   $235 = $retval;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 52: {
   $call132 = (__ZL9stbi__errPKc(8031)|0);
   $retval = $call132;
   $235 = $retval;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 57: {
   $call153 = (__ZL9stbi__errPKc(8016)|0);
   $retval = $call153;
   $235 = $retval;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 59: {
   $call158 = (__ZL9stbi__errPKc(8044)|0);
   $retval = $call158;
   $235 = $retval;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 62: {
   $86 = $s;
   $img_n164 = ((($86)) + 8|0);
   HEAP32[$img_n164>>2] = 4;
   $retval = 1;
   $235 = $retval;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 64: {
   $call168 = (__ZL9stbi__errPKc(8060)|0);
   $retval = $call168;
   $235 = $retval;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 66: {
   $call173 = (__ZL9stbi__errPKc(8077)|0);
   $retval = $call173;
   $235 = $retval;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 71: {
   $call191 = (__ZL9stbi__errPKc(8090)|0);
   $retval = $call191;
   $235 = $retval;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 73: {
   $call198 = (__ZL9stbi__errPKc(8077)|0);
   $retval = $call198;
   $235 = $retval;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 82: {
   $call236 = (__ZL9stbi__errPKc(8016)|0);
   $retval = $call236;
   $235 = $retval;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 84: {
   $call242 = (__ZL9stbi__errPKc(8115)|0);
   $retval = $call242;
   $235 = $retval;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 86: {
   $121 = $pal_img_n;
   $conv246 = $121&255;
   $122 = $s;
   $img_n247 = ((($122)) + 8|0);
   HEAP32[$img_n247>>2] = $conv246;
   $retval = 1;
   $235 = $retval;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 88: {
   $retval = 0;
   $235 = $retval;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 96: {
   $call273 = (__ZL9stbi__errPKc(7762)|0);
   $retval = $call273;
   $235 = $retval;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 99: {
   $call282 = (__ZL9stbi__errPKc(8123)|0);
   $retval = $call282;
   $235 = $retval;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 101: {
   $150 = $first;
   $tobool287 = ($150|0)!=(0);
   if ($tobool287) {
    $call289 = (__ZL9stbi__errPKc(8016)|0);
    $retval = $call289;
    $235 = $retval;
    STACKTOP = sp;return ($235|0);
   }
   $151 = $scan$addr;
   $cmp291 = ($151|0)!=(0);
   if ($cmp291) {
    $retval = 1;
    $235 = $retval;
    STACKTOP = sp;return ($235|0);
   }
   $152 = $z$addr;
   $idata294 = ((($152)) + 4|0);
   $153 = HEAP32[$idata294>>2]|0;
   $cmp295 = ($153|0)==(0|0);
   if ($cmp295) {
    $call297 = (__ZL9stbi__errPKc(8133)|0);
    $retval = $call297;
    $235 = $retval;
    STACKTOP = sp;return ($235|0);
   }
   $154 = $s;
   $155 = HEAP32[$154>>2]|0;
   $156 = $z$addr;
   $depth300 = ((($156)) + 16|0);
   $157 = HEAP32[$depth300>>2]|0;
   $mul301 = Math_imul($155, $157)|0;
   $add302 = (($mul301) + 7)|0;
   $div303 = (($add302>>>0) / 8)&-1;
   $bpl = $div303;
   $158 = $bpl;
   $159 = $s;
   $img_y304 = ((($159)) + 4|0);
   $160 = HEAP32[$img_y304>>2]|0;
   $mul305 = Math_imul($158, $160)|0;
   $161 = $s;
   $img_n306 = ((($161)) + 8|0);
   $162 = HEAP32[$img_n306>>2]|0;
   $mul307 = Math_imul($mul305, $162)|0;
   $163 = $s;
   $img_y308 = ((($163)) + 4|0);
   $164 = HEAP32[$img_y308>>2]|0;
   $add309 = (($mul307) + ($164))|0;
   HEAP32[$raw_len>>2] = $add309;
   $165 = $z$addr;
   $idata310 = ((($165)) + 4|0);
   $166 = HEAP32[$idata310>>2]|0;
   $167 = $ioff;
   $168 = HEAP32[$raw_len>>2]|0;
   $169 = $is_iphone;
   $tobool311 = ($169|0)!=(0);
   $lnot = $tobool311 ^ 1;
   $conv312 = $lnot&1;
   $call313 = (_stbi_zlib_decode_malloc_guesssize_headerflag($166,$167,$168,$raw_len,$conv312)|0);
   $170 = $z$addr;
   $expanded314 = ((($170)) + 8|0);
   HEAP32[$expanded314>>2] = $call313;
   $171 = $z$addr;
   $expanded315 = ((($171)) + 8|0);
   $172 = HEAP32[$expanded315>>2]|0;
   $cmp316 = ($172|0)==(0|0);
   if ($cmp316) {
    $retval = 0;
    $235 = $retval;
    STACKTOP = sp;return ($235|0);
   }
   $173 = $z$addr;
   $idata319 = ((($173)) + 4|0);
   $174 = HEAP32[$idata319>>2]|0;
   _free($174);
   $175 = $z$addr;
   $idata320 = ((($175)) + 4|0);
   HEAP32[$idata320>>2] = 0;
   $176 = $req_comp$addr;
   $177 = $s;
   $img_n321 = ((($177)) + 8|0);
   $178 = HEAP32[$img_n321>>2]|0;
   $add322 = (($178) + 1)|0;
   $cmp323 = ($176|0)==($add322|0);
   $179 = $req_comp$addr;
   $cmp325 = ($179|0)!=(3);
   $or$cond1 = $cmp323 & $cmp325;
   $or$cond1$not = $or$cond1 ^ 1;
   $180 = $pal_img_n;
   $tobool327 = ($180<<24>>24)!=(0);
   $or$cond2 = $or$cond1$not | $tobool327;
   $or$cond2$not = $or$cond2 ^ 1;
   $181 = $has_trans;
   $tobool329 = ($181<<24>>24)!=(0);
   $or$cond3 = $or$cond2$not | $tobool329;
   $182 = $s;
   $img_n331 = ((($182)) + 8|0);
   $183 = HEAP32[$img_n331>>2]|0;
   if ($or$cond3) {
    $add332 = (($183) + 1)|0;
    $184 = $s;
    $img_out_n = ((($184)) + 12|0);
    HEAP32[$img_out_n>>2] = $add332;
   } else {
    $185 = $s;
    $img_out_n335 = ((($185)) + 12|0);
    HEAP32[$img_out_n335>>2] = $183;
   }
   $186 = $z$addr;
   $187 = $z$addr;
   $expanded337 = ((($187)) + 8|0);
   $188 = HEAP32[$expanded337>>2]|0;
   $189 = HEAP32[$raw_len>>2]|0;
   $190 = $s;
   $img_out_n338 = ((($190)) + 12|0);
   $191 = HEAP32[$img_out_n338>>2]|0;
   $192 = $z$addr;
   $depth339 = ((($192)) + 16|0);
   $193 = HEAP32[$depth339>>2]|0;
   $194 = $color;
   $195 = $interlace;
   $call340 = (__ZL22stbi__create_png_imageP9stbi__pngPhjiiii($186,$188,$189,$191,$193,$194,$195)|0);
   $tobool341 = ($call340|0)!=(0);
   if (!($tobool341)) {
    $retval = 0;
    $235 = $retval;
    STACKTOP = sp;return ($235|0);
   }
   $196 = $has_trans;
   $tobool344 = ($196<<24>>24)!=(0);
   do {
    if ($tobool344) {
     $197 = $z$addr;
     $depth346 = ((($197)) + 16|0);
     $198 = HEAP32[$depth346>>2]|0;
     $cmp347 = ($198|0)==(16);
     $199 = $z$addr;
     if ($cmp347) {
      $200 = $s;
      $img_out_n349 = ((($200)) + 12|0);
      $201 = HEAP32[$img_out_n349>>2]|0;
      $call350 = (__ZL28stbi__compute_transparency16P9stbi__pngPti($199,$tc16,$201)|0);
      $tobool351 = ($call350|0)!=(0);
      if ($tobool351) {
       break;
      }
      $retval = 0;
      $235 = $retval;
      STACKTOP = sp;return ($235|0);
     } else {
      $202 = $s;
      $img_out_n356 = ((($202)) + 12|0);
      $203 = HEAP32[$img_out_n356>>2]|0;
      $call357 = (__ZL26stbi__compute_transparencyP9stbi__pngPhi($199,$tc,$203)|0);
      $tobool358 = ($call357|0)!=(0);
      if ($tobool358) {
       break;
      }
      $retval = 0;
      $235 = $retval;
      STACKTOP = sp;return ($235|0);
     }
    }
   } while(0);
   $204 = $is_iphone;
   $tobool363 = ($204|0)!=(0);
   $tobool365 = (0)!=(0);
   $or$cond4 = $tobool363 & $tobool365;
   if ($or$cond4) {
    $205 = $s;
    $img_out_n367 = ((($205)) + 12|0);
    $206 = HEAP32[$img_out_n367>>2]|0;
    $cmp368 = ($206|0)>(2);
    if ($cmp368) {
     $207 = $z$addr;
     __ZL15stbi__de_iphoneP9stbi__png($207);
    }
   }
   $208 = $pal_img_n;
   $tobool371 = ($208<<24>>24)!=(0);
   if ($tobool371) {
    $209 = $pal_img_n;
    $conv373 = $209&255;
    $210 = $s;
    $img_n374 = ((($210)) + 8|0);
    HEAP32[$img_n374>>2] = $conv373;
    $211 = $pal_img_n;
    $conv375 = $211&255;
    $212 = $s;
    $img_out_n376 = ((($212)) + 12|0);
    HEAP32[$img_out_n376>>2] = $conv375;
    $213 = $req_comp$addr;
    $cmp377 = ($213|0)>=(3);
    if ($cmp377) {
     $214 = $req_comp$addr;
     $215 = $s;
     $img_out_n379 = ((($215)) + 12|0);
     HEAP32[$img_out_n379>>2] = $214;
    }
    $216 = $z$addr;
    $217 = $pal_len;
    $218 = $s;
    $img_out_n382 = ((($218)) + 12|0);
    $219 = HEAP32[$img_out_n382>>2]|0;
    $call383 = (__ZL24stbi__expand_png_paletteP9stbi__pngPhii($216,$palette,$217,$219)|0);
    $tobool384 = ($call383|0)!=(0);
    if (!($tobool384)) {
     $retval = 0;
     $235 = $retval;
     STACKTOP = sp;return ($235|0);
    }
   } else {
    $220 = $has_trans;
    $tobool388 = ($220<<24>>24)!=(0);
    if ($tobool388) {
     $221 = $s;
     $img_n390 = ((($221)) + 8|0);
     $222 = HEAP32[$img_n390>>2]|0;
     $inc391 = (($222) + 1)|0;
     HEAP32[$img_n390>>2] = $inc391;
    }
   }
   $223 = $z$addr;
   $expanded394 = ((($223)) + 8|0);
   $224 = HEAP32[$expanded394>>2]|0;
   _free($224);
   $225 = $z$addr;
   $expanded395 = ((($225)) + 8|0);
   HEAP32[$expanded395>>2] = 0;
   $retval = 1;
   $235 = $retval;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 132: {
   $call398 = (__ZL9stbi__errPKc(8016)|0);
   $retval = $call398;
   $235 = $retval;
   STACKTOP = sp;return ($235|0);
   break;
  }
  case 134: {
   $type404 = ((($c)) + 4|0);
   $228 = HEAP32[$type404>>2]|0;
   $shr = $228 >>> 24;
   $and405 = $shr & 255;
   $conv406 = $and405&255;
   HEAP8[192] = $conv406;
   $type407 = ((($c)) + 4|0);
   $229 = HEAP32[$type407>>2]|0;
   $shr408 = $229 >>> 16;
   $and409 = $shr408 & 255;
   $conv410 = $and409&255;
   HEAP8[(193)>>0] = $conv410;
   $type411 = ((($c)) + 4|0);
   $230 = HEAP32[$type411>>2]|0;
   $shr412 = $230 >>> 8;
   $and413 = $shr412 & 255;
   $conv414 = $and413&255;
   HEAP8[(194)>>0] = $conv414;
   $type415 = ((($c)) + 4|0);
   $231 = HEAP32[$type415>>2]|0;
   $shr416 = $231 >>> 0;
   $and417 = $shr416 & 255;
   $conv418 = $and417&255;
   HEAP8[(195)>>0] = $conv418;
   $call419 = (__ZL9stbi__errPKc(192)|0);
   $retval = $call419;
   $235 = $retval;
   STACKTOP = sp;return ($235|0);
   break;
  }
 }
 return (0)|0;
}
function __ZL20stbi__convert_formatPhiijj($data,$img_n,$req_comp,$x,$y) {
 $data = $data|0;
 $img_n = $img_n|0;
 $req_comp = $req_comp|0;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add$ptr = 0, $add$ptr105 = 0, $add$ptr106 = 0, $add$ptr11 = 0, $add$ptr122 = 0, $add$ptr123 = 0, $add$ptr141 = 0, $add$ptr142 = 0, $add$ptr159 = 0, $add$ptr160 = 0, $add$ptr179 = 0;
 var $add$ptr18 = 0, $add$ptr180 = 0, $add$ptr19 = 0, $add$ptr195 = 0, $add$ptr196 = 0, $add$ptr31 = 0, $add$ptr32 = 0, $add$ptr46 = 0, $add$ptr47 = 0, $add$ptr58 = 0, $add$ptr59 = 0, $add$ptr72 = 0, $add$ptr73 = 0, $add$ptr88 = 0, $add$ptr89 = 0, $arrayidx100 = 0, $arrayidx101 = 0, $arrayidx102 = 0, $arrayidx114 = 0, $arrayidx116 = 0;
 var $arrayidx132 = 0, $arrayidx134 = 0, $arrayidx138 = 0, $arrayidx151 = 0, $arrayidx153 = 0, $arrayidx169 = 0, $arrayidx17 = 0, $arrayidx171 = 0, $arrayidx175 = 0, $arrayidx176 = 0, $arrayidx189 = 0, $arrayidx190 = 0, $arrayidx191 = 0, $arrayidx192 = 0, $arrayidx26 = 0, $arrayidx27 = 0, $arrayidx40 = 0, $arrayidx41 = 0, $arrayidx43 = 0, $arrayidx67 = 0;
 var $arrayidx68 = 0, $arrayidx81 = 0, $arrayidx82 = 0, $arrayidx84 = 0, $arrayidx85 = 0, $arrayidx98 = 0, $arrayidx99 = 0, $call = 0, $call118 = 0, $call136 = 0, $call155 = 0, $call173 = 0, $call5 = 0, $cmp = 0, $cmp1 = 0, $cmp111 = 0, $cmp128 = 0, $cmp14 = 0, $cmp147 = 0, $cmp165 = 0;
 var $cmp185 = 0, $cmp2 = 0, $cmp23 = 0, $cmp3 = 0, $cmp37 = 0, $cmp52 = 0, $cmp64 = 0, $cmp7 = 0, $cmp78 = 0, $cmp94 = 0, $cond = 0, $conv = 0, $conv115 = 0, $conv117 = 0, $conv131 = 0, $conv133 = 0, $conv135 = 0, $conv150 = 0, $conv152 = 0, $conv154 = 0;
 var $conv168 = 0, $conv170 = 0, $conv172 = 0, $data$addr = 0, $dec = 0, $dec104 = 0, $dec121 = 0, $dec140 = 0, $dec158 = 0, $dec178 = 0, $dec194 = 0, $dec30 = 0, $dec45 = 0, $dec57 = 0, $dec71 = 0, $dec87 = 0, $dest = 0, $good = 0, $i = 0, $img_n$addr = 0;
 var $inc = 0, $j = 0, $mul = 0, $mul10 = 0, $mul12 = 0, $mul8 = 0, $mul9 = 0, $or$cond = 0, $req_comp$addr = 0, $retval = 0, $src = 0, $sub = 0, $sub109 = 0, $sub126 = 0, $sub145 = 0, $sub163 = 0, $sub183 = 0, $sub21 = 0, $sub35 = 0, $sub50 = 0;
 var $sub62 = 0, $sub76 = 0, $sub92 = 0, $tobool = 0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $data$addr = $data;
 $img_n$addr = $img_n;
 $req_comp$addr = $req_comp;
 $x$addr = $x;
 $y$addr = $y;
 $0 = $req_comp$addr;
 $1 = $img_n$addr;
 $cmp = ($0|0)==($1|0);
 if ($cmp) {
  $2 = $data$addr;
  $retval = $2;
  $167 = $retval;
  STACKTOP = sp;return ($167|0);
 }
 $3 = $req_comp$addr;
 $cmp1 = ($3|0)>=(1);
 $4 = $req_comp$addr;
 $cmp2 = ($4|0)<=(4);
 $or$cond = $cmp1 & $cmp2;
 if (!($or$cond)) {
  ___assert_fail((7803|0),(7702|0),1525,(7859|0));
  // unreachable;
 }
 $5 = $req_comp$addr;
 $6 = $x$addr;
 $7 = $y$addr;
 $call = (__ZL17stbi__malloc_mad3iiii($5,$6,$7,0)|0);
 $good = $call;
 $8 = $good;
 $cmp3 = ($8|0)==(0|0);
 if ($cmp3) {
  $9 = $data$addr;
  _free($9);
  $call5 = (__ZL9stbi__errPKc(7762)|0);
  $tobool = ($call5|0)!=(0);
  $cond = $tobool ? 0 : 0;
  $10 = $cond;
  $retval = $10;
  $167 = $retval;
  STACKTOP = sp;return ($167|0);
 }
 $j = 0;
 L12: while(1) {
  $11 = $j;
  $12 = $y$addr;
  $cmp7 = ($11|0)<($12|0);
  $13 = $data$addr;
  if (!($cmp7)) {
   break;
  }
  $14 = $j;
  $15 = $x$addr;
  $mul = Math_imul($14, $15)|0;
  $16 = $img_n$addr;
  $mul8 = Math_imul($mul, $16)|0;
  $add$ptr = (($13) + ($mul8)|0);
  $src = $add$ptr;
  $17 = $good;
  $18 = $j;
  $19 = $x$addr;
  $mul9 = Math_imul($18, $19)|0;
  $20 = $req_comp$addr;
  $mul10 = Math_imul($mul9, $20)|0;
  $add$ptr11 = (($17) + ($mul10)|0);
  $dest = $add$ptr11;
  $21 = $img_n$addr;
  $mul12 = $21<<3;
  $22 = $req_comp$addr;
  $add = (($mul12) + ($22))|0;
  L15: do {
   switch ($add|0) {
   case 10:  {
    $23 = $x$addr;
    $sub = (($23) - 1)|0;
    $i = $sub;
    while(1) {
     $24 = $i;
     $cmp14 = ($24|0)>=(0);
     if (!($cmp14)) {
      break L15;
     }
     $25 = $src;
     $26 = HEAP8[$25>>0]|0;
     $27 = $dest;
     HEAP8[$27>>0] = $26;
     $28 = $dest;
     $arrayidx17 = ((($28)) + 1|0);
     HEAP8[$arrayidx17>>0] = -1;
     $29 = $i;
     $dec = (($29) + -1)|0;
     $i = $dec;
     $30 = $src;
     $add$ptr18 = ((($30)) + 1|0);
     $src = $add$ptr18;
     $31 = $dest;
     $add$ptr19 = ((($31)) + 2|0);
     $dest = $add$ptr19;
    }
    break;
   }
   case 11:  {
    $32 = $x$addr;
    $sub21 = (($32) - 1)|0;
    $i = $sub21;
    while(1) {
     $33 = $i;
     $cmp23 = ($33|0)>=(0);
     if (!($cmp23)) {
      break L15;
     }
     $34 = $src;
     $35 = HEAP8[$34>>0]|0;
     $36 = $dest;
     $arrayidx26 = ((($36)) + 2|0);
     HEAP8[$arrayidx26>>0] = $35;
     $37 = $dest;
     $arrayidx27 = ((($37)) + 1|0);
     HEAP8[$arrayidx27>>0] = $35;
     $38 = $dest;
     HEAP8[$38>>0] = $35;
     $39 = $i;
     $dec30 = (($39) + -1)|0;
     $i = $dec30;
     $40 = $src;
     $add$ptr31 = ((($40)) + 1|0);
     $src = $add$ptr31;
     $41 = $dest;
     $add$ptr32 = ((($41)) + 3|0);
     $dest = $add$ptr32;
    }
    break;
   }
   case 12:  {
    $42 = $x$addr;
    $sub35 = (($42) - 1)|0;
    $i = $sub35;
    while(1) {
     $43 = $i;
     $cmp37 = ($43|0)>=(0);
     if (!($cmp37)) {
      break L15;
     }
     $44 = $src;
     $45 = HEAP8[$44>>0]|0;
     $46 = $dest;
     $arrayidx40 = ((($46)) + 2|0);
     HEAP8[$arrayidx40>>0] = $45;
     $47 = $dest;
     $arrayidx41 = ((($47)) + 1|0);
     HEAP8[$arrayidx41>>0] = $45;
     $48 = $dest;
     HEAP8[$48>>0] = $45;
     $49 = $dest;
     $arrayidx43 = ((($49)) + 3|0);
     HEAP8[$arrayidx43>>0] = -1;
     $50 = $i;
     $dec45 = (($50) + -1)|0;
     $i = $dec45;
     $51 = $src;
     $add$ptr46 = ((($51)) + 1|0);
     $src = $add$ptr46;
     $52 = $dest;
     $add$ptr47 = ((($52)) + 4|0);
     $dest = $add$ptr47;
    }
    break;
   }
   case 17:  {
    $53 = $x$addr;
    $sub50 = (($53) - 1)|0;
    $i = $sub50;
    while(1) {
     $54 = $i;
     $cmp52 = ($54|0)>=(0);
     if (!($cmp52)) {
      break L15;
     }
     $55 = $src;
     $56 = HEAP8[$55>>0]|0;
     $57 = $dest;
     HEAP8[$57>>0] = $56;
     $58 = $i;
     $dec57 = (($58) + -1)|0;
     $i = $dec57;
     $59 = $src;
     $add$ptr58 = ((($59)) + 2|0);
     $src = $add$ptr58;
     $60 = $dest;
     $add$ptr59 = ((($60)) + 1|0);
     $dest = $add$ptr59;
    }
    break;
   }
   case 19:  {
    $61 = $x$addr;
    $sub62 = (($61) - 1)|0;
    $i = $sub62;
    while(1) {
     $62 = $i;
     $cmp64 = ($62|0)>=(0);
     if (!($cmp64)) {
      break L15;
     }
     $63 = $src;
     $64 = HEAP8[$63>>0]|0;
     $65 = $dest;
     $arrayidx67 = ((($65)) + 2|0);
     HEAP8[$arrayidx67>>0] = $64;
     $66 = $dest;
     $arrayidx68 = ((($66)) + 1|0);
     HEAP8[$arrayidx68>>0] = $64;
     $67 = $dest;
     HEAP8[$67>>0] = $64;
     $68 = $i;
     $dec71 = (($68) + -1)|0;
     $i = $dec71;
     $69 = $src;
     $add$ptr72 = ((($69)) + 2|0);
     $src = $add$ptr72;
     $70 = $dest;
     $add$ptr73 = ((($70)) + 3|0);
     $dest = $add$ptr73;
    }
    break;
   }
   case 20:  {
    $71 = $x$addr;
    $sub76 = (($71) - 1)|0;
    $i = $sub76;
    while(1) {
     $72 = $i;
     $cmp78 = ($72|0)>=(0);
     if (!($cmp78)) {
      break L15;
     }
     $73 = $src;
     $74 = HEAP8[$73>>0]|0;
     $75 = $dest;
     $arrayidx81 = ((($75)) + 2|0);
     HEAP8[$arrayidx81>>0] = $74;
     $76 = $dest;
     $arrayidx82 = ((($76)) + 1|0);
     HEAP8[$arrayidx82>>0] = $74;
     $77 = $dest;
     HEAP8[$77>>0] = $74;
     $78 = $src;
     $arrayidx84 = ((($78)) + 1|0);
     $79 = HEAP8[$arrayidx84>>0]|0;
     $80 = $dest;
     $arrayidx85 = ((($80)) + 3|0);
     HEAP8[$arrayidx85>>0] = $79;
     $81 = $i;
     $dec87 = (($81) + -1)|0;
     $i = $dec87;
     $82 = $src;
     $add$ptr88 = ((($82)) + 2|0);
     $src = $add$ptr88;
     $83 = $dest;
     $add$ptr89 = ((($83)) + 4|0);
     $dest = $add$ptr89;
    }
    break;
   }
   case 28:  {
    $84 = $x$addr;
    $sub92 = (($84) - 1)|0;
    $i = $sub92;
    while(1) {
     $85 = $i;
     $cmp94 = ($85|0)>=(0);
     if (!($cmp94)) {
      break L15;
     }
     $86 = $src;
     $87 = HEAP8[$86>>0]|0;
     $88 = $dest;
     HEAP8[$88>>0] = $87;
     $89 = $src;
     $arrayidx98 = ((($89)) + 1|0);
     $90 = HEAP8[$arrayidx98>>0]|0;
     $91 = $dest;
     $arrayidx99 = ((($91)) + 1|0);
     HEAP8[$arrayidx99>>0] = $90;
     $92 = $src;
     $arrayidx100 = ((($92)) + 2|0);
     $93 = HEAP8[$arrayidx100>>0]|0;
     $94 = $dest;
     $arrayidx101 = ((($94)) + 2|0);
     HEAP8[$arrayidx101>>0] = $93;
     $95 = $dest;
     $arrayidx102 = ((($95)) + 3|0);
     HEAP8[$arrayidx102>>0] = -1;
     $96 = $i;
     $dec104 = (($96) + -1)|0;
     $i = $dec104;
     $97 = $src;
     $add$ptr105 = ((($97)) + 3|0);
     $src = $add$ptr105;
     $98 = $dest;
     $add$ptr106 = ((($98)) + 4|0);
     $dest = $add$ptr106;
    }
    break;
   }
   case 25:  {
    $99 = $x$addr;
    $sub109 = (($99) - 1)|0;
    $i = $sub109;
    while(1) {
     $100 = $i;
     $cmp111 = ($100|0)>=(0);
     if (!($cmp111)) {
      break L15;
     }
     $101 = $src;
     $102 = HEAP8[$101>>0]|0;
     $conv = $102&255;
     $103 = $src;
     $arrayidx114 = ((($103)) + 1|0);
     $104 = HEAP8[$arrayidx114>>0]|0;
     $conv115 = $104&255;
     $105 = $src;
     $arrayidx116 = ((($105)) + 2|0);
     $106 = HEAP8[$arrayidx116>>0]|0;
     $conv117 = $106&255;
     $call118 = (__ZL15stbi__compute_yiii($conv,$conv115,$conv117)|0);
     $107 = $dest;
     HEAP8[$107>>0] = $call118;
     $108 = $i;
     $dec121 = (($108) + -1)|0;
     $i = $dec121;
     $109 = $src;
     $add$ptr122 = ((($109)) + 3|0);
     $src = $add$ptr122;
     $110 = $dest;
     $add$ptr123 = ((($110)) + 1|0);
     $dest = $add$ptr123;
    }
    break;
   }
   case 26:  {
    $111 = $x$addr;
    $sub126 = (($111) - 1)|0;
    $i = $sub126;
    while(1) {
     $112 = $i;
     $cmp128 = ($112|0)>=(0);
     if (!($cmp128)) {
      break L15;
     }
     $113 = $src;
     $114 = HEAP8[$113>>0]|0;
     $conv131 = $114&255;
     $115 = $src;
     $arrayidx132 = ((($115)) + 1|0);
     $116 = HEAP8[$arrayidx132>>0]|0;
     $conv133 = $116&255;
     $117 = $src;
     $arrayidx134 = ((($117)) + 2|0);
     $118 = HEAP8[$arrayidx134>>0]|0;
     $conv135 = $118&255;
     $call136 = (__ZL15stbi__compute_yiii($conv131,$conv133,$conv135)|0);
     $119 = $dest;
     HEAP8[$119>>0] = $call136;
     $120 = $dest;
     $arrayidx138 = ((($120)) + 1|0);
     HEAP8[$arrayidx138>>0] = -1;
     $121 = $i;
     $dec140 = (($121) + -1)|0;
     $i = $dec140;
     $122 = $src;
     $add$ptr141 = ((($122)) + 3|0);
     $src = $add$ptr141;
     $123 = $dest;
     $add$ptr142 = ((($123)) + 2|0);
     $dest = $add$ptr142;
    }
    break;
   }
   case 33:  {
    $124 = $x$addr;
    $sub145 = (($124) - 1)|0;
    $i = $sub145;
    while(1) {
     $125 = $i;
     $cmp147 = ($125|0)>=(0);
     if (!($cmp147)) {
      break L15;
     }
     $126 = $src;
     $127 = HEAP8[$126>>0]|0;
     $conv150 = $127&255;
     $128 = $src;
     $arrayidx151 = ((($128)) + 1|0);
     $129 = HEAP8[$arrayidx151>>0]|0;
     $conv152 = $129&255;
     $130 = $src;
     $arrayidx153 = ((($130)) + 2|0);
     $131 = HEAP8[$arrayidx153>>0]|0;
     $conv154 = $131&255;
     $call155 = (__ZL15stbi__compute_yiii($conv150,$conv152,$conv154)|0);
     $132 = $dest;
     HEAP8[$132>>0] = $call155;
     $133 = $i;
     $dec158 = (($133) + -1)|0;
     $i = $dec158;
     $134 = $src;
     $add$ptr159 = ((($134)) + 4|0);
     $src = $add$ptr159;
     $135 = $dest;
     $add$ptr160 = ((($135)) + 1|0);
     $dest = $add$ptr160;
    }
    break;
   }
   case 34:  {
    $136 = $x$addr;
    $sub163 = (($136) - 1)|0;
    $i = $sub163;
    while(1) {
     $137 = $i;
     $cmp165 = ($137|0)>=(0);
     if (!($cmp165)) {
      break L15;
     }
     $138 = $src;
     $139 = HEAP8[$138>>0]|0;
     $conv168 = $139&255;
     $140 = $src;
     $arrayidx169 = ((($140)) + 1|0);
     $141 = HEAP8[$arrayidx169>>0]|0;
     $conv170 = $141&255;
     $142 = $src;
     $arrayidx171 = ((($142)) + 2|0);
     $143 = HEAP8[$arrayidx171>>0]|0;
     $conv172 = $143&255;
     $call173 = (__ZL15stbi__compute_yiii($conv168,$conv170,$conv172)|0);
     $144 = $dest;
     HEAP8[$144>>0] = $call173;
     $145 = $src;
     $arrayidx175 = ((($145)) + 3|0);
     $146 = HEAP8[$arrayidx175>>0]|0;
     $147 = $dest;
     $arrayidx176 = ((($147)) + 1|0);
     HEAP8[$arrayidx176>>0] = $146;
     $148 = $i;
     $dec178 = (($148) + -1)|0;
     $i = $dec178;
     $149 = $src;
     $add$ptr179 = ((($149)) + 4|0);
     $src = $add$ptr179;
     $150 = $dest;
     $add$ptr180 = ((($150)) + 2|0);
     $dest = $add$ptr180;
    }
    break;
   }
   case 35:  {
    $151 = $x$addr;
    $sub183 = (($151) - 1)|0;
    $i = $sub183;
    while(1) {
     $152 = $i;
     $cmp185 = ($152|0)>=(0);
     if (!($cmp185)) {
      break L15;
     }
     $153 = $src;
     $154 = HEAP8[$153>>0]|0;
     $155 = $dest;
     HEAP8[$155>>0] = $154;
     $156 = $src;
     $arrayidx189 = ((($156)) + 1|0);
     $157 = HEAP8[$arrayidx189>>0]|0;
     $158 = $dest;
     $arrayidx190 = ((($158)) + 1|0);
     HEAP8[$arrayidx190>>0] = $157;
     $159 = $src;
     $arrayidx191 = ((($159)) + 2|0);
     $160 = HEAP8[$arrayidx191>>0]|0;
     $161 = $dest;
     $arrayidx192 = ((($161)) + 2|0);
     HEAP8[$arrayidx192>>0] = $160;
     $162 = $i;
     $dec194 = (($162) + -1)|0;
     $i = $dec194;
     $163 = $src;
     $add$ptr195 = ((($163)) + 4|0);
     $src = $add$ptr195;
     $164 = $dest;
     $add$ptr196 = ((($164)) + 3|0);
     $dest = $add$ptr196;
    }
    break;
   }
   default: {
    label = 46;
    break L12;
   }
   }
  } while(0);
  $165 = $j;
  $inc = (($165) + 1)|0;
  $j = $inc;
 }
 if ((label|0) == 46) {
  ___assert_fail((7857|0),(7702|0),1554,(7859|0));
  // unreachable;
 }
 _free($13);
 $166 = $good;
 $retval = $166;
 $167 = $retval;
 STACKTOP = sp;return ($167|0);
}
function __ZL22stbi__convert_format16Ptiijj($data,$img_n,$req_comp,$x,$y) {
 $data = $data|0;
 $img_n = $img_n|0;
 $req_comp = $req_comp|0;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $add$ptr = 0, $add$ptr108 = 0, $add$ptr109 = 0, $add$ptr125 = 0, $add$ptr126 = 0, $add$ptr14 = 0, $add$ptr144 = 0, $add$ptr145 = 0, $add$ptr162 = 0, $add$ptr163 = 0, $add$ptr182 = 0;
 var $add$ptr183 = 0, $add$ptr198 = 0, $add$ptr199 = 0, $add$ptr21 = 0, $add$ptr22 = 0, $add$ptr34 = 0, $add$ptr35 = 0, $add$ptr49 = 0, $add$ptr50 = 0, $add$ptr61 = 0, $add$ptr62 = 0, $add$ptr75 = 0, $add$ptr76 = 0, $add$ptr91 = 0, $add$ptr92 = 0, $arrayidx101 = 0, $arrayidx102 = 0, $arrayidx103 = 0, $arrayidx104 = 0, $arrayidx105 = 0;
 var $arrayidx117 = 0, $arrayidx119 = 0, $arrayidx135 = 0, $arrayidx137 = 0, $arrayidx141 = 0, $arrayidx154 = 0, $arrayidx156 = 0, $arrayidx172 = 0, $arrayidx174 = 0, $arrayidx178 = 0, $arrayidx179 = 0, $arrayidx192 = 0, $arrayidx193 = 0, $arrayidx194 = 0, $arrayidx195 = 0, $arrayidx20 = 0, $arrayidx29 = 0, $arrayidx30 = 0, $arrayidx43 = 0, $arrayidx44 = 0;
 var $arrayidx46 = 0, $arrayidx70 = 0, $arrayidx71 = 0, $arrayidx84 = 0, $arrayidx85 = 0, $arrayidx87 = 0, $arrayidx88 = 0, $call = 0, $call121 = 0, $call139 = 0, $call158 = 0, $call176 = 0, $call7 = 0, $cmp = 0, $cmp1 = 0, $cmp114 = 0, $cmp131 = 0, $cmp150 = 0, $cmp168 = 0, $cmp17 = 0;
 var $cmp188 = 0, $cmp2 = 0, $cmp26 = 0, $cmp40 = 0, $cmp5 = 0, $cmp55 = 0, $cmp67 = 0, $cmp81 = 0, $cmp9 = 0, $cmp97 = 0, $cond = 0, $conv = 0, $conv118 = 0, $conv120 = 0, $conv134 = 0, $conv136 = 0, $conv138 = 0, $conv153 = 0, $conv155 = 0, $conv157 = 0;
 var $conv171 = 0, $conv173 = 0, $conv175 = 0, $data$addr = 0, $dec = 0, $dec107 = 0, $dec124 = 0, $dec143 = 0, $dec161 = 0, $dec181 = 0, $dec197 = 0, $dec33 = 0, $dec48 = 0, $dec60 = 0, $dec74 = 0, $dec90 = 0, $dest = 0, $good = 0, $i = 0, $img_n$addr = 0;
 var $inc = 0, $j = 0, $mul = 0, $mul10 = 0, $mul11 = 0, $mul12 = 0, $mul13 = 0, $mul15 = 0, $mul3 = 0, $mul4 = 0, $or$cond = 0, $req_comp$addr = 0, $retval = 0, $src = 0, $sub = 0, $sub112 = 0, $sub129 = 0, $sub148 = 0, $sub166 = 0, $sub186 = 0;
 var $sub24 = 0, $sub38 = 0, $sub53 = 0, $sub65 = 0, $sub79 = 0, $sub95 = 0, $tobool = 0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $data$addr = $data;
 $img_n$addr = $img_n;
 $req_comp$addr = $req_comp;
 $x$addr = $x;
 $y$addr = $y;
 $0 = $req_comp$addr;
 $1 = $img_n$addr;
 $cmp = ($0|0)==($1|0);
 if ($cmp) {
  $2 = $data$addr;
  $retval = $2;
  $167 = $retval;
  STACKTOP = sp;return ($167|0);
 }
 $3 = $req_comp$addr;
 $cmp1 = ($3|0)>=(1);
 $4 = $req_comp$addr;
 $cmp2 = ($4|0)<=(4);
 $or$cond = $cmp1 & $cmp2;
 if (!($or$cond)) {
  ___assert_fail((7803|0),(7702|0),1574,(7834|0));
  // unreachable;
 }
 $5 = $req_comp$addr;
 $6 = $x$addr;
 $mul = Math_imul($5, $6)|0;
 $7 = $y$addr;
 $mul3 = Math_imul($mul, $7)|0;
 $mul4 = $mul3<<1;
 $call = (__ZL12stbi__mallocm($mul4)|0);
 $good = $call;
 $8 = $good;
 $cmp5 = ($8|0)==(0|0);
 if ($cmp5) {
  $9 = $data$addr;
  _free($9);
  $call7 = (__ZL9stbi__errPKc(7762)|0);
  $tobool = ($call7|0)!=(0);
  $cond = $tobool ? 0 : 0;
  $10 = $cond;
  $retval = $10;
  $167 = $retval;
  STACKTOP = sp;return ($167|0);
 }
 $j = 0;
 L12: while(1) {
  $11 = $j;
  $12 = $y$addr;
  $cmp9 = ($11|0)<($12|0);
  $13 = $data$addr;
  if (!($cmp9)) {
   break;
  }
  $14 = $j;
  $15 = $x$addr;
  $mul10 = Math_imul($14, $15)|0;
  $16 = $img_n$addr;
  $mul11 = Math_imul($mul10, $16)|0;
  $add$ptr = (($13) + ($mul11<<1)|0);
  $src = $add$ptr;
  $17 = $good;
  $18 = $j;
  $19 = $x$addr;
  $mul12 = Math_imul($18, $19)|0;
  $20 = $req_comp$addr;
  $mul13 = Math_imul($mul12, $20)|0;
  $add$ptr14 = (($17) + ($mul13<<1)|0);
  $dest = $add$ptr14;
  $21 = $img_n$addr;
  $mul15 = $21<<3;
  $22 = $req_comp$addr;
  $add = (($mul15) + ($22))|0;
  L15: do {
   switch ($add|0) {
   case 10:  {
    $23 = $x$addr;
    $sub = (($23) - 1)|0;
    $i = $sub;
    while(1) {
     $24 = $i;
     $cmp17 = ($24|0)>=(0);
     if (!($cmp17)) {
      break L15;
     }
     $25 = $src;
     $26 = HEAP16[$25>>1]|0;
     $27 = $dest;
     HEAP16[$27>>1] = $26;
     $28 = $dest;
     $arrayidx20 = ((($28)) + 2|0);
     HEAP16[$arrayidx20>>1] = -1;
     $29 = $i;
     $dec = (($29) + -1)|0;
     $i = $dec;
     $30 = $src;
     $add$ptr21 = ((($30)) + 2|0);
     $src = $add$ptr21;
     $31 = $dest;
     $add$ptr22 = ((($31)) + 4|0);
     $dest = $add$ptr22;
    }
    break;
   }
   case 11:  {
    $32 = $x$addr;
    $sub24 = (($32) - 1)|0;
    $i = $sub24;
    while(1) {
     $33 = $i;
     $cmp26 = ($33|0)>=(0);
     if (!($cmp26)) {
      break L15;
     }
     $34 = $src;
     $35 = HEAP16[$34>>1]|0;
     $36 = $dest;
     $arrayidx29 = ((($36)) + 4|0);
     HEAP16[$arrayidx29>>1] = $35;
     $37 = $dest;
     $arrayidx30 = ((($37)) + 2|0);
     HEAP16[$arrayidx30>>1] = $35;
     $38 = $dest;
     HEAP16[$38>>1] = $35;
     $39 = $i;
     $dec33 = (($39) + -1)|0;
     $i = $dec33;
     $40 = $src;
     $add$ptr34 = ((($40)) + 2|0);
     $src = $add$ptr34;
     $41 = $dest;
     $add$ptr35 = ((($41)) + 6|0);
     $dest = $add$ptr35;
    }
    break;
   }
   case 12:  {
    $42 = $x$addr;
    $sub38 = (($42) - 1)|0;
    $i = $sub38;
    while(1) {
     $43 = $i;
     $cmp40 = ($43|0)>=(0);
     if (!($cmp40)) {
      break L15;
     }
     $44 = $src;
     $45 = HEAP16[$44>>1]|0;
     $46 = $dest;
     $arrayidx43 = ((($46)) + 4|0);
     HEAP16[$arrayidx43>>1] = $45;
     $47 = $dest;
     $arrayidx44 = ((($47)) + 2|0);
     HEAP16[$arrayidx44>>1] = $45;
     $48 = $dest;
     HEAP16[$48>>1] = $45;
     $49 = $dest;
     $arrayidx46 = ((($49)) + 6|0);
     HEAP16[$arrayidx46>>1] = -1;
     $50 = $i;
     $dec48 = (($50) + -1)|0;
     $i = $dec48;
     $51 = $src;
     $add$ptr49 = ((($51)) + 2|0);
     $src = $add$ptr49;
     $52 = $dest;
     $add$ptr50 = ((($52)) + 8|0);
     $dest = $add$ptr50;
    }
    break;
   }
   case 17:  {
    $53 = $x$addr;
    $sub53 = (($53) - 1)|0;
    $i = $sub53;
    while(1) {
     $54 = $i;
     $cmp55 = ($54|0)>=(0);
     if (!($cmp55)) {
      break L15;
     }
     $55 = $src;
     $56 = HEAP16[$55>>1]|0;
     $57 = $dest;
     HEAP16[$57>>1] = $56;
     $58 = $i;
     $dec60 = (($58) + -1)|0;
     $i = $dec60;
     $59 = $src;
     $add$ptr61 = ((($59)) + 4|0);
     $src = $add$ptr61;
     $60 = $dest;
     $add$ptr62 = ((($60)) + 2|0);
     $dest = $add$ptr62;
    }
    break;
   }
   case 19:  {
    $61 = $x$addr;
    $sub65 = (($61) - 1)|0;
    $i = $sub65;
    while(1) {
     $62 = $i;
     $cmp67 = ($62|0)>=(0);
     if (!($cmp67)) {
      break L15;
     }
     $63 = $src;
     $64 = HEAP16[$63>>1]|0;
     $65 = $dest;
     $arrayidx70 = ((($65)) + 4|0);
     HEAP16[$arrayidx70>>1] = $64;
     $66 = $dest;
     $arrayidx71 = ((($66)) + 2|0);
     HEAP16[$arrayidx71>>1] = $64;
     $67 = $dest;
     HEAP16[$67>>1] = $64;
     $68 = $i;
     $dec74 = (($68) + -1)|0;
     $i = $dec74;
     $69 = $src;
     $add$ptr75 = ((($69)) + 4|0);
     $src = $add$ptr75;
     $70 = $dest;
     $add$ptr76 = ((($70)) + 6|0);
     $dest = $add$ptr76;
    }
    break;
   }
   case 20:  {
    $71 = $x$addr;
    $sub79 = (($71) - 1)|0;
    $i = $sub79;
    while(1) {
     $72 = $i;
     $cmp81 = ($72|0)>=(0);
     if (!($cmp81)) {
      break L15;
     }
     $73 = $src;
     $74 = HEAP16[$73>>1]|0;
     $75 = $dest;
     $arrayidx84 = ((($75)) + 4|0);
     HEAP16[$arrayidx84>>1] = $74;
     $76 = $dest;
     $arrayidx85 = ((($76)) + 2|0);
     HEAP16[$arrayidx85>>1] = $74;
     $77 = $dest;
     HEAP16[$77>>1] = $74;
     $78 = $src;
     $arrayidx87 = ((($78)) + 2|0);
     $79 = HEAP16[$arrayidx87>>1]|0;
     $80 = $dest;
     $arrayidx88 = ((($80)) + 6|0);
     HEAP16[$arrayidx88>>1] = $79;
     $81 = $i;
     $dec90 = (($81) + -1)|0;
     $i = $dec90;
     $82 = $src;
     $add$ptr91 = ((($82)) + 4|0);
     $src = $add$ptr91;
     $83 = $dest;
     $add$ptr92 = ((($83)) + 8|0);
     $dest = $add$ptr92;
    }
    break;
   }
   case 28:  {
    $84 = $x$addr;
    $sub95 = (($84) - 1)|0;
    $i = $sub95;
    while(1) {
     $85 = $i;
     $cmp97 = ($85|0)>=(0);
     if (!($cmp97)) {
      break L15;
     }
     $86 = $src;
     $87 = HEAP16[$86>>1]|0;
     $88 = $dest;
     HEAP16[$88>>1] = $87;
     $89 = $src;
     $arrayidx101 = ((($89)) + 2|0);
     $90 = HEAP16[$arrayidx101>>1]|0;
     $91 = $dest;
     $arrayidx102 = ((($91)) + 2|0);
     HEAP16[$arrayidx102>>1] = $90;
     $92 = $src;
     $arrayidx103 = ((($92)) + 4|0);
     $93 = HEAP16[$arrayidx103>>1]|0;
     $94 = $dest;
     $arrayidx104 = ((($94)) + 4|0);
     HEAP16[$arrayidx104>>1] = $93;
     $95 = $dest;
     $arrayidx105 = ((($95)) + 6|0);
     HEAP16[$arrayidx105>>1] = -1;
     $96 = $i;
     $dec107 = (($96) + -1)|0;
     $i = $dec107;
     $97 = $src;
     $add$ptr108 = ((($97)) + 6|0);
     $src = $add$ptr108;
     $98 = $dest;
     $add$ptr109 = ((($98)) + 8|0);
     $dest = $add$ptr109;
    }
    break;
   }
   case 25:  {
    $99 = $x$addr;
    $sub112 = (($99) - 1)|0;
    $i = $sub112;
    while(1) {
     $100 = $i;
     $cmp114 = ($100|0)>=(0);
     if (!($cmp114)) {
      break L15;
     }
     $101 = $src;
     $102 = HEAP16[$101>>1]|0;
     $conv = $102&65535;
     $103 = $src;
     $arrayidx117 = ((($103)) + 2|0);
     $104 = HEAP16[$arrayidx117>>1]|0;
     $conv118 = $104&65535;
     $105 = $src;
     $arrayidx119 = ((($105)) + 4|0);
     $106 = HEAP16[$arrayidx119>>1]|0;
     $conv120 = $106&65535;
     $call121 = (__ZL18stbi__compute_y_16iii($conv,$conv118,$conv120)|0);
     $107 = $dest;
     HEAP16[$107>>1] = $call121;
     $108 = $i;
     $dec124 = (($108) + -1)|0;
     $i = $dec124;
     $109 = $src;
     $add$ptr125 = ((($109)) + 6|0);
     $src = $add$ptr125;
     $110 = $dest;
     $add$ptr126 = ((($110)) + 2|0);
     $dest = $add$ptr126;
    }
    break;
   }
   case 26:  {
    $111 = $x$addr;
    $sub129 = (($111) - 1)|0;
    $i = $sub129;
    while(1) {
     $112 = $i;
     $cmp131 = ($112|0)>=(0);
     if (!($cmp131)) {
      break L15;
     }
     $113 = $src;
     $114 = HEAP16[$113>>1]|0;
     $conv134 = $114&65535;
     $115 = $src;
     $arrayidx135 = ((($115)) + 2|0);
     $116 = HEAP16[$arrayidx135>>1]|0;
     $conv136 = $116&65535;
     $117 = $src;
     $arrayidx137 = ((($117)) + 4|0);
     $118 = HEAP16[$arrayidx137>>1]|0;
     $conv138 = $118&65535;
     $call139 = (__ZL18stbi__compute_y_16iii($conv134,$conv136,$conv138)|0);
     $119 = $dest;
     HEAP16[$119>>1] = $call139;
     $120 = $dest;
     $arrayidx141 = ((($120)) + 2|0);
     HEAP16[$arrayidx141>>1] = -1;
     $121 = $i;
     $dec143 = (($121) + -1)|0;
     $i = $dec143;
     $122 = $src;
     $add$ptr144 = ((($122)) + 6|0);
     $src = $add$ptr144;
     $123 = $dest;
     $add$ptr145 = ((($123)) + 4|0);
     $dest = $add$ptr145;
    }
    break;
   }
   case 33:  {
    $124 = $x$addr;
    $sub148 = (($124) - 1)|0;
    $i = $sub148;
    while(1) {
     $125 = $i;
     $cmp150 = ($125|0)>=(0);
     if (!($cmp150)) {
      break L15;
     }
     $126 = $src;
     $127 = HEAP16[$126>>1]|0;
     $conv153 = $127&65535;
     $128 = $src;
     $arrayidx154 = ((($128)) + 2|0);
     $129 = HEAP16[$arrayidx154>>1]|0;
     $conv155 = $129&65535;
     $130 = $src;
     $arrayidx156 = ((($130)) + 4|0);
     $131 = HEAP16[$arrayidx156>>1]|0;
     $conv157 = $131&65535;
     $call158 = (__ZL18stbi__compute_y_16iii($conv153,$conv155,$conv157)|0);
     $132 = $dest;
     HEAP16[$132>>1] = $call158;
     $133 = $i;
     $dec161 = (($133) + -1)|0;
     $i = $dec161;
     $134 = $src;
     $add$ptr162 = ((($134)) + 8|0);
     $src = $add$ptr162;
     $135 = $dest;
     $add$ptr163 = ((($135)) + 2|0);
     $dest = $add$ptr163;
    }
    break;
   }
   case 34:  {
    $136 = $x$addr;
    $sub166 = (($136) - 1)|0;
    $i = $sub166;
    while(1) {
     $137 = $i;
     $cmp168 = ($137|0)>=(0);
     if (!($cmp168)) {
      break L15;
     }
     $138 = $src;
     $139 = HEAP16[$138>>1]|0;
     $conv171 = $139&65535;
     $140 = $src;
     $arrayidx172 = ((($140)) + 2|0);
     $141 = HEAP16[$arrayidx172>>1]|0;
     $conv173 = $141&65535;
     $142 = $src;
     $arrayidx174 = ((($142)) + 4|0);
     $143 = HEAP16[$arrayidx174>>1]|0;
     $conv175 = $143&65535;
     $call176 = (__ZL18stbi__compute_y_16iii($conv171,$conv173,$conv175)|0);
     $144 = $dest;
     HEAP16[$144>>1] = $call176;
     $145 = $src;
     $arrayidx178 = ((($145)) + 6|0);
     $146 = HEAP16[$arrayidx178>>1]|0;
     $147 = $dest;
     $arrayidx179 = ((($147)) + 2|0);
     HEAP16[$arrayidx179>>1] = $146;
     $148 = $i;
     $dec181 = (($148) + -1)|0;
     $i = $dec181;
     $149 = $src;
     $add$ptr182 = ((($149)) + 8|0);
     $src = $add$ptr182;
     $150 = $dest;
     $add$ptr183 = ((($150)) + 4|0);
     $dest = $add$ptr183;
    }
    break;
   }
   case 35:  {
    $151 = $x$addr;
    $sub186 = (($151) - 1)|0;
    $i = $sub186;
    while(1) {
     $152 = $i;
     $cmp188 = ($152|0)>=(0);
     if (!($cmp188)) {
      break L15;
     }
     $153 = $src;
     $154 = HEAP16[$153>>1]|0;
     $155 = $dest;
     HEAP16[$155>>1] = $154;
     $156 = $src;
     $arrayidx192 = ((($156)) + 2|0);
     $157 = HEAP16[$arrayidx192>>1]|0;
     $158 = $dest;
     $arrayidx193 = ((($158)) + 2|0);
     HEAP16[$arrayidx193>>1] = $157;
     $159 = $src;
     $arrayidx194 = ((($159)) + 4|0);
     $160 = HEAP16[$arrayidx194>>1]|0;
     $161 = $dest;
     $arrayidx195 = ((($161)) + 4|0);
     HEAP16[$arrayidx195>>1] = $160;
     $162 = $i;
     $dec197 = (($162) + -1)|0;
     $i = $dec197;
     $163 = $src;
     $add$ptr198 = ((($163)) + 8|0);
     $src = $add$ptr198;
     $164 = $dest;
     $add$ptr199 = ((($164)) + 6|0);
     $dest = $add$ptr199;
    }
    break;
   }
   default: {
    label = 46;
    break L12;
   }
   }
  } while(0);
  $165 = $j;
  $inc = (($165) + 1)|0;
  $j = $inc;
 }
 if ((label|0) == 46) {
  ___assert_fail((7857|0),(7702|0),1603,(7834|0));
  // unreachable;
 }
 _free($13);
 $166 = $good;
 $retval = $166;
 $167 = $retval;
 STACKTOP = sp;return ($167|0);
}
function __ZL18stbi__compute_y_16iii($r,$g,$b) {
 $r = $r|0;
 $g = $g|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $add = 0, $add3 = 0, $b$addr = 0, $conv = 0, $g$addr = 0, $mul = 0, $mul1 = 0, $mul2 = 0, $r$addr = 0, $shr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $r$addr = $r;
 $g$addr = $g;
 $b$addr = $b;
 $0 = $r$addr;
 $mul = ($0*77)|0;
 $1 = $g$addr;
 $mul1 = ($1*150)|0;
 $add = (($mul) + ($mul1))|0;
 $2 = $b$addr;
 $mul2 = ($2*29)|0;
 $add3 = (($add) + ($mul2))|0;
 $shr = $add3 >> 8;
 $conv = $shr&65535;
 STACKTOP = sp;return ($conv|0);
}
function __ZL17stbi__malloc_mad3iiii($a,$b,$c,$add) {
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 $add = $add|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $a$addr = 0, $add$addr = 0, $add2 = 0, $b$addr = 0, $c$addr = 0, $call = 0, $call3 = 0, $mul = 0, $mul1 = 0, $retval = 0, $tobool = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $a$addr = $a;
 $b$addr = $b;
 $c$addr = $c;
 $add$addr = $add;
 $0 = $a$addr;
 $1 = $b$addr;
 $2 = $c$addr;
 $3 = $add$addr;
 $call = (__ZL21stbi__mad3sizes_validiiii($0,$1,$2,$3)|0);
 $tobool = ($call|0)!=(0);
 if ($tobool) {
  $4 = $a$addr;
  $5 = $b$addr;
  $mul = Math_imul($4, $5)|0;
  $6 = $c$addr;
  $mul1 = Math_imul($mul, $6)|0;
  $7 = $add$addr;
  $add2 = (($mul1) + ($7))|0;
  $call3 = (__ZL12stbi__mallocm($add2)|0);
  $retval = $call3;
  $8 = $retval;
  STACKTOP = sp;return ($8|0);
 } else {
  $retval = 0;
  $8 = $retval;
  STACKTOP = sp;return ($8|0);
 }
 return (0)|0;
}
function __ZL15stbi__compute_yiii($r,$g,$b) {
 $r = $r|0;
 $g = $g|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $add = 0, $add3 = 0, $b$addr = 0, $conv = 0, $g$addr = 0, $mul = 0, $mul1 = 0, $mul2 = 0, $r$addr = 0, $shr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $r$addr = $r;
 $g$addr = $g;
 $b$addr = $b;
 $0 = $r$addr;
 $mul = ($0*77)|0;
 $1 = $g$addr;
 $mul1 = ($1*150)|0;
 $add = (($mul) + ($mul1))|0;
 $2 = $b$addr;
 $mul2 = ($2*29)|0;
 $add3 = (($add) + ($mul2))|0;
 $shr = $add3 >> 8;
 $conv = $shr&255;
 STACKTOP = sp;return ($conv|0);
}
function __ZL21stbi__mad3sizes_validiiii($a,$b,$c,$add) {
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 $add = $add|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a$addr = 0, $add$addr = 0, $b$addr = 0, $c$addr = 0, $call = 0, $call1 = 0, $call5 = 0, $conv = 0, $mul = 0, $mul3 = 0;
 var $mul4 = 0, $tobool = 0, $tobool2 = 0, $tobool6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $a$addr = $a;
 $b$addr = $b;
 $c$addr = $c;
 $add$addr = $add;
 $0 = $a$addr;
 $1 = $b$addr;
 $call = (__ZL21stbi__mul2sizes_validii($0,$1)|0);
 $tobool = ($call|0)!=(0);
 if (!($tobool)) {
  $9 = 0;
  $conv = $9&1;
  STACKTOP = sp;return ($conv|0);
 }
 $2 = $a$addr;
 $3 = $b$addr;
 $mul = Math_imul($2, $3)|0;
 $4 = $c$addr;
 $call1 = (__ZL21stbi__mul2sizes_validii($mul,$4)|0);
 $tobool2 = ($call1|0)!=(0);
 if (!($tobool2)) {
  $9 = 0;
  $conv = $9&1;
  STACKTOP = sp;return ($conv|0);
 }
 $5 = $a$addr;
 $6 = $b$addr;
 $mul3 = Math_imul($5, $6)|0;
 $7 = $c$addr;
 $mul4 = Math_imul($mul3, $7)|0;
 $8 = $add$addr;
 $call5 = (__ZL20stbi__addsizes_validii($mul4,$8)|0);
 $tobool6 = ($call5|0)!=(0);
 $9 = $tobool6;
 $conv = $9&1;
 STACKTOP = sp;return ($conv|0);
}
function __ZL21stbi__mul2sizes_validii($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $a$addr = 0, $b$addr = 0, $cmp = 0, $cmp1 = 0, $cmp2 = 0, $cmp5 = 0, $conv = 0, $div = 0, $or$cond = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $a$addr = $a;
 $b$addr = $b;
 $0 = $a$addr;
 $cmp = ($0|0)<(0);
 $1 = $b$addr;
 $cmp1 = ($1|0)<(0);
 $or$cond = $cmp | $cmp1;
 do {
  if ($or$cond) {
   $retval = 0;
  } else {
   $2 = $b$addr;
   $cmp2 = ($2|0)==(0);
   if ($cmp2) {
    $retval = 1;
    break;
   } else {
    $3 = $a$addr;
    $4 = $b$addr;
    $div = (2147483647 / ($4|0))&-1;
    $cmp5 = ($3|0)<=($div|0);
    $conv = $cmp5&1;
    $retval = $conv;
    break;
   }
  }
 } while(0);
 $5 = $retval;
 STACKTOP = sp;return ($5|0);
}
function __ZL20stbi__addsizes_validii($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $a$addr = 0, $b$addr = 0, $cmp = 0, $cmp1 = 0, $conv = 0, $retval = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $a$addr = $a;
 $b$addr = $b;
 $0 = $b$addr;
 $cmp = ($0|0)<(0);
 if ($cmp) {
  $retval = 0;
  $3 = $retval;
  STACKTOP = sp;return ($3|0);
 } else {
  $1 = $a$addr;
  $2 = $b$addr;
  $sub = (2147483647 - ($2))|0;
  $cmp1 = ($1|0)<=($sub|0);
  $conv = $cmp1&1;
  $retval = $conv;
  $3 = $retval;
  STACKTOP = sp;return ($3|0);
 }
 return (0)|0;
}
function __ZL22stbi__check_png_headerP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $arrayidx = 0, $call = 0, $call3 = 0, $cmp = 0, $cmp2 = 0, $conv = 0, $conv1 = 0, $i = 0, $inc = 0, $retval = 0, $s$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $s$addr = $s;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(8);
  if (!($cmp)) {
   label = 6;
   break;
  }
  $1 = $s$addr;
  $call = (__ZL10stbi__get8P13stbi__context($1)|0);
  $conv = $call&255;
  $2 = $i;
  $arrayidx = (8773 + ($2)|0);
  $3 = HEAP8[$arrayidx>>0]|0;
  $conv1 = $3&255;
  $cmp2 = ($conv|0)!=($conv1|0);
  if ($cmp2) {
   label = 4;
   break;
  }
  $4 = $i;
  $inc = (($4) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 4) {
  $call3 = (__ZL9stbi__errPKc(8781)|0);
  $retval = $call3;
  $5 = $retval;
  STACKTOP = sp;return ($5|0);
 }
 else if ((label|0) == 6) {
  $retval = 1;
  $5 = $retval;
  STACKTOP = sp;return ($5|0);
 }
 return (0)|0;
}
function __ZL22stbi__get_chunk_headerP13stbi__context($agg$result,$s) {
 $agg$result = $agg$result|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $call = 0, $call1 = 0, $s$addr = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $s$addr = $s;
 $0 = $s$addr;
 $call = (__ZL13stbi__get32beP13stbi__context($0)|0);
 HEAP32[$agg$result>>2] = $call;
 $1 = $s$addr;
 $call1 = (__ZL13stbi__get32beP13stbi__context($1)|0);
 $type = ((($agg$result)) + 4|0);
 HEAP32[$type>>2] = $call1;
 STACKTOP = sp;return;
}
function __ZL10stbi__skipP13stbi__contexti($s,$n) {
 $s = $s|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $blen = 0, $cmp = 0, $cmp4 = 0, $img_buffer = 0, $img_buffer11 = 0, $img_buffer3 = 0, $img_buffer7 = 0, $img_buffer_end = 0, $img_buffer_end2 = 0, $img_buffer_end6 = 0, $io = 0, $io8 = 0, $io_user_data = 0, $n$addr = 0, $s$addr = 0, $skip = 0;
 var $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $s$addr = $s;
 $n$addr = $n;
 $0 = $n$addr;
 $cmp = ($0|0)<(0);
 $1 = $s$addr;
 if ($cmp) {
  $img_buffer_end = ((($1)) + 172|0);
  $2 = HEAP32[$img_buffer_end>>2]|0;
  $3 = $s$addr;
  $img_buffer = ((($3)) + 168|0);
  HEAP32[$img_buffer>>2] = $2;
  STACKTOP = sp;return;
 }
 $io = ((($1)) + 16|0);
 $4 = HEAP32[$io>>2]|0;
 $tobool = ($4|0)!=(0|0);
 if ($tobool) {
  $5 = $s$addr;
  $img_buffer_end2 = ((($5)) + 172|0);
  $6 = HEAP32[$img_buffer_end2>>2]|0;
  $7 = $s$addr;
  $img_buffer3 = ((($7)) + 168|0);
  $8 = HEAP32[$img_buffer3>>2]|0;
  $sub$ptr$lhs$cast = $6;
  $sub$ptr$rhs$cast = $8;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $blen = $sub$ptr$sub;
  $9 = $blen;
  $10 = $n$addr;
  $cmp4 = ($9|0)<($10|0);
  if ($cmp4) {
   $11 = $s$addr;
   $img_buffer_end6 = ((($11)) + 172|0);
   $12 = HEAP32[$img_buffer_end6>>2]|0;
   $13 = $s$addr;
   $img_buffer7 = ((($13)) + 168|0);
   HEAP32[$img_buffer7>>2] = $12;
   $14 = $s$addr;
   $io8 = ((($14)) + 16|0);
   $skip = ((($io8)) + 4|0);
   $15 = HEAP32[$skip>>2]|0;
   $16 = $s$addr;
   $io_user_data = ((($16)) + 28|0);
   $17 = HEAP32[$io_user_data>>2]|0;
   $18 = $n$addr;
   $19 = $blen;
   $sub = (($18) - ($19))|0;
   FUNCTION_TABLE_vii[$15 & 255]($17,$sub);
   STACKTOP = sp;return;
  }
 }
 $20 = $n$addr;
 $21 = $s$addr;
 $img_buffer11 = ((($21)) + 168|0);
 $22 = HEAP32[$img_buffer11>>2]|0;
 $add$ptr = (($22) + ($20)|0);
 HEAP32[$img_buffer11>>2] = $add$ptr;
 STACKTOP = sp;return;
}
function __ZL13stbi__get32beP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $add = 0, $call = 0, $call1 = 0, $s$addr = 0, $shl = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $s$addr = $s;
 $0 = $s$addr;
 $call = (__ZL13stbi__get16beP13stbi__context($0)|0);
 $z = $call;
 $1 = $z;
 $shl = $1 << 16;
 $2 = $s$addr;
 $call1 = (__ZL13stbi__get16beP13stbi__context($2)|0);
 $add = (($shl) + ($call1))|0;
 STACKTOP = sp;return ($add|0);
}
function __ZL10stbi__get8P13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $img_buffer = 0, $img_buffer1 = 0, $img_buffer3 = 0, $img_buffer_end = 0, $incdec$ptr = 0, $incdec$ptr4 = 0;
 var $read_from_callbacks = 0, $retval = 0, $s$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $s$addr = $s;
 $0 = $s$addr;
 $img_buffer = ((($0)) + 168|0);
 $1 = HEAP32[$img_buffer>>2]|0;
 $2 = $s$addr;
 $img_buffer_end = ((($2)) + 172|0);
 $3 = HEAP32[$img_buffer_end>>2]|0;
 $cmp = ($1>>>0)<($3>>>0);
 $4 = $s$addr;
 if ($cmp) {
  $img_buffer1 = ((($4)) + 168|0);
  $5 = HEAP32[$img_buffer1>>2]|0;
  $incdec$ptr = ((($5)) + 1|0);
  HEAP32[$img_buffer1>>2] = $incdec$ptr;
  $6 = HEAP8[$5>>0]|0;
  $retval = $6;
  $12 = $retval;
  STACKTOP = sp;return ($12|0);
 }
 $read_from_callbacks = ((($4)) + 32|0);
 $7 = HEAP32[$read_from_callbacks>>2]|0;
 $tobool = ($7|0)!=(0);
 if ($tobool) {
  $8 = $s$addr;
  __ZL19stbi__refill_bufferP13stbi__context($8);
  $9 = $s$addr;
  $img_buffer3 = ((($9)) + 168|0);
  $10 = HEAP32[$img_buffer3>>2]|0;
  $incdec$ptr4 = ((($10)) + 1|0);
  HEAP32[$img_buffer3>>2] = $incdec$ptr4;
  $11 = HEAP8[$10>>0]|0;
  $retval = $11;
  $12 = $retval;
  STACKTOP = sp;return ($12|0);
 } else {
  $retval = 0;
  $12 = $retval;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function __ZL13stbi__get16beP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $add = 0, $call = 0, $call1 = 0, $conv = 0, $conv2 = 0, $s$addr = 0, $shl = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $s$addr = $s;
 $0 = $s$addr;
 $call = (__ZL10stbi__get8P13stbi__context($0)|0);
 $conv = $call&255;
 $z = $conv;
 $1 = $z;
 $shl = $1 << 8;
 $2 = $s$addr;
 $call1 = (__ZL10stbi__get8P13stbi__context($2)|0);
 $conv2 = $call1&255;
 $add = (($shl) + ($conv2))|0;
 STACKTOP = sp;return ($add|0);
}
function __ZL10stbi__getnP13stbi__contextPhi($s,$buffer,$n) {
 $s = $s|0;
 $buffer = $buffer|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $add$ptr = 0, $add$ptr11 = 0, $add$ptr17 = 0, $blen = 0, $buffer$addr = 0, $call = 0, $cmp = 0, $cmp13 = 0, $cmp6 = 0, $conv = 0, $count = 0, $img_buffer = 0, $img_buffer10 = 0, $img_buffer15 = 0, $img_buffer16 = 0, $img_buffer2 = 0, $img_buffer8 = 0, $img_buffer_end = 0, $img_buffer_end12 = 0, $img_buffer_end7 = 0;
 var $io = 0, $io3 = 0, $io_user_data = 0, $n$addr = 0, $res = 0, $retval = 0, $s$addr = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $sub5 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $s$addr = $s;
 $buffer$addr = $buffer;
 $n$addr = $n;
 $0 = $s$addr;
 $io = ((($0)) + 16|0);
 $1 = HEAP32[$io>>2]|0;
 $tobool = ($1|0)!=(0|0);
 if ($tobool) {
  $2 = $s$addr;
  $img_buffer_end = ((($2)) + 172|0);
  $3 = HEAP32[$img_buffer_end>>2]|0;
  $4 = $s$addr;
  $img_buffer = ((($4)) + 168|0);
  $5 = HEAP32[$img_buffer>>2]|0;
  $sub$ptr$lhs$cast = $3;
  $sub$ptr$rhs$cast = $5;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $blen = $sub$ptr$sub;
  $6 = $blen;
  $7 = $n$addr;
  $cmp = ($6|0)<($7|0);
  if ($cmp) {
   $8 = $buffer$addr;
   $9 = $s$addr;
   $img_buffer2 = ((($9)) + 168|0);
   $10 = HEAP32[$img_buffer2>>2]|0;
   $11 = $blen;
   _memcpy(($8|0),($10|0),($11|0))|0;
   $12 = $s$addr;
   $io3 = ((($12)) + 16|0);
   $13 = HEAP32[$io3>>2]|0;
   $14 = $s$addr;
   $io_user_data = ((($14)) + 28|0);
   $15 = HEAP32[$io_user_data>>2]|0;
   $16 = $buffer$addr;
   $17 = $blen;
   $add$ptr = (($16) + ($17)|0);
   $18 = $n$addr;
   $19 = $blen;
   $sub = (($18) - ($19))|0;
   $call = (FUNCTION_TABLE_iiii[$13 & 255]($15,$add$ptr,$sub)|0);
   $count = $call;
   $20 = $count;
   $21 = $n$addr;
   $22 = $blen;
   $sub5 = (($21) - ($22))|0;
   $cmp6 = ($20|0)==($sub5|0);
   $conv = $cmp6&1;
   $res = $conv;
   $23 = $s$addr;
   $img_buffer_end7 = ((($23)) + 172|0);
   $24 = HEAP32[$img_buffer_end7>>2]|0;
   $25 = $s$addr;
   $img_buffer8 = ((($25)) + 168|0);
   HEAP32[$img_buffer8>>2] = $24;
   $26 = $res;
   $retval = $26;
   $39 = $retval;
   STACKTOP = sp;return ($39|0);
  }
 }
 $27 = $s$addr;
 $img_buffer10 = ((($27)) + 168|0);
 $28 = HEAP32[$img_buffer10>>2]|0;
 $29 = $n$addr;
 $add$ptr11 = (($28) + ($29)|0);
 $30 = $s$addr;
 $img_buffer_end12 = ((($30)) + 172|0);
 $31 = HEAP32[$img_buffer_end12>>2]|0;
 $cmp13 = ($add$ptr11>>>0)<=($31>>>0);
 if ($cmp13) {
  $32 = $buffer$addr;
  $33 = $s$addr;
  $img_buffer15 = ((($33)) + 168|0);
  $34 = HEAP32[$img_buffer15>>2]|0;
  $35 = $n$addr;
  _memcpy(($32|0),($34|0),($35|0))|0;
  $36 = $n$addr;
  $37 = $s$addr;
  $img_buffer16 = ((($37)) + 168|0);
  $38 = HEAP32[$img_buffer16>>2]|0;
  $add$ptr17 = (($38) + ($36)|0);
  HEAP32[$img_buffer16>>2] = $add$ptr17;
  $retval = 1;
  $39 = $retval;
  STACKTOP = sp;return ($39|0);
 } else {
  $retval = 0;
  $39 = $retval;
  STACKTOP = sp;return ($39|0);
 }
 return (0)|0;
}
function _stbi_zlib_decode_malloc_guesssize_headerflag($buffer,$len,$initial_size,$outlen,$parse_header) {
 $buffer = $buffer|0;
 $len = $len|0;
 $initial_size = $initial_size|0;
 $outlen = $outlen|0;
 $parse_header = $parse_header|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $add$ptr = 0, $buffer$addr = 0, $call = 0, $call1 = 0;
 var $cmp = 0, $initial_size$addr = 0, $len$addr = 0, $outlen$addr = 0, $p = 0, $parse_header$addr = 0, $retval = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool3 = 0, $zbuffer_end = 0, $zout = 0, $zout_start = 0, $zout_start6 = 0, $zout_start7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4112|0);
 $a = sp + 8|0;
 $buffer$addr = $buffer;
 $len$addr = $len;
 $initial_size$addr = $initial_size;
 $outlen$addr = $outlen;
 $parse_header$addr = $parse_header;
 $0 = $initial_size$addr;
 $call = (__ZL12stbi__mallocm($0)|0);
 $p = $call;
 $1 = $p;
 $cmp = ($1|0)==(0|0);
 if ($cmp) {
  $retval = 0;
  $14 = $retval;
  STACKTOP = sp;return ($14|0);
 }
 $2 = $buffer$addr;
 HEAP32[$a>>2] = $2;
 $3 = $buffer$addr;
 $4 = $len$addr;
 $add$ptr = (($3) + ($4)|0);
 $zbuffer_end = ((($a)) + 4|0);
 HEAP32[$zbuffer_end>>2] = $add$ptr;
 $5 = $p;
 $6 = $initial_size$addr;
 $7 = $parse_header$addr;
 $call1 = (__ZL13stbi__do_zlibP10stbi__zbufPciii($a,$5,$6,1,$7)|0);
 $tobool = ($call1|0)!=(0);
 if (!($tobool)) {
  $zout_start7 = ((($a)) + 20|0);
  $13 = HEAP32[$zout_start7>>2]|0;
  _free($13);
  $retval = 0;
  $14 = $retval;
  STACKTOP = sp;return ($14|0);
 }
 $8 = $outlen$addr;
 $tobool3 = ($8|0)!=(0|0);
 if ($tobool3) {
  $zout = ((($a)) + 16|0);
  $9 = HEAP32[$zout>>2]|0;
  $zout_start = ((($a)) + 20|0);
  $10 = HEAP32[$zout_start>>2]|0;
  $sub$ptr$lhs$cast = $9;
  $sub$ptr$rhs$cast = $10;
  $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
  $11 = $outlen$addr;
  HEAP32[$11>>2] = $sub$ptr$sub;
 }
 $zout_start6 = ((($a)) + 20|0);
 $12 = HEAP32[$zout_start6>>2]|0;
 $retval = $12;
 $14 = $retval;
 STACKTOP = sp;return ($14|0);
}
function __ZL22stbi__create_png_imageP9stbi__pngPhjiiii($a,$image_data,$image_data_len,$out_n,$depth,$color,$interlaced) {
 $a = $a|0;
 $image_data = $image_data|0;
 $image_data_len = $image_data_len|0;
 $out_n = $out_n|0;
 $depth = $depth|0;
 $color = $color|0;
 $interlaced = $interlaced|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $a$addr = 0, $add = 0;
 var $add$ptr = 0, $add$ptr54 = 0, $add$ptr58 = 0, $add$ptr63 = 0, $add18 = 0, $add28 = 0, $add29 = 0, $add44 = 0, $add48 = 0, $add56 = 0, $arrayidx = 0, $arrayidx10 = 0, $arrayidx12 = 0, $arrayidx15 = 0, $arrayidx17 = 0, $arrayidx20 = 0, $arrayidx41 = 0, $arrayidx43 = 0, $arrayidx45 = 0, $arrayidx47 = 0;
 var $bytes = 0, $call = 0, $call31 = 0, $call6 = 0, $cmp = 0, $cmp36 = 0, $cmp39 = 0, $cmp7 = 0, $color$addr = 0, $cond = 0, $depth$addr = 0, $div = 0, $div21 = 0, $final = 0, $i = 0, $image_data$addr = 0, $image_data_len$addr = 0, $img_len = 0, $img_n = 0, $img_y = 0;
 var $img_y14 = 0, $img_y5 = 0, $inc = 0, $inc60 = 0, $inc67 = 0, $interlaced$addr = 0, $j = 0, $mul = 0, $mul26 = 0, $mul27 = 0, $mul30 = 0, $mul42 = 0, $mul46 = 0, $mul51 = 0, $mul52 = 0, $mul53 = 0, $mul55 = 0, $mul57 = 0, $or$cond = 0, $out = 0;
 var $out62 = 0, $out69 = 0, $out_bytes = 0, $out_n$addr = 0, $out_x = 0, $out_y = 0, $p = 0, $retval = 0, $shr = 0, $sub = 0, $sub11 = 0, $sub16 = 0, $sub19 = 0, $sub64 = 0, $tobool = 0, $tobool22 = 0, $tobool23 = 0, $tobool32 = 0, $x = 0, $xorig = 0;
 var $xspc = 0, $y = 0, $yorig = 0, $yspc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $xorig = sp + 96|0;
 $yorig = sp + 64|0;
 $xspc = sp + 32|0;
 $yspc = sp;
 $a$addr = $a;
 $image_data$addr = $image_data;
 $image_data_len$addr = $image_data_len;
 $out_n$addr = $out_n;
 $depth$addr = $depth;
 $color$addr = $color;
 $interlaced$addr = $interlaced;
 $0 = $depth$addr;
 $cmp = ($0|0)==(16);
 $cond = $cmp ? 2 : 1;
 $bytes = $cond;
 $1 = $out_n$addr;
 $2 = $bytes;
 $mul = Math_imul($1, $2)|0;
 $out_bytes = $mul;
 $3 = $interlaced$addr;
 $tobool = ($3|0)!=(0);
 $4 = $a$addr;
 if (!($tobool)) {
  $5 = $image_data$addr;
  $6 = $image_data_len$addr;
  $7 = $out_n$addr;
  $8 = $a$addr;
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$9>>2]|0;
  $11 = $a$addr;
  $12 = HEAP32[$11>>2]|0;
  $img_y = ((($12)) + 4|0);
  $13 = HEAP32[$img_y>>2]|0;
  $14 = $depth$addr;
  $15 = $color$addr;
  $call = (__ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii($4,$5,$6,$7,$10,$13,$14,$15)|0);
  $retval = $call;
  $97 = $retval;
  STACKTOP = sp;return ($97|0);
 }
 $16 = HEAP32[$4>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = $a$addr;
 $19 = HEAP32[$18>>2]|0;
 $img_y5 = ((($19)) + 4|0);
 $20 = HEAP32[$img_y5>>2]|0;
 $21 = $out_bytes;
 $call6 = (__ZL17stbi__malloc_mad3iiii($17,$20,$21,0)|0);
 $final = $call6;
 $p = 0;
 while(1) {
  $22 = $p;
  $cmp7 = ($22|0)<(7);
  if (!($cmp7)) {
   label = 16;
   break;
  }
  ;HEAP32[$xorig>>2]=HEAP32[224>>2]|0;HEAP32[$xorig+4>>2]=HEAP32[224+4>>2]|0;HEAP32[$xorig+8>>2]=HEAP32[224+8>>2]|0;HEAP32[$xorig+12>>2]=HEAP32[224+12>>2]|0;HEAP32[$xorig+16>>2]=HEAP32[224+16>>2]|0;HEAP32[$xorig+20>>2]=HEAP32[224+20>>2]|0;HEAP32[$xorig+24>>2]=HEAP32[224+24>>2]|0;
  ;HEAP32[$yorig>>2]=HEAP32[256>>2]|0;HEAP32[$yorig+4>>2]=HEAP32[256+4>>2]|0;HEAP32[$yorig+8>>2]=HEAP32[256+8>>2]|0;HEAP32[$yorig+12>>2]=HEAP32[256+12>>2]|0;HEAP32[$yorig+16>>2]=HEAP32[256+16>>2]|0;HEAP32[$yorig+20>>2]=HEAP32[256+20>>2]|0;HEAP32[$yorig+24>>2]=HEAP32[256+24>>2]|0;
  ;HEAP32[$xspc>>2]=HEAP32[288>>2]|0;HEAP32[$xspc+4>>2]=HEAP32[288+4>>2]|0;HEAP32[$xspc+8>>2]=HEAP32[288+8>>2]|0;HEAP32[$xspc+12>>2]=HEAP32[288+12>>2]|0;HEAP32[$xspc+16>>2]=HEAP32[288+16>>2]|0;HEAP32[$xspc+20>>2]=HEAP32[288+20>>2]|0;HEAP32[$xspc+24>>2]=HEAP32[288+24>>2]|0;
  ;HEAP32[$yspc>>2]=HEAP32[320>>2]|0;HEAP32[$yspc+4>>2]=HEAP32[320+4>>2]|0;HEAP32[$yspc+8>>2]=HEAP32[320+8>>2]|0;HEAP32[$yspc+12>>2]=HEAP32[320+12>>2]|0;HEAP32[$yspc+16>>2]=HEAP32[320+16>>2]|0;HEAP32[$yspc+20>>2]=HEAP32[320+20>>2]|0;HEAP32[$yspc+24>>2]=HEAP32[320+24>>2]|0;
  $23 = $a$addr;
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$24>>2]|0;
  $26 = $p;
  $arrayidx = (($xorig) + ($26<<2)|0);
  $27 = HEAP32[$arrayidx>>2]|0;
  $sub = (($25) - ($27))|0;
  $28 = $p;
  $arrayidx10 = (($xspc) + ($28<<2)|0);
  $29 = HEAP32[$arrayidx10>>2]|0;
  $add = (($sub) + ($29))|0;
  $sub11 = (($add) - 1)|0;
  $30 = $p;
  $arrayidx12 = (($xspc) + ($30<<2)|0);
  $31 = HEAP32[$arrayidx12>>2]|0;
  $div = (($sub11>>>0) / ($31>>>0))&-1;
  $x = $div;
  $32 = $a$addr;
  $33 = HEAP32[$32>>2]|0;
  $img_y14 = ((($33)) + 4|0);
  $34 = HEAP32[$img_y14>>2]|0;
  $35 = $p;
  $arrayidx15 = (($yorig) + ($35<<2)|0);
  $36 = HEAP32[$arrayidx15>>2]|0;
  $sub16 = (($34) - ($36))|0;
  $37 = $p;
  $arrayidx17 = (($yspc) + ($37<<2)|0);
  $38 = HEAP32[$arrayidx17>>2]|0;
  $add18 = (($sub16) + ($38))|0;
  $sub19 = (($add18) - 1)|0;
  $39 = $p;
  $arrayidx20 = (($yspc) + ($39<<2)|0);
  $40 = HEAP32[$arrayidx20>>2]|0;
  $div21 = (($sub19>>>0) / ($40>>>0))&-1;
  $y = $div21;
  $41 = $x;
  $tobool22 = ($41|0)!=(0);
  $42 = $y;
  $tobool23 = ($42|0)!=(0);
  $or$cond = $tobool22 & $tobool23;
  if ($or$cond) {
   $43 = $a$addr;
   $44 = HEAP32[$43>>2]|0;
   $img_n = ((($44)) + 8|0);
   $45 = HEAP32[$img_n>>2]|0;
   $46 = $x;
   $mul26 = Math_imul($45, $46)|0;
   $47 = $depth$addr;
   $mul27 = Math_imul($mul26, $47)|0;
   $add28 = (($mul27) + 7)|0;
   $shr = $add28 >> 3;
   $add29 = (($shr) + 1)|0;
   $48 = $y;
   $mul30 = Math_imul($add29, $48)|0;
   $img_len = $mul30;
   $49 = $a$addr;
   $50 = $image_data$addr;
   $51 = $image_data_len$addr;
   $52 = $out_n$addr;
   $53 = $x;
   $54 = $y;
   $55 = $depth$addr;
   $56 = $color$addr;
   $call31 = (__ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii($49,$50,$51,$52,$53,$54,$55,$56)|0);
   $tobool32 = ($call31|0)!=(0);
   if (!($tobool32)) {
    label = 7;
    break;
   }
   $j = 0;
   while(1) {
    $58 = $j;
    $59 = $y;
    $cmp36 = ($58|0)<($59|0);
    if (!($cmp36)) {
     break;
    }
    $i = 0;
    while(1) {
     $60 = $i;
     $61 = $x;
     $cmp39 = ($60|0)<($61|0);
     $62 = $j;
     if (!($cmp39)) {
      break;
     }
     $63 = $p;
     $arrayidx41 = (($yspc) + ($63<<2)|0);
     $64 = HEAP32[$arrayidx41>>2]|0;
     $mul42 = Math_imul($62, $64)|0;
     $65 = $p;
     $arrayidx43 = (($yorig) + ($65<<2)|0);
     $66 = HEAP32[$arrayidx43>>2]|0;
     $add44 = (($mul42) + ($66))|0;
     $out_y = $add44;
     $67 = $i;
     $68 = $p;
     $arrayidx45 = (($xspc) + ($68<<2)|0);
     $69 = HEAP32[$arrayidx45>>2]|0;
     $mul46 = Math_imul($67, $69)|0;
     $70 = $p;
     $arrayidx47 = (($xorig) + ($70<<2)|0);
     $71 = HEAP32[$arrayidx47>>2]|0;
     $add48 = (($mul46) + ($71))|0;
     $out_x = $add48;
     $72 = $final;
     $73 = $out_y;
     $74 = $a$addr;
     $75 = HEAP32[$74>>2]|0;
     $76 = HEAP32[$75>>2]|0;
     $mul51 = Math_imul($73, $76)|0;
     $77 = $out_bytes;
     $mul52 = Math_imul($mul51, $77)|0;
     $add$ptr = (($72) + ($mul52)|0);
     $78 = $out_x;
     $79 = $out_bytes;
     $mul53 = Math_imul($78, $79)|0;
     $add$ptr54 = (($add$ptr) + ($mul53)|0);
     $80 = $a$addr;
     $out = ((($80)) + 12|0);
     $81 = HEAP32[$out>>2]|0;
     $82 = $j;
     $83 = $x;
     $mul55 = Math_imul($82, $83)|0;
     $84 = $i;
     $add56 = (($mul55) + ($84))|0;
     $85 = $out_bytes;
     $mul57 = Math_imul($add56, $85)|0;
     $add$ptr58 = (($81) + ($mul57)|0);
     $86 = $out_bytes;
     _memcpy(($add$ptr54|0),($add$ptr58|0),($86|0))|0;
     $87 = $i;
     $inc = (($87) + 1)|0;
     $i = $inc;
    }
    $inc60 = (($62) + 1)|0;
    $j = $inc60;
   }
   $88 = $a$addr;
   $out62 = ((($88)) + 12|0);
   $89 = HEAP32[$out62>>2]|0;
   _free($89);
   $90 = $img_len;
   $91 = $image_data$addr;
   $add$ptr63 = (($91) + ($90)|0);
   $image_data$addr = $add$ptr63;
   $92 = $img_len;
   $93 = $image_data_len$addr;
   $sub64 = (($93) - ($92))|0;
   $image_data_len$addr = $sub64;
  }
  $94 = $p;
  $inc67 = (($94) + 1)|0;
  $p = $inc67;
 }
 if ((label|0) == 7) {
  $57 = $final;
  _free($57);
  $retval = 0;
  $97 = $retval;
  STACKTOP = sp;return ($97|0);
 }
 else if ((label|0) == 16) {
  $95 = $final;
  $96 = $a$addr;
  $out69 = ((($96)) + 12|0);
  HEAP32[$out69>>2] = $95;
  $retval = 1;
  $97 = $retval;
  STACKTOP = sp;return ($97|0);
 }
 return (0)|0;
}
function __ZL28stbi__compute_transparency16P9stbi__pngPti($z,$tc,$out_n) {
 $z = $z|0;
 $tc = $tc|0;
 $out_n = $out_n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr31 = 0, $arrayidx18 = 0;
 var $arrayidx20 = 0, $arrayidx24 = 0, $arrayidx26 = 0, $arrayidx30 = 0, $arrayidx9 = 0, $cmp = 0, $cmp11 = 0, $cmp17 = 0, $cmp2 = 0, $cmp22 = 0, $cmp28 = 0, $cmp3 = 0, $cmp4 = 0, $cmp7 = 0, $cond = 0, $conv = 0, $conv14 = 0, $conv16 = 0, $conv19 = 0, $conv21 = 0;
 var $conv25 = 0, $conv27 = 0, $conv6 = 0, $conv8 = 0, $i = 0, $img_y = 0, $inc = 0, $inc33 = 0, $mul = 0, $or$cond = 0, $out = 0, $out_n$addr = 0, $p = 0, $pixel_count = 0, $s = 0, $tc$addr = 0, $z$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $z$addr = $z;
 $tc$addr = $tc;
 $out_n$addr = $out_n;
 $0 = $z$addr;
 $1 = HEAP32[$0>>2]|0;
 $s = $1;
 $2 = $s;
 $3 = HEAP32[$2>>2]|0;
 $4 = $s;
 $img_y = ((($4)) + 4|0);
 $5 = HEAP32[$img_y>>2]|0;
 $mul = Math_imul($3, $5)|0;
 $pixel_count = $mul;
 $6 = $z$addr;
 $out = ((($6)) + 12|0);
 $7 = HEAP32[$out>>2]|0;
 $p = $7;
 $8 = $out_n$addr;
 $cmp = ($8|0)==(2);
 $9 = $out_n$addr;
 $cmp2 = ($9|0)==(4);
 $or$cond = $cmp | $cmp2;
 if (!($or$cond)) {
  ___assert_fail((8175|0),(7702|0),4619,(8227|0));
  // unreachable;
 }
 $10 = $out_n$addr;
 $cmp3 = ($10|0)==(2);
 $i = 0;
 if ($cmp3) {
  while(1) {
   $11 = $i;
   $12 = $pixel_count;
   $cmp4 = ($11>>>0)<($12>>>0);
   if (!($cmp4)) {
    break;
   }
   $13 = $p;
   $14 = HEAP16[$13>>1]|0;
   $conv = $14&65535;
   $15 = $tc$addr;
   $16 = HEAP16[$15>>1]|0;
   $conv6 = $16&65535;
   $cmp7 = ($conv|0)==($conv6|0);
   $cond = $cmp7 ? 0 : 65535;
   $conv8 = $cond&65535;
   $17 = $p;
   $arrayidx9 = ((($17)) + 2|0);
   HEAP16[$arrayidx9>>1] = $conv8;
   $18 = $p;
   $add$ptr = ((($18)) + 4|0);
   $p = $add$ptr;
   $19 = $i;
   $inc = (($19) + 1)|0;
   $i = $inc;
  }
  STACKTOP = sp;return 1;
 }
 while(1) {
  $20 = $i;
  $21 = $pixel_count;
  $cmp11 = ($20>>>0)<($21>>>0);
  if (!($cmp11)) {
   break;
  }
  $22 = $p;
  $23 = HEAP16[$22>>1]|0;
  $conv14 = $23&65535;
  $24 = $tc$addr;
  $25 = HEAP16[$24>>1]|0;
  $conv16 = $25&65535;
  $cmp17 = ($conv14|0)==($conv16|0);
  if ($cmp17) {
   $26 = $p;
   $arrayidx18 = ((($26)) + 2|0);
   $27 = HEAP16[$arrayidx18>>1]|0;
   $conv19 = $27&65535;
   $28 = $tc$addr;
   $arrayidx20 = ((($28)) + 2|0);
   $29 = HEAP16[$arrayidx20>>1]|0;
   $conv21 = $29&65535;
   $cmp22 = ($conv19|0)==($conv21|0);
   if ($cmp22) {
    $30 = $p;
    $arrayidx24 = ((($30)) + 4|0);
    $31 = HEAP16[$arrayidx24>>1]|0;
    $conv25 = $31&65535;
    $32 = $tc$addr;
    $arrayidx26 = ((($32)) + 4|0);
    $33 = HEAP16[$arrayidx26>>1]|0;
    $conv27 = $33&65535;
    $cmp28 = ($conv25|0)==($conv27|0);
    if ($cmp28) {
     $34 = $p;
     $arrayidx30 = ((($34)) + 6|0);
     HEAP16[$arrayidx30>>1] = 0;
    }
   }
  }
  $35 = $p;
  $add$ptr31 = ((($35)) + 8|0);
  $p = $add$ptr31;
  $36 = $i;
  $inc33 = (($36) + 1)|0;
  $i = $inc33;
 }
 STACKTOP = sp;return 1;
}
function __ZL26stbi__compute_transparencyP9stbi__pngPhi($z,$tc,$out_n) {
 $z = $z|0;
 $tc = $tc|0;
 $out_n = $out_n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $add$ptr31 = 0, $arrayidx18 = 0;
 var $arrayidx20 = 0, $arrayidx24 = 0, $arrayidx26 = 0, $arrayidx30 = 0, $arrayidx9 = 0, $cmp = 0, $cmp11 = 0, $cmp17 = 0, $cmp2 = 0, $cmp22 = 0, $cmp28 = 0, $cmp3 = 0, $cmp4 = 0, $cmp7 = 0, $cond = 0, $conv = 0, $conv14 = 0, $conv16 = 0, $conv19 = 0, $conv21 = 0;
 var $conv25 = 0, $conv27 = 0, $conv6 = 0, $conv8 = 0, $i = 0, $img_y = 0, $inc = 0, $inc33 = 0, $mul = 0, $or$cond = 0, $out = 0, $out_n$addr = 0, $p = 0, $pixel_count = 0, $s = 0, $tc$addr = 0, $z$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $z$addr = $z;
 $tc$addr = $tc;
 $out_n$addr = $out_n;
 $0 = $z$addr;
 $1 = HEAP32[$0>>2]|0;
 $s = $1;
 $2 = $s;
 $3 = HEAP32[$2>>2]|0;
 $4 = $s;
 $img_y = ((($4)) + 4|0);
 $5 = HEAP32[$img_y>>2]|0;
 $mul = Math_imul($3, $5)|0;
 $pixel_count = $mul;
 $6 = $z$addr;
 $out = ((($6)) + 12|0);
 $7 = HEAP32[$out>>2]|0;
 $p = $7;
 $8 = $out_n$addr;
 $cmp = ($8|0)==(2);
 $9 = $out_n$addr;
 $cmp2 = ($9|0)==(4);
 $or$cond = $cmp | $cmp2;
 if (!($or$cond)) {
  ___assert_fail((8175|0),(7702|0),4594,(8200|0));
  // unreachable;
 }
 $10 = $out_n$addr;
 $cmp3 = ($10|0)==(2);
 $i = 0;
 if ($cmp3) {
  while(1) {
   $11 = $i;
   $12 = $pixel_count;
   $cmp4 = ($11>>>0)<($12>>>0);
   if (!($cmp4)) {
    break;
   }
   $13 = $p;
   $14 = HEAP8[$13>>0]|0;
   $conv = $14&255;
   $15 = $tc$addr;
   $16 = HEAP8[$15>>0]|0;
   $conv6 = $16&255;
   $cmp7 = ($conv|0)==($conv6|0);
   $cond = $cmp7 ? 0 : 255;
   $conv8 = $cond&255;
   $17 = $p;
   $arrayidx9 = ((($17)) + 1|0);
   HEAP8[$arrayidx9>>0] = $conv8;
   $18 = $p;
   $add$ptr = ((($18)) + 2|0);
   $p = $add$ptr;
   $19 = $i;
   $inc = (($19) + 1)|0;
   $i = $inc;
  }
  STACKTOP = sp;return 1;
 }
 while(1) {
  $20 = $i;
  $21 = $pixel_count;
  $cmp11 = ($20>>>0)<($21>>>0);
  if (!($cmp11)) {
   break;
  }
  $22 = $p;
  $23 = HEAP8[$22>>0]|0;
  $conv14 = $23&255;
  $24 = $tc$addr;
  $25 = HEAP8[$24>>0]|0;
  $conv16 = $25&255;
  $cmp17 = ($conv14|0)==($conv16|0);
  if ($cmp17) {
   $26 = $p;
   $arrayidx18 = ((($26)) + 1|0);
   $27 = HEAP8[$arrayidx18>>0]|0;
   $conv19 = $27&255;
   $28 = $tc$addr;
   $arrayidx20 = ((($28)) + 1|0);
   $29 = HEAP8[$arrayidx20>>0]|0;
   $conv21 = $29&255;
   $cmp22 = ($conv19|0)==($conv21|0);
   if ($cmp22) {
    $30 = $p;
    $arrayidx24 = ((($30)) + 2|0);
    $31 = HEAP8[$arrayidx24>>0]|0;
    $conv25 = $31&255;
    $32 = $tc$addr;
    $arrayidx26 = ((($32)) + 2|0);
    $33 = HEAP8[$arrayidx26>>0]|0;
    $conv27 = $33&255;
    $cmp28 = ($conv25|0)==($conv27|0);
    if ($cmp28) {
     $34 = $p;
     $arrayidx30 = ((($34)) + 3|0);
     HEAP8[$arrayidx30>>0] = 0;
    }
   }
  }
  $35 = $p;
  $add$ptr31 = ((($35)) + 4|0);
  $p = $add$ptr31;
  $36 = $i;
  $inc33 = (($36) + 1)|0;
  $i = $inc33;
 }
 STACKTOP = sp;return 1;
}
function __ZL15stbi__de_iphoneP9stbi__png($z) {
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $a = 0, $add = 0, $add$ptr = 0, $add$ptr47 = 0, $add$ptr60 = 0, $add30 = 0, $add38 = 0, $arrayidx12 = 0, $arrayidx18 = 0, $arrayidx26 = 0, $arrayidx3 = 0, $arrayidx34 = 0, $arrayidx42 = 0, $arrayidx44 = 0, $arrayidx46 = 0, $arrayidx5 = 0, $arrayidx57 = 0;
 var $arrayidx59 = 0, $cmp = 0, $cmp10 = 0, $cmp2 = 0, $cmp53 = 0, $cmp7 = 0, $conv = 0, $conv17 = 0, $conv19 = 0, $conv21 = 0, $conv22 = 0, $conv24 = 0, $conv27 = 0, $conv29 = 0, $conv31 = 0, $conv33 = 0, $conv35 = 0, $conv37 = 0, $conv39 = 0, $conv41 = 0;
 var $div = 0, $div23 = 0, $div32 = 0, $div40 = 0, $half = 0, $i = 0, $img_out_n = 0, $img_out_n6 = 0, $img_y = 0, $inc = 0, $inc49 = 0, $inc62 = 0, $mul = 0, $mul20 = 0, $mul28 = 0, $mul36 = 0, $out = 0, $p = 0, $pixel_count = 0, $s = 0;
 var $t = 0, $t13 = 0, $t55 = 0, $tobool = 0, $tobool15 = 0, $z$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $z$addr = $z;
 $0 = $z$addr;
 $1 = HEAP32[$0>>2]|0;
 $s = $1;
 $2 = $s;
 $3 = HEAP32[$2>>2]|0;
 $4 = $s;
 $img_y = ((($4)) + 4|0);
 $5 = HEAP32[$img_y>>2]|0;
 $mul = Math_imul($3, $5)|0;
 $pixel_count = $mul;
 $6 = $z$addr;
 $out = ((($6)) + 12|0);
 $7 = HEAP32[$out>>2]|0;
 $p = $7;
 $8 = $s;
 $img_out_n = ((($8)) + 12|0);
 $9 = HEAP32[$img_out_n>>2]|0;
 $cmp = ($9|0)==(3);
 if ($cmp) {
  $i = 0;
  while(1) {
   $10 = $i;
   $11 = $pixel_count;
   $cmp2 = ($10>>>0)<($11>>>0);
   if (!($cmp2)) {
    break;
   }
   $12 = $p;
   $13 = HEAP8[$12>>0]|0;
   $t = $13;
   $14 = $p;
   $arrayidx3 = ((($14)) + 2|0);
   $15 = HEAP8[$arrayidx3>>0]|0;
   $16 = $p;
   HEAP8[$16>>0] = $15;
   $17 = $t;
   $18 = $p;
   $arrayidx5 = ((($18)) + 2|0);
   HEAP8[$arrayidx5>>0] = $17;
   $19 = $p;
   $add$ptr = ((($19)) + 3|0);
   $p = $add$ptr;
   $20 = $i;
   $inc = (($20) + 1)|0;
   $i = $inc;
  }
  STACKTOP = sp;return;
 }
 $21 = $s;
 $img_out_n6 = ((($21)) + 12|0);
 $22 = HEAP32[$img_out_n6>>2]|0;
 $cmp7 = ($22|0)==(4);
 if (!($cmp7)) {
  ___assert_fail((8141|0),(7702|0),4700,(8159|0));
  // unreachable;
 }
 $tobool = (0)!=(0);
 $i = 0;
 if (!($tobool)) {
  while(1) {
   $52 = $i;
   $53 = $pixel_count;
   $cmp53 = ($52>>>0)<($53>>>0);
   if (!($cmp53)) {
    break;
   }
   $54 = $p;
   $55 = HEAP8[$54>>0]|0;
   $t55 = $55;
   $56 = $p;
   $arrayidx57 = ((($56)) + 2|0);
   $57 = HEAP8[$arrayidx57>>0]|0;
   $58 = $p;
   HEAP8[$58>>0] = $57;
   $59 = $t55;
   $60 = $p;
   $arrayidx59 = ((($60)) + 2|0);
   HEAP8[$arrayidx59>>0] = $59;
   $61 = $p;
   $add$ptr60 = ((($61)) + 4|0);
   $p = $add$ptr60;
   $62 = $i;
   $inc62 = (($62) + 1)|0;
   $i = $inc62;
  }
  STACKTOP = sp;return;
 }
 while(1) {
  $23 = $i;
  $24 = $pixel_count;
  $cmp10 = ($23>>>0)<($24>>>0);
  if (!($cmp10)) {
   break;
  }
  $25 = $p;
  $arrayidx12 = ((($25)) + 3|0);
  $26 = HEAP8[$arrayidx12>>0]|0;
  $a = $26;
  $27 = $p;
  $28 = HEAP8[$27>>0]|0;
  $t13 = $28;
  $29 = $a;
  $tobool15 = ($29<<24>>24)!=(0);
  if ($tobool15) {
   $30 = $a;
   $conv = $30&255;
   $div = (($conv|0) / 2)&-1;
   $conv17 = $div&255;
   $half = $conv17;
   $31 = $p;
   $arrayidx18 = ((($31)) + 2|0);
   $32 = HEAP8[$arrayidx18>>0]|0;
   $conv19 = $32&255;
   $mul20 = ($conv19*255)|0;
   $33 = $half;
   $conv21 = $33&255;
   $add = (($mul20) + ($conv21))|0;
   $34 = $a;
   $conv22 = $34&255;
   $div23 = (($add|0) / ($conv22|0))&-1;
   $conv24 = $div23&255;
   $35 = $p;
   HEAP8[$35>>0] = $conv24;
   $36 = $p;
   $arrayidx26 = ((($36)) + 1|0);
   $37 = HEAP8[$arrayidx26>>0]|0;
   $conv27 = $37&255;
   $mul28 = ($conv27*255)|0;
   $38 = $half;
   $conv29 = $38&255;
   $add30 = (($mul28) + ($conv29))|0;
   $39 = $a;
   $conv31 = $39&255;
   $div32 = (($add30|0) / ($conv31|0))&-1;
   $conv33 = $div32&255;
   $40 = $p;
   $arrayidx34 = ((($40)) + 1|0);
   HEAP8[$arrayidx34>>0] = $conv33;
   $41 = $t13;
   $conv35 = $41&255;
   $mul36 = ($conv35*255)|0;
   $42 = $half;
   $conv37 = $42&255;
   $add38 = (($mul36) + ($conv37))|0;
   $43 = $a;
   $conv39 = $43&255;
   $div40 = (($add38|0) / ($conv39|0))&-1;
   $conv41 = $div40&255;
   $44 = $p;
   $arrayidx42 = ((($44)) + 2|0);
   HEAP8[$arrayidx42>>0] = $conv41;
  } else {
   $45 = $p;
   $arrayidx44 = ((($45)) + 2|0);
   $46 = HEAP8[$arrayidx44>>0]|0;
   $47 = $p;
   HEAP8[$47>>0] = $46;
   $48 = $t13;
   $49 = $p;
   $arrayidx46 = ((($49)) + 2|0);
   HEAP8[$arrayidx46>>0] = $48;
  }
  $50 = $p;
  $add$ptr47 = ((($50)) + 4|0);
  $p = $add$ptr47;
  $51 = $i;
  $inc49 = (($51) + 1)|0;
  $i = $inc49;
 }
 STACKTOP = sp;return;
}
function __ZL24stbi__expand_png_paletteP9stbi__pngPhii($a,$palette,$len,$pal_img_n) {
 $a = $a|0;
 $palette = $palette|0;
 $len = $len|0;
 $pal_img_n = $pal_img_n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $a$addr = 0, $add = 0, $add$ptr = 0, $add$ptr32 = 0, $add11 = 0, $add23 = 0, $add26 = 0, $add29 = 0, $arrayidx = 0, $arrayidx10 = 0, $arrayidx12 = 0, $arrayidx13 = 0, $arrayidx18 = 0, $arrayidx21 = 0, $arrayidx24 = 0, $arrayidx25 = 0, $arrayidx27 = 0, $arrayidx28 = 0, $arrayidx30 = 0, $arrayidx31 = 0;
 var $arrayidx7 = 0, $arrayidx9 = 0, $call = 0, $call2 = 0, $cmp = 0, $cmp15 = 0, $cmp3 = 0, $cmp5 = 0, $conv = 0, $conv19 = 0, $i = 0, $img_y = 0, $inc = 0, $inc34 = 0, $len$addr = 0, $mul = 0, $mul20 = 0, $mul6 = 0, $n = 0, $n17 = 0;
 var $orig = 0, $out = 0, $out37 = 0, $out38 = 0, $p = 0, $pal_img_n$addr = 0, $palette$addr = 0, $pixel_count = 0, $retval = 0, $temp_out = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $a$addr = $a;
 $palette$addr = $palette;
 $len$addr = $len;
 $pal_img_n$addr = $pal_img_n;
 $0 = $a$addr;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = $a$addr;
 $4 = HEAP32[$3>>2]|0;
 $img_y = ((($4)) + 4|0);
 $5 = HEAP32[$img_y>>2]|0;
 $mul = Math_imul($2, $5)|0;
 $pixel_count = $mul;
 $6 = $a$addr;
 $out = ((($6)) + 12|0);
 $7 = HEAP32[$out>>2]|0;
 $orig = $7;
 $8 = $pixel_count;
 $9 = $pal_img_n$addr;
 $call = (__ZL17stbi__malloc_mad2iii($8,$9,0)|0);
 $p = $call;
 $10 = $p;
 $cmp = ($10|0)==(0|0);
 if ($cmp) {
  $call2 = (__ZL9stbi__errPKc(7762)|0);
  $retval = $call2;
  $59 = $retval;
  STACKTOP = sp;return ($59|0);
 }
 $11 = $p;
 $temp_out = $11;
 $12 = $pal_img_n$addr;
 $cmp3 = ($12|0)==(3);
 $i = 0;
 L5: do {
  if ($cmp3) {
   while(1) {
    $13 = $i;
    $14 = $pixel_count;
    $cmp5 = ($13>>>0)<($14>>>0);
    if (!($cmp5)) {
     break L5;
    }
    $15 = $orig;
    $16 = $i;
    $arrayidx = (($15) + ($16)|0);
    $17 = HEAP8[$arrayidx>>0]|0;
    $conv = $17&255;
    $mul6 = $conv<<2;
    $n = $mul6;
    $18 = $palette$addr;
    $19 = $n;
    $arrayidx7 = (($18) + ($19)|0);
    $20 = HEAP8[$arrayidx7>>0]|0;
    $21 = $p;
    HEAP8[$21>>0] = $20;
    $22 = $palette$addr;
    $23 = $n;
    $add = (($23) + 1)|0;
    $arrayidx9 = (($22) + ($add)|0);
    $24 = HEAP8[$arrayidx9>>0]|0;
    $25 = $p;
    $arrayidx10 = ((($25)) + 1|0);
    HEAP8[$arrayidx10>>0] = $24;
    $26 = $palette$addr;
    $27 = $n;
    $add11 = (($27) + 2)|0;
    $arrayidx12 = (($26) + ($add11)|0);
    $28 = HEAP8[$arrayidx12>>0]|0;
    $29 = $p;
    $arrayidx13 = ((($29)) + 2|0);
    HEAP8[$arrayidx13>>0] = $28;
    $30 = $p;
    $add$ptr = ((($30)) + 3|0);
    $p = $add$ptr;
    $31 = $i;
    $inc = (($31) + 1)|0;
    $i = $inc;
   }
  } else {
   while(1) {
    $32 = $i;
    $33 = $pixel_count;
    $cmp15 = ($32>>>0)<($33>>>0);
    if (!($cmp15)) {
     break L5;
    }
    $34 = $orig;
    $35 = $i;
    $arrayidx18 = (($34) + ($35)|0);
    $36 = HEAP8[$arrayidx18>>0]|0;
    $conv19 = $36&255;
    $mul20 = $conv19<<2;
    $n17 = $mul20;
    $37 = $palette$addr;
    $38 = $n17;
    $arrayidx21 = (($37) + ($38)|0);
    $39 = HEAP8[$arrayidx21>>0]|0;
    $40 = $p;
    HEAP8[$40>>0] = $39;
    $41 = $palette$addr;
    $42 = $n17;
    $add23 = (($42) + 1)|0;
    $arrayidx24 = (($41) + ($add23)|0);
    $43 = HEAP8[$arrayidx24>>0]|0;
    $44 = $p;
    $arrayidx25 = ((($44)) + 1|0);
    HEAP8[$arrayidx25>>0] = $43;
    $45 = $palette$addr;
    $46 = $n17;
    $add26 = (($46) + 2)|0;
    $arrayidx27 = (($45) + ($add26)|0);
    $47 = HEAP8[$arrayidx27>>0]|0;
    $48 = $p;
    $arrayidx28 = ((($48)) + 2|0);
    HEAP8[$arrayidx28>>0] = $47;
    $49 = $palette$addr;
    $50 = $n17;
    $add29 = (($50) + 3)|0;
    $arrayidx30 = (($49) + ($add29)|0);
    $51 = HEAP8[$arrayidx30>>0]|0;
    $52 = $p;
    $arrayidx31 = ((($52)) + 3|0);
    HEAP8[$arrayidx31>>0] = $51;
    $53 = $p;
    $add$ptr32 = ((($53)) + 4|0);
    $p = $add$ptr32;
    $54 = $i;
    $inc34 = (($54) + 1)|0;
    $i = $inc34;
   }
  }
 } while(0);
 $55 = $a$addr;
 $out37 = ((($55)) + 12|0);
 $56 = HEAP32[$out37>>2]|0;
 _free($56);
 $57 = $temp_out;
 $58 = $a$addr;
 $out38 = ((($58)) + 12|0);
 HEAP32[$out38>>2] = $57;
 $retval = 1;
 $59 = $retval;
 STACKTOP = sp;return ($59|0);
}
function __ZL17stbi__malloc_mad2iii($a,$b,$add) {
 $a = $a|0;
 $b = $b|0;
 $add = $add|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $a$addr = 0, $add$addr = 0, $add1 = 0, $b$addr = 0, $call = 0, $call2 = 0, $mul = 0, $retval = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $a$addr = $a;
 $b$addr = $b;
 $add$addr = $add;
 $0 = $a$addr;
 $1 = $b$addr;
 $2 = $add$addr;
 $call = (__ZL21stbi__mad2sizes_validiii($0,$1,$2)|0);
 $tobool = ($call|0)!=(0);
 if ($tobool) {
  $3 = $a$addr;
  $4 = $b$addr;
  $mul = Math_imul($3, $4)|0;
  $5 = $add$addr;
  $add1 = (($mul) + ($5))|0;
  $call2 = (__ZL12stbi__mallocm($add1)|0);
  $retval = $call2;
  $6 = $retval;
  STACKTOP = sp;return ($6|0);
 } else {
  $retval = 0;
  $6 = $retval;
  STACKTOP = sp;return ($6|0);
 }
 return (0)|0;
}
function __ZL21stbi__mad2sizes_validiii($a,$b,$add) {
 $a = $a|0;
 $b = $b|0;
 $add = $add|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $a$addr = 0, $add$addr = 0, $b$addr = 0, $call = 0, $call1 = 0, $conv = 0, $mul = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $a$addr = $a;
 $b$addr = $b;
 $add$addr = $add;
 $0 = $a$addr;
 $1 = $b$addr;
 $call = (__ZL21stbi__mul2sizes_validii($0,$1)|0);
 $tobool = ($call|0)!=(0);
 if (!($tobool)) {
  $5 = 0;
  $conv = $5&1;
  STACKTOP = sp;return ($conv|0);
 }
 $2 = $a$addr;
 $3 = $b$addr;
 $mul = Math_imul($2, $3)|0;
 $4 = $add$addr;
 $call1 = (__ZL20stbi__addsizes_validii($mul,$4)|0);
 $tobool2 = ($call1|0)!=(0);
 $5 = $tobool2;
 $conv = $5&1;
 STACKTOP = sp;return ($conv|0);
}
function __ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii($a,$raw,$raw_len,$out_n,$x,$y,$depth,$color) {
 $a = $a|0;
 $raw = $raw|0;
 $raw_len = $raw_len|0;
 $out_n = $out_n|0;
 $x = $x|0;
 $y = $y|0;
 $depth = $depth|0;
 $color = $color|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$addr = 0, $add = 0, $add$ptr = 0, $add$ptr105 = 0, $add$ptr106 = 0, $add$ptr107 = 0, $add$ptr109 = 0, $add$ptr110 = 0, $add$ptr111 = 0, $add$ptr229 = 0, $add$ptr250 = 0, $add$ptr251 = 0;
 var $add$ptr252 = 0, $add$ptr277 = 0, $add$ptr278 = 0, $add$ptr279 = 0, $add$ptr303 = 0, $add$ptr304 = 0, $add$ptr305 = 0, $add$ptr334 = 0, $add$ptr335 = 0, $add$ptr336 = 0, $add$ptr367 = 0, $add$ptr368 = 0, $add$ptr369 = 0, $add$ptr39 = 0, $add$ptr395 = 0, $add$ptr396 = 0, $add$ptr397 = 0, $add$ptr41 = 0, $add$ptr423 = 0, $add$ptr424 = 0;
 var $add$ptr425 = 0, $add$ptr432 = 0, $add$ptr440 = 0, $add$ptr455 = 0, $add$ptr458 = 0, $add$ptr460 = 0, $add$ptr462 = 0, $add$ptr706 = 0, $add$ptr778 = 0, $add$ptr94 = 0, $add$ptr95 = 0, $add$ptr96 = 0, $add102 = 0, $add130 = 0, $add145 = 0, $add163 = 0, $add165 = 0, $add187 = 0, $add19 = 0, $add20 = 0;
 var $add204 = 0, $add221 = 0, $add231 = 0, $add267 = 0, $add293 = 0, $add322 = 0, $add324 = 0, $add357 = 0, $add385 = 0, $add413 = 0, $add436 = 0, $add59 = 0, $add68 = 0, $add714 = 0, $add718 = 0, $add732 = 0, $add735 = 0, $add738 = 0, $add741 = 0, $add744 = 0;
 var $add747 = 0, $add750 = 0, $add78 = 0, $and = 0, $and131 = 0, $and146 = 0, $and166 = 0, $and188 = 0, $and205 = 0, $and222 = 0, $and268 = 0, $and294 = 0, $and325 = 0, $and358 = 0, $and386 = 0, $and414 = 0, $and482 = 0, $and515 = 0, $and522 = 0, $and528 = 0;
 var $and550 = 0, $and560 = 0, $and581 = 0, $and588 = 0, $and595 = 0, $and602 = 0, $and609 = 0, $and616 = 0, $and622 = 0, $and644 = 0, $and654 = 0, $and664 = 0, $and674 = 0, $and684 = 0, $and69 = 0, $and694 = 0, $and79 = 0, $arrayidx = 0, $arrayidx101 = 0, $arrayidx103 = 0;
 var $arrayidx125 = 0, $arrayidx128 = 0, $arrayidx133 = 0, $arrayidx141 = 0, $arrayidx143 = 0, $arrayidx148 = 0, $arrayidx156 = 0, $arrayidx158 = 0, $arrayidx161 = 0, $arrayidx168 = 0, $arrayidx176 = 0, $arrayidx179 = 0, $arrayidx181 = 0, $arrayidx184 = 0, $arrayidx190 = 0, $arrayidx198 = 0, $arrayidx201 = 0, $arrayidx207 = 0, $arrayidx215 = 0, $arrayidx218 = 0;
 var $arrayidx224 = 0, $arrayidx243 = 0, $arrayidx244 = 0, $arrayidx249 = 0, $arrayidx262 = 0, $arrayidx265 = 0, $arrayidx270 = 0, $arrayidx276 = 0, $arrayidx289 = 0, $arrayidx291 = 0, $arrayidx296 = 0, $arrayidx302 = 0, $arrayidx315 = 0, $arrayidx317 = 0, $arrayidx320 = 0, $arrayidx327 = 0, $arrayidx333 = 0, $arrayidx346 = 0, $arrayidx349 = 0, $arrayidx351 = 0;
 var $arrayidx354 = 0, $arrayidx360 = 0, $arrayidx366 = 0, $arrayidx379 = 0, $arrayidx382 = 0, $arrayidx388 = 0, $arrayidx394 = 0, $arrayidx407 = 0, $arrayidx410 = 0, $arrayidx416 = 0, $arrayidx422 = 0, $arrayidx437 = 0, $arrayidx464 = 0, $arrayidx49 = 0, $arrayidx50 = 0, $arrayidx52 = 0, $arrayidx53 = 0, $arrayidx55 = 0, $arrayidx57 = 0, $arrayidx61 = 0;
 var $arrayidx63 = 0, $arrayidx65 = 0, $arrayidx71 = 0, $arrayidx715 = 0, $arrayidx716 = 0, $arrayidx719 = 0, $arrayidx73 = 0, $arrayidx733 = 0, $arrayidx736 = 0, $arrayidx739 = 0, $arrayidx742 = 0, $arrayidx745 = 0, $arrayidx748 = 0, $arrayidx75 = 0, $arrayidx751 = 0, $arrayidx772 = 0, $arrayidx81 = 0, $arrayidx83 = 0, $arrayidx84 = 0, $arrayidx86 = 0;
 var $arrayidx87 = 0, $arrayidx92 = 0, $bytes = 0, $call = 0, $call11 = 0, $call12 = 0, $call15 = 0, $call186 = 0, $call220 = 0, $call24 = 0, $call31 = 0, $call356 = 0, $call412 = 0, $call77 = 0, $cmp = 0, $cmp114 = 0, $cmp116 = 0, $cmp123 = 0, $cmp139 = 0, $cmp154 = 0;
 var $cmp174 = 0, $cmp196 = 0, $cmp213 = 0, $cmp22 = 0, $cmp232 = 0, $cmp238 = 0, $cmp241 = 0, $cmp257 = 0, $cmp26 = 0, $cmp260 = 0, $cmp284 = 0, $cmp287 = 0, $cmp29 = 0, $cmp310 = 0, $cmp313 = 0, $cmp33 = 0, $cmp341 = 0, $cmp344 = 0, $cmp35 = 0, $cmp374 = 0;
 var $cmp377 = 0, $cmp402 = 0, $cmp405 = 0, $cmp42 = 0, $cmp428 = 0, $cmp434 = 0, $cmp447 = 0, $cmp450 = 0, $cmp463 = 0, $cmp468 = 0, $cmp47 = 0, $cmp472 = 0, $cmp490 = 0, $cmp500 = 0, $cmp504 = 0, $cmp536 = 0, $cmp545 = 0, $cmp555 = 0, $cmp566 = 0, $cmp570 = 0;
 var $cmp630 = 0, $cmp639 = 0, $cmp649 = 0, $cmp659 = 0, $cmp669 = 0, $cmp679 = 0, $cmp689 = 0, $cmp7 = 0, $cmp702 = 0, $cmp707 = 0, $cmp711 = 0, $cmp724 = 0, $cmp729 = 0, $cmp761 = 0, $cmp768 = 0, $cmp88 = 0, $cmp9 = 0, $cmp90 = 0, $cmp97 = 0, $cmp99 = 0;
 var $color$addr = 0, $cond = 0, $cond466 = 0, $conv = 0, $conv126 = 0, $conv129 = 0, $conv132 = 0, $conv142 = 0, $conv144 = 0, $conv147 = 0, $conv157 = 0, $conv159 = 0, $conv162 = 0, $conv167 = 0, $conv177 = 0, $conv180 = 0, $conv182 = 0, $conv185 = 0, $conv189 = 0, $conv199 = 0;
 var $conv202 = 0, $conv206 = 0, $conv216 = 0, $conv219 = 0, $conv223 = 0, $conv263 = 0, $conv266 = 0, $conv269 = 0, $conv290 = 0, $conv292 = 0, $conv295 = 0, $conv316 = 0, $conv318 = 0, $conv321 = 0, $conv326 = 0, $conv347 = 0, $conv350 = 0, $conv352 = 0, $conv355 = 0, $conv359 = 0;
 var $conv380 = 0, $conv383 = 0, $conv387 = 0, $conv408 = 0, $conv411 = 0, $conv415 = 0, $conv44 = 0, $conv465 = 0, $conv467 = 0, $conv474 = 0, $conv475 = 0, $conv478 = 0, $conv480 = 0, $conv481 = 0, $conv484 = 0, $conv492 = 0, $conv493 = 0, $conv496 = 0, $conv506 = 0, $conv507 = 0;
 var $conv510 = 0, $conv512 = 0, $conv513 = 0, $conv517 = 0, $conv519 = 0, $conv520 = 0, $conv524 = 0, $conv526 = 0, $conv527 = 0, $conv530 = 0, $conv538 = 0, $conv539 = 0, $conv542 = 0, $conv547 = 0, $conv548 = 0, $conv552 = 0, $conv557 = 0, $conv558 = 0, $conv56 = 0, $conv562 = 0;
 var $conv572 = 0, $conv573 = 0, $conv576 = 0, $conv578 = 0, $conv579 = 0, $conv58 = 0, $conv583 = 0, $conv585 = 0, $conv586 = 0, $conv590 = 0, $conv592 = 0, $conv593 = 0, $conv597 = 0, $conv599 = 0, $conv60 = 0, $conv600 = 0, $conv604 = 0, $conv606 = 0, $conv607 = 0, $conv611 = 0;
 var $conv613 = 0, $conv614 = 0, $conv618 = 0, $conv620 = 0, $conv621 = 0, $conv624 = 0, $conv632 = 0, $conv633 = 0, $conv636 = 0, $conv64 = 0, $conv641 = 0, $conv642 = 0, $conv646 = 0, $conv651 = 0, $conv652 = 0, $conv656 = 0, $conv66 = 0, $conv661 = 0, $conv662 = 0, $conv666 = 0;
 var $conv671 = 0, $conv672 = 0, $conv676 = 0, $conv681 = 0, $conv682 = 0, $conv686 = 0, $conv691 = 0, $conv692 = 0, $conv696 = 0, $conv70 = 0, $conv74 = 0, $conv76 = 0, $conv771 = 0, $conv773 = 0, $conv774 = 0, $conv80 = 0, $cur = 0, $cur16 = 0, $cur452 = 0, $cur763 = 0;
 var $dec = 0, $dec275 = 0, $dec301 = 0, $dec332 = 0, $dec365 = 0, $dec393 = 0, $dec421 = 0, $dec721 = 0, $dec753 = 0, $depth$addr = 0, $filter = 0, $filter_bytes = 0, $i = 0, $idx$neg = 0, $idx$neg461 = 0, $img_len = 0, $img_n = 0, $img_n3 = 0, $img_n6 = 0, $img_n8 = 0;
 var $img_width_bytes = 0, $in = 0, $inc = 0, $inc135 = 0, $inc150 = 0, $inc170 = 0, $inc192 = 0, $inc209 = 0, $inc226 = 0, $inc246 = 0, $inc272 = 0, $inc298 = 0, $inc329 = 0, $inc362 = 0, $inc390 = 0, $inc418 = 0, $inc439 = 0, $inc445 = 0, $inc758 = 0, $inc776 = 0;
 var $incdec$ptr = 0, $incdec$ptr479 = 0, $incdec$ptr485 = 0, $incdec$ptr488 = 0, $incdec$ptr497 = 0, $incdec$ptr511 = 0, $incdec$ptr518 = 0, $incdec$ptr525 = 0, $incdec$ptr531 = 0, $incdec$ptr534 = 0, $incdec$ptr543 = 0, $incdec$ptr553 = 0, $incdec$ptr563 = 0, $incdec$ptr577 = 0, $incdec$ptr584 = 0, $incdec$ptr591 = 0, $incdec$ptr598 = 0, $incdec$ptr605 = 0, $incdec$ptr612 = 0, $incdec$ptr619 = 0;
 var $incdec$ptr625 = 0, $incdec$ptr628 = 0, $incdec$ptr637 = 0, $incdec$ptr647 = 0, $incdec$ptr657 = 0, $incdec$ptr667 = 0, $incdec$ptr677 = 0, $incdec$ptr687 = 0, $incdec$ptr697 = 0, $incdec$ptr777 = 0, $j = 0, $k = 0, $mul = 0, $mul119 = 0, $mul17 = 0, $mul18 = 0, $mul2 = 0, $mul21 = 0, $mul28 = 0, $mul38 = 0;
 var $mul4 = 0, $mul431 = 0, $mul454 = 0, $mul457 = 0, $mul459 = 0, $mul470 = 0, $mul477 = 0, $mul483 = 0, $mul495 = 0, $mul5 = 0, $mul502 = 0, $mul509 = 0, $mul516 = 0, $mul523 = 0, $mul529 = 0, $mul541 = 0, $mul551 = 0, $mul561 = 0, $mul568 = 0, $mul575 = 0;
 var $mul582 = 0, $mul589 = 0, $mul596 = 0, $mul603 = 0, $mul610 = 0, $mul617 = 0, $mul623 = 0, $mul635 = 0, $mul645 = 0, $mul655 = 0, $mul665 = 0, $mul675 = 0, $mul685 = 0, $mul695 = 0, $mul705 = 0, $mul713 = 0, $mul717 = 0, $mul731 = 0, $mul734 = 0, $mul737 = 0;
 var $mul740 = 0, $mul743 = 0, $mul746 = 0, $mul749 = 0, $mul766 = 0, $mul767 = 0, $nk = 0, $or = 0, $out = 0, $out10 = 0, $out27 = 0, $out430 = 0, $out453 = 0, $out456 = 0, $out704 = 0, $out764 = 0, $out_n$addr = 0, $output_bytes = 0, $prior = 0, $q = 0;
 var $raw$addr = 0, $raw_len$addr = 0, $retval = 0, $s = 0, $scale = 0, $shl = 0, $shr = 0, $shr164 = 0, $shr203 = 0, $shr323 = 0, $shr384 = 0, $shr476 = 0, $shr494 = 0, $shr508 = 0, $shr514 = 0, $shr521 = 0, $shr540 = 0, $shr549 = 0, $shr559 = 0, $shr574 = 0;
 var $shr580 = 0, $shr587 = 0, $shr594 = 0, $shr601 = 0, $shr608 = 0, $shr615 = 0, $shr634 = 0, $shr643 = 0, $shr653 = 0, $shr663 = 0, $shr67 = 0, $shr673 = 0, $shr683 = 0, $shr693 = 0, $stride = 0, $sub = 0, $sub118 = 0, $sub127 = 0, $sub160 = 0, $sub178 = 0;
 var $sub183 = 0, $sub200 = 0, $sub217 = 0, $sub236 = 0, $sub255 = 0, $sub264 = 0, $sub282 = 0, $sub308 = 0, $sub319 = 0, $sub339 = 0, $sub348 = 0, $sub353 = 0, $sub372 = 0, $sub381 = 0, $sub400 = 0, $sub409 = 0, $sub487 = 0, $sub533 = 0, $sub627 = 0, $sub709 = 0;
 var $sub727 = 0, $tobool = 0, $tobool13 = 0, $width = 0, $x$addr = 0, $y$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $a$addr = $a;
 $raw$addr = $raw;
 $raw_len$addr = $raw_len;
 $out_n$addr = $out_n;
 $x$addr = $x;
 $y$addr = $y;
 $depth$addr = $depth;
 $color$addr = $color;
 $0 = $depth$addr;
 $cmp = ($0|0)==(16);
 $cond = $cmp ? 2 : 1;
 $bytes = $cond;
 $1 = $a$addr;
 $2 = HEAP32[$1>>2]|0;
 $s = $2;
 $3 = $x$addr;
 $4 = $out_n$addr;
 $mul = Math_imul($3, $4)|0;
 $5 = $bytes;
 $mul2 = Math_imul($mul, $5)|0;
 $stride = $mul2;
 $6 = $s;
 $img_n3 = ((($6)) + 8|0);
 $7 = HEAP32[$img_n3>>2]|0;
 $img_n = $7;
 $8 = $out_n$addr;
 $9 = $bytes;
 $mul4 = Math_imul($8, $9)|0;
 $output_bytes = $mul4;
 $10 = $img_n;
 $11 = $bytes;
 $mul5 = Math_imul($10, $11)|0;
 $filter_bytes = $mul5;
 $12 = $x$addr;
 $width = $12;
 $13 = $out_n$addr;
 $14 = $s;
 $img_n6 = ((($14)) + 8|0);
 $15 = HEAP32[$img_n6>>2]|0;
 $cmp7 = ($13|0)==($15|0);
 if (!($cmp7)) {
  $16 = $out_n$addr;
  $17 = $s;
  $img_n8 = ((($17)) + 8|0);
  $18 = HEAP32[$img_n8>>2]|0;
  $add = (($18) + 1)|0;
  $cmp9 = ($16|0)==($add|0);
  if (!($cmp9)) {
   ___assert_fail((8256|0),(7702|0),4343,(8297|0));
   // unreachable;
  }
 }
 $19 = $x$addr;
 $20 = $y$addr;
 $21 = $output_bytes;
 $call = (__ZL17stbi__malloc_mad3iiii($19,$20,$21,0)|0);
 $22 = $a$addr;
 $out = ((($22)) + 12|0);
 HEAP32[$out>>2] = $call;
 $23 = $a$addr;
 $out10 = ((($23)) + 12|0);
 $24 = HEAP32[$out10>>2]|0;
 $tobool = ($24|0)!=(0|0);
 if (!($tobool)) {
  $call11 = (__ZL9stbi__errPKc(7762)|0);
  $retval = $call11;
  $607 = $retval;
  STACKTOP = sp;return ($607|0);
 }
 $25 = $img_n;
 $26 = $x$addr;
 $27 = $depth$addr;
 $call12 = (__ZL21stbi__mad3sizes_validiiii($25,$26,$27,7)|0);
 $tobool13 = ($call12|0)!=(0);
 if (!($tobool13)) {
  $call15 = (__ZL9stbi__errPKc(7907)|0);
  $retval = $call15;
  $607 = $retval;
  STACKTOP = sp;return ($607|0);
 }
 $28 = $img_n;
 $29 = $x$addr;
 $mul17 = Math_imul($28, $29)|0;
 $30 = $depth$addr;
 $mul18 = Math_imul($mul17, $30)|0;
 $add19 = (($mul18) + 7)|0;
 $shr = $add19 >>> 3;
 $img_width_bytes = $shr;
 $31 = $img_width_bytes;
 $add20 = (($31) + 1)|0;
 $32 = $y$addr;
 $mul21 = Math_imul($add20, $32)|0;
 $img_len = $mul21;
 $33 = $raw_len$addr;
 $34 = $img_len;
 $cmp22 = ($33>>>0)<($34>>>0);
 if ($cmp22) {
  $call24 = (__ZL9stbi__errPKc(8324)|0);
  $retval = $call24;
  $607 = $retval;
  STACKTOP = sp;return ($607|0);
 }
 $j = 0;
 L17: while(1) {
  $35 = $j;
  $36 = $y$addr;
  $cmp26 = ($35>>>0)<($36>>>0);
  if (!($cmp26)) {
   label = 113;
   break;
  }
  $37 = $a$addr;
  $out27 = ((($37)) + 12|0);
  $38 = HEAP32[$out27>>2]|0;
  $39 = $stride;
  $40 = $j;
  $mul28 = Math_imul($39, $40)|0;
  $add$ptr = (($38) + ($mul28)|0);
  $cur = $add$ptr;
  $41 = $raw$addr;
  $incdec$ptr = ((($41)) + 1|0);
  $raw$addr = $incdec$ptr;
  $42 = HEAP8[$41>>0]|0;
  $conv = $42&255;
  $filter = $conv;
  $43 = $filter;
  $cmp29 = ($43|0)>(4);
  if ($cmp29) {
   label = 13;
   break;
  }
  $44 = $depth$addr;
  $cmp33 = ($44|0)<(8);
  if ($cmp33) {
   $45 = $img_width_bytes;
   $46 = $x$addr;
   $cmp35 = ($45>>>0)<=($46>>>0);
   if (!($cmp35)) {
    label = 16;
    break;
   }
   $47 = $x$addr;
   $48 = $out_n$addr;
   $mul38 = Math_imul($47, $48)|0;
   $49 = $img_width_bytes;
   $sub = (($mul38) - ($49))|0;
   $50 = $cur;
   $add$ptr39 = (($50) + ($sub)|0);
   $cur = $add$ptr39;
   $filter_bytes = 1;
   $51 = $img_width_bytes;
   $width = $51;
  }
  $52 = $cur;
  $53 = $stride;
  $idx$neg = (0 - ($53))|0;
  $add$ptr41 = (($52) + ($idx$neg)|0);
  $prior = $add$ptr41;
  $54 = $j;
  $cmp42 = ($54|0)==(0);
  if ($cmp42) {
   $55 = $filter;
   $arrayidx = (8378 + ($55)|0);
   $56 = HEAP8[$arrayidx>>0]|0;
   $conv44 = $56&255;
   $filter = $conv44;
  }
  $k = 0;
  while(1) {
   $57 = $k;
   $58 = $filter_bytes;
   $cmp47 = ($57|0)<($58|0);
   if (!($cmp47)) {
    break;
   }
   $59 = $filter;
   switch ($59|0) {
   case 0:  {
    $60 = $raw$addr;
    $61 = $k;
    $arrayidx49 = (($60) + ($61)|0);
    $62 = HEAP8[$arrayidx49>>0]|0;
    $63 = $cur;
    $64 = $k;
    $arrayidx50 = (($63) + ($64)|0);
    HEAP8[$arrayidx50>>0] = $62;
    break;
   }
   case 1:  {
    $65 = $raw$addr;
    $66 = $k;
    $arrayidx52 = (($65) + ($66)|0);
    $67 = HEAP8[$arrayidx52>>0]|0;
    $68 = $cur;
    $69 = $k;
    $arrayidx53 = (($68) + ($69)|0);
    HEAP8[$arrayidx53>>0] = $67;
    break;
   }
   case 2:  {
    $70 = $raw$addr;
    $71 = $k;
    $arrayidx55 = (($70) + ($71)|0);
    $72 = HEAP8[$arrayidx55>>0]|0;
    $conv56 = $72&255;
    $73 = $prior;
    $74 = $k;
    $arrayidx57 = (($73) + ($74)|0);
    $75 = HEAP8[$arrayidx57>>0]|0;
    $conv58 = $75&255;
    $add59 = (($conv56) + ($conv58))|0;
    $and = $add59 & 255;
    $conv60 = $and&255;
    $76 = $cur;
    $77 = $k;
    $arrayidx61 = (($76) + ($77)|0);
    HEAP8[$arrayidx61>>0] = $conv60;
    break;
   }
   case 3:  {
    $78 = $raw$addr;
    $79 = $k;
    $arrayidx63 = (($78) + ($79)|0);
    $80 = HEAP8[$arrayidx63>>0]|0;
    $conv64 = $80&255;
    $81 = $prior;
    $82 = $k;
    $arrayidx65 = (($81) + ($82)|0);
    $83 = HEAP8[$arrayidx65>>0]|0;
    $conv66 = $83&255;
    $shr67 = $conv66 >> 1;
    $add68 = (($conv64) + ($shr67))|0;
    $and69 = $add68 & 255;
    $conv70 = $and69&255;
    $84 = $cur;
    $85 = $k;
    $arrayidx71 = (($84) + ($85)|0);
    HEAP8[$arrayidx71>>0] = $conv70;
    break;
   }
   case 4:  {
    $86 = $raw$addr;
    $87 = $k;
    $arrayidx73 = (($86) + ($87)|0);
    $88 = HEAP8[$arrayidx73>>0]|0;
    $conv74 = $88&255;
    $89 = $prior;
    $90 = $k;
    $arrayidx75 = (($89) + ($90)|0);
    $91 = HEAP8[$arrayidx75>>0]|0;
    $conv76 = $91&255;
    $call77 = (__ZL11stbi__paethiii(0,$conv76,0)|0);
    $add78 = (($conv74) + ($call77))|0;
    $and79 = $add78 & 255;
    $conv80 = $and79&255;
    $92 = $cur;
    $93 = $k;
    $arrayidx81 = (($92) + ($93)|0);
    HEAP8[$arrayidx81>>0] = $conv80;
    break;
   }
   case 5:  {
    $94 = $raw$addr;
    $95 = $k;
    $arrayidx83 = (($94) + ($95)|0);
    $96 = HEAP8[$arrayidx83>>0]|0;
    $97 = $cur;
    $98 = $k;
    $arrayidx84 = (($97) + ($98)|0);
    HEAP8[$arrayidx84>>0] = $96;
    break;
   }
   case 6:  {
    $99 = $raw$addr;
    $100 = $k;
    $arrayidx86 = (($99) + ($100)|0);
    $101 = HEAP8[$arrayidx86>>0]|0;
    $102 = $cur;
    $103 = $k;
    $arrayidx87 = (($102) + ($103)|0);
    HEAP8[$arrayidx87>>0] = $101;
    break;
   }
   default: {
   }
   }
   $104 = $k;
   $inc = (($104) + 1)|0;
   $k = $inc;
  }
  $105 = $depth$addr;
  $cmp88 = ($105|0)==(8);
  do {
   if ($cmp88) {
    $106 = $img_n;
    $107 = $out_n$addr;
    $cmp90 = ($106|0)!=($107|0);
    if ($cmp90) {
     $108 = $cur;
     $109 = $img_n;
     $arrayidx92 = (($108) + ($109)|0);
     HEAP8[$arrayidx92>>0] = -1;
    }
    $110 = $img_n;
    $111 = $raw$addr;
    $add$ptr94 = (($111) + ($110)|0);
    $raw$addr = $add$ptr94;
    $112 = $out_n$addr;
    $113 = $cur;
    $add$ptr95 = (($113) + ($112)|0);
    $cur = $add$ptr95;
    $114 = $out_n$addr;
    $115 = $prior;
    $add$ptr96 = (($115) + ($114)|0);
    $prior = $add$ptr96;
   } else {
    $116 = $depth$addr;
    $cmp97 = ($116|0)==(16);
    if (!($cmp97)) {
     $129 = $raw$addr;
     $add$ptr109 = ((($129)) + 1|0);
     $raw$addr = $add$ptr109;
     $130 = $cur;
     $add$ptr110 = ((($130)) + 1|0);
     $cur = $add$ptr110;
     $131 = $prior;
     $add$ptr111 = ((($131)) + 1|0);
     $prior = $add$ptr111;
     break;
    }
    $117 = $img_n;
    $118 = $out_n$addr;
    $cmp99 = ($117|0)!=($118|0);
    if ($cmp99) {
     $119 = $cur;
     $120 = $filter_bytes;
     $arrayidx101 = (($119) + ($120)|0);
     HEAP8[$arrayidx101>>0] = -1;
     $121 = $cur;
     $122 = $filter_bytes;
     $add102 = (($122) + 1)|0;
     $arrayidx103 = (($121) + ($add102)|0);
     HEAP8[$arrayidx103>>0] = -1;
    }
    $123 = $filter_bytes;
    $124 = $raw$addr;
    $add$ptr105 = (($124) + ($123)|0);
    $raw$addr = $add$ptr105;
    $125 = $output_bytes;
    $126 = $cur;
    $add$ptr106 = (($126) + ($125)|0);
    $cur = $add$ptr106;
    $127 = $output_bytes;
    $128 = $prior;
    $add$ptr107 = (($128) + ($127)|0);
    $prior = $add$ptr107;
   }
  } while(0);
  $132 = $depth$addr;
  $cmp114 = ($132|0)<(8);
  L54: do {
   if ($cmp114) {
    label = 42;
   } else {
    $133 = $img_n;
    $134 = $out_n$addr;
    $cmp116 = ($133|0)==($134|0);
    if ($cmp116) {
     label = 42;
    } else {
     $224 = $img_n;
     $add231 = (($224) + 1)|0;
     $225 = $out_n$addr;
     $cmp232 = ($add231|0)==($225|0);
     if (!($cmp232)) {
      label = 64;
      break L17;
     }
     $226 = $filter;
     L58: do {
      switch ($226|0) {
      case 0:  {
       $227 = $x$addr;
       $sub236 = (($227) - 1)|0;
       $i = $sub236;
       while(1) {
        $228 = $i;
        $cmp238 = ($228>>>0)>=(1);
        if (!($cmp238)) {
         break L58;
        }
        $k = 0;
        while(1) {
         $229 = $k;
         $230 = $filter_bytes;
         $cmp241 = ($229|0)<($230|0);
         if (!($cmp241)) {
          break;
         }
         $231 = $raw$addr;
         $232 = $k;
         $arrayidx243 = (($231) + ($232)|0);
         $233 = HEAP8[$arrayidx243>>0]|0;
         $234 = $cur;
         $235 = $k;
         $arrayidx244 = (($234) + ($235)|0);
         HEAP8[$arrayidx244>>0] = $233;
         $236 = $k;
         $inc246 = (($236) + 1)|0;
         $k = $inc246;
        }
        $237 = $i;
        $dec = (($237) + -1)|0;
        $i = $dec;
        $238 = $cur;
        $239 = $filter_bytes;
        $arrayidx249 = (($238) + ($239)|0);
        HEAP8[$arrayidx249>>0] = -1;
        $240 = $filter_bytes;
        $241 = $raw$addr;
        $add$ptr250 = (($241) + ($240)|0);
        $raw$addr = $add$ptr250;
        $242 = $output_bytes;
        $243 = $cur;
        $add$ptr251 = (($243) + ($242)|0);
        $cur = $add$ptr251;
        $244 = $output_bytes;
        $245 = $prior;
        $add$ptr252 = (($245) + ($244)|0);
        $prior = $add$ptr252;
       }
       break;
      }
      case 1:  {
       $246 = $x$addr;
       $sub255 = (($246) - 1)|0;
       $i = $sub255;
       while(1) {
        $247 = $i;
        $cmp257 = ($247>>>0)>=(1);
        if (!($cmp257)) {
         break L58;
        }
        $k = 0;
        while(1) {
         $248 = $k;
         $249 = $filter_bytes;
         $cmp260 = ($248|0)<($249|0);
         if (!($cmp260)) {
          break;
         }
         $250 = $raw$addr;
         $251 = $k;
         $arrayidx262 = (($250) + ($251)|0);
         $252 = HEAP8[$arrayidx262>>0]|0;
         $conv263 = $252&255;
         $253 = $cur;
         $254 = $k;
         $255 = $output_bytes;
         $sub264 = (($254) - ($255))|0;
         $arrayidx265 = (($253) + ($sub264)|0);
         $256 = HEAP8[$arrayidx265>>0]|0;
         $conv266 = $256&255;
         $add267 = (($conv263) + ($conv266))|0;
         $and268 = $add267 & 255;
         $conv269 = $and268&255;
         $257 = $cur;
         $258 = $k;
         $arrayidx270 = (($257) + ($258)|0);
         HEAP8[$arrayidx270>>0] = $conv269;
         $259 = $k;
         $inc272 = (($259) + 1)|0;
         $k = $inc272;
        }
        $260 = $i;
        $dec275 = (($260) + -1)|0;
        $i = $dec275;
        $261 = $cur;
        $262 = $filter_bytes;
        $arrayidx276 = (($261) + ($262)|0);
        HEAP8[$arrayidx276>>0] = -1;
        $263 = $filter_bytes;
        $264 = $raw$addr;
        $add$ptr277 = (($264) + ($263)|0);
        $raw$addr = $add$ptr277;
        $265 = $output_bytes;
        $266 = $cur;
        $add$ptr278 = (($266) + ($265)|0);
        $cur = $add$ptr278;
        $267 = $output_bytes;
        $268 = $prior;
        $add$ptr279 = (($268) + ($267)|0);
        $prior = $add$ptr279;
       }
       break;
      }
      case 2:  {
       $269 = $x$addr;
       $sub282 = (($269) - 1)|0;
       $i = $sub282;
       while(1) {
        $270 = $i;
        $cmp284 = ($270>>>0)>=(1);
        if (!($cmp284)) {
         break L58;
        }
        $k = 0;
        while(1) {
         $271 = $k;
         $272 = $filter_bytes;
         $cmp287 = ($271|0)<($272|0);
         if (!($cmp287)) {
          break;
         }
         $273 = $raw$addr;
         $274 = $k;
         $arrayidx289 = (($273) + ($274)|0);
         $275 = HEAP8[$arrayidx289>>0]|0;
         $conv290 = $275&255;
         $276 = $prior;
         $277 = $k;
         $arrayidx291 = (($276) + ($277)|0);
         $278 = HEAP8[$arrayidx291>>0]|0;
         $conv292 = $278&255;
         $add293 = (($conv290) + ($conv292))|0;
         $and294 = $add293 & 255;
         $conv295 = $and294&255;
         $279 = $cur;
         $280 = $k;
         $arrayidx296 = (($279) + ($280)|0);
         HEAP8[$arrayidx296>>0] = $conv295;
         $281 = $k;
         $inc298 = (($281) + 1)|0;
         $k = $inc298;
        }
        $282 = $i;
        $dec301 = (($282) + -1)|0;
        $i = $dec301;
        $283 = $cur;
        $284 = $filter_bytes;
        $arrayidx302 = (($283) + ($284)|0);
        HEAP8[$arrayidx302>>0] = -1;
        $285 = $filter_bytes;
        $286 = $raw$addr;
        $add$ptr303 = (($286) + ($285)|0);
        $raw$addr = $add$ptr303;
        $287 = $output_bytes;
        $288 = $cur;
        $add$ptr304 = (($288) + ($287)|0);
        $cur = $add$ptr304;
        $289 = $output_bytes;
        $290 = $prior;
        $add$ptr305 = (($290) + ($289)|0);
        $prior = $add$ptr305;
       }
       break;
      }
      case 3:  {
       $291 = $x$addr;
       $sub308 = (($291) - 1)|0;
       $i = $sub308;
       while(1) {
        $292 = $i;
        $cmp310 = ($292>>>0)>=(1);
        if (!($cmp310)) {
         break L58;
        }
        $k = 0;
        while(1) {
         $293 = $k;
         $294 = $filter_bytes;
         $cmp313 = ($293|0)<($294|0);
         if (!($cmp313)) {
          break;
         }
         $295 = $raw$addr;
         $296 = $k;
         $arrayidx315 = (($295) + ($296)|0);
         $297 = HEAP8[$arrayidx315>>0]|0;
         $conv316 = $297&255;
         $298 = $prior;
         $299 = $k;
         $arrayidx317 = (($298) + ($299)|0);
         $300 = HEAP8[$arrayidx317>>0]|0;
         $conv318 = $300&255;
         $301 = $cur;
         $302 = $k;
         $303 = $output_bytes;
         $sub319 = (($302) - ($303))|0;
         $arrayidx320 = (($301) + ($sub319)|0);
         $304 = HEAP8[$arrayidx320>>0]|0;
         $conv321 = $304&255;
         $add322 = (($conv318) + ($conv321))|0;
         $shr323 = $add322 >> 1;
         $add324 = (($conv316) + ($shr323))|0;
         $and325 = $add324 & 255;
         $conv326 = $and325&255;
         $305 = $cur;
         $306 = $k;
         $arrayidx327 = (($305) + ($306)|0);
         HEAP8[$arrayidx327>>0] = $conv326;
         $307 = $k;
         $inc329 = (($307) + 1)|0;
         $k = $inc329;
        }
        $308 = $i;
        $dec332 = (($308) + -1)|0;
        $i = $dec332;
        $309 = $cur;
        $310 = $filter_bytes;
        $arrayidx333 = (($309) + ($310)|0);
        HEAP8[$arrayidx333>>0] = -1;
        $311 = $filter_bytes;
        $312 = $raw$addr;
        $add$ptr334 = (($312) + ($311)|0);
        $raw$addr = $add$ptr334;
        $313 = $output_bytes;
        $314 = $cur;
        $add$ptr335 = (($314) + ($313)|0);
        $cur = $add$ptr335;
        $315 = $output_bytes;
        $316 = $prior;
        $add$ptr336 = (($316) + ($315)|0);
        $prior = $add$ptr336;
       }
       break;
      }
      case 4:  {
       $317 = $x$addr;
       $sub339 = (($317) - 1)|0;
       $i = $sub339;
       while(1) {
        $318 = $i;
        $cmp341 = ($318>>>0)>=(1);
        if (!($cmp341)) {
         break L58;
        }
        $k = 0;
        while(1) {
         $319 = $k;
         $320 = $filter_bytes;
         $cmp344 = ($319|0)<($320|0);
         if (!($cmp344)) {
          break;
         }
         $321 = $raw$addr;
         $322 = $k;
         $arrayidx346 = (($321) + ($322)|0);
         $323 = HEAP8[$arrayidx346>>0]|0;
         $conv347 = $323&255;
         $324 = $cur;
         $325 = $k;
         $326 = $output_bytes;
         $sub348 = (($325) - ($326))|0;
         $arrayidx349 = (($324) + ($sub348)|0);
         $327 = HEAP8[$arrayidx349>>0]|0;
         $conv350 = $327&255;
         $328 = $prior;
         $329 = $k;
         $arrayidx351 = (($328) + ($329)|0);
         $330 = HEAP8[$arrayidx351>>0]|0;
         $conv352 = $330&255;
         $331 = $prior;
         $332 = $k;
         $333 = $output_bytes;
         $sub353 = (($332) - ($333))|0;
         $arrayidx354 = (($331) + ($sub353)|0);
         $334 = HEAP8[$arrayidx354>>0]|0;
         $conv355 = $334&255;
         $call356 = (__ZL11stbi__paethiii($conv350,$conv352,$conv355)|0);
         $add357 = (($conv347) + ($call356))|0;
         $and358 = $add357 & 255;
         $conv359 = $and358&255;
         $335 = $cur;
         $336 = $k;
         $arrayidx360 = (($335) + ($336)|0);
         HEAP8[$arrayidx360>>0] = $conv359;
         $337 = $k;
         $inc362 = (($337) + 1)|0;
         $k = $inc362;
        }
        $338 = $i;
        $dec365 = (($338) + -1)|0;
        $i = $dec365;
        $339 = $cur;
        $340 = $filter_bytes;
        $arrayidx366 = (($339) + ($340)|0);
        HEAP8[$arrayidx366>>0] = -1;
        $341 = $filter_bytes;
        $342 = $raw$addr;
        $add$ptr367 = (($342) + ($341)|0);
        $raw$addr = $add$ptr367;
        $343 = $output_bytes;
        $344 = $cur;
        $add$ptr368 = (($344) + ($343)|0);
        $cur = $add$ptr368;
        $345 = $output_bytes;
        $346 = $prior;
        $add$ptr369 = (($346) + ($345)|0);
        $prior = $add$ptr369;
       }
       break;
      }
      case 5:  {
       $347 = $x$addr;
       $sub372 = (($347) - 1)|0;
       $i = $sub372;
       while(1) {
        $348 = $i;
        $cmp374 = ($348>>>0)>=(1);
        if (!($cmp374)) {
         break L58;
        }
        $k = 0;
        while(1) {
         $349 = $k;
         $350 = $filter_bytes;
         $cmp377 = ($349|0)<($350|0);
         if (!($cmp377)) {
          break;
         }
         $351 = $raw$addr;
         $352 = $k;
         $arrayidx379 = (($351) + ($352)|0);
         $353 = HEAP8[$arrayidx379>>0]|0;
         $conv380 = $353&255;
         $354 = $cur;
         $355 = $k;
         $356 = $output_bytes;
         $sub381 = (($355) - ($356))|0;
         $arrayidx382 = (($354) + ($sub381)|0);
         $357 = HEAP8[$arrayidx382>>0]|0;
         $conv383 = $357&255;
         $shr384 = $conv383 >> 1;
         $add385 = (($conv380) + ($shr384))|0;
         $and386 = $add385 & 255;
         $conv387 = $and386&255;
         $358 = $cur;
         $359 = $k;
         $arrayidx388 = (($358) + ($359)|0);
         HEAP8[$arrayidx388>>0] = $conv387;
         $360 = $k;
         $inc390 = (($360) + 1)|0;
         $k = $inc390;
        }
        $361 = $i;
        $dec393 = (($361) + -1)|0;
        $i = $dec393;
        $362 = $cur;
        $363 = $filter_bytes;
        $arrayidx394 = (($362) + ($363)|0);
        HEAP8[$arrayidx394>>0] = -1;
        $364 = $filter_bytes;
        $365 = $raw$addr;
        $add$ptr395 = (($365) + ($364)|0);
        $raw$addr = $add$ptr395;
        $366 = $output_bytes;
        $367 = $cur;
        $add$ptr396 = (($367) + ($366)|0);
        $cur = $add$ptr396;
        $368 = $output_bytes;
        $369 = $prior;
        $add$ptr397 = (($369) + ($368)|0);
        $prior = $add$ptr397;
       }
       break;
      }
      case 6:  {
       $370 = $x$addr;
       $sub400 = (($370) - 1)|0;
       $i = $sub400;
       while(1) {
        $371 = $i;
        $cmp402 = ($371>>>0)>=(1);
        if (!($cmp402)) {
         break L58;
        }
        $k = 0;
        while(1) {
         $372 = $k;
         $373 = $filter_bytes;
         $cmp405 = ($372|0)<($373|0);
         if (!($cmp405)) {
          break;
         }
         $374 = $raw$addr;
         $375 = $k;
         $arrayidx407 = (($374) + ($375)|0);
         $376 = HEAP8[$arrayidx407>>0]|0;
         $conv408 = $376&255;
         $377 = $cur;
         $378 = $k;
         $379 = $output_bytes;
         $sub409 = (($378) - ($379))|0;
         $arrayidx410 = (($377) + ($sub409)|0);
         $380 = HEAP8[$arrayidx410>>0]|0;
         $conv411 = $380&255;
         $call412 = (__ZL11stbi__paethiii($conv411,0,0)|0);
         $add413 = (($conv408) + ($call412))|0;
         $and414 = $add413 & 255;
         $conv415 = $and414&255;
         $381 = $cur;
         $382 = $k;
         $arrayidx416 = (($381) + ($382)|0);
         HEAP8[$arrayidx416>>0] = $conv415;
         $383 = $k;
         $inc418 = (($383) + 1)|0;
         $k = $inc418;
        }
        $384 = $i;
        $dec421 = (($384) + -1)|0;
        $i = $dec421;
        $385 = $cur;
        $386 = $filter_bytes;
        $arrayidx422 = (($385) + ($386)|0);
        HEAP8[$arrayidx422>>0] = -1;
        $387 = $filter_bytes;
        $388 = $raw$addr;
        $add$ptr423 = (($388) + ($387)|0);
        $raw$addr = $add$ptr423;
        $389 = $output_bytes;
        $390 = $cur;
        $add$ptr424 = (($390) + ($389)|0);
        $cur = $add$ptr424;
        $391 = $output_bytes;
        $392 = $prior;
        $add$ptr425 = (($392) + ($391)|0);
        $prior = $add$ptr425;
       }
       break;
      }
      default: {
      }
      }
     } while(0);
     $393 = $depth$addr;
     $cmp428 = ($393|0)==(16);
     if ($cmp428) {
      $394 = $a$addr;
      $out430 = ((($394)) + 12|0);
      $395 = HEAP32[$out430>>2]|0;
      $396 = $stride;
      $397 = $j;
      $mul431 = Math_imul($396, $397)|0;
      $add$ptr432 = (($395) + ($mul431)|0);
      $cur = $add$ptr432;
      $i = 0;
      while(1) {
       $398 = $i;
       $399 = $x$addr;
       $cmp434 = ($398>>>0)<($399>>>0);
       if (!($cmp434)) {
        break L54;
       }
       $400 = $cur;
       $401 = $filter_bytes;
       $add436 = (($401) + 1)|0;
       $arrayidx437 = (($400) + ($add436)|0);
       HEAP8[$arrayidx437>>0] = -1;
       $402 = $i;
       $inc439 = (($402) + 1)|0;
       $i = $inc439;
       $403 = $output_bytes;
       $404 = $cur;
       $add$ptr440 = (($404) + ($403)|0);
       $cur = $add$ptr440;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 42) {
   label = 0;
   $135 = $width;
   $sub118 = (($135) - 1)|0;
   $136 = $filter_bytes;
   $mul119 = Math_imul($sub118, $136)|0;
   $nk = $mul119;
   $137 = $filter;
   L122: do {
    switch ($137|0) {
    case 0:  {
     $138 = $cur;
     $139 = $raw$addr;
     $140 = $nk;
     _memcpy(($138|0),($139|0),($140|0))|0;
     break;
    }
    case 1:  {
     $k = 0;
     while(1) {
      $141 = $k;
      $142 = $nk;
      $cmp123 = ($141|0)<($142|0);
      if (!($cmp123)) {
       break L122;
      }
      $143 = $raw$addr;
      $144 = $k;
      $arrayidx125 = (($143) + ($144)|0);
      $145 = HEAP8[$arrayidx125>>0]|0;
      $conv126 = $145&255;
      $146 = $cur;
      $147 = $k;
      $148 = $filter_bytes;
      $sub127 = (($147) - ($148))|0;
      $arrayidx128 = (($146) + ($sub127)|0);
      $149 = HEAP8[$arrayidx128>>0]|0;
      $conv129 = $149&255;
      $add130 = (($conv126) + ($conv129))|0;
      $and131 = $add130 & 255;
      $conv132 = $and131&255;
      $150 = $cur;
      $151 = $k;
      $arrayidx133 = (($150) + ($151)|0);
      HEAP8[$arrayidx133>>0] = $conv132;
      $152 = $k;
      $inc135 = (($152) + 1)|0;
      $k = $inc135;
     }
     break;
    }
    case 2:  {
     $k = 0;
     while(1) {
      $153 = $k;
      $154 = $nk;
      $cmp139 = ($153|0)<($154|0);
      if (!($cmp139)) {
       break L122;
      }
      $155 = $raw$addr;
      $156 = $k;
      $arrayidx141 = (($155) + ($156)|0);
      $157 = HEAP8[$arrayidx141>>0]|0;
      $conv142 = $157&255;
      $158 = $prior;
      $159 = $k;
      $arrayidx143 = (($158) + ($159)|0);
      $160 = HEAP8[$arrayidx143>>0]|0;
      $conv144 = $160&255;
      $add145 = (($conv142) + ($conv144))|0;
      $and146 = $add145 & 255;
      $conv147 = $and146&255;
      $161 = $cur;
      $162 = $k;
      $arrayidx148 = (($161) + ($162)|0);
      HEAP8[$arrayidx148>>0] = $conv147;
      $163 = $k;
      $inc150 = (($163) + 1)|0;
      $k = $inc150;
     }
     break;
    }
    case 3:  {
     $k = 0;
     while(1) {
      $164 = $k;
      $165 = $nk;
      $cmp154 = ($164|0)<($165|0);
      if (!($cmp154)) {
       break L122;
      }
      $166 = $raw$addr;
      $167 = $k;
      $arrayidx156 = (($166) + ($167)|0);
      $168 = HEAP8[$arrayidx156>>0]|0;
      $conv157 = $168&255;
      $169 = $prior;
      $170 = $k;
      $arrayidx158 = (($169) + ($170)|0);
      $171 = HEAP8[$arrayidx158>>0]|0;
      $conv159 = $171&255;
      $172 = $cur;
      $173 = $k;
      $174 = $filter_bytes;
      $sub160 = (($173) - ($174))|0;
      $arrayidx161 = (($172) + ($sub160)|0);
      $175 = HEAP8[$arrayidx161>>0]|0;
      $conv162 = $175&255;
      $add163 = (($conv159) + ($conv162))|0;
      $shr164 = $add163 >> 1;
      $add165 = (($conv157) + ($shr164))|0;
      $and166 = $add165 & 255;
      $conv167 = $and166&255;
      $176 = $cur;
      $177 = $k;
      $arrayidx168 = (($176) + ($177)|0);
      HEAP8[$arrayidx168>>0] = $conv167;
      $178 = $k;
      $inc170 = (($178) + 1)|0;
      $k = $inc170;
     }
     break;
    }
    case 4:  {
     $k = 0;
     while(1) {
      $179 = $k;
      $180 = $nk;
      $cmp174 = ($179|0)<($180|0);
      if (!($cmp174)) {
       break L122;
      }
      $181 = $raw$addr;
      $182 = $k;
      $arrayidx176 = (($181) + ($182)|0);
      $183 = HEAP8[$arrayidx176>>0]|0;
      $conv177 = $183&255;
      $184 = $cur;
      $185 = $k;
      $186 = $filter_bytes;
      $sub178 = (($185) - ($186))|0;
      $arrayidx179 = (($184) + ($sub178)|0);
      $187 = HEAP8[$arrayidx179>>0]|0;
      $conv180 = $187&255;
      $188 = $prior;
      $189 = $k;
      $arrayidx181 = (($188) + ($189)|0);
      $190 = HEAP8[$arrayidx181>>0]|0;
      $conv182 = $190&255;
      $191 = $prior;
      $192 = $k;
      $193 = $filter_bytes;
      $sub183 = (($192) - ($193))|0;
      $arrayidx184 = (($191) + ($sub183)|0);
      $194 = HEAP8[$arrayidx184>>0]|0;
      $conv185 = $194&255;
      $call186 = (__ZL11stbi__paethiii($conv180,$conv182,$conv185)|0);
      $add187 = (($conv177) + ($call186))|0;
      $and188 = $add187 & 255;
      $conv189 = $and188&255;
      $195 = $cur;
      $196 = $k;
      $arrayidx190 = (($195) + ($196)|0);
      HEAP8[$arrayidx190>>0] = $conv189;
      $197 = $k;
      $inc192 = (($197) + 1)|0;
      $k = $inc192;
     }
     break;
    }
    case 5:  {
     $k = 0;
     while(1) {
      $198 = $k;
      $199 = $nk;
      $cmp196 = ($198|0)<($199|0);
      if (!($cmp196)) {
       break L122;
      }
      $200 = $raw$addr;
      $201 = $k;
      $arrayidx198 = (($200) + ($201)|0);
      $202 = HEAP8[$arrayidx198>>0]|0;
      $conv199 = $202&255;
      $203 = $cur;
      $204 = $k;
      $205 = $filter_bytes;
      $sub200 = (($204) - ($205))|0;
      $arrayidx201 = (($203) + ($sub200)|0);
      $206 = HEAP8[$arrayidx201>>0]|0;
      $conv202 = $206&255;
      $shr203 = $conv202 >> 1;
      $add204 = (($conv199) + ($shr203))|0;
      $and205 = $add204 & 255;
      $conv206 = $and205&255;
      $207 = $cur;
      $208 = $k;
      $arrayidx207 = (($207) + ($208)|0);
      HEAP8[$arrayidx207>>0] = $conv206;
      $209 = $k;
      $inc209 = (($209) + 1)|0;
      $k = $inc209;
     }
     break;
    }
    case 6:  {
     $k = 0;
     while(1) {
      $210 = $k;
      $211 = $nk;
      $cmp213 = ($210|0)<($211|0);
      if (!($cmp213)) {
       break L122;
      }
      $212 = $raw$addr;
      $213 = $k;
      $arrayidx215 = (($212) + ($213)|0);
      $214 = HEAP8[$arrayidx215>>0]|0;
      $conv216 = $214&255;
      $215 = $cur;
      $216 = $k;
      $217 = $filter_bytes;
      $sub217 = (($216) - ($217))|0;
      $arrayidx218 = (($215) + ($sub217)|0);
      $218 = HEAP8[$arrayidx218>>0]|0;
      $conv219 = $218&255;
      $call220 = (__ZL11stbi__paethiii($conv219,0,0)|0);
      $add221 = (($conv216) + ($call220))|0;
      $and222 = $add221 & 255;
      $conv223 = $and222&255;
      $219 = $cur;
      $220 = $k;
      $arrayidx224 = (($219) + ($220)|0);
      HEAP8[$arrayidx224>>0] = $conv223;
      $221 = $k;
      $inc226 = (($221) + 1)|0;
      $k = $inc226;
     }
     break;
    }
    default: {
    }
    }
   } while(0);
   $222 = $nk;
   $223 = $raw$addr;
   $add$ptr229 = (($223) + ($222)|0);
   $raw$addr = $add$ptr229;
  }
  $405 = $j;
  $inc445 = (($405) + 1)|0;
  $j = $inc445;
 }
 if ((label|0) == 13) {
  $call31 = (__ZL9stbi__errPKc(8342)|0);
  $retval = $call31;
  $607 = $retval;
  STACKTOP = sp;return ($607|0);
 }
 else if ((label|0) == 16) {
  ___assert_fail((8357|0),(7702|0),4365,(8297|0));
  // unreachable;
 }
 else if ((label|0) == 64) {
  ___assert_fail((8383|0),(7702|0),4427,(8297|0));
  // unreachable;
 }
 else if ((label|0) == 113) {
  $406 = $depth$addr;
  $cmp447 = ($406|0)<(8);
  L152: do {
   if ($cmp447) {
    $j = 0;
    L154: while(1) {
     $407 = $j;
     $408 = $y$addr;
     $cmp450 = ($407>>>0)<($408>>>0);
     if (!($cmp450)) {
      break L152;
     }
     $409 = $a$addr;
     $out453 = ((($409)) + 12|0);
     $410 = HEAP32[$out453>>2]|0;
     $411 = $stride;
     $412 = $j;
     $mul454 = Math_imul($411, $412)|0;
     $add$ptr455 = (($410) + ($mul454)|0);
     $cur452 = $add$ptr455;
     $413 = $a$addr;
     $out456 = ((($413)) + 12|0);
     $414 = HEAP32[$out456>>2]|0;
     $415 = $stride;
     $416 = $j;
     $mul457 = Math_imul($415, $416)|0;
     $add$ptr458 = (($414) + ($mul457)|0);
     $417 = $x$addr;
     $418 = $out_n$addr;
     $mul459 = Math_imul($417, $418)|0;
     $add$ptr460 = (($add$ptr458) + ($mul459)|0);
     $419 = $img_width_bytes;
     $idx$neg461 = (0 - ($419))|0;
     $add$ptr462 = (($add$ptr460) + ($idx$neg461)|0);
     $in = $add$ptr462;
     $420 = $color$addr;
     $cmp463 = ($420|0)==(0);
     if ($cmp463) {
      $421 = $depth$addr;
      $arrayidx464 = (8106 + ($421)|0);
      $422 = HEAP8[$arrayidx464>>0]|0;
      $conv465 = $422&255;
      $cond466 = $conv465;
     } else {
      $cond466 = 1;
     }
     $conv467 = $cond466&255;
     $scale = $conv467;
     $423 = $depth$addr;
     $cmp468 = ($423|0)==(4);
     do {
      if ($cmp468) {
       $424 = $x$addr;
       $425 = $img_n;
       $mul470 = Math_imul($424, $425)|0;
       $k = $mul470;
       while(1) {
        $426 = $k;
        $cmp472 = ($426|0)>=(2);
        if (!($cmp472)) {
         break;
        }
        $427 = $scale;
        $conv474 = $427&255;
        $428 = $in;
        $429 = HEAP8[$428>>0]|0;
        $conv475 = $429&255;
        $shr476 = $conv475 >> 4;
        $mul477 = Math_imul($conv474, $shr476)|0;
        $conv478 = $mul477&255;
        $430 = $cur452;
        $incdec$ptr479 = ((($430)) + 1|0);
        $cur452 = $incdec$ptr479;
        HEAP8[$430>>0] = $conv478;
        $431 = $scale;
        $conv480 = $431&255;
        $432 = $in;
        $433 = HEAP8[$432>>0]|0;
        $conv481 = $433&255;
        $and482 = $conv481 & 15;
        $mul483 = Math_imul($conv480, $and482)|0;
        $conv484 = $mul483&255;
        $434 = $cur452;
        $incdec$ptr485 = ((($434)) + 1|0);
        $cur452 = $incdec$ptr485;
        HEAP8[$434>>0] = $conv484;
        $435 = $k;
        $sub487 = (($435) - 2)|0;
        $k = $sub487;
        $436 = $in;
        $incdec$ptr488 = ((($436)) + 1|0);
        $in = $incdec$ptr488;
       }
       $437 = $k;
       $cmp490 = ($437|0)>(0);
       if ($cmp490) {
        $438 = $scale;
        $conv492 = $438&255;
        $439 = $in;
        $440 = HEAP8[$439>>0]|0;
        $conv493 = $440&255;
        $shr494 = $conv493 >> 4;
        $mul495 = Math_imul($conv492, $shr494)|0;
        $conv496 = $mul495&255;
        $441 = $cur452;
        $incdec$ptr497 = ((($441)) + 1|0);
        $cur452 = $incdec$ptr497;
        HEAP8[$441>>0] = $conv496;
       }
      } else {
       $442 = $depth$addr;
       $cmp500 = ($442|0)==(2);
       if ($cmp500) {
        $443 = $x$addr;
        $444 = $img_n;
        $mul502 = Math_imul($443, $444)|0;
        $k = $mul502;
        while(1) {
         $445 = $k;
         $cmp504 = ($445|0)>=(4);
         if (!($cmp504)) {
          break;
         }
         $446 = $scale;
         $conv506 = $446&255;
         $447 = $in;
         $448 = HEAP8[$447>>0]|0;
         $conv507 = $448&255;
         $shr508 = $conv507 >> 6;
         $mul509 = Math_imul($conv506, $shr508)|0;
         $conv510 = $mul509&255;
         $449 = $cur452;
         $incdec$ptr511 = ((($449)) + 1|0);
         $cur452 = $incdec$ptr511;
         HEAP8[$449>>0] = $conv510;
         $450 = $scale;
         $conv512 = $450&255;
         $451 = $in;
         $452 = HEAP8[$451>>0]|0;
         $conv513 = $452&255;
         $shr514 = $conv513 >> 4;
         $and515 = $shr514 & 3;
         $mul516 = Math_imul($conv512, $and515)|0;
         $conv517 = $mul516&255;
         $453 = $cur452;
         $incdec$ptr518 = ((($453)) + 1|0);
         $cur452 = $incdec$ptr518;
         HEAP8[$453>>0] = $conv517;
         $454 = $scale;
         $conv519 = $454&255;
         $455 = $in;
         $456 = HEAP8[$455>>0]|0;
         $conv520 = $456&255;
         $shr521 = $conv520 >> 2;
         $and522 = $shr521 & 3;
         $mul523 = Math_imul($conv519, $and522)|0;
         $conv524 = $mul523&255;
         $457 = $cur452;
         $incdec$ptr525 = ((($457)) + 1|0);
         $cur452 = $incdec$ptr525;
         HEAP8[$457>>0] = $conv524;
         $458 = $scale;
         $conv526 = $458&255;
         $459 = $in;
         $460 = HEAP8[$459>>0]|0;
         $conv527 = $460&255;
         $and528 = $conv527 & 3;
         $mul529 = Math_imul($conv526, $and528)|0;
         $conv530 = $mul529&255;
         $461 = $cur452;
         $incdec$ptr531 = ((($461)) + 1|0);
         $cur452 = $incdec$ptr531;
         HEAP8[$461>>0] = $conv530;
         $462 = $k;
         $sub533 = (($462) - 4)|0;
         $k = $sub533;
         $463 = $in;
         $incdec$ptr534 = ((($463)) + 1|0);
         $in = $incdec$ptr534;
        }
        $464 = $k;
        $cmp536 = ($464|0)>(0);
        if ($cmp536) {
         $465 = $scale;
         $conv538 = $465&255;
         $466 = $in;
         $467 = HEAP8[$466>>0]|0;
         $conv539 = $467&255;
         $shr540 = $conv539 >> 6;
         $mul541 = Math_imul($conv538, $shr540)|0;
         $conv542 = $mul541&255;
         $468 = $cur452;
         $incdec$ptr543 = ((($468)) + 1|0);
         $cur452 = $incdec$ptr543;
         HEAP8[$468>>0] = $conv542;
        }
        $469 = $k;
        $cmp545 = ($469|0)>(1);
        if ($cmp545) {
         $470 = $scale;
         $conv547 = $470&255;
         $471 = $in;
         $472 = HEAP8[$471>>0]|0;
         $conv548 = $472&255;
         $shr549 = $conv548 >> 4;
         $and550 = $shr549 & 3;
         $mul551 = Math_imul($conv547, $and550)|0;
         $conv552 = $mul551&255;
         $473 = $cur452;
         $incdec$ptr553 = ((($473)) + 1|0);
         $cur452 = $incdec$ptr553;
         HEAP8[$473>>0] = $conv552;
        }
        $474 = $k;
        $cmp555 = ($474|0)>(2);
        if (!($cmp555)) {
         break;
        }
        $475 = $scale;
        $conv557 = $475&255;
        $476 = $in;
        $477 = HEAP8[$476>>0]|0;
        $conv558 = $477&255;
        $shr559 = $conv558 >> 2;
        $and560 = $shr559 & 3;
        $mul561 = Math_imul($conv557, $and560)|0;
        $conv562 = $mul561&255;
        $478 = $cur452;
        $incdec$ptr563 = ((($478)) + 1|0);
        $cur452 = $incdec$ptr563;
        HEAP8[$478>>0] = $conv562;
        break;
       }
       $479 = $depth$addr;
       $cmp566 = ($479|0)==(1);
       if ($cmp566) {
        $480 = $x$addr;
        $481 = $img_n;
        $mul568 = Math_imul($480, $481)|0;
        $k = $mul568;
        while(1) {
         $482 = $k;
         $cmp570 = ($482|0)>=(8);
         if (!($cmp570)) {
          break;
         }
         $483 = $scale;
         $conv572 = $483&255;
         $484 = $in;
         $485 = HEAP8[$484>>0]|0;
         $conv573 = $485&255;
         $shr574 = $conv573 >> 7;
         $mul575 = Math_imul($conv572, $shr574)|0;
         $conv576 = $mul575&255;
         $486 = $cur452;
         $incdec$ptr577 = ((($486)) + 1|0);
         $cur452 = $incdec$ptr577;
         HEAP8[$486>>0] = $conv576;
         $487 = $scale;
         $conv578 = $487&255;
         $488 = $in;
         $489 = HEAP8[$488>>0]|0;
         $conv579 = $489&255;
         $shr580 = $conv579 >> 6;
         $and581 = $shr580 & 1;
         $mul582 = Math_imul($conv578, $and581)|0;
         $conv583 = $mul582&255;
         $490 = $cur452;
         $incdec$ptr584 = ((($490)) + 1|0);
         $cur452 = $incdec$ptr584;
         HEAP8[$490>>0] = $conv583;
         $491 = $scale;
         $conv585 = $491&255;
         $492 = $in;
         $493 = HEAP8[$492>>0]|0;
         $conv586 = $493&255;
         $shr587 = $conv586 >> 5;
         $and588 = $shr587 & 1;
         $mul589 = Math_imul($conv585, $and588)|0;
         $conv590 = $mul589&255;
         $494 = $cur452;
         $incdec$ptr591 = ((($494)) + 1|0);
         $cur452 = $incdec$ptr591;
         HEAP8[$494>>0] = $conv590;
         $495 = $scale;
         $conv592 = $495&255;
         $496 = $in;
         $497 = HEAP8[$496>>0]|0;
         $conv593 = $497&255;
         $shr594 = $conv593 >> 4;
         $and595 = $shr594 & 1;
         $mul596 = Math_imul($conv592, $and595)|0;
         $conv597 = $mul596&255;
         $498 = $cur452;
         $incdec$ptr598 = ((($498)) + 1|0);
         $cur452 = $incdec$ptr598;
         HEAP8[$498>>0] = $conv597;
         $499 = $scale;
         $conv599 = $499&255;
         $500 = $in;
         $501 = HEAP8[$500>>0]|0;
         $conv600 = $501&255;
         $shr601 = $conv600 >> 3;
         $and602 = $shr601 & 1;
         $mul603 = Math_imul($conv599, $and602)|0;
         $conv604 = $mul603&255;
         $502 = $cur452;
         $incdec$ptr605 = ((($502)) + 1|0);
         $cur452 = $incdec$ptr605;
         HEAP8[$502>>0] = $conv604;
         $503 = $scale;
         $conv606 = $503&255;
         $504 = $in;
         $505 = HEAP8[$504>>0]|0;
         $conv607 = $505&255;
         $shr608 = $conv607 >> 2;
         $and609 = $shr608 & 1;
         $mul610 = Math_imul($conv606, $and609)|0;
         $conv611 = $mul610&255;
         $506 = $cur452;
         $incdec$ptr612 = ((($506)) + 1|0);
         $cur452 = $incdec$ptr612;
         HEAP8[$506>>0] = $conv611;
         $507 = $scale;
         $conv613 = $507&255;
         $508 = $in;
         $509 = HEAP8[$508>>0]|0;
         $conv614 = $509&255;
         $shr615 = $conv614 >> 1;
         $and616 = $shr615 & 1;
         $mul617 = Math_imul($conv613, $and616)|0;
         $conv618 = $mul617&255;
         $510 = $cur452;
         $incdec$ptr619 = ((($510)) + 1|0);
         $cur452 = $incdec$ptr619;
         HEAP8[$510>>0] = $conv618;
         $511 = $scale;
         $conv620 = $511&255;
         $512 = $in;
         $513 = HEAP8[$512>>0]|0;
         $conv621 = $513&255;
         $and622 = $conv621 & 1;
         $mul623 = Math_imul($conv620, $and622)|0;
         $conv624 = $mul623&255;
         $514 = $cur452;
         $incdec$ptr625 = ((($514)) + 1|0);
         $cur452 = $incdec$ptr625;
         HEAP8[$514>>0] = $conv624;
         $515 = $k;
         $sub627 = (($515) - 8)|0;
         $k = $sub627;
         $516 = $in;
         $incdec$ptr628 = ((($516)) + 1|0);
         $in = $incdec$ptr628;
        }
        $517 = $k;
        $cmp630 = ($517|0)>(0);
        if ($cmp630) {
         $518 = $scale;
         $conv632 = $518&255;
         $519 = $in;
         $520 = HEAP8[$519>>0]|0;
         $conv633 = $520&255;
         $shr634 = $conv633 >> 7;
         $mul635 = Math_imul($conv632, $shr634)|0;
         $conv636 = $mul635&255;
         $521 = $cur452;
         $incdec$ptr637 = ((($521)) + 1|0);
         $cur452 = $incdec$ptr637;
         HEAP8[$521>>0] = $conv636;
        }
        $522 = $k;
        $cmp639 = ($522|0)>(1);
        if ($cmp639) {
         $523 = $scale;
         $conv641 = $523&255;
         $524 = $in;
         $525 = HEAP8[$524>>0]|0;
         $conv642 = $525&255;
         $shr643 = $conv642 >> 6;
         $and644 = $shr643 & 1;
         $mul645 = Math_imul($conv641, $and644)|0;
         $conv646 = $mul645&255;
         $526 = $cur452;
         $incdec$ptr647 = ((($526)) + 1|0);
         $cur452 = $incdec$ptr647;
         HEAP8[$526>>0] = $conv646;
        }
        $527 = $k;
        $cmp649 = ($527|0)>(2);
        if ($cmp649) {
         $528 = $scale;
         $conv651 = $528&255;
         $529 = $in;
         $530 = HEAP8[$529>>0]|0;
         $conv652 = $530&255;
         $shr653 = $conv652 >> 5;
         $and654 = $shr653 & 1;
         $mul655 = Math_imul($conv651, $and654)|0;
         $conv656 = $mul655&255;
         $531 = $cur452;
         $incdec$ptr657 = ((($531)) + 1|0);
         $cur452 = $incdec$ptr657;
         HEAP8[$531>>0] = $conv656;
        }
        $532 = $k;
        $cmp659 = ($532|0)>(3);
        if ($cmp659) {
         $533 = $scale;
         $conv661 = $533&255;
         $534 = $in;
         $535 = HEAP8[$534>>0]|0;
         $conv662 = $535&255;
         $shr663 = $conv662 >> 4;
         $and664 = $shr663 & 1;
         $mul665 = Math_imul($conv661, $and664)|0;
         $conv666 = $mul665&255;
         $536 = $cur452;
         $incdec$ptr667 = ((($536)) + 1|0);
         $cur452 = $incdec$ptr667;
         HEAP8[$536>>0] = $conv666;
        }
        $537 = $k;
        $cmp669 = ($537|0)>(4);
        if ($cmp669) {
         $538 = $scale;
         $conv671 = $538&255;
         $539 = $in;
         $540 = HEAP8[$539>>0]|0;
         $conv672 = $540&255;
         $shr673 = $conv672 >> 3;
         $and674 = $shr673 & 1;
         $mul675 = Math_imul($conv671, $and674)|0;
         $conv676 = $mul675&255;
         $541 = $cur452;
         $incdec$ptr677 = ((($541)) + 1|0);
         $cur452 = $incdec$ptr677;
         HEAP8[$541>>0] = $conv676;
        }
        $542 = $k;
        $cmp679 = ($542|0)>(5);
        if ($cmp679) {
         $543 = $scale;
         $conv681 = $543&255;
         $544 = $in;
         $545 = HEAP8[$544>>0]|0;
         $conv682 = $545&255;
         $shr683 = $conv682 >> 2;
         $and684 = $shr683 & 1;
         $mul685 = Math_imul($conv681, $and684)|0;
         $conv686 = $mul685&255;
         $546 = $cur452;
         $incdec$ptr687 = ((($546)) + 1|0);
         $cur452 = $incdec$ptr687;
         HEAP8[$546>>0] = $conv686;
        }
        $547 = $k;
        $cmp689 = ($547|0)>(6);
        if (!($cmp689)) {
         break;
        }
        $548 = $scale;
        $conv691 = $548&255;
        $549 = $in;
        $550 = HEAP8[$549>>0]|0;
        $conv692 = $550&255;
        $shr693 = $conv692 >> 1;
        $and694 = $shr693 & 1;
        $mul695 = Math_imul($conv691, $and694)|0;
        $conv696 = $mul695&255;
        $551 = $cur452;
        $incdec$ptr697 = ((($551)) + 1|0);
        $cur452 = $incdec$ptr697;
        HEAP8[$551>>0] = $conv696;
       }
      }
     } while(0);
     $552 = $img_n;
     $553 = $out_n$addr;
     $cmp702 = ($552|0)!=($553|0);
     L207: do {
      if ($cmp702) {
       $554 = $a$addr;
       $out704 = ((($554)) + 12|0);
       $555 = HEAP32[$out704>>2]|0;
       $556 = $stride;
       $557 = $j;
       $mul705 = Math_imul($556, $557)|0;
       $add$ptr706 = (($555) + ($mul705)|0);
       $cur452 = $add$ptr706;
       $558 = $img_n;
       $cmp707 = ($558|0)==(1);
       if ($cmp707) {
        $559 = $x$addr;
        $sub709 = (($559) - 1)|0;
        $q = $sub709;
        while(1) {
         $560 = $q;
         $cmp711 = ($560|0)>=(0);
         if (!($cmp711)) {
          break L207;
         }
         $561 = $cur452;
         $562 = $q;
         $mul713 = $562<<1;
         $add714 = (($mul713) + 1)|0;
         $arrayidx715 = (($561) + ($add714)|0);
         HEAP8[$arrayidx715>>0] = -1;
         $563 = $cur452;
         $564 = $q;
         $arrayidx716 = (($563) + ($564)|0);
         $565 = HEAP8[$arrayidx716>>0]|0;
         $566 = $cur452;
         $567 = $q;
         $mul717 = $567<<1;
         $add718 = (($mul717) + 0)|0;
         $arrayidx719 = (($566) + ($add718)|0);
         HEAP8[$arrayidx719>>0] = $565;
         $568 = $q;
         $dec721 = (($568) + -1)|0;
         $q = $dec721;
        }
       }
       $569 = $img_n;
       $cmp724 = ($569|0)==(3);
       if (!($cmp724)) {
        break L154;
       }
       $570 = $x$addr;
       $sub727 = (($570) - 1)|0;
       $q = $sub727;
       while(1) {
        $571 = $q;
        $cmp729 = ($571|0)>=(0);
        if (!($cmp729)) {
         break L207;
        }
        $572 = $cur452;
        $573 = $q;
        $mul731 = $573<<2;
        $add732 = (($mul731) + 3)|0;
        $arrayidx733 = (($572) + ($add732)|0);
        HEAP8[$arrayidx733>>0] = -1;
        $574 = $cur452;
        $575 = $q;
        $mul734 = ($575*3)|0;
        $add735 = (($mul734) + 2)|0;
        $arrayidx736 = (($574) + ($add735)|0);
        $576 = HEAP8[$arrayidx736>>0]|0;
        $577 = $cur452;
        $578 = $q;
        $mul737 = $578<<2;
        $add738 = (($mul737) + 2)|0;
        $arrayidx739 = (($577) + ($add738)|0);
        HEAP8[$arrayidx739>>0] = $576;
        $579 = $cur452;
        $580 = $q;
        $mul740 = ($580*3)|0;
        $add741 = (($mul740) + 1)|0;
        $arrayidx742 = (($579) + ($add741)|0);
        $581 = HEAP8[$arrayidx742>>0]|0;
        $582 = $cur452;
        $583 = $q;
        $mul743 = $583<<2;
        $add744 = (($mul743) + 1)|0;
        $arrayidx745 = (($582) + ($add744)|0);
        HEAP8[$arrayidx745>>0] = $581;
        $584 = $cur452;
        $585 = $q;
        $mul746 = ($585*3)|0;
        $add747 = (($mul746) + 0)|0;
        $arrayidx748 = (($584) + ($add747)|0);
        $586 = HEAP8[$arrayidx748>>0]|0;
        $587 = $cur452;
        $588 = $q;
        $mul749 = $588<<2;
        $add750 = (($mul749) + 0)|0;
        $arrayidx751 = (($587) + ($add750)|0);
        HEAP8[$arrayidx751>>0] = $586;
        $589 = $q;
        $dec753 = (($589) + -1)|0;
        $q = $dec753;
       }
      }
     } while(0);
     $590 = $j;
     $inc758 = (($590) + 1)|0;
     $j = $inc758;
    }
    ___assert_fail((8400|0),(7702|0),4516,(8297|0));
    // unreachable;
   } else {
    $591 = $depth$addr;
    $cmp761 = ($591|0)==(16);
    if ($cmp761) {
     $592 = $a$addr;
     $out764 = ((($592)) + 12|0);
     $593 = HEAP32[$out764>>2]|0;
     $cur763 = $593;
     $594 = $cur763;
     $cur16 = $594;
     $i = 0;
     while(1) {
      $595 = $i;
      $596 = $x$addr;
      $597 = $y$addr;
      $mul766 = Math_imul($596, $597)|0;
      $598 = $out_n$addr;
      $mul767 = Math_imul($mul766, $598)|0;
      $cmp768 = ($595>>>0)<($mul767>>>0);
      if (!($cmp768)) {
       break L152;
      }
      $599 = $cur763;
      $600 = HEAP8[$599>>0]|0;
      $conv771 = $600&255;
      $shl = $conv771 << 8;
      $601 = $cur763;
      $arrayidx772 = ((($601)) + 1|0);
      $602 = HEAP8[$arrayidx772>>0]|0;
      $conv773 = $602&255;
      $or = $shl | $conv773;
      $conv774 = $or&65535;
      $603 = $cur16;
      HEAP16[$603>>1] = $conv774;
      $604 = $i;
      $inc776 = (($604) + 1)|0;
      $i = $inc776;
      $605 = $cur16;
      $incdec$ptr777 = ((($605)) + 2|0);
      $cur16 = $incdec$ptr777;
      $606 = $cur763;
      $add$ptr778 = ((($606)) + 2|0);
      $cur763 = $add$ptr778;
     }
    }
   }
  } while(0);
  $retval = 1;
  $607 = $retval;
  STACKTOP = sp;return ($607|0);
 }
 return (0)|0;
}
function __ZL11stbi__paethiii($a,$b,$c) {
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a$addr = 0;
 var $add = 0, $b$addr = 0, $c$addr = 0, $call = 0, $call3 = 0, $call5 = 0, $cmp = 0, $cmp6 = 0, $cmp7 = 0, $p = 0, $pa = 0, $pb = 0, $pc = 0, $retval = 0, $sub = 0, $sub1 = 0, $sub2 = 0, $sub4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $a$addr = $a;
 $b$addr = $b;
 $c$addr = $c;
 $0 = $a$addr;
 $1 = $b$addr;
 $add = (($0) + ($1))|0;
 $2 = $c$addr;
 $sub = (($add) - ($2))|0;
 $p = $sub;
 $3 = $p;
 $4 = $a$addr;
 $sub1 = (($3) - ($4))|0;
 $call = (Math_abs(($sub1|0))|0);
 $pa = $call;
 $5 = $p;
 $6 = $b$addr;
 $sub2 = (($5) - ($6))|0;
 $call3 = (Math_abs(($sub2|0))|0);
 $pb = $call3;
 $7 = $p;
 $8 = $c$addr;
 $sub4 = (($7) - ($8))|0;
 $call5 = (Math_abs(($sub4|0))|0);
 $pc = $call5;
 $9 = $pa;
 $10 = $pb;
 $cmp = ($9|0)<=($10|0);
 if ($cmp) {
  $11 = $pa;
  $12 = $pc;
  $cmp6 = ($11|0)<=($12|0);
  if ($cmp6) {
   $13 = $a$addr;
   $retval = $13;
   $18 = $retval;
   STACKTOP = sp;return ($18|0);
  }
 }
 $14 = $pb;
 $15 = $pc;
 $cmp7 = ($14|0)<=($15|0);
 if ($cmp7) {
  $16 = $b$addr;
  $retval = $16;
  $18 = $retval;
  STACKTOP = sp;return ($18|0);
 } else {
  $17 = $c$addr;
  $retval = $17;
  $18 = $retval;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function __ZL13stbi__do_zlibP10stbi__zbufPciii($a,$obuf,$olen,$exp,$parse_header) {
 $a = $a|0;
 $obuf = $obuf|0;
 $olen = $olen|0;
 $exp = $exp|0;
 $parse_header = $parse_header|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a$addr = 0, $add$ptr = 0, $call = 0, $exp$addr = 0, $obuf$addr = 0, $olen$addr = 0, $parse_header$addr = 0, $z_expandable = 0, $zout = 0;
 var $zout_end = 0, $zout_start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $a$addr = $a;
 $obuf$addr = $obuf;
 $olen$addr = $olen;
 $exp$addr = $exp;
 $parse_header$addr = $parse_header;
 $0 = $obuf$addr;
 $1 = $a$addr;
 $zout_start = ((($1)) + 20|0);
 HEAP32[$zout_start>>2] = $0;
 $2 = $obuf$addr;
 $3 = $a$addr;
 $zout = ((($3)) + 16|0);
 HEAP32[$zout>>2] = $2;
 $4 = $obuf$addr;
 $5 = $olen$addr;
 $add$ptr = (($4) + ($5)|0);
 $6 = $a$addr;
 $zout_end = ((($6)) + 24|0);
 HEAP32[$zout_end>>2] = $add$ptr;
 $7 = $exp$addr;
 $8 = $a$addr;
 $z_expandable = ((($8)) + 28|0);
 HEAP32[$z_expandable>>2] = $7;
 $9 = $a$addr;
 $10 = $parse_header$addr;
 $call = (__ZL16stbi__parse_zlibP10stbi__zbufi($9,$10)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZL16stbi__parse_zlibP10stbi__zbufi($a,$parse_header) {
 $a = $a|0;
 $parse_header = $parse_header|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a$addr = 0, $call = 0, $call16 = 0, $call20 = 0, $call25 = 0;
 var $call30 = 0, $call4 = 0, $call5 = 0, $call7 = 0, $cmp = 0, $cmp11 = 0, $cmp14 = 0, $code_buffer = 0, $final = 0, $lnot = 0, $num_bits = 0, $parse_header$addr = 0, $retval = 0, $tobool = 0, $tobool1 = 0, $tobool17 = 0, $tobool21 = 0, $tobool26 = 0, $tobool31 = 0, $tobool36 = 0;
 var $tobool8 = 0, $type = 0, $z_distance = 0, $z_length = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $a$addr = $a;
 $parse_header$addr = $parse_header;
 $0 = $parse_header$addr;
 $tobool = ($0|0)!=(0);
 if ($tobool) {
  $1 = $a$addr;
  $call = (__ZL23stbi__parse_zlib_headerP10stbi__zbuf($1)|0);
  $tobool1 = ($call|0)!=(0);
  if ($tobool1) {
   label = 4;
  } else {
   $retval = 0;
  }
 } else {
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $2 = $a$addr;
   $num_bits = ((($2)) + 8|0);
   HEAP32[$num_bits>>2] = 0;
   $3 = $a$addr;
   $code_buffer = ((($3)) + 12|0);
   HEAP32[$code_buffer>>2] = 0;
   while(1) {
    $4 = $a$addr;
    $call4 = (__ZL14stbi__zreceiveP10stbi__zbufi($4,1)|0);
    $final = $call4;
    $5 = $a$addr;
    $call5 = (__ZL14stbi__zreceiveP10stbi__zbufi($5,2)|0);
    $type = $call5;
    $6 = $type;
    $cmp = ($6|0)==(0);
    if ($cmp) {
     $7 = $a$addr;
     $call7 = (__ZL30stbi__parse_uncompressed_blockP10stbi__zbuf($7)|0);
     $tobool8 = ($call7|0)!=(0);
     if (!($tobool8)) {
      label = 7;
      break;
     }
    } else {
     $8 = $type;
     $cmp11 = ($8|0)==(3);
     if ($cmp11) {
      label = 9;
      break;
     }
     $9 = $type;
     $cmp14 = ($9|0)==(1);
     $10 = $a$addr;
     if ($cmp14) {
      $z_length = ((($10)) + 32|0);
      $call16 = (__ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi($z_length,352,288)|0);
      $tobool17 = ($call16|0)!=(0);
      if (!($tobool17)) {
       label = 12;
       break;
      }
      $11 = $a$addr;
      $z_distance = ((($11)) + 2052|0);
      $call20 = (__ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi($z_distance,640,32)|0);
      $tobool21 = ($call20|0)!=(0);
      if (!($tobool21)) {
       label = 14;
       break;
      }
     } else {
      $call25 = (__ZL27stbi__compute_huffman_codesP10stbi__zbuf($10)|0);
      $tobool26 = ($call25|0)!=(0);
      if (!($tobool26)) {
       label = 16;
       break;
      }
     }
     $12 = $a$addr;
     $call30 = (__ZL25stbi__parse_huffman_blockP10stbi__zbuf($12)|0);
     $tobool31 = ($call30|0)!=(0);
     if (!($tobool31)) {
      label = 18;
      break;
     }
    }
    $13 = $final;
    $tobool36 = ($13|0)!=(0);
    $lnot = $tobool36 ^ 1;
    if (!($lnot)) {
     label = 20;
     break;
    }
   }
   if ((label|0) == 7) {
    $retval = 0;
    break;
   }
   else if ((label|0) == 9) {
    $retval = 0;
    break;
   }
   else if ((label|0) == 12) {
    $retval = 0;
    break;
   }
   else if ((label|0) == 14) {
    $retval = 0;
    break;
   }
   else if ((label|0) == 16) {
    $retval = 0;
    break;
   }
   else if ((label|0) == 18) {
    $retval = 0;
    break;
   }
   else if ((label|0) == 20) {
    $retval = 1;
    break;
   }
  }
 } while(0);
 $14 = $retval;
 STACKTOP = sp;return ($14|0);
}
function __ZL23stbi__parse_zlib_headerP10stbi__zbuf($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $a$addr = 0, $add = 0, $and = 0, $and4 = 0, $call = 0, $call1 = 0, $call10 = 0, $call3 = 0, $call6 = 0, $cm = 0, $cmf = 0, $cmp = 0;
 var $cmp8 = 0, $conv = 0, $conv2 = 0, $flg = 0, $mul = 0, $rem = 0, $retval = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $a$addr = $a;
 $0 = $a$addr;
 $call = (__ZL11stbi__zget8P10stbi__zbuf($0)|0);
 $conv = $call&255;
 $cmf = $conv;
 $1 = $cmf;
 $and = $1 & 15;
 $cm = $and;
 $2 = $a$addr;
 $call1 = (__ZL11stbi__zget8P10stbi__zbuf($2)|0);
 $conv2 = $call1&255;
 $flg = $conv2;
 $3 = $cmf;
 $mul = $3<<8;
 $4 = $flg;
 $add = (($mul) + ($4))|0;
 $rem = (($add|0) % 31)&-1;
 $cmp = ($rem|0)!=(0);
 if ($cmp) {
  $call3 = (__ZL9stbi__errPKc(8726)|0);
  $retval = $call3;
  $7 = $retval;
  STACKTOP = sp;return ($7|0);
 }
 $5 = $flg;
 $and4 = $5 & 32;
 $tobool = ($and4|0)!=(0);
 if ($tobool) {
  $call6 = (__ZL9stbi__errPKc(8742)|0);
  $retval = $call6;
  $7 = $retval;
  STACKTOP = sp;return ($7|0);
 }
 $6 = $cm;
 $cmp8 = ($6|0)!=(8);
 if ($cmp8) {
  $call10 = (__ZL9stbi__errPKc(8757)|0);
  $retval = $call10;
  $7 = $retval;
  STACKTOP = sp;return ($7|0);
 } else {
  $retval = 1;
  $7 = $retval;
  STACKTOP = sp;return ($7|0);
 }
 return (0)|0;
}
function __ZL14stbi__zreceiveP10stbi__zbufi($z,$n) {
 $z = $z|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $cmp = 0, $code_buffer = 0, $code_buffer1 = 0, $k = 0, $n$addr = 0;
 var $num_bits = 0, $num_bits2 = 0, $shl = 0, $shr = 0, $sub = 0, $sub3 = 0, $z$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $z$addr = $z;
 $n$addr = $n;
 $0 = $z$addr;
 $num_bits = ((($0)) + 8|0);
 $1 = HEAP32[$num_bits>>2]|0;
 $2 = $n$addr;
 $cmp = ($1|0)<($2|0);
 if ($cmp) {
  $3 = $z$addr;
  __ZL15stbi__fill_bitsP10stbi__zbuf($3);
 }
 $4 = $z$addr;
 $code_buffer = ((($4)) + 12|0);
 $5 = HEAP32[$code_buffer>>2]|0;
 $6 = $n$addr;
 $shl = 1 << $6;
 $sub = (($shl) - 1)|0;
 $and = $5 & $sub;
 $k = $and;
 $7 = $n$addr;
 $8 = $z$addr;
 $code_buffer1 = ((($8)) + 12|0);
 $9 = HEAP32[$code_buffer1>>2]|0;
 $shr = $9 >>> $7;
 HEAP32[$code_buffer1>>2] = $shr;
 $10 = $n$addr;
 $11 = $z$addr;
 $num_bits2 = ((($11)) + 8|0);
 $12 = HEAP32[$num_bits2>>2]|0;
 $sub3 = (($12) - ($10))|0;
 HEAP32[$num_bits2>>2] = $sub3;
 $13 = $k;
 STACKTOP = sp;return ($13|0);
}
function __ZL30stbi__parse_uncompressed_blockP10stbi__zbuf($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a$addr = 0, $add = 0, $add$ptr = 0, $add$ptr34 = 0, $add$ptr46 = 0, $add$ptr48 = 0, $add25 = 0, $and = 0, $and2 = 0, $and4 = 0;
 var $arrayidx = 0, $arrayidx14 = 0, $arrayidx16 = 0, $arrayidx20 = 0, $arrayidx23 = 0, $call12 = 0, $call28 = 0, $call32 = 0, $call38 = 0, $cmp = 0, $cmp10 = 0, $cmp26 = 0, $cmp30 = 0, $cmp35 = 0, $cmp8 = 0, $code_buffer = 0, $code_buffer5 = 0, $conv = 0, $conv17 = 0, $conv19 = 0;
 var $conv21 = 0, $conv24 = 0, $header = 0, $inc = 0, $inc13 = 0, $k = 0, $len = 0, $mul = 0, $mul22 = 0, $nlen = 0, $num_bits = 0, $num_bits1 = 0, $num_bits3 = 0, $num_bits6 = 0, $num_bits7 = 0, $retval = 0, $shr = 0, $sub = 0, $tobool = 0, $tobool39 = 0;
 var $xor = 0, $zbuffer_end = 0, $zout = 0, $zout37 = 0, $zout43 = 0, $zout47 = 0, $zout_end = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $header = sp + 20|0;
 $a$addr = $a;
 $0 = $a$addr;
 $num_bits = ((($0)) + 8|0);
 $1 = HEAP32[$num_bits>>2]|0;
 $and = $1 & 7;
 $tobool = ($and|0)!=(0);
 if ($tobool) {
  $2 = $a$addr;
  $3 = $a$addr;
  $num_bits1 = ((($3)) + 8|0);
  $4 = HEAP32[$num_bits1>>2]|0;
  $and2 = $4 & 7;
  (__ZL14stbi__zreceiveP10stbi__zbufi($2,$and2)|0);
 }
 $k = 0;
 while(1) {
  $5 = $a$addr;
  $num_bits3 = ((($5)) + 8|0);
  $6 = HEAP32[$num_bits3>>2]|0;
  $cmp = ($6|0)>(0);
  $7 = $a$addr;
  if (!($cmp)) {
   break;
  }
  $code_buffer = ((($7)) + 12|0);
  $8 = HEAP32[$code_buffer>>2]|0;
  $and4 = $8 & 255;
  $conv = $and4&255;
  $9 = $k;
  $inc = (($9) + 1)|0;
  $k = $inc;
  $arrayidx = (($header) + ($9)|0);
  HEAP8[$arrayidx>>0] = $conv;
  $10 = $a$addr;
  $code_buffer5 = ((($10)) + 12|0);
  $11 = HEAP32[$code_buffer5>>2]|0;
  $shr = $11 >>> 8;
  HEAP32[$code_buffer5>>2] = $shr;
  $12 = $a$addr;
  $num_bits6 = ((($12)) + 8|0);
  $13 = HEAP32[$num_bits6>>2]|0;
  $sub = (($13) - 8)|0;
  HEAP32[$num_bits6>>2] = $sub;
 }
 $num_bits7 = ((($7)) + 8|0);
 $14 = HEAP32[$num_bits7>>2]|0;
 $cmp8 = ($14|0)==(0);
 if (!($cmp8)) {
  ___assert_fail((8648|0),(7702|0),4082,(8665|0));
  // unreachable;
 }
 while(1) {
  $15 = $k;
  $cmp10 = ($15|0)<(4);
  if (!($cmp10)) {
   break;
  }
  $16 = $a$addr;
  $call12 = (__ZL11stbi__zget8P10stbi__zbuf($16)|0);
  $17 = $k;
  $inc13 = (($17) + 1)|0;
  $k = $inc13;
  $arrayidx14 = (($header) + ($17)|0);
  HEAP8[$arrayidx14>>0] = $call12;
 }
 $arrayidx16 = ((($header)) + 1|0);
 $18 = HEAP8[$arrayidx16>>0]|0;
 $conv17 = $18&255;
 $mul = $conv17<<8;
 $19 = HEAP8[$header>>0]|0;
 $conv19 = $19&255;
 $add = (($mul) + ($conv19))|0;
 $len = $add;
 $arrayidx20 = ((($header)) + 3|0);
 $20 = HEAP8[$arrayidx20>>0]|0;
 $conv21 = $20&255;
 $mul22 = $conv21<<8;
 $arrayidx23 = ((($header)) + 2|0);
 $21 = HEAP8[$arrayidx23>>0]|0;
 $conv24 = $21&255;
 $add25 = (($mul22) + ($conv24))|0;
 $nlen = $add25;
 $22 = $nlen;
 $23 = $len;
 $xor = $23 ^ 65535;
 $cmp26 = ($22|0)!=($xor|0);
 if ($cmp26) {
  $call28 = (__ZL9stbi__errPKc(8696)|0);
  $retval = $call28;
  $49 = $retval;
  STACKTOP = sp;return ($49|0);
 }
 $24 = $a$addr;
 $25 = HEAP32[$24>>2]|0;
 $26 = $len;
 $add$ptr = (($25) + ($26)|0);
 $27 = $a$addr;
 $zbuffer_end = ((($27)) + 4|0);
 $28 = HEAP32[$zbuffer_end>>2]|0;
 $cmp30 = ($add$ptr>>>0)>($28>>>0);
 if ($cmp30) {
  $call32 = (__ZL9stbi__errPKc(8709)|0);
  $retval = $call32;
  $49 = $retval;
  STACKTOP = sp;return ($49|0);
 }
 $29 = $a$addr;
 $zout = ((($29)) + 16|0);
 $30 = HEAP32[$zout>>2]|0;
 $31 = $len;
 $add$ptr34 = (($30) + ($31)|0);
 $32 = $a$addr;
 $zout_end = ((($32)) + 24|0);
 $33 = HEAP32[$zout_end>>2]|0;
 $cmp35 = ($add$ptr34>>>0)>($33>>>0);
 if ($cmp35) {
  $34 = $a$addr;
  $35 = $a$addr;
  $zout37 = ((($35)) + 16|0);
  $36 = HEAP32[$zout37>>2]|0;
  $37 = $len;
  $call38 = (__ZL13stbi__zexpandP10stbi__zbufPci($34,$36,$37)|0);
  $tobool39 = ($call38|0)!=(0);
  if (!($tobool39)) {
   $retval = 0;
   $49 = $retval;
   STACKTOP = sp;return ($49|0);
  }
 }
 $38 = $a$addr;
 $zout43 = ((($38)) + 16|0);
 $39 = HEAP32[$zout43>>2]|0;
 $40 = $a$addr;
 $41 = HEAP32[$40>>2]|0;
 $42 = $len;
 _memcpy(($39|0),($41|0),($42|0))|0;
 $43 = $len;
 $44 = $a$addr;
 $45 = HEAP32[$44>>2]|0;
 $add$ptr46 = (($45) + ($43)|0);
 HEAP32[$44>>2] = $add$ptr46;
 $46 = $len;
 $47 = $a$addr;
 $zout47 = ((($47)) + 16|0);
 $48 = HEAP32[$zout47>>2]|0;
 $add$ptr48 = (($48) + ($46)|0);
 HEAP32[$zout47>>2] = $add$ptr48;
 $retval = 1;
 $49 = $retval;
 STACKTOP = sp;return ($49|0);
}
function __ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi($z,$sizelist,$num) {
 $z = $z|0;
 $sizelist = $sizelist|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $add = 0, $add34 = 0, $add55 = 0, $add70 = 0, $arrayidx = 0;
 var $arrayidx16 = 0, $arrayidx17 = 0, $arrayidx19 = 0, $arrayidx2 = 0, $arrayidx20 = 0, $arrayidx21 = 0, $arrayidx31 = 0, $arrayidx33 = 0, $arrayidx39 = 0, $arrayidx43 = 0, $arrayidx47 = 0, $arrayidx49 = 0, $arrayidx53 = 0, $arrayidx59 = 0, $arrayidx61 = 0, $arrayidx64 = 0, $arrayidx68 = 0, $arrayidx72 = 0, $arrayidx8 = 0, $c = 0;
 var $call = 0, $call26 = 0, $call65 = 0, $cmp = 0, $cmp14 = 0, $cmp24 = 0, $cmp41 = 0, $cmp6 = 0, $cmp62 = 0, $cmp66 = 0, $cmp9 = 0, $code = 0, $conv = 0, $conv18 = 0, $conv44 = 0, $conv50 = 0, $conv54 = 0, $conv57 = 0, $conv58 = 0, $conv60 = 0;
 var $fastv = 0, $firstcode = 0, $firstcode48 = 0, $firstsymbol = 0, $firstsymbol52 = 0, $i = 0, $idxprom = 0, $inc = 0, $inc11 = 0, $inc3 = 0, $inc36 = 0, $inc73 = 0, $inc76 = 0, $j = 0, $k = 0, $maxcode = 0, $maxcode38 = 0, $next_code = 0, $num$addr = 0, $or = 0;
 var $retval = 0, $s = 0, $shl = 0, $shl23 = 0, $shl30 = 0, $shl32 = 0, $shl56 = 0, $shl69 = 0, $size = 0, $sizelist$addr = 0, $sizes = 0, $sub = 0, $sub29 = 0, $sub51 = 0, $tobool = 0, $tobool45 = 0, $value = 0, $z$addr = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $next_code = sp + 80|0;
 $sizes = sp;
 $z$addr = $z;
 $sizelist$addr = $sizelist;
 $num$addr = $num;
 $k = 0;
 dest=$sizes; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = $z$addr;
 _memset(($0|0),0,1024)|0;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = $num$addr;
  $cmp = ($1|0)<($2|0);
  if (!($cmp)) {
   break;
  }
  $3 = $sizelist$addr;
  $4 = $i;
  $arrayidx = (($3) + ($4)|0);
  $5 = HEAP8[$arrayidx>>0]|0;
  $idxprom = $5&255;
  $arrayidx2 = (($sizes) + ($idxprom<<2)|0);
  $6 = HEAP32[$arrayidx2>>2]|0;
  $inc = (($6) + 1)|0;
  HEAP32[$arrayidx2>>2] = $inc;
  $7 = $i;
  $inc3 = (($7) + 1)|0;
  $i = $inc3;
 }
 HEAP32[$sizes>>2] = 0;
 $i = 1;
 while(1) {
  $8 = $i;
  $cmp6 = ($8|0)<(16);
  if (!($cmp6)) {
   break;
  }
  $9 = $i;
  $arrayidx8 = (($sizes) + ($9<<2)|0);
  $10 = HEAP32[$arrayidx8>>2]|0;
  $11 = $i;
  $shl = 1 << $11;
  $cmp9 = ($10|0)>($shl|0);
  if ($cmp9) {
   label = 7;
   break;
  }
  $12 = $i;
  $inc11 = (($12) + 1)|0;
  $i = $inc11;
 }
 if ((label|0) == 7) {
  $call = (__ZL9stbi__errPKc(8638)|0);
  $retval = $call;
  $74 = $retval;
  STACKTOP = sp;return ($74|0);
 }
 $code = 0;
 $i = 1;
 while(1) {
  $13 = $i;
  $cmp14 = ($13|0)<(16);
  if (!($cmp14)) {
   break;
  }
  $14 = $code;
  $15 = $i;
  $arrayidx16 = (($next_code) + ($15<<2)|0);
  HEAP32[$arrayidx16>>2] = $14;
  $16 = $code;
  $conv = $16&65535;
  $17 = $z$addr;
  $firstcode = ((($17)) + 1024|0);
  $18 = $i;
  $arrayidx17 = (($firstcode) + ($18<<1)|0);
  HEAP16[$arrayidx17>>1] = $conv;
  $19 = $k;
  $conv18 = $19&65535;
  $20 = $z$addr;
  $firstsymbol = ((($20)) + 1124|0);
  $21 = $i;
  $arrayidx19 = (($firstsymbol) + ($21<<1)|0);
  HEAP16[$arrayidx19>>1] = $conv18;
  $22 = $code;
  $23 = $i;
  $arrayidx20 = (($sizes) + ($23<<2)|0);
  $24 = HEAP32[$arrayidx20>>2]|0;
  $add = (($22) + ($24))|0;
  $code = $add;
  $25 = $i;
  $arrayidx21 = (($sizes) + ($25<<2)|0);
  $26 = HEAP32[$arrayidx21>>2]|0;
  $tobool = ($26|0)!=(0);
  if ($tobool) {
   $27 = $code;
   $sub = (($27) - 1)|0;
   $28 = $i;
   $shl23 = 1 << $28;
   $cmp24 = ($sub|0)>=($shl23|0);
   if ($cmp24) {
    label = 13;
    break;
   }
  }
  $29 = $code;
  $30 = $i;
  $sub29 = (16 - ($30))|0;
  $shl30 = $29 << $sub29;
  $31 = $z$addr;
  $maxcode = ((($31)) + 1056|0);
  $32 = $i;
  $arrayidx31 = (($maxcode) + ($32<<2)|0);
  HEAP32[$arrayidx31>>2] = $shl30;
  $33 = $code;
  $shl32 = $33 << 1;
  $code = $shl32;
  $34 = $i;
  $arrayidx33 = (($sizes) + ($34<<2)|0);
  $35 = HEAP32[$arrayidx33>>2]|0;
  $36 = $k;
  $add34 = (($36) + ($35))|0;
  $k = $add34;
  $37 = $i;
  $inc36 = (($37) + 1)|0;
  $i = $inc36;
 }
 if ((label|0) == 13) {
  $call26 = (__ZL9stbi__errPKc(8586)|0);
  $retval = $call26;
  $74 = $retval;
  STACKTOP = sp;return ($74|0);
 }
 $38 = $z$addr;
 $maxcode38 = ((($38)) + 1056|0);
 $arrayidx39 = ((($maxcode38)) + 64|0);
 HEAP32[$arrayidx39>>2] = 65536;
 $i = 0;
 while(1) {
  $39 = $i;
  $40 = $num$addr;
  $cmp41 = ($39|0)<($40|0);
  if (!($cmp41)) {
   break;
  }
  $41 = $sizelist$addr;
  $42 = $i;
  $arrayidx43 = (($41) + ($42)|0);
  $43 = HEAP8[$arrayidx43>>0]|0;
  $conv44 = $43&255;
  $s = $conv44;
  $44 = $s;
  $tobool45 = ($44|0)!=(0);
  if ($tobool45) {
   $45 = $s;
   $arrayidx47 = (($next_code) + ($45<<2)|0);
   $46 = HEAP32[$arrayidx47>>2]|0;
   $47 = $z$addr;
   $firstcode48 = ((($47)) + 1024|0);
   $48 = $s;
   $arrayidx49 = (($firstcode48) + ($48<<1)|0);
   $49 = HEAP16[$arrayidx49>>1]|0;
   $conv50 = $49&65535;
   $sub51 = (($46) - ($conv50))|0;
   $50 = $z$addr;
   $firstsymbol52 = ((($50)) + 1124|0);
   $51 = $s;
   $arrayidx53 = (($firstsymbol52) + ($51<<1)|0);
   $52 = HEAP16[$arrayidx53>>1]|0;
   $conv54 = $52&65535;
   $add55 = (($sub51) + ($conv54))|0;
   $c = $add55;
   $53 = $s;
   $shl56 = $53 << 9;
   $54 = $i;
   $or = $shl56 | $54;
   $conv57 = $or&65535;
   $fastv = $conv57;
   $55 = $s;
   $conv58 = $55&255;
   $56 = $z$addr;
   $size = ((($56)) + 1156|0);
   $57 = $c;
   $arrayidx59 = (($size) + ($57)|0);
   HEAP8[$arrayidx59>>0] = $conv58;
   $58 = $i;
   $conv60 = $58&65535;
   $59 = $z$addr;
   $value = ((($59)) + 1444|0);
   $60 = $c;
   $arrayidx61 = (($value) + ($60<<1)|0);
   HEAP16[$arrayidx61>>1] = $conv60;
   $61 = $s;
   $cmp62 = ($61|0)<=(9);
   L28: do {
    if ($cmp62) {
     $62 = $s;
     $arrayidx64 = (($next_code) + ($62<<2)|0);
     $63 = HEAP32[$arrayidx64>>2]|0;
     $64 = $s;
     $call65 = (__ZL17stbi__bit_reverseii($63,$64)|0);
     $j = $call65;
     while(1) {
      $65 = $j;
      $cmp66 = ($65|0)<(512);
      if (!($cmp66)) {
       break L28;
      }
      $66 = $fastv;
      $67 = $z$addr;
      $68 = $j;
      $arrayidx68 = (($67) + ($68<<1)|0);
      HEAP16[$arrayidx68>>1] = $66;
      $69 = $s;
      $shl69 = 1 << $69;
      $70 = $j;
      $add70 = (($70) + ($shl69))|0;
      $j = $add70;
     }
    }
   } while(0);
   $71 = $s;
   $arrayidx72 = (($next_code) + ($71<<2)|0);
   $72 = HEAP32[$arrayidx72>>2]|0;
   $inc73 = (($72) + 1)|0;
   HEAP32[$arrayidx72>>2] = $inc73;
  }
  $73 = $i;
  $inc76 = (($73) + 1)|0;
  $i = $inc76;
 }
 $retval = 1;
 $74 = $retval;
 STACKTOP = sp;return ($74|0);
}
function __ZL27stbi__compute_huffman_codesP10stbi__zbuf($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a$addr = 0, $add = 0, $add$ptr = 0, $add$ptr61 = 0, $add2 = 0, $add25 = 0, $add35 = 0, $add39 = 0, $add4 = 0, $add49 = 0, $add5 = 0, $arrayidx = 0, $arrayidx21 = 0, $arrayidx30 = 0;
 var $arrayidx7 = 0, $c = 0, $call = 0, $call1 = 0, $call11 = 0, $call15 = 0, $call24 = 0, $call28 = 0, $call3 = 0, $call34 = 0, $call38 = 0, $call45 = 0, $call53 = 0, $call56 = 0, $call6 = 0, $call62 = 0, $call9 = 0, $cmp = 0, $cmp10 = 0, $cmp12 = 0;
 var $cmp13 = 0, $cmp17 = 0, $cmp22 = 0, $cmp26 = 0, $cmp32 = 0, $cmp37 = 0, $cmp43 = 0, $cmp51 = 0, $codelength_sizes = 0, $conv = 0, $conv19 = 0, $conv48 = 0, $fill = 0, $hclen = 0, $hdist = 0, $hlit = 0, $i = 0, $idxprom = 0, $inc = 0, $inc20 = 0;
 var $lencodes = 0, $n = 0, $ntot = 0, $or$cond = 0, $retval = 0, $s = 0, $sub = 0, $sub42 = 0, $tobool = 0, $tobool57 = 0, $tobool63 = 0, $z_codelength = 0, $z_distance = 0, $z_length = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2560|0);
 $z_codelength = sp + 520|0;
 $lencodes = sp + 32|0;
 $codelength_sizes = sp;
 $a$addr = $a;
 $0 = $a$addr;
 $call = (__ZL14stbi__zreceiveP10stbi__zbufi($0,5)|0);
 $add = (($call) + 257)|0;
 $hlit = $add;
 $1 = $a$addr;
 $call1 = (__ZL14stbi__zreceiveP10stbi__zbufi($1,5)|0);
 $add2 = (($call1) + 1)|0;
 $hdist = $add2;
 $2 = $a$addr;
 $call3 = (__ZL14stbi__zreceiveP10stbi__zbufi($2,4)|0);
 $add4 = (($call3) + 4)|0;
 $hclen = $add4;
 $3 = $hlit;
 $4 = $hdist;
 $add5 = (($3) + ($4))|0;
 $ntot = $add5;
 ;HEAP32[$codelength_sizes>>2]=0|0;HEAP32[$codelength_sizes+4>>2]=0|0;HEAP32[$codelength_sizes+8>>2]=0|0;HEAP32[$codelength_sizes+12>>2]=0|0;HEAP16[$codelength_sizes+16>>1]=0|0;HEAP8[$codelength_sizes+18>>0]=0|0;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $hclen;
  $cmp = ($5|0)<($6|0);
  if (!($cmp)) {
   break;
  }
  $7 = $a$addr;
  $call6 = (__ZL14stbi__zreceiveP10stbi__zbufi($7,3)|0);
  $s = $call6;
  $8 = $s;
  $conv = $8&255;
  $9 = $i;
  $arrayidx = (1184 + ($9)|0);
  $10 = HEAP8[$arrayidx>>0]|0;
  $idxprom = $10&255;
  $arrayidx7 = (($codelength_sizes) + ($idxprom)|0);
  HEAP8[$arrayidx7>>0] = $conv;
  $11 = $i;
  $inc = (($11) + 1)|0;
  $i = $inc;
 }
 $call9 = (__ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi($z_codelength,$codelength_sizes,19)|0);
 $tobool = ($call9|0)!=(0);
 if (!($tobool)) {
  $retval = 0;
  $45 = $retval;
  STACKTOP = sp;return ($45|0);
 }
 $n = 0;
 L9: while(1) {
  $12 = $n;
  $13 = $ntot;
  $cmp10 = ($12|0)<($13|0);
  if (!($cmp10)) {
   label = 25;
   break;
  }
  $14 = $a$addr;
  $call11 = (__ZL21stbi__zhuffman_decodeP10stbi__zbufP14stbi__zhuffman($14,$z_codelength)|0);
  $c = $call11;
  $15 = $c;
  $cmp12 = ($15|0)<(0);
  $16 = $c;
  $cmp13 = ($16|0)>=(19);
  $or$cond = $cmp12 | $cmp13;
  if ($or$cond) {
   label = 9;
   break;
  }
  $17 = $c;
  $cmp17 = ($17|0)<(16);
  if ($cmp17) {
   $18 = $c;
   $conv19 = $18&255;
   $19 = $n;
   $inc20 = (($19) + 1)|0;
   $n = $inc20;
   $arrayidx21 = (($lencodes) + ($19)|0);
   HEAP8[$arrayidx21>>0] = $conv19;
  } else {
   $fill = 0;
   $20 = $c;
   $cmp22 = ($20|0)==(16);
   do {
    if ($cmp22) {
     $21 = $a$addr;
     $call24 = (__ZL14stbi__zreceiveP10stbi__zbufi($21,2)|0);
     $add25 = (($call24) + 3)|0;
     $c = $add25;
     $22 = $n;
     $cmp26 = ($22|0)==(0);
     if ($cmp26) {
      label = 14;
      break L9;
     }
     $23 = $n;
     $sub = (($23) - 1)|0;
     $arrayidx30 = (($lencodes) + ($sub)|0);
     $24 = HEAP8[$arrayidx30>>0]|0;
     $fill = $24;
    } else {
     $25 = $c;
     $cmp32 = ($25|0)==(17);
     if ($cmp32) {
      $26 = $a$addr;
      $call34 = (__ZL14stbi__zreceiveP10stbi__zbufi($26,3)|0);
      $add35 = (($call34) + 3)|0;
      $c = $add35;
      break;
     }
     $27 = $c;
     $cmp37 = ($27|0)==(18);
     if (!($cmp37)) {
      label = 19;
      break L9;
     }
     $28 = $a$addr;
     $call38 = (__ZL14stbi__zreceiveP10stbi__zbufi($28,7)|0);
     $add39 = (($call38) + 11)|0;
     $c = $add39;
    }
   } while(0);
   $29 = $ntot;
   $30 = $n;
   $sub42 = (($29) - ($30))|0;
   $31 = $c;
   $cmp43 = ($sub42|0)<($31|0);
   if ($cmp43) {
    label = 22;
    break;
   }
   $32 = $n;
   $add$ptr = (($lencodes) + ($32)|0);
   $33 = $fill;
   $conv48 = $33&255;
   $34 = $conv48&255;
   $35 = $c;
   _memset(($add$ptr|0),($34|0),($35|0))|0;
   $36 = $c;
   $37 = $n;
   $add49 = (($37) + ($36))|0;
   $n = $add49;
  }
 }
 if ((label|0) == 9) {
  $call15 = (__ZL9stbi__errPKc(8586)|0);
  $retval = $call15;
  $45 = $retval;
  STACKTOP = sp;return ($45|0);
 }
 else if ((label|0) == 14) {
  $call28 = (__ZL9stbi__errPKc(8586)|0);
  $retval = $call28;
  $45 = $retval;
  STACKTOP = sp;return ($45|0);
 }
 else if ((label|0) == 19) {
  ___assert_fail((8602|0),(7702|0),4055,(8610|0));
  // unreachable;
 }
 else if ((label|0) == 22) {
  $call45 = (__ZL9stbi__errPKc(8586)|0);
  $retval = $call45;
  $45 = $retval;
  STACKTOP = sp;return ($45|0);
 }
 else if ((label|0) == 25) {
  $38 = $n;
  $39 = $ntot;
  $cmp51 = ($38|0)!=($39|0);
  if ($cmp51) {
   $call53 = (__ZL9stbi__errPKc(8586)|0);
   $retval = $call53;
   $45 = $retval;
   STACKTOP = sp;return ($45|0);
  }
  $40 = $a$addr;
  $z_length = ((($40)) + 32|0);
  $41 = $hlit;
  $call56 = (__ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi($z_length,$lencodes,$41)|0);
  $tobool57 = ($call56|0)!=(0);
  if (!($tobool57)) {
   $retval = 0;
   $45 = $retval;
   STACKTOP = sp;return ($45|0);
  }
  $42 = $a$addr;
  $z_distance = ((($42)) + 2052|0);
  $43 = $hlit;
  $add$ptr61 = (($lencodes) + ($43)|0);
  $44 = $hdist;
  $call62 = (__ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPKhi($z_distance,$add$ptr61,$44)|0);
  $tobool63 = ($call62|0)!=(0);
  if ($tobool63) {
   $retval = 1;
   $45 = $retval;
   STACKTOP = sp;return ($45|0);
  } else {
   $retval = 0;
   $45 = $retval;
   STACKTOP = sp;return ($45|0);
  }
 }
 return (0)|0;
}
function __ZL25stbi__parse_huffman_blockP10stbi__zbuf($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $a$addr = 0, $add = 0, $add$ptr = 0, $add$ptr48 = 0, $add33 = 0, $arrayidx = 0, $arrayidx16 = 0, $arrayidx19 = 0, $arrayidx27 = 0, $arrayidx28 = 0, $arrayidx31 = 0, $call = 0, $call20 = 0, $call22 = 0, $call25 = 0;
 var $call32 = 0, $call37 = 0, $call4 = 0, $call42 = 0, $call7 = 0, $cmp = 0, $cmp12 = 0, $cmp2 = 0, $cmp23 = 0, $cmp35 = 0, $cmp40 = 0, $cmp49 = 0, $cmp5 = 0, $conv = 0, $dec = 0, $dec63 = 0, $dist = 0, $idx$neg = 0, $incdec$ptr = 0, $incdec$ptr53 = 0;
 var $incdec$ptr60 = 0, $incdec$ptr61 = 0, $len = 0, $p = 0, $retval = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool17 = 0, $tobool29 = 0, $tobool43 = 0, $tobool51 = 0, $tobool54 = 0, $tobool57 = 0, $tobool64 = 0, $v = 0, $z = 0, $z_distance = 0;
 var $z_length = 0, $zout = 0, $zout1 = 0, $zout10 = 0, $zout14 = 0, $zout46 = 0, $zout_end = 0, $zout_end39 = 0, $zout_start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $a$addr = $a;
 $0 = $a$addr;
 $zout1 = ((($0)) + 16|0);
 $1 = HEAP32[$zout1>>2]|0;
 $zout = $1;
 L1: while(1) {
  $2 = $a$addr;
  $3 = $a$addr;
  $z_length = ((($3)) + 32|0);
  $call = (__ZL21stbi__zhuffman_decodeP10stbi__zbufP14stbi__zhuffman($2,$z_length)|0);
  $z = $call;
  $4 = $z;
  $cmp = ($4|0)<(256);
  $5 = $z;
  do {
   if ($cmp) {
    $cmp2 = ($5|0)<(0);
    if ($cmp2) {
     label = 4;
     break L1;
    }
    $6 = $zout;
    $7 = $a$addr;
    $zout_end = ((($7)) + 24|0);
    $8 = HEAP32[$zout_end>>2]|0;
    $cmp5 = ($6>>>0)>=($8>>>0);
    if ($cmp5) {
     $9 = $a$addr;
     $10 = $zout;
     $call7 = (__ZL13stbi__zexpandP10stbi__zbufPci($9,$10,1)|0);
     $tobool = ($call7|0)!=(0);
     if (!($tobool)) {
      label = 7;
      break L1;
     }
     $11 = $a$addr;
     $zout10 = ((($11)) + 16|0);
     $12 = HEAP32[$zout10>>2]|0;
     $zout = $12;
    }
    $13 = $z;
    $conv = $13&255;
    $14 = $zout;
    $incdec$ptr = ((($14)) + 1|0);
    $zout = $incdec$ptr;
    HEAP8[$14>>0] = $conv;
   } else {
    $cmp12 = ($5|0)==(256);
    if ($cmp12) {
     label = 11;
     break L1;
    }
    $17 = $z;
    $sub = (($17) - 257)|0;
    $z = $sub;
    $18 = $z;
    $arrayidx = (672 + ($18<<2)|0);
    $19 = HEAP32[$arrayidx>>2]|0;
    $len = $19;
    $20 = $z;
    $arrayidx16 = (800 + ($20<<2)|0);
    $21 = HEAP32[$arrayidx16>>2]|0;
    $tobool17 = ($21|0)!=(0);
    if ($tobool17) {
     $22 = $a$addr;
     $23 = $z;
     $arrayidx19 = (800 + ($23<<2)|0);
     $24 = HEAP32[$arrayidx19>>2]|0;
     $call20 = (__ZL14stbi__zreceiveP10stbi__zbufi($22,$24)|0);
     $25 = $len;
     $add = (($25) + ($call20))|0;
     $len = $add;
    }
    $26 = $a$addr;
    $27 = $a$addr;
    $z_distance = ((($27)) + 2052|0);
    $call22 = (__ZL21stbi__zhuffman_decodeP10stbi__zbufP14stbi__zhuffman($26,$z_distance)|0);
    $z = $call22;
    $28 = $z;
    $cmp23 = ($28|0)<(0);
    if ($cmp23) {
     label = 15;
     break L1;
    }
    $29 = $z;
    $arrayidx27 = (928 + ($29<<2)|0);
    $30 = HEAP32[$arrayidx27>>2]|0;
    $dist = $30;
    $31 = $z;
    $arrayidx28 = (1056 + ($31<<2)|0);
    $32 = HEAP32[$arrayidx28>>2]|0;
    $tobool29 = ($32|0)!=(0);
    if ($tobool29) {
     $33 = $a$addr;
     $34 = $z;
     $arrayidx31 = (1056 + ($34<<2)|0);
     $35 = HEAP32[$arrayidx31>>2]|0;
     $call32 = (__ZL14stbi__zreceiveP10stbi__zbufi($33,$35)|0);
     $36 = $dist;
     $add33 = (($36) + ($call32))|0;
     $dist = $add33;
    }
    $37 = $zout;
    $38 = $a$addr;
    $zout_start = ((($38)) + 20|0);
    $39 = HEAP32[$zout_start>>2]|0;
    $sub$ptr$lhs$cast = $37;
    $sub$ptr$rhs$cast = $39;
    $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
    $40 = $dist;
    $cmp35 = ($sub$ptr$sub|0)<($40|0);
    if ($cmp35) {
     label = 19;
     break L1;
    }
    $41 = $zout;
    $42 = $len;
    $add$ptr = (($41) + ($42)|0);
    $43 = $a$addr;
    $zout_end39 = ((($43)) + 24|0);
    $44 = HEAP32[$zout_end39>>2]|0;
    $cmp40 = ($add$ptr>>>0)>($44>>>0);
    if ($cmp40) {
     $45 = $a$addr;
     $46 = $zout;
     $47 = $len;
     $call42 = (__ZL13stbi__zexpandP10stbi__zbufPci($45,$46,$47)|0);
     $tobool43 = ($call42|0)!=(0);
     if (!($tobool43)) {
      label = 22;
      break L1;
     }
     $48 = $a$addr;
     $zout46 = ((($48)) + 16|0);
     $49 = HEAP32[$zout46>>2]|0;
     $zout = $49;
    }
    $50 = $zout;
    $51 = $dist;
    $idx$neg = (0 - ($51))|0;
    $add$ptr48 = (($50) + ($idx$neg)|0);
    $p = $add$ptr48;
    $52 = $dist;
    $cmp49 = ($52|0)==(1);
    if ($cmp49) {
     $53 = $p;
     $54 = HEAP8[$53>>0]|0;
     $v = $54;
     $55 = $len;
     $tobool51 = ($55|0)!=(0);
     if (!($tobool51)) {
      break;
     }
     while(1) {
      $56 = $v;
      $57 = $zout;
      $incdec$ptr53 = ((($57)) + 1|0);
      $zout = $incdec$ptr53;
      HEAP8[$57>>0] = $56;
      $58 = $len;
      $dec = (($58) + -1)|0;
      $len = $dec;
      $tobool54 = ($dec|0)!=(0);
      if (!($tobool54)) {
       break;
      }
     }
    } else {
     $59 = $len;
     $tobool57 = ($59|0)!=(0);
     if (!($tobool57)) {
      break;
     }
     while(1) {
      $60 = $p;
      $incdec$ptr60 = ((($60)) + 1|0);
      $p = $incdec$ptr60;
      $61 = HEAP8[$60>>0]|0;
      $62 = $zout;
      $incdec$ptr61 = ((($62)) + 1|0);
      $zout = $incdec$ptr61;
      HEAP8[$62>>0] = $61;
      $63 = $len;
      $dec63 = (($63) + -1)|0;
      $len = $dec63;
      $tobool64 = ($dec63|0)!=(0);
      if (!($tobool64)) {
       break;
      }
     }
    }
   }
  } while(0);
 }
 if ((label|0) == 4) {
  $call4 = (__ZL9stbi__errPKc(8411)|0);
  $retval = $call4;
  $64 = $retval;
  STACKTOP = sp;return ($64|0);
 }
 else if ((label|0) == 7) {
  $retval = 0;
  $64 = $retval;
  STACKTOP = sp;return ($64|0);
 }
 else if ((label|0) == 11) {
  $15 = $zout;
  $16 = $a$addr;
  $zout14 = ((($16)) + 16|0);
  HEAP32[$zout14>>2] = $15;
  $retval = 1;
  $64 = $retval;
  STACKTOP = sp;return ($64|0);
 }
 else if ((label|0) == 15) {
  $call25 = (__ZL9stbi__errPKc(8411)|0);
  $retval = $call25;
  $64 = $retval;
  STACKTOP = sp;return ($64|0);
 }
 else if ((label|0) == 19) {
  $call37 = (__ZL9stbi__errPKc(8428)|0);
  $retval = $call37;
  $64 = $retval;
  STACKTOP = sp;return ($64|0);
 }
 else if ((label|0) == 22) {
  $retval = 0;
  $64 = $retval;
  STACKTOP = sp;return ($64|0);
 }
 return (0)|0;
}
function __ZL21stbi__zhuffman_decodeP10stbi__zbufP14stbi__zhuffman($a,$z) {
 $a = $a|0;
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a$addr = 0;
 var $and = 0, $and5 = 0, $arrayidx = 0, $b = 0, $call = 0, $cmp = 0, $code_buffer = 0, $code_buffer2 = 0, $conv = 0, $num_bits = 0, $num_bits4 = 0, $retval = 0, $s = 0, $shr = 0, $shr3 = 0, $sub = 0, $tobool = 0, $z$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $a$addr = $a;
 $z$addr = $z;
 $0 = $a$addr;
 $num_bits = ((($0)) + 8|0);
 $1 = HEAP32[$num_bits>>2]|0;
 $cmp = ($1|0)<(16);
 if ($cmp) {
  $2 = $a$addr;
  __ZL15stbi__fill_bitsP10stbi__zbuf($2);
 }
 $3 = $z$addr;
 $4 = $a$addr;
 $code_buffer = ((($4)) + 12|0);
 $5 = HEAP32[$code_buffer>>2]|0;
 $and = $5 & 511;
 $arrayidx = (($3) + ($and<<1)|0);
 $6 = HEAP16[$arrayidx>>1]|0;
 $conv = $6&65535;
 $b = $conv;
 $7 = $b;
 $tobool = ($7|0)!=(0);
 if ($tobool) {
  $8 = $b;
  $shr = $8 >> 9;
  $s = $shr;
  $9 = $s;
  $10 = $a$addr;
  $code_buffer2 = ((($10)) + 12|0);
  $11 = HEAP32[$code_buffer2>>2]|0;
  $shr3 = $11 >>> $9;
  HEAP32[$code_buffer2>>2] = $shr3;
  $12 = $s;
  $13 = $a$addr;
  $num_bits4 = ((($13)) + 8|0);
  $14 = HEAP32[$num_bits4>>2]|0;
  $sub = (($14) - ($12))|0;
  HEAP32[$num_bits4>>2] = $sub;
  $15 = $b;
  $and5 = $15 & 511;
  $retval = $and5;
  $18 = $retval;
  STACKTOP = sp;return ($18|0);
 } else {
  $16 = $a$addr;
  $17 = $z$addr;
  $call = (__ZL30stbi__zhuffman_decode_slowpathP10stbi__zbufP14stbi__zhuffman($16,$17)|0);
  $retval = $call;
  $18 = $retval;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function __ZL13stbi__zexpandP10stbi__zbufPci($z,$zout,$n) {
 $z = $z|0;
 $zout = $zout|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr15 = 0, $call = 0, $call11 = 0, $call8 = 0, $cmp = 0, $cmp9 = 0, $cur = 0, $limit = 0, $mul = 0;
 var $n$addr = 0, $old_limit = 0, $q = 0, $retval = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast4 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast5 = 0, $sub$ptr$sub = 0, $sub$ptr$sub6 = 0, $tobool = 0, $z$addr = 0, $z_expandable = 0, $zout$addr = 0, $zout1 = 0, $zout14 = 0, $zout2 = 0, $zout_end = 0, $zout_end16 = 0, $zout_start = 0;
 var $zout_start13 = 0, $zout_start3 = 0, $zout_start7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $z$addr = $z;
 $zout$addr = $zout;
 $n$addr = $n;
 $0 = $zout$addr;
 $1 = $z$addr;
 $zout1 = ((($1)) + 16|0);
 HEAP32[$zout1>>2] = $0;
 $2 = $z$addr;
 $z_expandable = ((($2)) + 28|0);
 $3 = HEAP32[$z_expandable>>2]|0;
 $tobool = ($3|0)!=(0);
 if (!($tobool)) {
  $call = (__ZL9stbi__errPKc(8437)|0);
  $retval = $call;
  $28 = $retval;
  STACKTOP = sp;return ($28|0);
 }
 $4 = $z$addr;
 $zout2 = ((($4)) + 16|0);
 $5 = HEAP32[$zout2>>2]|0;
 $6 = $z$addr;
 $zout_start = ((($6)) + 20|0);
 $7 = HEAP32[$zout_start>>2]|0;
 $sub$ptr$lhs$cast = $5;
 $sub$ptr$rhs$cast = $7;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $cur = $sub$ptr$sub;
 $8 = $z$addr;
 $zout_end = ((($8)) + 24|0);
 $9 = HEAP32[$zout_end>>2]|0;
 $10 = $z$addr;
 $zout_start3 = ((($10)) + 20|0);
 $11 = HEAP32[$zout_start3>>2]|0;
 $sub$ptr$lhs$cast4 = $9;
 $sub$ptr$rhs$cast5 = $11;
 $sub$ptr$sub6 = (($sub$ptr$lhs$cast4) - ($sub$ptr$rhs$cast5))|0;
 $old_limit = $sub$ptr$sub6;
 $limit = $sub$ptr$sub6;
 while(1) {
  $12 = $cur;
  $13 = $n$addr;
  $add = (($12) + ($13))|0;
  $14 = $limit;
  $cmp = ($add|0)>($14|0);
  if (!($cmp)) {
   break;
  }
  $15 = $limit;
  $mul = $15<<1;
  $limit = $mul;
 }
 $16 = $z$addr;
 $zout_start7 = ((($16)) + 20|0);
 $17 = HEAP32[$zout_start7>>2]|0;
 $18 = $limit;
 $call8 = (_realloc($17,$18)|0);
 $q = $call8;
 $19 = $q;
 $cmp9 = ($19|0)==(0|0);
 if ($cmp9) {
  $call11 = (__ZL9stbi__errPKc(7762)|0);
  $retval = $call11;
  $28 = $retval;
  STACKTOP = sp;return ($28|0);
 } else {
  $20 = $q;
  $21 = $z$addr;
  $zout_start13 = ((($21)) + 20|0);
  HEAP32[$zout_start13>>2] = $20;
  $22 = $q;
  $23 = $cur;
  $add$ptr = (($22) + ($23)|0);
  $24 = $z$addr;
  $zout14 = ((($24)) + 16|0);
  HEAP32[$zout14>>2] = $add$ptr;
  $25 = $q;
  $26 = $limit;
  $add$ptr15 = (($25) + ($26)|0);
  $27 = $z$addr;
  $zout_end16 = ((($27)) + 24|0);
  HEAP32[$zout_end16>>2] = $add$ptr15;
  $retval = 1;
  $28 = $retval;
  STACKTOP = sp;return ($28|0);
 }
 return (0)|0;
}
function __ZL15stbi__fill_bitsP10stbi__zbuf($z) {
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $call = 0, $cmp = 0, $cmp6 = 0, $code_buffer = 0, $code_buffer3 = 0, $conv = 0;
 var $num_bits = 0, $num_bits1 = 0, $num_bits4 = 0, $num_bits5 = 0, $or = 0, $shl = 0, $shl2 = 0, $z$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $z$addr = $z;
 while(1) {
  $0 = $z$addr;
  $code_buffer = ((($0)) + 12|0);
  $1 = HEAP32[$code_buffer>>2]|0;
  $2 = $z$addr;
  $num_bits = ((($2)) + 8|0);
  $3 = HEAP32[$num_bits>>2]|0;
  $shl = 1 << $3;
  $cmp = ($1>>>0)<($shl>>>0);
  if (!($cmp)) {
   label = 3;
   break;
  }
  $4 = $z$addr;
  $call = (__ZL11stbi__zget8P10stbi__zbuf($4)|0);
  $conv = $call&255;
  $5 = $z$addr;
  $num_bits1 = ((($5)) + 8|0);
  $6 = HEAP32[$num_bits1>>2]|0;
  $shl2 = $conv << $6;
  $7 = $z$addr;
  $code_buffer3 = ((($7)) + 12|0);
  $8 = HEAP32[$code_buffer3>>2]|0;
  $or = $8 | $shl2;
  HEAP32[$code_buffer3>>2] = $or;
  $9 = $z$addr;
  $num_bits4 = ((($9)) + 8|0);
  $10 = HEAP32[$num_bits4>>2]|0;
  $add = (($10) + 8)|0;
  HEAP32[$num_bits4>>2] = $add;
  $11 = $z$addr;
  $num_bits5 = ((($11)) + 8|0);
  $12 = HEAP32[$num_bits5>>2]|0;
  $cmp6 = ($12|0)<=(24);
  if (!($cmp6)) {
   label = 5;
   break;
  }
 }
 if ((label|0) == 3) {
  ___assert_fail((8533|0),(7702|0),3897,(8570|0));
  // unreachable;
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return;
 }
}
function __ZL30stbi__zhuffman_decode_slowpathP10stbi__zbufP14stbi__zhuffman($a,$z) {
 $a = $a|0;
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a$addr = 0, $add = 0, $arrayidx = 0, $arrayidx14 = 0, $arrayidx4 = 0, $arrayidx6 = 0, $arrayidx8 = 0, $b = 0, $call = 0, $cmp = 0, $cmp1 = 0;
 var $cmp10 = 0, $code_buffer = 0, $code_buffer11 = 0, $conv = 0, $conv15 = 0, $conv7 = 0, $conv9 = 0, $firstcode = 0, $firstsymbol = 0, $inc = 0, $k = 0, $maxcode = 0, $num_bits = 0, $retval = 0, $s = 0, $shr = 0, $shr12 = 0, $size = 0, $sub = 0, $sub13 = 0;
 var $sub5 = 0, $value = 0, $z$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $a$addr = $a;
 $z$addr = $z;
 $0 = $a$addr;
 $code_buffer = ((($0)) + 12|0);
 $1 = HEAP32[$code_buffer>>2]|0;
 $call = (__ZL17stbi__bit_reverseii($1,16)|0);
 $k = $call;
 $s = 10;
 while(1) {
  $2 = $k;
  $3 = $z$addr;
  $maxcode = ((($3)) + 1056|0);
  $4 = $s;
  $arrayidx = (($maxcode) + ($4<<2)|0);
  $5 = HEAP32[$arrayidx>>2]|0;
  $cmp = ($2|0)<($5|0);
  $6 = $s;
  if ($cmp) {
   break;
  }
  $inc = (($6) + 1)|0;
  $s = $inc;
 }
 $cmp1 = ($6|0)==(16);
 if ($cmp1) {
  $retval = -1;
  $28 = $retval;
  STACKTOP = sp;return ($28|0);
 }
 $7 = $k;
 $8 = $s;
 $sub = (16 - ($8))|0;
 $shr = $7 >> $sub;
 $9 = $z$addr;
 $firstcode = ((($9)) + 1024|0);
 $10 = $s;
 $arrayidx4 = (($firstcode) + ($10<<1)|0);
 $11 = HEAP16[$arrayidx4>>1]|0;
 $conv = $11&65535;
 $sub5 = (($shr) - ($conv))|0;
 $12 = $z$addr;
 $firstsymbol = ((($12)) + 1124|0);
 $13 = $s;
 $arrayidx6 = (($firstsymbol) + ($13<<1)|0);
 $14 = HEAP16[$arrayidx6>>1]|0;
 $conv7 = $14&65535;
 $add = (($sub5) + ($conv7))|0;
 $b = $add;
 $15 = $z$addr;
 $size = ((($15)) + 1156|0);
 $16 = $b;
 $arrayidx8 = (($size) + ($16)|0);
 $17 = HEAP8[$arrayidx8>>0]|0;
 $conv9 = $17&255;
 $18 = $s;
 $cmp10 = ($conv9|0)==($18|0);
 if (!($cmp10)) {
  ___assert_fail((8457|0),(7702|0),3925,(8473|0));
  // unreachable;
 }
 $19 = $s;
 $20 = $a$addr;
 $code_buffer11 = ((($20)) + 12|0);
 $21 = HEAP32[$code_buffer11>>2]|0;
 $shr12 = $21 >>> $19;
 HEAP32[$code_buffer11>>2] = $shr12;
 $22 = $s;
 $23 = $a$addr;
 $num_bits = ((($23)) + 8|0);
 $24 = HEAP32[$num_bits>>2]|0;
 $sub13 = (($24) - ($22))|0;
 HEAP32[$num_bits>>2] = $sub13;
 $25 = $z$addr;
 $value = ((($25)) + 1444|0);
 $26 = $b;
 $arrayidx14 = (($value) + ($26<<1)|0);
 $27 = HEAP16[$arrayidx14>>1]|0;
 $conv15 = $27&65535;
 $retval = $conv15;
 $28 = $retval;
 STACKTOP = sp;return ($28|0);
}
function __ZL17stbi__bit_reverseii($v,$bits) {
 $v = $v|0;
 $bits = $bits|0;
 var $0 = 0, $1 = 0, $2 = 0, $bits$addr = 0, $call = 0, $cmp = 0, $shr = 0, $sub = 0, $v$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $v$addr = $v;
 $bits$addr = $bits;
 $0 = $bits$addr;
 $cmp = ($0|0)<=(16);
 if ($cmp) {
  $1 = $v$addr;
  $call = (__ZL18stbi__bitreverse16i($1)|0);
  $2 = $bits$addr;
  $sub = (16 - ($2))|0;
  $shr = $call >> $sub;
  STACKTOP = sp;return ($shr|0);
 } else {
  ___assert_fail((8504|0),(7702|0),3815,(8515|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZL18stbi__bitreverse16i($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $and = 0, $and1 = 0, $and12 = 0, $and14 = 0, $and2 = 0, $and4 = 0, $and7 = 0, $and9 = 0, $n$addr = 0, $or = 0, $or11 = 0;
 var $or16 = 0, $or6 = 0, $shl = 0, $shl10 = 0, $shl15 = 0, $shl5 = 0, $shr = 0, $shr13 = 0, $shr3 = 0, $shr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $n$addr = $n;
 $0 = $n$addr;
 $and = $0 & 43690;
 $shr = $and >> 1;
 $1 = $n$addr;
 $and1 = $1 & 21845;
 $shl = $and1 << 1;
 $or = $shr | $shl;
 $n$addr = $or;
 $2 = $n$addr;
 $and2 = $2 & 52428;
 $shr3 = $and2 >> 2;
 $3 = $n$addr;
 $and4 = $3 & 13107;
 $shl5 = $and4 << 2;
 $or6 = $shr3 | $shl5;
 $n$addr = $or6;
 $4 = $n$addr;
 $and7 = $4 & 61680;
 $shr8 = $and7 >> 4;
 $5 = $n$addr;
 $and9 = $5 & 3855;
 $shl10 = $and9 << 4;
 $or11 = $shr8 | $shl10;
 $n$addr = $or11;
 $6 = $n$addr;
 $and12 = $6 & 65280;
 $shr13 = $and12 >> 8;
 $7 = $n$addr;
 $and14 = $7 & 255;
 $shl15 = $and14 << 8;
 $or16 = $shr13 | $shl15;
 $n$addr = $or16;
 $8 = $n$addr;
 STACKTOP = sp;return ($8|0);
}
function __ZL11stbi__zget8P10stbi__zbuf($z) {
 $z = $z|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $cmp = 0, $incdec$ptr = 0, $retval = 0, $z$addr = 0, $zbuffer_end = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $z$addr = $z;
 $0 = $z$addr;
 $1 = HEAP32[$0>>2]|0;
 $2 = $z$addr;
 $zbuffer_end = ((($2)) + 4|0);
 $3 = HEAP32[$zbuffer_end>>2]|0;
 $cmp = ($1>>>0)>=($3>>>0);
 if ($cmp) {
  $retval = 0;
  $7 = $retval;
  STACKTOP = sp;return ($7|0);
 } else {
  $4 = $z$addr;
  $5 = HEAP32[$4>>2]|0;
  $incdec$ptr = ((($5)) + 1|0);
  HEAP32[$4>>2] = $incdec$ptr;
  $6 = HEAP8[$5>>0]|0;
  $retval = $6;
  $7 = $retval;
  STACKTOP = sp;return ($7|0);
 }
 return (0)|0;
}
function __ZL19stbi__refill_bufferP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0;
 var $add$ptr11 = 0, $buffer_start = 0, $buffer_start1 = 0, $buffer_start3 = 0, $buffer_start6 = 0, $buffer_start9 = 0, $buflen = 0, $call = 0, $cmp = 0, $img_buffer = 0, $img_buffer5 = 0, $img_buffer8 = 0, $img_buffer_end = 0, $img_buffer_end12 = 0, $io = 0, $io_user_data = 0, $n = 0, $read_from_callbacks = 0, $s$addr = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $s$addr = $s;
 $0 = $s$addr;
 $io = ((($0)) + 16|0);
 $1 = HEAP32[$io>>2]|0;
 $2 = $s$addr;
 $io_user_data = ((($2)) + 28|0);
 $3 = HEAP32[$io_user_data>>2]|0;
 $4 = $s$addr;
 $buffer_start = ((($4)) + 40|0);
 $5 = $s$addr;
 $buflen = ((($5)) + 36|0);
 $6 = HEAP32[$buflen>>2]|0;
 $call = (FUNCTION_TABLE_iiii[$1 & 255]($3,$buffer_start,$6)|0);
 $n = $call;
 $7 = $n;
 $cmp = ($7|0)==(0);
 $8 = $s$addr;
 if ($cmp) {
  $read_from_callbacks = ((($8)) + 32|0);
  HEAP32[$read_from_callbacks>>2] = 0;
  $9 = $s$addr;
  $buffer_start1 = ((($9)) + 40|0);
  $10 = $s$addr;
  $img_buffer = ((($10)) + 168|0);
  HEAP32[$img_buffer>>2] = $buffer_start1;
  $11 = $s$addr;
  $buffer_start3 = ((($11)) + 40|0);
  $add$ptr = ((($buffer_start3)) + 1|0);
  $12 = $s$addr;
  $img_buffer_end = ((($12)) + 172|0);
  HEAP32[$img_buffer_end>>2] = $add$ptr;
  $13 = $s$addr;
  $img_buffer5 = ((($13)) + 168|0);
  $14 = HEAP32[$img_buffer5>>2]|0;
  HEAP8[$14>>0] = 0;
  STACKTOP = sp;return;
 } else {
  $buffer_start6 = ((($8)) + 40|0);
  $15 = $s$addr;
  $img_buffer8 = ((($15)) + 168|0);
  HEAP32[$img_buffer8>>2] = $buffer_start6;
  $16 = $s$addr;
  $buffer_start9 = ((($16)) + 40|0);
  $17 = $n;
  $add$ptr11 = (($buffer_start9) + ($17)|0);
  $18 = $s$addr;
  $img_buffer_end12 = ((($18)) + 172|0);
  HEAP32[$img_buffer_end12>>2] = $add$ptr11;
  STACKTOP = sp;return;
 }
}
function __ZL12stbi__rewindP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $img_buffer = 0, $img_buffer_end = 0, $img_buffer_original = 0, $img_buffer_original_end = 0, $s$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $s$addr = $s;
 $0 = $s$addr;
 $img_buffer_original = ((($0)) + 176|0);
 $1 = HEAP32[$img_buffer_original>>2]|0;
 $2 = $s$addr;
 $img_buffer = ((($2)) + 168|0);
 HEAP32[$img_buffer>>2] = $1;
 $3 = $s$addr;
 $img_buffer_original_end = ((($3)) + 180|0);
 $4 = HEAP32[$img_buffer_original_end>>2]|0;
 $5 = $s$addr;
 $img_buffer_end = ((($5)) + 172|0);
 HEAP32[$img_buffer_end>>2] = $4;
 STACKTOP = sp;return;
}
function __ZL21stbi__start_callbacksP13stbi__contextP17stbi_io_callbacksPv($s,$c,$user) {
 $s = $s|0;
 $c = $c|0;
 $user = $user|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer_start = 0, $buflen = 0, $c$addr = 0, $img_buffer_end = 0, $img_buffer_original = 0, $img_buffer_original_end = 0, $io = 0, $io_user_data = 0;
 var $read_from_callbacks = 0, $s$addr = 0, $user$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $s$addr = $s;
 $c$addr = $c;
 $user$addr = $user;
 $0 = $c$addr;
 $1 = $s$addr;
 $io = ((($1)) + 16|0);
 ;HEAP32[$io>>2]=HEAP32[$0>>2]|0;HEAP32[$io+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$io+8>>2]=HEAP32[$0+8>>2]|0;
 $2 = $user$addr;
 $3 = $s$addr;
 $io_user_data = ((($3)) + 28|0);
 HEAP32[$io_user_data>>2] = $2;
 $4 = $s$addr;
 $buflen = ((($4)) + 36|0);
 HEAP32[$buflen>>2] = 128;
 $5 = $s$addr;
 $read_from_callbacks = ((($5)) + 32|0);
 HEAP32[$read_from_callbacks>>2] = 1;
 $6 = $s$addr;
 $buffer_start = ((($6)) + 40|0);
 $7 = $s$addr;
 $img_buffer_original = ((($7)) + 176|0);
 HEAP32[$img_buffer_original>>2] = $buffer_start;
 $8 = $s$addr;
 __ZL19stbi__refill_bufferP13stbi__context($8);
 $9 = $s$addr;
 $img_buffer_end = ((($9)) + 172|0);
 $10 = HEAP32[$img_buffer_end>>2]|0;
 $11 = $s$addr;
 $img_buffer_original_end = ((($11)) + 180|0);
 HEAP32[$img_buffer_original_end>>2] = $10;
 STACKTOP = sp;return;
}
function __ZL16stbi__stdio_readPvPci($user,$data,$size) {
 $user = $user|0;
 $data = $data|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $data$addr = 0, $size$addr = 0, $user$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $user$addr = $user;
 $data$addr = $data;
 $size$addr = $size;
 $0 = $data$addr;
 $1 = $size$addr;
 $2 = $user$addr;
 $call = (_fread($0,1,$1,$2)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZL16stbi__stdio_skipPvi($user,$n) {
 $user = $user|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $n$addr = 0, $user$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $user$addr = $user;
 $n$addr = $n;
 $0 = $user$addr;
 $1 = $n$addr;
 (_fseek($0,$1,1)|0);
 STACKTOP = sp;return;
}
function __ZL15stbi__stdio_eofPv($user) {
 $user = $user|0;
 var $0 = 0, $call = 0, $user$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $user$addr = $user;
 $0 = $user$addr;
 $call = (_feof($0)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZN2lm5Image12loadFromFileEPKc($this,$_fileName) {
 $this = $this|0;
 $_fileName = $_fileName|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $_fileName$addr = 0, $call = 0, $cmp = 0, $h = 0, $m_buffer = 0, $m_buffer2 = 0, $m_height = 0, $m_nbChannels = 0, $m_width = 0, $n = 0, $retval = 0;
 var $this$addr = 0, $this1 = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $retval = sp + 20|0;
 $w = sp + 8|0;
 $h = sp + 4|0;
 $n = sp;
 $this$addr = $this;
 $_fileName$addr = $_fileName;
 $this1 = $this$addr;
 __ZN2lm5Image4termEv($this1);
 $0 = $_fileName$addr;
 $call = (_stbi_load($0,$w,$h,$n,0)|0);
 $m_buffer = ((($this1)) + 4|0);
 HEAP32[$m_buffer>>2] = $call;
 $m_buffer2 = ((($this1)) + 4|0);
 $1 = HEAP32[$m_buffer2>>2]|0;
 $cmp = ($1|0)==(0|0);
 if ($cmp) {
  $$expand_i1_val = 0;
  HEAP8[$retval>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$retval>>0]|0;
  $5 = $$pre_trunc&1;
  STACKTOP = sp;return ($5|0);
 } else {
  $2 = HEAP32[$w>>2]|0;
  $m_width = ((($this1)) + 8|0);
  HEAP32[$m_width>>2] = $2;
  $3 = HEAP32[$h>>2]|0;
  $m_height = ((($this1)) + 12|0);
  HEAP32[$m_height>>2] = $3;
  $4 = HEAP32[$n>>2]|0;
  $m_nbChannels = ((($this1)) + 16|0);
  HEAP32[$m_nbChannels>>2] = $4;
  $$expand_i1_val2 = 1;
  HEAP8[$retval>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$retval>>0]|0;
  $5 = $$pre_trunc&1;
  STACKTOP = sp;return ($5|0);
 }
 return (0)|0;
}
function __ZN2lm9GfxBufferD0Ev($this) {
 $this = $this|0;
 var $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 __ZN2lm9GfxBufferD2Ev($this1);
 __ZdlPv($this1);
 STACKTOP = sp;return;
}
function __ZN2lm9GfxBufferD2Ev($this) {
 $this = $this|0;
 var $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 HEAP32[$this1>>2] = (3756);
 __ZN2lm9GfxBuffer4termEv($this1);
 __ZN2lm6ObjectD2Ev($this1);
 STACKTOP = sp;return;
}
function __ZN2lm9GfxBuffer4termEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, $call = 0, $cmp = 0, $cmp3 = 0, $cmp8 = 0, $isnull = 0, $m_buffer = 0, $m_buffer10 = 0, $m_buffer11 = 0, $m_handle = 0, $m_handle2 = 0, $m_handle5 = 0, $m_handle6 = 0, $this$addr = 0;
 var $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp4$byval_copy = sp + 16|0;
 $agg$tmp$byval_copy = sp + 12|0;
 $agg$tmp = sp + 4|0;
 $agg$tmp4 = sp;
 $this$addr = $this;
 $this1 = $this$addr;
 $m_handle = ((($this1)) + 4|0);
 $0 = HEAP32[$m_handle>>2]|0;
 $cmp = ($0|0)!=(0);
 if ($cmp) {
  $m_handle2 = ((($this1)) + 4|0);
  ;HEAP32[$agg$tmp>>2]=HEAP32[$m_handle2>>2]|0;
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
  $call = (_sg_query_buffer_state($agg$tmp$byval_copy)|0);
  $cmp3 = ($call|0)!=(4);
  if ($cmp3) {
   $m_handle5 = ((($this1)) + 4|0);
   ;HEAP32[$agg$tmp4>>2]=HEAP32[$m_handle5>>2]|0;
   ;HEAP32[$agg$tmp4$byval_copy>>2]=HEAP32[$agg$tmp4>>2]|0;
   _sg_destroy_buffer($agg$tmp4$byval_copy);
   $m_handle6 = ((($this1)) + 4|0);
   HEAP32[$m_handle6>>2] = 0;
  }
 }
 $m_buffer = ((($this1)) + 8|0);
 $1 = HEAP32[$m_buffer>>2]|0;
 $cmp8 = ($1|0)!=(0|0);
 if (!($cmp8)) {
  STACKTOP = sp;return;
 }
 $m_buffer10 = ((($this1)) + 8|0);
 $2 = HEAP32[$m_buffer10>>2]|0;
 $isnull = ($2|0)==(0|0);
 if (!($isnull)) {
  __ZdlPv($2);
 }
 $m_buffer11 = ((($this1)) + 8|0);
 HEAP32[$m_buffer11>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN2lm9GfxBuffer4initEPKhjNS_13GfxBufferTypeENS_14GfxBufferUsageE($this,$_buffer,$_size,$_type,$_usage) {
 $this = $this|0;
 $_buffer = $_buffer|0;
 $_size = $_size|0;
 $_type = $_type|0;
 $_usage = $_usage|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_buffer$addr = 0, $_size$addr = 0, $_type$addr = 0, $_usage$addr = 0, $bufferDesc = 0, $call = 0;
 var $call4 = 0, $call8 = 0, $cmp = 0, $content = 0, $content5 = 0, $m_buffer = 0, $m_handle = 0, $m_handle10 = 0, $m_size = 0, $m_size2 = 0, $m_type = 0, $m_usage = 0, $m_usage3 = 0, $ref$tmp = 0, $ref$tmp7 = 0, $size = 0, $size6 = 0, $this$addr = 0, $this1 = 0, $type = 0;
 var $usage = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $bufferDesc = sp + 8|0;
 $ref$tmp = sp + 4|0;
 $ref$tmp7 = sp;
 $this$addr = $this;
 $_buffer$addr = $_buffer;
 $_size$addr = $_size;
 $_type$addr = $_type;
 $_usage$addr = $_usage;
 $this1 = $this$addr;
 $0 = $_type$addr;
 $m_type = ((($this1)) + 16|0);
 HEAP32[$m_type>>2] = $0;
 $1 = $_usage$addr;
 $m_usage = ((($this1)) + 20|0);
 HEAP32[$m_usage>>2] = $1;
 $2 = $_size$addr;
 $m_size = ((($this1)) + 12|0);
 HEAP32[$m_size>>2] = $2;
 $m_size2 = ((($this1)) + 12|0);
 $3 = HEAP32[$m_size2>>2]|0;
 $call = (__Znam($3)|0);
 $m_buffer = ((($this1)) + 8|0);
 HEAP32[$m_buffer>>2] = $call;
 dest=$bufferDesc; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = $_type$addr;
 $type = ((($bufferDesc)) + 8|0);
 HEAP32[$type>>2] = $4;
 $5 = $_usage$addr;
 $usage = ((($bufferDesc)) + 12|0);
 HEAP32[$usage>>2] = $5;
 $m_usage3 = ((($this1)) + 20|0);
 $6 = HEAP32[$m_usage3>>2]|0;
 $cmp = ($6|0)==(1);
 if ($cmp) {
  $7 = $_buffer$addr;
  $content = ((($bufferDesc)) + 16|0);
  HEAP32[$content>>2] = $7;
  $8 = $_size$addr;
  $size = ((($bufferDesc)) + 4|0);
  HEAP32[$size>>2] = $8;
  $call4 = (_sg_make_buffer($bufferDesc)|0);
  HEAP32[$ref$tmp>>2] = $call4;
  $m_handle = ((($this1)) + 4|0);
  ;HEAP32[$m_handle>>2]=HEAP32[$ref$tmp>>2]|0;
  $9 = $_buffer$addr;
  $10 = $_size$addr;
  __ZN2lm9GfxBuffer12updateBufferEPKhj($this1,$9,$10);
  STACKTOP = sp;return 1;
 } else {
  $content5 = ((($bufferDesc)) + 16|0);
  HEAP32[$content5>>2] = 0;
  $11 = $_size$addr;
  $size6 = ((($bufferDesc)) + 4|0);
  HEAP32[$size6>>2] = $11;
  $call8 = (_sg_make_buffer($bufferDesc)|0);
  HEAP32[$ref$tmp7>>2] = $call8;
  $m_handle10 = ((($this1)) + 4|0);
  ;HEAP32[$m_handle10>>2]=HEAP32[$ref$tmp7>>2]|0;
  $12 = $_buffer$addr;
  $13 = $_size$addr;
  (__ZN2lm9GfxBuffer6updateEPKhj($this1,$12,$13)|0);
  STACKTOP = sp;return 1;
 }
 return (0)|0;
}
function __ZN2lm9GfxBuffer12updateBufferEPKhj($this,$_buffer,$_size) {
 $this = $this|0;
 $_buffer = $_buffer|0;
 $_size = $_size|0;
 var $0 = 0, $1 = 0, $2 = 0, $_buffer$addr = 0, $_size$addr = 0, $m_buffer = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $_buffer$addr = $_buffer;
 $_size$addr = $_size;
 $this1 = $this$addr;
 $m_buffer = ((($this1)) + 8|0);
 $0 = HEAP32[$m_buffer>>2]|0;
 $1 = $_buffer$addr;
 $2 = $_size$addr;
 _memcpy(($0|0),($1|0),($2|0))|0;
 STACKTOP = sp;return;
}
function __ZN2lm9GfxBuffer6updateEPKhj($this,$_buffer,$_size) {
 $this = $this|0;
 $_buffer = $_buffer|0;
 $_size = $_size|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $_buffer$addr = 0, $_size$addr = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $cmp = 0, $cmp2 = 0, $m_buffer = 0, $m_buffer3 = 0, $m_handle = 0;
 var $m_size = 0, $retval = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp$byval_copy = sp + 16|0;
 $retval = sp + 20|0;
 $agg$tmp = sp;
 $this$addr = $this;
 $_buffer$addr = $_buffer;
 $_size$addr = $_size;
 $this1 = $this$addr;
 $m_buffer = ((($this1)) + 8|0);
 $0 = HEAP32[$m_buffer>>2]|0;
 $cmp = ($0|0)!=(0|0);
 if ($cmp) {
  $1 = $_size$addr;
  $m_size = ((($this1)) + 12|0);
  $2 = HEAP32[$m_size>>2]|0;
  $cmp2 = ($1>>>0)<=($2>>>0);
  if ($cmp2) {
   $3 = $_buffer$addr;
   $4 = $_size$addr;
   __ZN2lm9GfxBuffer12updateBufferEPKhj($this1,$3,$4);
   $m_handle = ((($this1)) + 4|0);
   ;HEAP32[$agg$tmp>>2]=HEAP32[$m_handle>>2]|0;
   $m_buffer3 = ((($this1)) + 8|0);
   $5 = HEAP32[$m_buffer3>>2]|0;
   $6 = $_size$addr;
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
   _sg_update_buffer($agg$tmp$byval_copy,$5,$6);
   $$expand_i1_val = 1;
   HEAP8[$retval>>0] = $$expand_i1_val;
   $$pre_trunc = HEAP8[$retval>>0]|0;
   $7 = $$pre_trunc&1;
   STACKTOP = sp;return ($7|0);
  }
 }
 $$expand_i1_val2 = 0;
 HEAP8[$retval>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$retval>>0]|0;
 $7 = $$pre_trunc&1;
 STACKTOP = sp;return ($7|0);
}
function __ZN2lm9GfxBuffer9getHandleEv($this) {
 $this = $this|0;
 var $0 = 0, $m_handle = 0, $retval = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $retval = sp + 4|0;
 $this$addr = $this;
 $this1 = $this$addr;
 $m_handle = ((($this1)) + 4|0);
 ;HEAP32[$retval>>2]=HEAP32[$m_handle>>2]|0;
 $0 = HEAP32[$retval>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function __ZN2lm8BindingsD0Ev($this) {
 $this = $this|0;
 var $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 __ZN2lm8BindingsD2Ev($this1);
 __ZdlPv($this1);
 STACKTOP = sp;return;
}
function __ZN2lm8BindingsD2Ev($this) {
 $this = $this|0;
 var $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $this1 = $this$addr;
 __ZN2lm6ObjectD2Ev($this1);
 STACKTOP = sp;return;
}
function __ZN2lm8BindingsC2EPNS_9GfxBufferES2_($this,$_vertexBuffer,$_indexBuffer) {
 $this = $this|0;
 $_vertexBuffer = $_vertexBuffer|0;
 $_indexBuffer = $_indexBuffer|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $_indexBuffer$addr = 0, $_vertexBuffer$addr = 0, $arrayidx = 0, $cmp = 0, $i = 0, $inc = 0, $m_indexBuffer = 0, $m_texture = 0, $m_vertexBuffer = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $_vertexBuffer$addr = $_vertexBuffer;
 $_indexBuffer$addr = $_indexBuffer;
 $this1 = $this$addr;
 __ZN2lm6ObjectC2Ev($this1);
 HEAP32[$this1>>2] = (3772);
 $0 = $_vertexBuffer$addr;
 $m_vertexBuffer = ((($this1)) + 52|0);
 HEAP32[$m_vertexBuffer>>2] = $0;
 $1 = $_indexBuffer$addr;
 $m_indexBuffer = ((($this1)) + 56|0);
 HEAP32[$m_indexBuffer>>2] = $1;
 $i = 0;
 while(1) {
  $2 = $i;
  $cmp = ($2>>>0)<(12);
  if (!($cmp)) {
   break;
  }
  $m_texture = ((($this1)) + 4|0);
  $3 = $i;
  $arrayidx = (($m_texture) + ($3<<2)|0);
  HEAP32[$arrayidx>>2] = 0;
  $4 = $i;
  $inc = (($4) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function __ZN2lm8Bindings10setTextureEjPNS_7TextureE($this,$_index,$_texture) {
 $this = $this|0;
 $_index = $_index|0;
 $_texture = $_texture|0;
 var $0 = 0, $1 = 0, $_index$addr = 0, $_texture$addr = 0, $arrayidx = 0, $m_texture = 0, $this$addr = 0, $this1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $this$addr = $this;
 $_index$addr = $_index;
 $_texture$addr = $_texture;
 $this1 = $this$addr;
 $0 = $_texture$addr;
 $m_texture = ((($this1)) + 4|0);
 $1 = $_index$addr;
 $arrayidx = (($m_texture) + ($1<<2)|0);
 HEAP32[$arrayidx>>2] = $0;
 STACKTOP = sp;return;
}
function __ZN2lm3Gfx4InitEv() {
 var $desc = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $desc = sp;
 dest=$desc; stop=dest+72|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 _sg_setup($desc);
 STACKTOP = sp;return;
}
function __ZN2lm3Gfx4TermEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _sg_shutdown();
 return;
}
function __ZN2lm3Gfx6CommitEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _sg_commit();
 return;
}
function __sapp_emsc_notify_keyboard_hidden() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[(30945)>>0] = 0;
 return;
}
function ___em_js__sapp_js_create_textfield() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (9164|0);
}
function ___em_js__sapp_js_focus_textfield() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (9089|0);
}
function ___em_js__sapp_js_unfocus_textfield() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (9015|0);
}
function __Z30_sapp_html5_get_ask_leave_sitev() {
 var $0 = 0, $cond = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[(30284)>>0]|0;
 $tobool = $0&1;
 $cond = $tobool ? 1 : 0;
 return ($cond|0);
}
function ___em_js__sapp_js_hook_beforeunload() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (8824|0);
}
function _main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $argc$addr = 0, $argv$addr = 0, $desc = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $desc = sp;
 $retval = 0;
 $argc$addr = $argc;
 $argv$addr = $argv;
 $0 = $argc$addr;
 $1 = $argv$addr;
 _sokol_main($desc,$0,$1);
 __ZL9_sapp_runPK9sapp_desc($desc);
 STACKTOP = sp;return 0;
}
function __ZL9_sapp_runPK9sapp_desc($desc) {
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $antialias = 0, $attrs = 0, $call23 = 0, $call26 = 0;
 var $call5 = 0.0, $cmp = 0, $conv = 0.0, $conv1 = 0.0, $conv10 = 0.0, $conv11 = 0, $conv12 = 0.0, $conv14 = 0, $conv17 = 0, $conv18 = 0, $conv20 = 0, $conv22 = 0, $conv6 = 0.0, $conv8 = 0, $conv9 = 0, $ctx = 0, $depth = 0, $desc$addr = 0, $enableExtensionsByDefault = 0, $h = 0;
 var $majorVersion = 0, $mul = 0.0, $mul13 = 0.0, $premultipliedAlpha = 0, $preserveDrawingBuffer = 0, $stencil = 0, $tobool = 0, $tobool16 = 0, $tobool19 = 0, $tobool21 = 0, $tobool24 = 0, $tobool3 = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $w = sp + 8|0;
 $h = sp;
 $attrs = sp + 24|0;
 $desc$addr = $desc;
 $0 = $desc$addr;
 __ZL16_sapp_init_statePK9sapp_desc($0);
 __ZL24_sapp_emsc_init_keytablev();
 $1 = HEAP8[(31228)>>0]|0;
 $tobool = $1&1;
 if ($tobool) {
  $2 = HEAP32[(31196)>>2]|0;
  $conv = (+($2|0));
  HEAPF64[$w>>3] = $conv;
  $3 = HEAP32[(31200)>>2]|0;
  $conv1 = (+($3|0));
  HEAPF64[$h>>3] = $conv1;
 } else {
  $4 = HEAP32[(30280)>>2]|0;
  (_emscripten_get_element_css_size(($4|0),($w|0),($h|0))|0);
  (_emscripten_set_resize_callback_on_thread(((2)|0),(0|0),0,(228|0),2)|0);
 }
 $5 = HEAP8[(31212)>>0]|0;
 $tobool3 = $5&1;
 if ($tobool3) {
  $call5 = (+_emscripten_get_device_pixel_ratio());
  $conv6 = $call5;
  HEAPF32[(30268)>>2] = $conv6;
 }
 $6 = +HEAPF64[$w>>3];
 $conv8 = (~~(($6)));
 HEAP32[(30244)>>2] = $conv8;
 $7 = +HEAPF64[$h>>3];
 $conv9 = (~~(($7)));
 HEAP32[(30248)>>2] = $conv9;
 $8 = +HEAPF64[$w>>3];
 $9 = +HEAPF32[(30268)>>2];
 $conv10 = $9;
 $mul = $8 * $conv10;
 $conv11 = (~~(($mul)));
 HEAP32[(30252)>>2] = $conv11;
 $10 = +HEAPF64[$h>>3];
 $11 = +HEAPF32[(30268)>>2];
 $conv12 = $11;
 $mul13 = $10 * $conv12;
 $conv14 = (~~(($mul13)));
 HEAP32[(30256)>>2] = $conv14;
 $12 = HEAP32[(30280)>>2]|0;
 $13 = HEAP32[(30252)>>2]|0;
 $14 = HEAP32[(30256)>>2]|0;
 (_emscripten_set_canvas_element_size(($12|0),($13|0),($14|0))|0);
 _emscripten_webgl_init_context_attributes(($attrs|0));
 $15 = HEAP8[(31214)>>0]|0;
 $tobool16 = $15&1;
 $conv17 = $tobool16&1;
 HEAP32[$attrs>>2] = $conv17;
 $depth = ((($attrs)) + 4|0);
 HEAP32[$depth>>2] = 1;
 $stencil = ((($attrs)) + 8|0);
 HEAP32[$stencil>>2] = 1;
 $16 = HEAP32[(30260)>>2]|0;
 $cmp = ($16|0)>(1);
 $conv18 = $cmp&1;
 $antialias = ((($attrs)) + 12|0);
 HEAP32[$antialias>>2] = $conv18;
 $17 = HEAP8[(31230)>>0]|0;
 $tobool19 = $17&1;
 $conv20 = $tobool19&1;
 $premultipliedAlpha = ((($attrs)) + 16|0);
 HEAP32[$premultipliedAlpha>>2] = $conv20;
 $18 = HEAP8[(31229)>>0]|0;
 $tobool21 = $18&1;
 $conv22 = $tobool21&1;
 $preserveDrawingBuffer = ((($attrs)) + 20|0);
 HEAP32[$preserveDrawingBuffer>>2] = $conv22;
 $enableExtensionsByDefault = ((($attrs)) + 40|0);
 HEAP32[$enableExtensionsByDefault>>2] = 1;
 $19 = HEAP32[(30280)>>2]|0;
 $call23 = (_emscripten_webgl_create_context(($19|0),($attrs|0))|0);
 $ctx = $call23;
 $20 = $ctx;
 $tobool24 = ($20|0)!=(0);
 if (!($tobool24)) {
  $majorVersion = ((($attrs)) + 32|0);
  HEAP32[$majorVersion>>2] = 1;
  $21 = HEAP32[(30280)>>2]|0;
  $call26 = (_emscripten_webgl_create_context(($21|0),($attrs|0))|0);
  $ctx = $call26;
  HEAP8[(30272)>>0] = 1;
 }
 $22 = $ctx;
 (_emscripten_webgl_make_context_current(($22|0))|0);
 $23 = $ctx;
 (_emscripten_webgl_enable_extension(($23|0),(9467|0))|0);
 HEAP8[30240] = 1;
 $24 = HEAP32[(30280)>>2]|0;
 (_emscripten_set_mousedown_callback_on_thread(($24|0),(0|0),1,(229|0),2)|0);
 $25 = HEAP32[(30280)>>2]|0;
 (_emscripten_set_mouseup_callback_on_thread(($25|0),(0|0),1,(229|0),2)|0);
 $26 = HEAP32[(30280)>>2]|0;
 (_emscripten_set_mousemove_callback_on_thread(($26|0),(0|0),1,(229|0),2)|0);
 $27 = HEAP32[(30280)>>2]|0;
 (_emscripten_set_mouseenter_callback_on_thread(($27|0),(0|0),1,(229|0),2)|0);
 $28 = HEAP32[(30280)>>2]|0;
 (_emscripten_set_mouseleave_callback_on_thread(($28|0),(0|0),1,(229|0),2)|0);
 $29 = HEAP32[(30280)>>2]|0;
 (_emscripten_set_wheel_callback_on_thread(($29|0),(0|0),1,(230|0),2)|0);
 (_emscripten_set_keydown_callback_on_thread(((2)|0),(0|0),1,(231|0),2)|0);
 (_emscripten_set_keyup_callback_on_thread(((2)|0),(0|0),1,(231|0),2)|0);
 (_emscripten_set_keypress_callback_on_thread(((2)|0),(0|0),1,(231|0),2)|0);
 $30 = HEAP32[(30280)>>2]|0;
 (_emscripten_set_touchstart_callback_on_thread(($30|0),(0|0),1,(232|0),2)|0);
 $31 = HEAP32[(30280)>>2]|0;
 (_emscripten_set_touchmove_callback_on_thread(($31|0),(0|0),1,(232|0),2)|0);
 $32 = HEAP32[(30280)>>2]|0;
 (_emscripten_set_touchend_callback_on_thread(($32|0),(0|0),1,(232|0),2)|0);
 $33 = HEAP32[(30280)>>2]|0;
 (_emscripten_set_touchcancel_callback_on_thread(($33|0),(0|0),1,(232|0),2)|0);
 $34 = HEAP32[(30280)>>2]|0;
 (_emscripten_set_webglcontextlost_callback_on_thread(($34|0),(0|0),1,(233|0),2)|0);
 $35 = HEAP32[(30280)>>2]|0;
 (_emscripten_set_webglcontextrestored_callback_on_thread(($35|0),(0|0),1,(233|0),2)|0);
 _emscripten_request_animation_frame_loop((234|0),(0|0));
 _sapp_js_hook_beforeunload();
 STACKTOP = sp;return;
}
function __ZL16_sapp_init_statePK9sapp_desc($desc) {
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0, $cmp16 = 0;
 var $cmp6 = 0, $cond = 0, $cond10 = 0, $cond15 = 0, $cond20 = 0, $cond5 = 0, $desc$addr = 0, $frombool = 0, $tobool = 0, $tobool21 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $desc$addr = $desc;
 _memset((30240|0),0,3048)|0;
 $0 = $desc$addr;
 dest=(31152); src=$0; stop=dest+84|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 HEAP8[(30273)>>0] = 1;
 $1 = HEAP32[(31196)>>2]|0;
 $cmp = ($1|0)==(0);
 $2 = HEAP32[(31196)>>2]|0;
 $cond = $cmp ? 640 : $2;
 HEAP32[(30244)>>2] = $cond;
 $3 = HEAP32[(31200)>>2]|0;
 $cmp1 = ($3|0)==(0);
 $4 = HEAP32[(31200)>>2]|0;
 $cond5 = $cmp1 ? 480 : $4;
 HEAP32[(30248)>>2] = $cond5;
 $5 = HEAP32[(30244)>>2]|0;
 HEAP32[(30252)>>2] = $5;
 $6 = HEAP32[(30248)>>2]|0;
 HEAP32[(30256)>>2] = $6;
 $7 = HEAP32[(31204)>>2]|0;
 $cmp6 = ($7|0)==(0);
 $8 = HEAP32[(31204)>>2]|0;
 $cond10 = $cmp6 ? 1 : $8;
 HEAP32[(30260)>>2] = $cond10;
 $9 = HEAP32[(31208)>>2]|0;
 $cmp11 = ($9|0)==(0);
 $10 = HEAP32[(31208)>>2]|0;
 $cond15 = $cmp11 ? 1 : $10;
 HEAP32[(30264)>>2] = $cond15;
 $11 = HEAP32[(31224)>>2]|0;
 $cmp16 = ($11|0)==(0|0);
 $12 = HEAP32[(31224)>>2]|0;
 $cond20 = $cmp16 ? 9623 : $12;
 HEAP32[(30280)>>2] = $cond20;
 $13 = HEAP8[(31231)>>0]|0;
 $tobool = $13&1;
 $frombool = $tobool&1;
 HEAP8[(30284)>>0] = $frombool;
 $14 = HEAP32[(31216)>>2]|0;
 $tobool21 = ($14|0)!=(0|0);
 if ($tobool21) {
  $15 = HEAP32[(31216)>>2]|0;
  __ZL12_sapp_strcpyPKcPci($15,(30285),128);
  HEAPF32[(30268)>>2] = 1.0;
  STACKTOP = sp;return;
 } else {
  __ZL12_sapp_strcpyPKcPci(9630,(30285),128);
  HEAPF32[(30268)>>2] = 1.0;
  STACKTOP = sp;return;
 }
}
function __ZL24_sapp_emsc_init_keytablev() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(31268)>>2] = 259;
 HEAP32[(31272)>>2] = 258;
 HEAP32[(31288)>>2] = 257;
 HEAP32[(31300)>>2] = 340;
 HEAP32[(31304)>>2] = 341;
 HEAP32[(31308)>>2] = 342;
 HEAP32[(31312)>>2] = 284;
 HEAP32[(31344)>>2] = 256;
 HEAP32[(31364)>>2] = 32;
 HEAP32[(31368)>>2] = 266;
 HEAP32[(31372)>>2] = 267;
 HEAP32[(31376)>>2] = 269;
 HEAP32[(31380)>>2] = 268;
 HEAP32[(31384)>>2] = 263;
 HEAP32[(31388)>>2] = 265;
 HEAP32[(31392)>>2] = 262;
 HEAP32[(31396)>>2] = 264;
 HEAP32[(31416)>>2] = 260;
 HEAP32[(31420)>>2] = 261;
 HEAP32[(31428)>>2] = 48;
 HEAP32[(31432)>>2] = 49;
 HEAP32[(31436)>>2] = 50;
 HEAP32[(31440)>>2] = 51;
 HEAP32[(31444)>>2] = 52;
 HEAP32[(31448)>>2] = 53;
 HEAP32[(31452)>>2] = 54;
 HEAP32[(31456)>>2] = 55;
 HEAP32[(31460)>>2] = 56;
 HEAP32[(31464)>>2] = 57;
 HEAP32[(31472)>>2] = 59;
 HEAP32[(31492)>>2] = 61;
 HEAP32[(31496)>>2] = 65;
 HEAP32[(31500)>>2] = 66;
 HEAP32[(31504)>>2] = 67;
 HEAP32[(31508)>>2] = 68;
 HEAP32[(31512)>>2] = 69;
 HEAP32[(31516)>>2] = 70;
 HEAP32[(31520)>>2] = 71;
 HEAP32[(31524)>>2] = 72;
 HEAP32[(31528)>>2] = 73;
 HEAP32[(31532)>>2] = 74;
 HEAP32[(31536)>>2] = 75;
 HEAP32[(31540)>>2] = 76;
 HEAP32[(31544)>>2] = 77;
 HEAP32[(31548)>>2] = 78;
 HEAP32[(31552)>>2] = 79;
 HEAP32[(31556)>>2] = 80;
 HEAP32[(31560)>>2] = 81;
 HEAP32[(31564)>>2] = 82;
 HEAP32[(31568)>>2] = 83;
 HEAP32[(31572)>>2] = 84;
 HEAP32[(31576)>>2] = 85;
 HEAP32[(31580)>>2] = 86;
 HEAP32[(31584)>>2] = 87;
 HEAP32[(31588)>>2] = 88;
 HEAP32[(31592)>>2] = 89;
 HEAP32[(31596)>>2] = 90;
 HEAP32[(31600)>>2] = 343;
 HEAP32[(31608)>>2] = 348;
 HEAP32[(31620)>>2] = 320;
 HEAP32[(31624)>>2] = 321;
 HEAP32[(31628)>>2] = 322;
 HEAP32[(31632)>>2] = 323;
 HEAP32[(31636)>>2] = 324;
 HEAP32[(31640)>>2] = 325;
 HEAP32[(31644)>>2] = 326;
 HEAP32[(31648)>>2] = 327;
 HEAP32[(31652)>>2] = 328;
 HEAP32[(31656)>>2] = 329;
 HEAP32[(31660)>>2] = 332;
 HEAP32[(31664)>>2] = 334;
 HEAP32[(31672)>>2] = 333;
 HEAP32[(31676)>>2] = 330;
 HEAP32[(31680)>>2] = 331;
 HEAP32[(31684)>>2] = 290;
 HEAP32[(31688)>>2] = 291;
 HEAP32[(31692)>>2] = 292;
 HEAP32[(31696)>>2] = 293;
 HEAP32[(31700)>>2] = 294;
 HEAP32[(31704)>>2] = 295;
 HEAP32[(31708)>>2] = 296;
 HEAP32[(31712)>>2] = 297;
 HEAP32[(31716)>>2] = 298;
 HEAP32[(31720)>>2] = 299;
 HEAP32[(31724)>>2] = 300;
 HEAP32[(31728)>>2] = 301;
 HEAP32[(31812)>>2] = 282;
 HEAP32[(31816)>>2] = 281;
 HEAP32[(31928)>>2] = 45;
 HEAP32[(31980)>>2] = 59;
 HEAP32[(31984)>>2] = 61;
 HEAP32[(31988)>>2] = 44;
 HEAP32[(31992)>>2] = 45;
 HEAP32[(31996)>>2] = 46;
 HEAP32[(32000)>>2] = 47;
 HEAP32[(32004)>>2] = 96;
 HEAP32[(32112)>>2] = 91;
 HEAP32[(32116)>>2] = 92;
 HEAP32[(32120)>>2] = 93;
 HEAP32[(32124)>>2] = 39;
 HEAP32[(32132)>>2] = 343;
 return;
}
function __ZL23_sapp_emsc_size_changediPK17EmscriptenUiEventPv($event_type,$ui_event,$user_data) {
 $event_type = $event_type|0;
 $ui_event = $ui_event|0;
 $user_data = $user_data|0;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $call20 = 0;
 var $call9 = 0.0, $cmp = 0, $cmp17 = 0, $cmp18 = 0, $cmp2 = 0, $conv = 0.0, $conv1 = 0, $conv10 = 0.0, $conv12 = 0.0, $conv13 = 0, $conv14 = 0.0, $conv16 = 0, $conv4 = 0.0, $conv6 = 0, $event_type$addr = 0, $h = 0, $mul = 0.0, $mul15 = 0.0, $or$cond = 0, $tobool = 0;
 var $ui_event$addr = 0, $user_data$addr = 0, $w = 0, $windowInnerHeight = 0, $windowInnerWidth = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $w = sp + 8|0;
 $h = sp;
 $event_type$addr = $event_type;
 $ui_event$addr = $ui_event;
 $user_data$addr = $user_data;
 $0 = HEAP32[(30280)>>2]|0;
 (_emscripten_get_element_css_size(($0|0),($w|0),($h|0))|0);
 $1 = +HEAPF64[$w>>3];
 $cmp = $1 < 1.0;
 if ($cmp) {
  $2 = $ui_event$addr;
  $windowInnerWidth = ((($2)) + 12|0);
  $3 = HEAP32[$windowInnerWidth>>2]|0;
  $conv = (+($3|0));
  HEAPF64[$w>>3] = $conv;
 } else {
  $4 = +HEAPF64[$w>>3];
  $conv1 = (~~(($4)));
  HEAP32[(30244)>>2] = $conv1;
 }
 $5 = +HEAPF64[$h>>3];
 $cmp2 = $5 < 1.0;
 if ($cmp2) {
  $6 = $ui_event$addr;
  $windowInnerHeight = ((($6)) + 16|0);
  $7 = HEAP32[$windowInnerHeight>>2]|0;
  $conv4 = (+($7|0));
  HEAPF64[$h>>3] = $conv4;
 } else {
  $8 = +HEAPF64[$h>>3];
  $conv6 = (~~(($8)));
  HEAP32[(30248)>>2] = $conv6;
 }
 $9 = HEAP8[(31212)>>0]|0;
 $tobool = $9&1;
 if ($tobool) {
  $call9 = (+_emscripten_get_device_pixel_ratio());
  $conv10 = $call9;
  HEAPF32[(30268)>>2] = $conv10;
 }
 $10 = +HEAPF64[$w>>3];
 $11 = +HEAPF32[(30268)>>2];
 $conv12 = $11;
 $mul = $10 * $conv12;
 $conv13 = (~~(($mul)));
 HEAP32[(30252)>>2] = $conv13;
 $12 = +HEAPF64[$h>>3];
 $13 = +HEAPF32[(30268)>>2];
 $conv14 = $13;
 $mul15 = $12 * $conv14;
 $conv16 = (~~(($mul15)));
 HEAP32[(30256)>>2] = $conv16;
 $14 = HEAP32[(30252)>>2]|0;
 $cmp17 = ($14|0)>(0);
 $15 = HEAP32[(30256)>>2]|0;
 $cmp18 = ($15|0)>(0);
 $or$cond = $cmp17 & $cmp18;
 if (!($or$cond)) {
  ___assert_fail((9505|0),(9569|0),2163,(9599|0));
  // unreachable;
 }
 $16 = HEAP32[(30280)>>2]|0;
 $17 = HEAP32[(30252)>>2]|0;
 $18 = HEAP32[(30256)>>2]|0;
 (_emscripten_set_canvas_element_size(($16|0),($17|0),($18|0))|0);
 $call20 = (__ZL20_sapp_events_enabledv()|0);
 if (!($call20)) {
  STACKTOP = sp;return 1;
 }
 __ZL16_sapp_init_event15sapp_event_type(14);
 __ZL16_sapp_call_eventPK10sapp_event((30952));
 STACKTOP = sp;return 1;
}
function __ZL19_sapp_emsc_mouse_cbiPK20EmscriptenMouseEventPv($emsc_type,$emsc_event,$user_data) {
 $emsc_type = $emsc_type|0;
 $emsc_event = $emsc_event|0;
 $user_data = $user_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $altKey = 0, $button = 0, $button29 = 0, $button35 = 0, $button5 = 0, $call = 0, $cmp = 0, $cmp12 = 0;
 var $cmp7 = 0, $conv = 0.0, $conv1 = 0.0, $conv3 = 0, $conv30 = 0, $conv36 = 0, $conv6 = 0, $ctrlKey = 0, $emsc_event$addr = 0, $emsc_type$addr = 0, $is_button_event = 0, $metaKey = 0, $mul = 0.0, $mul2 = 0.0, $or = 0, $or17 = 0, $or21 = 0, $or25 = 0, $shiftKey = 0, $targetX = 0;
 var $targetY = 0, $tobool = 0, $tobool15 = 0, $tobool19 = 0, $tobool23 = 0, $tobool27 = 0, $type = 0, $user_data$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $emsc_type$addr = $emsc_type;
 $emsc_event$addr = $emsc_event;
 $user_data$addr = $user_data;
 $0 = $emsc_event$addr;
 $targetX = ((($0)) + 52|0);
 $1 = HEAP32[$targetX>>2]|0;
 $conv = (+($1|0));
 $2 = +HEAPF32[(30268)>>2];
 $mul = $conv * $2;
 HEAPF32[(30936)>>2] = $mul;
 $3 = $emsc_event$addr;
 $targetY = ((($3)) + 56|0);
 $4 = HEAP32[$targetY>>2]|0;
 $conv1 = (+($4|0));
 $5 = +HEAPF32[(30268)>>2];
 $mul2 = $conv1 * $5;
 HEAPF32[(30940)>>2] = $mul2;
 $call = (__ZL20_sapp_events_enabledv()|0);
 if (!($call)) {
  __ZL32_sapp_emsc_update_keyboard_statev();
  STACKTOP = sp;return 1;
 }
 $6 = $emsc_event$addr;
 $button = ((($6)) + 40|0);
 $7 = HEAP16[$button>>1]|0;
 $conv3 = $7&65535;
 $cmp = ($conv3|0)>=(0);
 if (!($cmp)) {
  __ZL32_sapp_emsc_update_keyboard_statev();
  STACKTOP = sp;return 1;
 }
 $8 = $emsc_event$addr;
 $button5 = ((($8)) + 40|0);
 $9 = HEAP16[$button5>>1]|0;
 $conv6 = $9&65535;
 $cmp7 = ($conv6|0)<(3);
 if (!($cmp7)) {
  __ZL32_sapp_emsc_update_keyboard_statev();
  STACKTOP = sp;return 1;
 }
 $is_button_event = 0;
 $10 = $emsc_type$addr;
 switch ($10|0) {
 case 5:  {
  $type = 4;
  $is_button_event = 1;
  break;
 }
 case 6:  {
  $type = 5;
  $is_button_event = 1;
  break;
 }
 case 8:  {
  $type = 7;
  break;
 }
 case 33:  {
  $type = 8;
  break;
 }
 case 34:  {
  $type = 9;
  break;
 }
 default: {
  $type = 0;
 }
 }
 $11 = $type;
 $cmp12 = ($11|0)!=(0);
 if (!($cmp12)) {
  __ZL32_sapp_emsc_update_keyboard_statev();
  STACKTOP = sp;return 1;
 }
 $12 = $type;
 __ZL16_sapp_init_event15sapp_event_type($12);
 $13 = $emsc_event$addr;
 $ctrlKey = ((($13)) + 24|0);
 $14 = HEAP32[$ctrlKey>>2]|0;
 $tobool = ($14|0)!=(0);
 if ($tobool) {
  $15 = HEAP32[(30976)>>2]|0;
  $or = $15 | 2;
  HEAP32[(30976)>>2] = $or;
 }
 $16 = $emsc_event$addr;
 $shiftKey = ((($16)) + 28|0);
 $17 = HEAP32[$shiftKey>>2]|0;
 $tobool15 = ($17|0)!=(0);
 if ($tobool15) {
  $18 = HEAP32[(30976)>>2]|0;
  $or17 = $18 | 1;
  HEAP32[(30976)>>2] = $or17;
 }
 $19 = $emsc_event$addr;
 $altKey = ((($19)) + 32|0);
 $20 = HEAP32[$altKey>>2]|0;
 $tobool19 = ($20|0)!=(0);
 if ($tobool19) {
  $21 = HEAP32[(30976)>>2]|0;
  $or21 = $21 | 4;
  HEAP32[(30976)>>2] = $or21;
 }
 $22 = $emsc_event$addr;
 $metaKey = ((($22)) + 36|0);
 $23 = HEAP32[$metaKey>>2]|0;
 $tobool23 = ($23|0)!=(0);
 if ($tobool23) {
  $24 = HEAP32[(30976)>>2]|0;
  $or25 = $24 | 8;
  HEAP32[(30976)>>2] = $or25;
 }
 $25 = $is_button_event;
 $tobool27 = $25&1;
 L33: do {
  if ($tobool27) {
   $26 = $emsc_event$addr;
   $button29 = ((($26)) + 40|0);
   $27 = HEAP16[$button29>>1]|0;
   $conv30 = $27&65535;
   switch ($conv30|0) {
   case 0:  {
    HEAP32[(30980)>>2] = 0;
    break L33;
    break;
   }
   case 1:  {
    HEAP32[(30980)>>2] = 2;
    break L33;
    break;
   }
   case 2:  {
    HEAP32[(30980)>>2] = 1;
    break L33;
    break;
   }
   default: {
    $28 = $emsc_event$addr;
    $button35 = ((($28)) + 40|0);
    $29 = HEAP16[$button35>>1]|0;
    $conv36 = $29&65535;
    HEAP32[(30980)>>2] = $conv36;
    break L33;
   }
   }
  } else {
   HEAP32[(30980)>>2] = -1;
  }
 } while(0);
 $30 = +HEAPF32[(30936)>>2];
 HEAPF32[(30984)>>2] = $30;
 $31 = +HEAPF32[(30940)>>2];
 HEAPF32[(30988)>>2] = $31;
 __ZL16_sapp_call_eventPK10sapp_event((30952));
 __ZL32_sapp_emsc_update_keyboard_statev();
 STACKTOP = sp;return 1;
}
function __ZL19_sapp_emsc_wheel_cbiPK20EmscriptenWheelEventPv($emsc_type,$emsc_event,$user_data) {
 $emsc_type = $emsc_type|0;
 $emsc_event = $emsc_event|0;
 $user_data = $user_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $altKey = 0, $call = 0, $conv = 0.0, $conv17 = 0.0;
 var $conv18 = 0.0, $conv19 = 0.0, $conv20 = 0.0, $conv22 = 0.0, $ctrlKey = 0, $deltaX = 0, $deltaY = 0, $emsc_event$addr = 0, $emsc_type$addr = 0, $metaKey = 0, $mul = 0.0, $mul21 = 0.0, $or = 0, $or10 = 0, $or15 = 0, $or5 = 0, $shiftKey = 0, $tobool = 0, $tobool13 = 0, $tobool3 = 0;
 var $tobool8 = 0, $user_data$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $emsc_type$addr = $emsc_type;
 $emsc_event$addr = $emsc_event;
 $user_data$addr = $user_data;
 $call = (__ZL20_sapp_events_enabledv()|0);
 if (!($call)) {
  __ZL32_sapp_emsc_update_keyboard_statev();
  STACKTOP = sp;return 1;
 }
 __ZL16_sapp_init_event15sapp_event_type(6);
 $0 = $emsc_event$addr;
 $ctrlKey = ((($0)) + 24|0);
 $1 = HEAP32[$ctrlKey>>2]|0;
 $tobool = ($1|0)!=(0);
 if ($tobool) {
  $2 = HEAP32[(30976)>>2]|0;
  $or = $2 | 2;
  HEAP32[(30976)>>2] = $or;
 }
 $3 = $emsc_event$addr;
 $shiftKey = ((($3)) + 28|0);
 $4 = HEAP32[$shiftKey>>2]|0;
 $tobool3 = ($4|0)!=(0);
 if ($tobool3) {
  $5 = HEAP32[(30976)>>2]|0;
  $or5 = $5 | 1;
  HEAP32[(30976)>>2] = $or5;
 }
 $6 = $emsc_event$addr;
 $altKey = ((($6)) + 32|0);
 $7 = HEAP32[$altKey>>2]|0;
 $tobool8 = ($7|0)!=(0);
 if ($tobool8) {
  $8 = HEAP32[(30976)>>2]|0;
  $or10 = $8 | 4;
  HEAP32[(30976)>>2] = $or10;
 }
 $9 = $emsc_event$addr;
 $metaKey = ((($9)) + 36|0);
 $10 = HEAP32[$metaKey>>2]|0;
 $tobool13 = ($10|0)!=(0);
 if ($tobool13) {
  $11 = HEAP32[(30976)>>2]|0;
  $or15 = $11 | 8;
  HEAP32[(30976)>>2] = $or15;
 }
 $12 = $emsc_event$addr;
 $deltaX = ((($12)) + 72|0);
 $13 = +HEAPF64[$deltaX>>3];
 $conv = $13;
 $conv17 = $conv;
 $mul = -0.10000000000000001 * $conv17;
 $conv18 = $mul;
 HEAPF32[(30992)>>2] = $conv18;
 $14 = $emsc_event$addr;
 $deltaY = ((($14)) + 80|0);
 $15 = +HEAPF64[$deltaY>>3];
 $conv19 = $15;
 $conv20 = $conv19;
 $mul21 = -0.10000000000000001 * $conv20;
 $conv22 = $mul21;
 HEAPF32[(30996)>>2] = $conv22;
 __ZL16_sapp_call_eventPK10sapp_event((30952));
 __ZL32_sapp_emsc_update_keyboard_statev();
 STACKTOP = sp;return 1;
}
function __ZL17_sapp_emsc_key_cbiPK23EmscriptenKeyboardEventPv($emsc_type,$emsc_event,$user_data) {
 $emsc_type = $emsc_type|0;
 $emsc_event = $emsc_event|0;
 $user_data = $user_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $altKey = 0, $call = 0, $call21 = 0, $charCode = 0, $cmp = 0, $cmp19 = 0, $conv = 0, $ctrlKey = 0, $emsc_event$addr = 0, $emsc_type$addr = 0, $frombool = 0, $keyCode = 0, $metaKey = 0, $or = 0, $or13 = 0, $or17 = 0, $or9 = 0;
 var $repeat = 0, $retval1 = 0, $shiftKey = 0, $tobool = 0, $tobool11 = 0, $tobool15 = 0, $tobool28 = 0, $tobool5 = 0, $tobool7 = 0, $type = 0, $user_data$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $emsc_type$addr = $emsc_type;
 $emsc_event$addr = $emsc_event;
 $user_data$addr = $user_data;
 $retval1 = 1;
 $call = (__ZL20_sapp_events_enabledv()|0);
 if (!($call)) {
  __ZL32_sapp_emsc_update_keyboard_statev();
  $22 = $retval1;
  $tobool28 = $22&1;
  $conv = $tobool28&1;
  STACKTOP = sp;return ($conv|0);
 }
 $0 = $emsc_type$addr;
 switch ($0|0) {
 case 2:  {
  $type = 1;
  break;
 }
 case 3:  {
  $type = 2;
  break;
 }
 case 1:  {
  $type = 3;
  break;
 }
 default: {
  $type = 0;
 }
 }
 $1 = $type;
 $cmp = ($1|0)!=(0);
 if (!($cmp)) {
  __ZL32_sapp_emsc_update_keyboard_statev();
  $22 = $retval1;
  $tobool28 = $22&1;
  $conv = $tobool28&1;
  STACKTOP = sp;return ($conv|0);
 }
 $2 = $type;
 __ZL16_sapp_init_event15sapp_event_type($2);
 $3 = $emsc_event$addr;
 $repeat = ((($3)) + 84|0);
 $4 = HEAP32[$repeat>>2]|0;
 $tobool = ($4|0)!=(0);
 $frombool = $tobool&1;
 HEAP8[(30972)>>0] = $frombool;
 $5 = $emsc_event$addr;
 $ctrlKey = ((($5)) + 68|0);
 $6 = HEAP32[$ctrlKey>>2]|0;
 $tobool5 = ($6|0)!=(0);
 if ($tobool5) {
  $7 = HEAP32[(30976)>>2]|0;
  $or = $7 | 2;
  HEAP32[(30976)>>2] = $or;
 }
 $8 = $emsc_event$addr;
 $shiftKey = ((($8)) + 72|0);
 $9 = HEAP32[$shiftKey>>2]|0;
 $tobool7 = ($9|0)!=(0);
 if ($tobool7) {
  $10 = HEAP32[(30976)>>2]|0;
  $or9 = $10 | 1;
  HEAP32[(30976)>>2] = $or9;
 }
 $11 = $emsc_event$addr;
 $altKey = ((($11)) + 76|0);
 $12 = HEAP32[$altKey>>2]|0;
 $tobool11 = ($12|0)!=(0);
 if ($tobool11) {
  $13 = HEAP32[(30976)>>2]|0;
  $or13 = $13 | 4;
  HEAP32[(30976)>>2] = $or13;
 }
 $14 = $emsc_event$addr;
 $metaKey = ((($14)) + 80|0);
 $15 = HEAP32[$metaKey>>2]|0;
 $tobool15 = ($15|0)!=(0);
 if ($tobool15) {
  $16 = HEAP32[(30976)>>2]|0;
  $or17 = $16 | 8;
  HEAP32[(30976)>>2] = $or17;
 }
 $17 = $type;
 $cmp19 = ($17|0)==(3);
 $18 = $emsc_event$addr;
 L25: do {
  if ($cmp19) {
   $charCode = ((($18)) + 152|0);
   $19 = HEAP32[$charCode>>2]|0;
   HEAP32[(30968)>>2] = $19;
  } else {
   $keyCode = ((($18)) + 156|0);
   $20 = HEAP32[$keyCode>>2]|0;
   $call21 = (__ZL19_sapp_translate_keyi($20)|0);
   HEAP32[(30964)>>2] = $call21;
   $21 = HEAP32[(30964)>>2]|0;
   switch ($21|0) {
   case 348: case 347: case 346: case 345: case 344: case 343: case 342: case 341: case 340: case 314: case 313: case 312: case 311: case 310: case 309: case 308: case 307: case 306: case 305: case 304: case 303: case 302: case 301: case 300: case 299: case 298: case 297: case 296: case 295: case 294: case 293: case 292: case 291: case 290: case 284: case 283: case 282: case 281: case 280: case 269: case 268: case 267: case 266: case 265: case 264: case 263: case 262: case 261: case 260: case 259: case 258: case 257: case 256: case 162: case 161:  {
    break L25;
    break;
   }
   default: {
   }
   }
   $retval1 = 0;
  }
 } while(0);
 __ZL16_sapp_call_eventPK10sapp_event((30952));
 __ZL32_sapp_emsc_update_keyboard_statev();
 $22 = $retval1;
 $tobool28 = $22&1;
 $conv = $tobool28&1;
 STACKTOP = sp;return ($conv|0);
}
function __ZL19_sapp_emsc_touch_cbiPK20EmscriptenTouchEventPv($emsc_type,$emsc_event,$user_data) {
 $emsc_type = $emsc_type|0;
 $emsc_event = $emsc_event|0;
 $user_data = $user_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $altKey = 0;
 var $arrayidx = 0, $arrayidx23 = 0, $call = 0, $changed = 0, $cmp = 0, $cmp19 = 0, $cmp22 = 0, $conv = 0.0, $conv25 = 0.0, $conv31 = 0, $ctrlKey = 0, $dst = 0, $emsc_event$addr = 0, $emsc_type$addr = 0, $frombool = 0, $i = 0, $inc = 0, $isChanged = 0, $metaKey = 0, $mul = 0.0;
 var $mul26 = 0.0, $or = 0, $or13 = 0, $or17 = 0, $or9 = 0, $pos_x = 0, $pos_y = 0, $retval1 = 0, $shiftKey = 0, $spec$store$select = 0, $src = 0, $targetX = 0, $targetY = 0, $tobool = 0, $tobool11 = 0, $tobool15 = 0, $tobool27 = 0, $tobool30 = 0, $tobool7 = 0, $touches = 0;
 var $type = 0, $user_data$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $emsc_type$addr = $emsc_type;
 $emsc_event$addr = $emsc_event;
 $user_data$addr = $user_data;
 $retval1 = 1;
 $call = (__ZL20_sapp_events_enabledv()|0);
 if (!($call)) {
  __ZL32_sapp_emsc_update_keyboard_statev();
  $38 = $retval1;
  $tobool30 = $38&1;
  $conv31 = $tobool30&1;
  STACKTOP = sp;return ($conv31|0);
 }
 $0 = $emsc_type$addr;
 switch ($0|0) {
 case 22:  {
  $type = 10;
  break;
 }
 case 24:  {
  $type = 11;
  break;
 }
 case 23:  {
  $type = 12;
  break;
 }
 case 25:  {
  $type = 13;
  break;
 }
 default: {
  $type = 0;
  $retval1 = 0;
 }
 }
 $1 = $type;
 $cmp = ($1|0)!=(0);
 if (!($cmp)) {
  __ZL32_sapp_emsc_update_keyboard_statev();
  $38 = $retval1;
  $tobool30 = $38&1;
  $conv31 = $tobool30&1;
  STACKTOP = sp;return ($conv31|0);
 }
 $2 = $type;
 __ZL16_sapp_init_event15sapp_event_type($2);
 $3 = $emsc_event$addr;
 $ctrlKey = ((($3)) + 4|0);
 $4 = HEAP32[$ctrlKey>>2]|0;
 $tobool = ($4|0)!=(0);
 if ($tobool) {
  $5 = HEAP32[(30976)>>2]|0;
  $or = $5 | 2;
  HEAP32[(30976)>>2] = $or;
 }
 $6 = $emsc_event$addr;
 $shiftKey = ((($6)) + 8|0);
 $7 = HEAP32[$shiftKey>>2]|0;
 $tobool7 = ($7|0)!=(0);
 if ($tobool7) {
  $8 = HEAP32[(30976)>>2]|0;
  $or9 = $8 | 1;
  HEAP32[(30976)>>2] = $or9;
 }
 $9 = $emsc_event$addr;
 $altKey = ((($9)) + 12|0);
 $10 = HEAP32[$altKey>>2]|0;
 $tobool11 = ($10|0)!=(0);
 if ($tobool11) {
  $11 = HEAP32[(30976)>>2]|0;
  $or13 = $11 | 4;
  HEAP32[(30976)>>2] = $or13;
 }
 $12 = $emsc_event$addr;
 $metaKey = ((($12)) + 16|0);
 $13 = HEAP32[$metaKey>>2]|0;
 $tobool15 = ($13|0)!=(0);
 if ($tobool15) {
  $14 = HEAP32[(30976)>>2]|0;
  $or17 = $14 | 8;
  HEAP32[(30976)>>2] = $or17;
 }
 $15 = $emsc_event$addr;
 $16 = HEAP32[$15>>2]|0;
 HEAP32[(31000)>>2] = $16;
 $17 = HEAP32[(31000)>>2]|0;
 $cmp19 = ($17|0)>(8);
 $spec$store$select = $cmp19 ? 8 : $16;
 HEAP32[(31000)>>2] = $spec$store$select;
 $i = 0;
 while(1) {
  $18 = $i;
  $19 = HEAP32[(31000)>>2]|0;
  $cmp22 = ($18|0)<($19|0);
  if (!($cmp22)) {
   break;
  }
  $20 = $emsc_event$addr;
  $touches = ((($20)) + 20|0);
  $21 = $i;
  $arrayidx = (($touches) + (($21*52)|0)|0);
  $src = $arrayidx;
  $22 = $i;
  $arrayidx23 = ((31004) + ($22<<4)|0);
  $dst = $arrayidx23;
  $23 = $src;
  $24 = HEAP32[$23>>2]|0;
  $25 = $dst;
  HEAP32[$25>>2] = $24;
  $26 = $src;
  $targetX = ((($26)) + 36|0);
  $27 = HEAP32[$targetX>>2]|0;
  $conv = (+($27|0));
  $28 = +HEAPF32[(30268)>>2];
  $mul = $conv * $28;
  $29 = $dst;
  $pos_x = ((($29)) + 4|0);
  HEAPF32[$pos_x>>2] = $mul;
  $30 = $src;
  $targetY = ((($30)) + 40|0);
  $31 = HEAP32[$targetY>>2]|0;
  $conv25 = (+($31|0));
  $32 = +HEAPF32[(30268)>>2];
  $mul26 = $conv25 * $32;
  $33 = $dst;
  $pos_y = ((($33)) + 8|0);
  HEAPF32[$pos_y>>2] = $mul26;
  $34 = $src;
  $isChanged = ((($34)) + 28|0);
  $35 = HEAP32[$isChanged>>2]|0;
  $tobool27 = ($35|0)!=(0);
  $36 = $dst;
  $changed = ((($36)) + 12|0);
  $frombool = $tobool27&1;
  HEAP8[$changed>>0] = $frombool;
  $37 = $i;
  $inc = (($37) + 1)|0;
  $i = $inc;
 }
 __ZL16_sapp_call_eventPK10sapp_event((30952));
 __ZL32_sapp_emsc_update_keyboard_statev();
 $38 = $retval1;
 $tobool30 = $38&1;
 $conv31 = $tobool30&1;
 STACKTOP = sp;return ($conv31|0);
}
function __ZL21_sapp_emsc_context_cbiPKvPv($emsc_type,$reserved,$user_data) {
 $emsc_type = $emsc_type|0;
 $reserved = $reserved|0;
 $user_data = $user_data|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $cmp = 0, $emsc_type$addr = 0, $or$cond = 0, $reserved$addr = 0, $type = 0, $user_data$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $emsc_type$addr = $emsc_type;
 $reserved$addr = $reserved;
 $user_data$addr = $user_data;
 $0 = $emsc_type$addr;
 switch ($0|0) {
 case 31:  {
  $type = 17;
  break;
 }
 case 32:  {
  $type = 18;
  break;
 }
 default: {
  $type = 0;
 }
 }
 $call = (__ZL20_sapp_events_enabledv()|0);
 $1 = $type;
 $cmp = (0)!=($1|0);
 $or$cond = $call & $cmp;
 if (!($or$cond)) {
  STACKTOP = sp;return 1;
 }
 $2 = $type;
 __ZL16_sapp_init_event15sapp_event_type($2);
 __ZL16_sapp_call_eventPK10sapp_event((30952));
 STACKTOP = sp;return 1;
}
function __ZL16_sapp_emsc_framedPv($time,$userData) {
 $time = +$time;
 $userData = $userData|0;
 var $time$addr = 0.0, $userData$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $time$addr = $time;
 $userData$addr = $userData;
 __ZL11_sapp_framev();
 STACKTOP = sp;return 1;
}
function __ZL11_sapp_framev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[(30273)>>0]|0;
 $tobool = $0&1;
 if ($tobool) {
  HEAP8[(30273)>>0] = 0;
  __ZL15_sapp_call_initv();
 }
 __ZL16_sapp_call_framev();
 $1 = (30928);
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (_i64Add(($3|0),($6|0),1,0)|0);
 $8 = (getTempRet0() | 0);
 $9 = (30928);
 $10 = $9;
 HEAP32[$10>>2] = $7;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $8;
 return;
}
function __ZL15_sapp_call_initv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(31152)>>2]|0;
 $tobool = ($0|0)!=(0|0);
 if ($tobool) {
  $1 = HEAP32[(31152)>>2]|0;
  FUNCTION_TABLE_v[$1 & 255]();
 } else {
  $2 = HEAP32[(31176)>>2]|0;
  $tobool1 = ($2|0)!=(0|0);
  if ($tobool1) {
   $3 = HEAP32[(31176)>>2]|0;
   $4 = HEAP32[(31172)>>2]|0;
   FUNCTION_TABLE_vi[$3 & 255]($4);
  }
 }
 HEAP8[(30274)>>0] = 1;
 return;
}
function __ZL16_sapp_call_framev() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $tobool = 0, $tobool1 = 0, $tobool2 = 0, $tobool4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[(30274)>>0]|0;
 $tobool = $0&1;
 if (!($tobool)) {
  return;
 }
 $1 = HEAP8[(30275)>>0]|0;
 $tobool1 = $1&1;
 if ($tobool1) {
  return;
 }
 $2 = HEAP32[(31156)>>2]|0;
 $tobool2 = ($2|0)!=(0|0);
 if ($tobool2) {
  $3 = HEAP32[(31156)>>2]|0;
  FUNCTION_TABLE_v[$3 & 255]();
  return;
 }
 $4 = HEAP32[(31180)>>2]|0;
 $tobool4 = ($4|0)!=(0|0);
 if (!($tobool4)) {
  return;
 }
 $5 = HEAP32[(31180)>>2]|0;
 $6 = HEAP32[(31172)>>2]|0;
 FUNCTION_TABLE_vi[$5 & 255]($6);
 return;
}
function __ZL20_sapp_events_enabledv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $or$cond = 0, $tobool = 0, $tobool1 = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(31164)>>2]|0;
 $tobool = ($0|0)!=(0|0);
 $1 = HEAP32[(31188)>>2]|0;
 $tobool1 = ($1|0)!=(0|0);
 $or$cond = $tobool | $tobool1;
 if (!($or$cond)) {
  $3 = 0;
  return ($3|0);
 }
 $2 = HEAP8[(30274)>>0]|0;
 $tobool2 = $2&1;
 $3 = $tobool2;
 return ($3|0);
}
function __ZL16_sapp_init_event15sapp_event_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $type$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $type$addr = $type;
 _memset(((30952)|0),0,200)|0;
 $0 = $type$addr;
 HEAP32[(30960)>>2] = $0;
 $1 = (30928);
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (30952);
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 HEAP32[(30980)>>2] = -1;
 $11 = HEAP32[(30244)>>2]|0;
 HEAP32[(31132)>>2] = $11;
 $12 = HEAP32[(30248)>>2]|0;
 HEAP32[(31136)>>2] = $12;
 $13 = HEAP32[(30252)>>2]|0;
 HEAP32[(31140)>>2] = $13;
 $14 = HEAP32[(30256)>>2]|0;
 HEAP32[(31144)>>2] = $14;
 STACKTOP = sp;return;
}
function __ZL16_sapp_call_eventPK10sapp_event($e) {
 $e = $e|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $e$addr = 0, $tobool = 0, $tobool1 = 0, $tobool3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $e$addr = $e;
 $0 = HEAP8[(30275)>>0]|0;
 $tobool = $0&1;
 if ($tobool) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[(31164)>>2]|0;
 $tobool1 = ($1|0)!=(0|0);
 if ($tobool1) {
  $2 = HEAP32[(31164)>>2]|0;
  $3 = $e$addr;
  FUNCTION_TABLE_vi[$2 & 255]($3);
  STACKTOP = sp;return;
 }
 $4 = HEAP32[(31188)>>2]|0;
 $tobool3 = ($4|0)!=(0|0);
 if (!($tobool3)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[(31188)>>2]|0;
 $6 = $e$addr;
 $7 = HEAP32[(31172)>>2]|0;
 FUNCTION_TABLE_vii[$5 & 255]($6,$7);
 STACKTOP = sp;return;
}
function __ZL32_sapp_emsc_update_keyboard_statev() {
 var $0 = 0, $1 = 0, $tobool = 0, $tobool1 = 0, $tobool4 = 0, $tobool6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = 0&1;
 if ($tobool) {
  $0 = HEAP8[35316]|0;
  $tobool1 = $0&1;
  if (!($tobool1)) {
   HEAP8[35316] = 1;
   _sapp_js_create_textfield();
  }
  HEAP8[(30945)>>0] = 1;
  _sapp_js_focus_textfield();
 }
 $tobool4 = 0&1;
 if (!($tobool4)) {
  return;
 }
 $1 = HEAP8[35316]|0;
 $tobool6 = $1&1;
 if (!($tobool6)) {
  return;
 }
 HEAP8[(30945)>>0] = 0;
 _sapp_js_unfocus_textfield();
 return;
}
function __ZL19_sapp_translate_keyi($scan_code) {
 $scan_code = $scan_code|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arrayidx = 0, $cmp = 0, $cmp1 = 0, $or$cond = 0, $retval = 0, $scan_code$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $scan_code$addr = $scan_code;
 $0 = $scan_code$addr;
 $cmp = ($0|0)>=(0);
 $1 = $scan_code$addr;
 $cmp1 = ($1|0)<(512);
 $or$cond = $cmp & $cmp1;
 if ($or$cond) {
  $2 = $scan_code$addr;
  $arrayidx = ((31236) + ($2<<2)|0);
  $3 = HEAP32[$arrayidx>>2]|0;
  $retval = $3;
  $4 = $retval;
  STACKTOP = sp;return ($4|0);
 } else {
  $retval = 0;
  $4 = $retval;
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function __ZL12_sapp_strcpyPKcPci($src,$dst,$max_len) {
 $src = $src|0;
 $dst = $dst|0;
 $max_len = $max_len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $c = 0, $cmp = 0, $cmp3 = 0;
 var $cmp4 = 0, $cmp7 = 0, $conv = 0, $conv6 = 0, $dst$addr = 0, $end = 0, $i = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr5 = 0, $max_len$addr = 0, $or$cond = 0, $or$cond1 = 0, $src$addr = 0, $sub = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $src$addr = $src;
 $dst$addr = $dst;
 $max_len$addr = $max_len;
 $0 = $src$addr;
 $tobool = ($0|0)!=(0|0);
 $1 = $dst$addr;
 $tobool1 = ($1|0)!=(0|0);
 $or$cond = $tobool & $tobool1;
 $2 = $max_len$addr;
 $cmp = ($2|0)>(0);
 $or$cond1 = $or$cond & $cmp;
 if (!($or$cond1)) {
  ___assert_fail((9640|0),(9569|0),1009,(9668|0));
  // unreachable;
 }
 $3 = $dst$addr;
 $4 = $max_len$addr;
 $sub = (($4) - 1)|0;
 $arrayidx = (($3) + ($sub)|0);
 $end = $arrayidx;
 $c = 0;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $max_len$addr;
  $cmp3 = ($5|0)<($6|0);
  if (!($cmp3)) {
   break;
  }
  $7 = $src$addr;
  $8 = HEAP8[$7>>0]|0;
  $c = $8;
  $9 = $c;
  $conv = $9 << 24 >> 24;
  $cmp4 = ($conv|0)!=(0);
  if ($cmp4) {
   $10 = $src$addr;
   $incdec$ptr = ((($10)) + 1|0);
   $src$addr = $incdec$ptr;
  }
  $11 = $c;
  $12 = $dst$addr;
  $incdec$ptr5 = ((($12)) + 1|0);
  $dst$addr = $incdec$ptr5;
  HEAP8[$12>>0] = $11;
  $13 = $i;
  $inc = (($13) + 1)|0;
  $i = $inc;
 }
 $14 = $c;
 $conv6 = $14 << 24 >> 24;
 $cmp7 = ($conv6|0)!=(0);
 if (!($cmp7)) {
  STACKTOP = sp;return;
 }
 $15 = $end;
 HEAP8[$15>>0] = 0;
 STACKTOP = sp;return;
}
function _sapp_width() {
 var $0 = 0, $1 = 0, $cmp = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(30252)>>2]|0;
 $cmp = ($0|0)>(0);
 $1 = HEAP32[(30252)>>2]|0;
 $cond = $cmp ? $1 : 1;
 return ($cond|0);
}
function _sapp_height() {
 var $0 = 0, $1 = 0, $cmp = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(30256)>>2]|0;
 $cmp = ($0|0)>(0);
 $1 = HEAP32[(30256)>>2]|0;
 $cond = $cmp ? $1 : 1;
 return ($cond|0);
}
function _sg_setup($desc) {
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $_end_canary = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp10 = 0, $cmp15 = 0, $cmp20 = 0, $cmp25 = 0, $cmp30 = 0, $cmp35 = 0, $cmp4 = 0, $cmp5 = 0, $coerce = 0, $cond = 0, $cond14 = 0, $cond19 = 0, $cond24 = 0, $cond29 = 0;
 var $cond34 = 0, $cond39 = 0, $cond9 = 0, $desc$addr = 0, $tobool = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $coerce = sp;
 $desc$addr = $desc;
 $0 = $desc$addr;
 $tobool = ($0|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((9681|0),(9686|0),10804,(9716|0));
  // unreachable;
 }
 $1 = $desc$addr;
 $2 = HEAP32[$1>>2]|0;
 $cmp = ($2|0)==(0);
 if (!($cmp)) {
  ___assert_fail((9725|0),(9686|0),10805,(9716|0));
  // unreachable;
 }
 $3 = $desc$addr;
 $_end_canary = ((($3)) + 68|0);
 $4 = HEAP32[$_end_canary>>2]|0;
 $cmp1 = ($4|0)==(0);
 if ($cmp1) {
  _memset((33468|0),0,1244)|0;
  $5 = $desc$addr;
  dest=(33472); src=$5; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $6 = HEAP32[(33476)>>2]|0;
  $cmp4 = ($6|0)==(0);
  $7 = HEAP32[(33476)>>2]|0;
  $cond = $cmp4 ? 128 : $7;
  HEAP32[(33476)>>2] = $cond;
  $8 = HEAP32[(33480)>>2]|0;
  $cmp5 = ($8|0)==(0);
  $9 = HEAP32[(33480)>>2]|0;
  $cond9 = $cmp5 ? 128 : $9;
  HEAP32[(33480)>>2] = $cond9;
  $10 = HEAP32[(33484)>>2]|0;
  $cmp10 = ($10|0)==(0);
  $11 = HEAP32[(33484)>>2]|0;
  $cond14 = $cmp10 ? 32 : $11;
  HEAP32[(33484)>>2] = $cond14;
  $12 = HEAP32[(33488)>>2]|0;
  $cmp15 = ($12|0)==(0);
  $13 = HEAP32[(33488)>>2]|0;
  $cond19 = $cmp15 ? 64 : $13;
  HEAP32[(33488)>>2] = $cond19;
  $14 = HEAP32[(33492)>>2]|0;
  $cmp20 = ($14|0)==(0);
  $15 = HEAP32[(33492)>>2]|0;
  $cond24 = $cmp20 ? 16 : $15;
  HEAP32[(33492)>>2] = $cond24;
  $16 = HEAP32[(33496)>>2]|0;
  $cmp25 = ($16|0)==(0);
  $17 = HEAP32[(33496)>>2]|0;
  $cond29 = $cmp25 ? 16 : $17;
  HEAP32[(33496)>>2] = $cond29;
  $18 = HEAP32[(33516)>>2]|0;
  $cmp30 = ($18|0)==(0);
  $19 = HEAP32[(33516)>>2]|0;
  $cond34 = $cmp30 ? 4194304 : $19;
  HEAP32[(33516)>>2] = $cond34;
  $20 = HEAP32[(33520)>>2]|0;
  $cmp35 = ($20|0)==(0);
  $21 = HEAP32[(33520)>>2]|0;
  $cond39 = $cmp35 ? 64 : $21;
  HEAP32[(33520)>>2] = $cond39;
  __ZL15_sg_setup_poolsP11_sg_pools_tPK7sg_desc((33568),(33472));
  HEAP32[(33544)>>2] = 1;
  __ZL17_sg_setup_backendPK7sg_desc((33472));
  HEAP8[33468] = 1;
  $call = (_sg_setup_context()|0);
  HEAP32[$coerce>>2] = $call;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((9725|0),(9686|0),10805,(9716|0));
  // unreachable;
 }
}
function __ZL15_sg_setup_poolsP11_sg_pools_tPK7sg_desc($p,$desc) {
 $p = $p|0;
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $buffer_pool_byte_size = 0, $buffer_pool_size = 0;
 var $buffer_pool_size4 = 0, $buffer_pool_size8 = 0, $buffers = 0, $buffers10 = 0, $buffers14 = 0, $call = 0, $call25 = 0, $call41 = 0, $call57 = 0, $call73 = 0, $call89 = 0, $cmp = 0, $cmp15 = 0, $cmp18 = 0, $cmp31 = 0, $cmp34 = 0, $cmp47 = 0, $cmp5 = 0, $cmp50 = 0, $cmp63 = 0;
 var $cmp66 = 0, $cmp79 = 0, $cmp82 = 0, $context_pool = 0, $context_pool86 = 0, $context_pool_byte_size = 0, $context_pool_size = 0, $context_pool_size81 = 0, $context_pool_size85 = 0, $contexts = 0, $contexts90 = 0, $contexts94 = 0, $desc$addr = 0, $image_pool = 0, $image_pool22 = 0, $image_pool_byte_size = 0, $image_pool_size = 0, $image_pool_size17 = 0, $image_pool_size21 = 0, $images = 0;
 var $images26 = 0, $images30 = 0, $mul = 0, $mul24 = 0, $mul40 = 0, $mul56 = 0, $mul72 = 0, $mul88 = 0, $p$addr = 0, $pass_pool = 0, $pass_pool70 = 0, $pass_pool_byte_size = 0, $pass_pool_size = 0, $pass_pool_size65 = 0, $pass_pool_size69 = 0, $passes = 0, $passes74 = 0, $passes78 = 0, $pipeline_pool = 0, $pipeline_pool54 = 0;
 var $pipeline_pool_byte_size = 0, $pipeline_pool_size = 0, $pipeline_pool_size49 = 0, $pipeline_pool_size53 = 0, $pipelines = 0, $pipelines58 = 0, $pipelines62 = 0, $shader_pool = 0, $shader_pool38 = 0, $shader_pool_byte_size = 0, $shader_pool_size = 0, $shader_pool_size33 = 0, $shader_pool_size37 = 0, $shaders = 0, $shaders42 = 0, $shaders46 = 0, $tobool = 0, $tobool1 = 0, $tobool11 = 0, $tobool27 = 0;
 var $tobool43 = 0, $tobool59 = 0, $tobool75 = 0, $tobool91 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $p$addr = $p;
 $desc$addr = $desc;
 $0 = $p$addr;
 $tobool = ($0|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((10758|0),(9686|0),9570,(10760|0));
  // unreachable;
 }
 $1 = $desc$addr;
 $tobool1 = ($1|0)!=(0|0);
 if (!($tobool1)) {
  ___assert_fail((9681|0),(9686|0),9571,(10760|0));
  // unreachable;
 }
 $2 = $desc$addr;
 $buffer_pool_size = ((($2)) + 4|0);
 $3 = HEAP32[$buffer_pool_size>>2]|0;
 $cmp = ($3|0)>(0);
 if (!($cmp)) {
  ___assert_fail((10776|0),(9686|0),9573,(10760|0));
  // unreachable;
 }
 $4 = $desc$addr;
 $buffer_pool_size4 = ((($4)) + 4|0);
 $5 = HEAP32[$buffer_pool_size4>>2]|0;
 $cmp5 = ($5|0)<(65536);
 if (!($cmp5)) {
  ___assert_fail((10776|0),(9686|0),9573,(10760|0));
  // unreachable;
 }
 $6 = $p$addr;
 $7 = $desc$addr;
 $buffer_pool_size8 = ((($7)) + 4|0);
 $8 = HEAP32[$buffer_pool_size8>>2]|0;
 __ZL13_sg_init_poolP10_sg_pool_ti($6,$8);
 $9 = $p$addr;
 $10 = HEAP32[$9>>2]|0;
 $mul = ($10*60)|0;
 $buffer_pool_byte_size = $mul;
 $11 = $buffer_pool_byte_size;
 $call = (_malloc($11)|0);
 $12 = $p$addr;
 $buffers = ((($12)) + 96|0);
 HEAP32[$buffers>>2] = $call;
 $13 = $p$addr;
 $buffers10 = ((($13)) + 96|0);
 $14 = HEAP32[$buffers10>>2]|0;
 $tobool11 = ($14|0)!=(0|0);
 if (!($tobool11)) {
  ___assert_fail((10853|0),(9686|0),9577,(10760|0));
  // unreachable;
 }
 $15 = $p$addr;
 $buffers14 = ((($15)) + 96|0);
 $16 = HEAP32[$buffers14>>2]|0;
 $17 = $buffer_pool_byte_size;
 _memset(($16|0),0,($17|0))|0;
 $18 = $desc$addr;
 $image_pool_size = ((($18)) + 8|0);
 $19 = HEAP32[$image_pool_size>>2]|0;
 $cmp15 = ($19|0)>(0);
 if (!($cmp15)) {
  ___assert_fail((10864|0),(9686|0),9580,(10760|0));
  // unreachable;
 }
 $20 = $desc$addr;
 $image_pool_size17 = ((($20)) + 8|0);
 $21 = HEAP32[$image_pool_size17>>2]|0;
 $cmp18 = ($21|0)<(65536);
 if (!($cmp18)) {
  ___assert_fail((10864|0),(9686|0),9580,(10760|0));
  // unreachable;
 }
 $22 = $p$addr;
 $image_pool = ((($22)) + 16|0);
 $23 = $desc$addr;
 $image_pool_size21 = ((($23)) + 8|0);
 $24 = HEAP32[$image_pool_size21>>2]|0;
 __ZL13_sg_init_poolP10_sg_pool_ti($image_pool,$24);
 $25 = $p$addr;
 $image_pool22 = ((($25)) + 16|0);
 $26 = HEAP32[$image_pool22>>2]|0;
 $mul24 = ($26*112)|0;
 $image_pool_byte_size = $mul24;
 $27 = $image_pool_byte_size;
 $call25 = (_malloc($27)|0);
 $28 = $p$addr;
 $images = ((($28)) + 100|0);
 HEAP32[$images>>2] = $call25;
 $29 = $p$addr;
 $images26 = ((($29)) + 100|0);
 $30 = HEAP32[$images26>>2]|0;
 $tobool27 = ($30|0)!=(0|0);
 if (!($tobool27)) {
  ___assert_fail((10939|0),(9686|0),9584,(10760|0));
  // unreachable;
 }
 $31 = $p$addr;
 $images30 = ((($31)) + 100|0);
 $32 = HEAP32[$images30>>2]|0;
 $33 = $image_pool_byte_size;
 _memset(($32|0),0,($33|0))|0;
 $34 = $desc$addr;
 $shader_pool_size = ((($34)) + 12|0);
 $35 = HEAP32[$shader_pool_size>>2]|0;
 $cmp31 = ($35|0)>(0);
 if (!($cmp31)) {
  ___assert_fail((10949|0),(9686|0),9587,(10760|0));
  // unreachable;
 }
 $36 = $desc$addr;
 $shader_pool_size33 = ((($36)) + 12|0);
 $37 = HEAP32[$shader_pool_size33>>2]|0;
 $cmp34 = ($37|0)<(65536);
 if (!($cmp34)) {
  ___assert_fail((10949|0),(9686|0),9587,(10760|0));
  // unreachable;
 }
 $38 = $p$addr;
 $shader_pool = ((($38)) + 32|0);
 $39 = $desc$addr;
 $shader_pool_size37 = ((($39)) + 12|0);
 $40 = HEAP32[$shader_pool_size37>>2]|0;
 __ZL13_sg_init_poolP10_sg_pool_ti($shader_pool,$40);
 $41 = $p$addr;
 $shader_pool38 = ((($41)) + 32|0);
 $42 = HEAP32[$shader_pool38>>2]|0;
 $mul40 = ($42*2176)|0;
 $shader_pool_byte_size = $mul40;
 $43 = $shader_pool_byte_size;
 $call41 = (_malloc($43)|0);
 $44 = $p$addr;
 $shaders = ((($44)) + 104|0);
 HEAP32[$shaders>>2] = $call41;
 $45 = $p$addr;
 $shaders42 = ((($45)) + 104|0);
 $46 = HEAP32[$shaders42>>2]|0;
 $tobool43 = ($46|0)!=(0|0);
 if (!($tobool43)) {
  ___assert_fail((11026|0),(9686|0),9591,(10760|0));
  // unreachable;
 }
 $47 = $p$addr;
 $shaders46 = ((($47)) + 104|0);
 $48 = HEAP32[$shaders46>>2]|0;
 $49 = $shader_pool_byte_size;
 _memset(($48|0),0,($49|0))|0;
 $50 = $desc$addr;
 $pipeline_pool_size = ((($50)) + 16|0);
 $51 = HEAP32[$pipeline_pool_size>>2]|0;
 $cmp47 = ($51|0)>(0);
 if (!($cmp47)) {
  ___assert_fail((11037|0),(9686|0),9594,(10760|0));
  // unreachable;
 }
 $52 = $desc$addr;
 $pipeline_pool_size49 = ((($52)) + 16|0);
 $53 = HEAP32[$pipeline_pool_size49>>2]|0;
 $cmp50 = ($53|0)<(65536);
 if (!($cmp50)) {
  ___assert_fail((11037|0),(9686|0),9594,(10760|0));
  // unreachable;
 }
 $54 = $p$addr;
 $pipeline_pool = ((($54)) + 48|0);
 $55 = $desc$addr;
 $pipeline_pool_size53 = ((($55)) + 16|0);
 $56 = HEAP32[$pipeline_pool_size53>>2]|0;
 __ZL13_sg_init_poolP10_sg_pool_ti($pipeline_pool,$56);
 $57 = $p$addr;
 $pipeline_pool54 = ((($57)) + 48|0);
 $58 = HEAP32[$pipeline_pool54>>2]|0;
 $mul56 = ($58*440)|0;
 $pipeline_pool_byte_size = $mul56;
 $59 = $pipeline_pool_byte_size;
 $call57 = (_malloc($59)|0);
 $60 = $p$addr;
 $pipelines = ((($60)) + 108|0);
 HEAP32[$pipelines>>2] = $call57;
 $61 = $p$addr;
 $pipelines58 = ((($61)) + 108|0);
 $62 = HEAP32[$pipelines58>>2]|0;
 $tobool59 = ($62|0)!=(0|0);
 if (!($tobool59)) {
  ___assert_fail((11118|0),(9686|0),9598,(10760|0));
  // unreachable;
 }
 $63 = $p$addr;
 $pipelines62 = ((($63)) + 108|0);
 $64 = HEAP32[$pipelines62>>2]|0;
 $65 = $pipeline_pool_byte_size;
 _memset(($64|0),0,($65|0))|0;
 $66 = $desc$addr;
 $pass_pool_size = ((($66)) + 20|0);
 $67 = HEAP32[$pass_pool_size>>2]|0;
 $cmp63 = ($67|0)>(0);
 if (!($cmp63)) {
  ___assert_fail((11131|0),(9686|0),9601,(10760|0));
  // unreachable;
 }
 $68 = $desc$addr;
 $pass_pool_size65 = ((($68)) + 20|0);
 $69 = HEAP32[$pass_pool_size65>>2]|0;
 $cmp66 = ($69|0)<(65536);
 if (!($cmp66)) {
  ___assert_fail((11131|0),(9686|0),9601,(10760|0));
  // unreachable;
 }
 $70 = $p$addr;
 $pass_pool = ((($70)) + 64|0);
 $71 = $desc$addr;
 $pass_pool_size69 = ((($71)) + 20|0);
 $72 = HEAP32[$pass_pool_size69>>2]|0;
 __ZL13_sg_init_poolP10_sg_pool_ti($pass_pool,$72);
 $73 = $p$addr;
 $pass_pool70 = ((($73)) + 64|0);
 $74 = HEAP32[$pass_pool70>>2]|0;
 $mul72 = ($74*120)|0;
 $pass_pool_byte_size = $mul72;
 $75 = $pass_pool_byte_size;
 $call73 = (_malloc($75)|0);
 $76 = $p$addr;
 $passes = ((($76)) + 112|0);
 HEAP32[$passes>>2] = $call73;
 $77 = $p$addr;
 $passes74 = ((($77)) + 112|0);
 $78 = HEAP32[$passes74>>2]|0;
 $tobool75 = ($78|0)!=(0|0);
 if (!($tobool75)) {
  ___assert_fail((11204|0),(9686|0),9605,(10760|0));
  // unreachable;
 }
 $79 = $p$addr;
 $passes78 = ((($79)) + 112|0);
 $80 = HEAP32[$passes78>>2]|0;
 $81 = $pass_pool_byte_size;
 _memset(($80|0),0,($81|0))|0;
 $82 = $desc$addr;
 $context_pool_size = ((($82)) + 24|0);
 $83 = HEAP32[$context_pool_size>>2]|0;
 $cmp79 = ($83|0)>(0);
 if (!($cmp79)) {
  ___assert_fail((11214|0),(9686|0),9608,(10760|0));
  // unreachable;
 }
 $84 = $desc$addr;
 $context_pool_size81 = ((($84)) + 24|0);
 $85 = HEAP32[$context_pool_size81>>2]|0;
 $cmp82 = ($85|0)<(65536);
 if (!($cmp82)) {
  ___assert_fail((11214|0),(9686|0),9608,(10760|0));
  // unreachable;
 }
 $86 = $p$addr;
 $context_pool = ((($86)) + 80|0);
 $87 = $desc$addr;
 $context_pool_size85 = ((($87)) + 24|0);
 $88 = HEAP32[$context_pool_size85>>2]|0;
 __ZL13_sg_init_poolP10_sg_pool_ti($context_pool,$88);
 $89 = $p$addr;
 $context_pool86 = ((($89)) + 80|0);
 $90 = HEAP32[$context_pool86>>2]|0;
 $mul88 = $90<<4;
 $context_pool_byte_size = $mul88;
 $91 = $context_pool_byte_size;
 $call89 = (_malloc($91)|0);
 $92 = $p$addr;
 $contexts = ((($92)) + 116|0);
 HEAP32[$contexts>>2] = $call89;
 $93 = $p$addr;
 $contexts90 = ((($93)) + 116|0);
 $94 = HEAP32[$contexts90>>2]|0;
 $tobool91 = ($94|0)!=(0|0);
 if ($tobool91) {
  $95 = $p$addr;
  $contexts94 = ((($95)) + 116|0);
  $96 = HEAP32[$contexts94>>2]|0;
  $97 = $context_pool_byte_size;
  _memset(($96|0),0,($97|0))|0;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((11293|0),(9686|0),9612,(10760|0));
  // unreachable;
 }
}
function __ZL17_sg_setup_backendPK7sg_desc($desc) {
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $call = 0, $cmp = 0, $desc$addr = 0, $frombool = 0, $gl_force_gles2 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $desc$addr = $desc;
 HEAP8[(34080)>>0] = 1;
 $0 = $desc$addr;
 $gl_force_gles2 = ((($0)) + 28|0);
 $1 = HEAP8[$gl_force_gles2>>0]|0;
 $tobool = $1&1;
 $frombool = $tobool&1;
 HEAP8[(34081)>>0] = $frombool;
 while(1) {
  $call = (_glGetError()|0);
  $cmp = ($call|0)!=(0);
  if (!($cmp)) {
   break;
  }
 }
 __ZL22_sg_gl_init_caps_gles2v();
 STACKTOP = sp;return;
}
function _sg_setup_context() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $call1 = 0, $call3 = 0, $call4 = 0, $cmp = 0, $cmp8 = 0, $ctx = 0;
 var $retval = 0, $slot_index = 0, $state = 0, $state7 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $retval = sp + 8|0;
 $0 = HEAP8[33468]|0;
 $tobool = $0&1;
 if (!($tobool)) {
  ___assert_fail((9780|0),(9686|0),10875,(9790|0));
  // unreachable;
 }
 $call = (__ZL20_sg_pool_alloc_indexP10_sg_pool_t((33648))|0);
 $slot_index = $call;
 $1 = $slot_index;
 $cmp = (0)!=($1|0);
 if (!($cmp)) {
  HEAP32[$retval>>2] = 0;
  ;HEAP32[(33548)>>2]=HEAP32[$retval>>2]|0;
  $11 = HEAP32[$retval>>2]|0;
  STACKTOP = sp;return ($11|0);
 }
 $2 = HEAP32[(33684)>>2]|0;
 $3 = $slot_index;
 $arrayidx = (($2) + ($3<<4)|0);
 $4 = $slot_index;
 $call1 = (__ZL14_sg_slot_allocP10_sg_pool_tP10_sg_slot_ti((33648),$arrayidx,$4)|0);
 HEAP32[$retval>>2] = $call1;
 $5 = HEAP32[$retval>>2]|0;
 $call3 = (__ZL14_sg_context_atPK11_sg_pools_tj((33568),$5)|0);
 $ctx = $call3;
 $6 = $ctx;
 $call4 = (__ZL18_sg_create_contextP13_sg_context_t($6)|0);
 $7 = $ctx;
 $state = ((($7)) + 8|0);
 HEAP32[$state>>2] = $call4;
 $8 = $ctx;
 $state7 = ((($8)) + 8|0);
 $9 = HEAP32[$state7>>2]|0;
 $cmp8 = ($9|0)==(2);
 if (!($cmp8)) {
  ___assert_fail((9807|0),(9686|0),10882,(9790|0));
  // unreachable;
 }
 $10 = $ctx;
 __ZL20_sg_activate_contextP13_sg_context_t($10);
 ;HEAP32[(33548)>>2]=HEAP32[$retval>>2]|0;
 $11 = HEAP32[$retval>>2]|0;
 STACKTOP = sp;return ($11|0);
}
function __ZL20_sg_pool_alloc_indexP10_sg_pool_t($pool) {
 $pool = $pool|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $cmp = 0, $cmp6 = 0, $cmp7 = 0;
 var $dec = 0, $free_queue = 0, $free_queue4 = 0, $pool$addr = 0, $queue_top = 0, $queue_top5 = 0, $retval = 0, $slot_index = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $pool$addr = $pool;
 $0 = $pool$addr;
 $tobool = ($0|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((10392|0),(9686|0),9511,(10397|0));
  // unreachable;
 }
 $1 = $pool$addr;
 $free_queue = ((($1)) + 12|0);
 $2 = HEAP32[$free_queue>>2]|0;
 $tobool1 = ($2|0)!=(0|0);
 if (!($tobool1)) {
  ___assert_fail((10418|0),(9686|0),9512,(10397|0));
  // unreachable;
 }
 $3 = $pool$addr;
 $queue_top = ((($3)) + 4|0);
 $4 = HEAP32[$queue_top>>2]|0;
 $cmp = ($4|0)>(0);
 if (!($cmp)) {
  $retval = 0;
  $15 = $retval;
  STACKTOP = sp;return ($15|0);
 }
 $5 = $pool$addr;
 $free_queue4 = ((($5)) + 12|0);
 $6 = HEAP32[$free_queue4>>2]|0;
 $7 = $pool$addr;
 $queue_top5 = ((($7)) + 4|0);
 $8 = HEAP32[$queue_top5>>2]|0;
 $dec = (($8) + -1)|0;
 HEAP32[$queue_top5>>2] = $dec;
 $arrayidx = (($6) + ($dec<<2)|0);
 $9 = HEAP32[$arrayidx>>2]|0;
 $slot_index = $9;
 $10 = $slot_index;
 $cmp6 = ($10|0)>(0);
 if (!($cmp6)) {
  ___assert_fail((10435|0),(9686|0),9515,(10397|0));
  // unreachable;
 }
 $11 = $slot_index;
 $12 = $pool$addr;
 $13 = HEAP32[$12>>2]|0;
 $cmp7 = ($11|0)<($13|0);
 if (!($cmp7)) {
  ___assert_fail((10435|0),(9686|0),9515,(10397|0));
  // unreachable;
 }
 $14 = $slot_index;
 $retval = $14;
 $15 = $retval;
 STACKTOP = sp;return ($15|0);
}
function __ZL14_sg_slot_allocP10_sg_pool_tP10_sg_slot_ti($pool,$slot,$slot_index) {
 $pool = $pool|0;
 $slot = $slot|0;
 $slot_index = $slot_index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $and = 0, $arrayidx = 0, $cmp = 0, $cmp3 = 0, $cmp6 = 0, $cmp8 = 0, $ctr = 0, $gen_ctrs = 0, $gen_ctrs11 = 0, $inc = 0, $or = 0, $pool$addr = 0, $shl = 0, $slot$addr = 0, $slot_index$addr = 0, $state = 0, $state13 = 0, $tobool = 0, $tobool1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $pool$addr = $pool;
 $slot$addr = $slot;
 $slot_index$addr = $slot_index;
 $0 = $pool$addr;
 $tobool = ($0|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((10233|0),(9686|0),9644,(10256|0));
  // unreachable;
 }
 $1 = $pool$addr;
 $gen_ctrs = ((($1)) + 8|0);
 $2 = HEAP32[$gen_ctrs>>2]|0;
 $tobool1 = ($2|0)!=(0|0);
 if (!($tobool1)) {
  ___assert_fail((10233|0),(9686|0),9644,(10256|0));
  // unreachable;
 }
 $3 = $slot_index$addr;
 $cmp = ($3|0)>(0);
 if (!($cmp)) {
  ___assert_fail((10271|0),(9686|0),9645,(10256|0));
  // unreachable;
 }
 $4 = $slot_index$addr;
 $5 = $pool$addr;
 $6 = HEAP32[$5>>2]|0;
 $cmp3 = ($4|0)<($6|0);
 if (!($cmp3)) {
  ___assert_fail((10271|0),(9686|0),9645,(10256|0));
  // unreachable;
 }
 $7 = $slot$addr;
 $state = ((($7)) + 8|0);
 $8 = HEAP32[$state>>2]|0;
 $cmp6 = ($8|0)==(0);
 if (!($cmp6)) {
  ___assert_fail((10319|0),(9686|0),9646,(10256|0));
  // unreachable;
 }
 $9 = $slot$addr;
 $10 = HEAP32[$9>>2]|0;
 $cmp8 = ($10|0)==(0);
 if ($cmp8) {
  $11 = $pool$addr;
  $gen_ctrs11 = ((($11)) + 8|0);
  $12 = HEAP32[$gen_ctrs11>>2]|0;
  $13 = $slot_index$addr;
  $arrayidx = (($12) + ($13<<2)|0);
  $14 = HEAP32[$arrayidx>>2]|0;
  $inc = (($14) + 1)|0;
  HEAP32[$arrayidx>>2] = $inc;
  $ctr = $inc;
  $15 = $ctr;
  $shl = $15 << 16;
  $16 = $slot_index$addr;
  $and = $16 & 65535;
  $or = $shl | $and;
  $17 = $slot$addr;
  HEAP32[$17>>2] = $or;
  $18 = $slot$addr;
  $state13 = ((($18)) + 8|0);
  HEAP32[$state13>>2] = 1;
  $19 = $slot$addr;
  $20 = HEAP32[$19>>2]|0;
  STACKTOP = sp;return ($20|0);
 } else {
  ___assert_fail((10319|0),(9686|0),9646,(10256|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZL14_sg_context_atPK11_sg_pools_tj($p,$context_id) {
 $p = $p|0;
 $context_id = $context_id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp3 = 0, $context_id$addr = 0, $context_pool = 0, $contexts = 0, $or$cond = 0, $p$addr = 0;
 var $slot_index = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $p$addr = $p;
 $context_id$addr = $context_id;
 $0 = $p$addr;
 $tobool = ($0|0)!=(0|0);
 $1 = $context_id$addr;
 $cmp = (0)!=($1|0);
 $or$cond = $tobool & $cmp;
 if (!($or$cond)) {
  ___assert_fail((10092|0),(9686|0),9697,(10127|0));
  // unreachable;
 }
 $2 = $context_id$addr;
 $call = (__ZL14_sg_slot_indexj($2)|0);
 $slot_index = $call;
 $3 = $slot_index;
 $cmp1 = ($3|0)>(0);
 if (!($cmp1)) {
  ___assert_fail((10142|0),(9686|0),9699,(10127|0));
  // unreachable;
 }
 $4 = $slot_index;
 $5 = $p$addr;
 $context_pool = ((($5)) + 80|0);
 $6 = HEAP32[$context_pool>>2]|0;
 $cmp3 = ($4|0)<($6|0);
 if ($cmp3) {
  $7 = $p$addr;
  $contexts = ((($7)) + 116|0);
  $8 = HEAP32[$contexts>>2]|0;
  $9 = $slot_index;
  $arrayidx = (($8) + ($9<<4)|0);
  STACKTOP = sp;return ($arrayidx|0);
 } else {
  ___assert_fail((10142|0),(9686|0),9699,(10127|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZL18_sg_create_contextP13_sg_context_t($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $call7 = 0, $cmp = 0, $cmp3 = 0, $cmp8 = 0, $ctx$addr = 0, $default_framebuffer = 0, $default_framebuffer6 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ctx$addr = $ctx;
 $0 = $ctx$addr;
 $tobool = ($0|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((10039|0),(9686|0),5025,(10043|0));
  // unreachable;
 }
 $1 = $ctx$addr;
 $default_framebuffer = ((($1)) + 12|0);
 $2 = HEAP32[$default_framebuffer>>2]|0;
 $cmp = (0)==($2|0);
 if (!($cmp)) {
  ___assert_fail((10062|0),(9686|0),5026,(10043|0));
  // unreachable;
 }
 $call = (_glGetError()|0);
 $cmp3 = ($call|0)==(0);
 if (!($cmp3)) {
  ___assert_fail((9883|0),(9686|0),5027,(10043|0));
  // unreachable;
 }
 $3 = $ctx$addr;
 $default_framebuffer6 = ((($3)) + 12|0);
 _glGetIntegerv(36006,($default_framebuffer6|0));
 $call7 = (_glGetError()|0);
 $cmp8 = ($call7|0)==(0);
 if ($cmp8) {
  STACKTOP = sp;return 2;
 } else {
  ___assert_fail((9883|0),(9686|0),5029,(10043|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZL20_sg_activate_contextP13_sg_context_t($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $ctx$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ctx$addr = $ctx;
 $0 = HEAP8[(34080)>>0]|0;
 $tobool = $0&1;
 if ($tobool) {
  $1 = $ctx$addr;
  HEAP32[(34092)>>2] = $1;
  __ZL21_sg_reset_state_cachev();
  STACKTOP = sp;return;
 } else {
  ___assert_fail((9849|0),(9686|0),5017,(9862|0));
  // unreachable;
 }
}
function __ZL21_sg_reset_state_cachev() {
 var $0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(34092)>>2]|0;
 $tobool = ($0|0)!=(0|0);
 if (!($tobool)) {
  return;
 }
 __ZL24_sg_gl_reset_state_cachev();
 return;
}
function __ZL24_sg_gl_reset_state_cachev() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arrayidx = 0, $call = 0, $call1 = 0, $call10 = 0, $call5 = 0, $cmp = 0, $cmp11 = 0, $cmp2 = 0, $cmp6 = 0, $cmp9 = 0, $i = 0, $inc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $call = (_glGetError()|0);
 $cmp = ($call|0)==(0);
 if (!($cmp)) {
  ___assert_fail((9883|0),(9686|0),4920,(9901|0));
  // unreachable;
 }
 _memset(((34104)|0),0,596)|0;
 __ZL28_sg_gl_clear_buffer_bindingsb(1);
 $call1 = (_glGetError()|0);
 $cmp2 = ($call1|0)==(0);
 if (!($cmp2)) {
  ___assert_fail((9883|0),(9686|0),4923,(9901|0));
  // unreachable;
 }
 __ZL29_sg_gl_clear_texture_bindingsb(1);
 $call5 = (_glGetError()|0);
 $cmp6 = ($call5|0)==(0);
 if (!($cmp6)) {
  ___assert_fail((9883|0),(9686|0),4925,(9901|0));
  // unreachable;
 }
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = HEAP32[(33720)>>2]|0;
  $cmp9 = ($0>>>0)<($1>>>0);
  if (!($cmp9)) {
   label = 12;
   break;
  }
  $2 = $i;
  $arrayidx = ((34240) + (($2*20)|0)|0);
  __ZL16_sg_gl_init_attrP13_sg_gl_attr_t($arrayidx);
  $3 = $i;
  _glDisableVertexAttribArray(($3|0));
  $call10 = (_glGetError()|0);
  $cmp11 = ($call10|0)==(0);
  if (!($cmp11)) {
   label = 10;
   break;
  }
  $4 = $i;
  $inc = (($4) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 10) {
  ___assert_fail((9883|0),(9686|0),4929,(9901|0));
  // unreachable;
 }
 else if ((label|0) == 12) {
  HEAP32[(34684)>>2] = 4;
  __ZL31_sg_gl_init_depth_stencil_stateP22sg_depth_stencil_state((34104));
  _glEnable(2929);
  _glDepthFunc(519);
  _glDepthMask(0);
  _glDisable(2960);
  _glStencilFunc(519,0,0);
  _glStencilOp(7680,7680,7680);
  _glStencilMask(0);
  __ZL23_sg_gl_init_blend_stateP14sg_blend_state((34148));
  _glDisable(3042);
  _glBlendFuncSeparate(1,0,1,0);
  _glBlendEquationSeparate(32774,32774);
  _glColorMask(1,1,1,1);
  _glBlendColor(0.0,0.0,0.0,0.0);
  __ZL28_sg_gl_init_rasterizer_stateP19sg_rasterizer_state((34208));
  _glPolygonOffset(0.0,0.0);
  _glDisable(32823);
  _glDisable(2884);
  _glFrontFace(2304);
  _glCullFace(1029);
  _glEnable(3089);
  _glDisable(32926);
  _glEnable(3024);
  _glDisable(32823);
  STACKTOP = sp;return;
 }
}
function __ZL28_sg_gl_clear_buffer_bindingsb($force) {
 $force = $force|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $cmp = 0, $cmp3 = 0, $force$addr = 0, $frombool = 0, $or$cond = 0, $or$cond1 = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $frombool = $force&1;
 $force$addr = $frombool;
 $0 = $force$addr;
 $tobool = $0&1;
 $1 = HEAP32[(34560)>>2]|0;
 $cmp = ($1|0)!=(0);
 $or$cond = $tobool | $cmp;
 if ($or$cond) {
  _glBindBuffer(34962,0);
  HEAP32[(34560)>>2] = 0;
 }
 $2 = $force$addr;
 $tobool1 = $2&1;
 $3 = HEAP32[(34564)>>2]|0;
 $cmp3 = ($3|0)!=(0);
 $or$cond1 = $tobool1 | $cmp3;
 if (!($or$cond1)) {
  STACKTOP = sp;return;
 }
 _glBindBuffer(34963,0);
 HEAP32[(34564)>>2] = 0;
 STACKTOP = sp;return;
}
function __ZL29_sg_gl_clear_texture_bindingsb($force) {
 $force = $force|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $arrayidx3 = 0, $arrayidx4 = 0, $cmp = 0, $cmp1 = 0, $cmp2 = 0, $force$addr = 0, $frombool = 0, $i = 0;
 var $inc = 0, $texture = 0, $texture5 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $frombool = $force&1;
 $force$addr = $frombool;
 $i = 0;
 while(1) {
  $0 = $i;
  $cmp = ($0|0)<(12);
  if (!($cmp)) {
   label = 8;
   break;
  }
  $1 = $i;
  $2 = HEAP32[(34708)>>2]|0;
  $cmp1 = ($1|0)<($2|0);
  if (!($cmp1)) {
   label = 8;
   break;
  }
  $3 = $force$addr;
  $tobool = $3&1;
  if ($tobool) {
   label = 6;
  } else {
   $4 = $i;
   $arrayidx = ((34576) + ($4<<3)|0);
   $texture = ((($arrayidx)) + 4|0);
   $5 = HEAP32[$texture>>2]|0;
   $cmp2 = ($5|0)!=(0);
   if ($cmp2) {
    label = 6;
   }
  }
  if ((label|0) == 6) {
   label = 0;
   $6 = $i;
   $add = (33984 + ($6))|0;
   _glActiveTexture(($add|0));
   _glBindTexture(3553,0);
   _glBindTexture(34067,0);
   $7 = $i;
   $arrayidx3 = ((34576) + ($7<<3)|0);
   HEAP32[$arrayidx3>>2] = 0;
   $8 = $i;
   $arrayidx4 = ((34576) + ($8<<3)|0);
   $texture5 = ((($arrayidx4)) + 4|0);
   HEAP32[$texture5>>2] = 0;
  }
  $9 = $i;
  $inc = (($9) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return;
 }
}
function __ZL16_sg_gl_init_attrP13_sg_gl_attr_t($attr) {
 $attr = $attr|0;
 var $0 = 0, $1 = 0, $attr$addr = 0, $divisor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $attr$addr = $attr;
 $0 = $attr$addr;
 HEAP8[$0>>0] = -1;
 $1 = $attr$addr;
 $divisor = ((($1)) + 1|0);
 HEAP8[$divisor>>0] = -1;
 STACKTOP = sp;return;
}
function __ZL31_sg_gl_init_depth_stencil_stateP22sg_depth_stencil_state($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $depth_compare_func = 0, $s$addr = 0, $stencil_back = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $s$addr = $s;
 $0 = $s$addr;
 $tobool = ($0|0)!=(0|0);
 if ($tobool) {
  $1 = $s$addr;
  __ZL25_sg_gl_init_stencil_stateP16sg_stencil_state($1);
  $2 = $s$addr;
  $stencil_back = ((($2)) + 16|0);
  __ZL25_sg_gl_init_stencil_stateP16sg_stencil_state($stencil_back);
  $3 = $s$addr;
  $depth_compare_func = ((($3)) + 32|0);
  HEAP32[$depth_compare_func>>2] = 8;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((9926|0),(9686|0),4286,(9981|0));
  // unreachable;
 }
}
function __ZL23_sg_gl_init_blend_stateP14sg_blend_state($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $color_write_mask = 0, $dst_factor_alpha = 0, $dst_factor_rgb = 0, $op_alpha = 0, $op_rgb = 0, $s$addr = 0, $src_factor_alpha = 0, $src_factor_rgb = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $s$addr = $s;
 $0 = $s$addr;
 $tobool = ($0|0)!=(0|0);
 if ($tobool) {
  $1 = $s$addr;
  $src_factor_rgb = ((($1)) + 4|0);
  HEAP32[$src_factor_rgb>>2] = 2;
  $2 = $s$addr;
  $dst_factor_rgb = ((($2)) + 8|0);
  HEAP32[$dst_factor_rgb>>2] = 1;
  $3 = $s$addr;
  $op_rgb = ((($3)) + 12|0);
  HEAP32[$op_rgb>>2] = 1;
  $4 = $s$addr;
  $src_factor_alpha = ((($4)) + 16|0);
  HEAP32[$src_factor_alpha>>2] = 2;
  $5 = $s$addr;
  $dst_factor_alpha = ((($5)) + 20|0);
  HEAP32[$dst_factor_alpha>>2] = 1;
  $6 = $s$addr;
  $op_alpha = ((($6)) + 24|0);
  HEAP32[$op_alpha>>2] = 1;
  $7 = $s$addr;
  $color_write_mask = ((($7)) + 28|0);
  HEAP8[$color_write_mask>>0] = 15;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((9926|0),(9686|0),4293,(9957|0));
  // unreachable;
 }
}
function __ZL28_sg_gl_init_rasterizer_stateP19sg_rasterizer_state($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $cull_mode = 0, $face_winding = 0, $s$addr = 0, $sample_count = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $s$addr = $s;
 $0 = $s$addr;
 $tobool = ($0|0)!=(0|0);
 if ($tobool) {
  $1 = $s$addr;
  $cull_mode = ((($1)) + 4|0);
  HEAP32[$cull_mode>>2] = 1;
  $2 = $s$addr;
  $face_winding = ((($2)) + 8|0);
  HEAP32[$face_winding>>2] = 2;
  $3 = $s$addr;
  $sample_count = ((($3)) + 12|0);
  HEAP32[$sample_count>>2] = 1;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((9926|0),(9686|0),4304,(9928|0));
  // unreachable;
 }
}
function __ZL25_sg_gl_init_stencil_stateP16sg_stencil_state($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $compare_func = 0, $depth_fail_op = 0, $pass_op = 0, $s$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $s$addr = $s;
 $0 = $s$addr;
 $tobool = ($0|0)!=(0|0);
 if ($tobool) {
  $1 = $s$addr;
  HEAP32[$1>>2] = 1;
  $2 = $s$addr;
  $depth_fail_op = ((($2)) + 4|0);
  HEAP32[$depth_fail_op>>2] = 1;
  $3 = $s$addr;
  $pass_op = ((($3)) + 8|0);
  HEAP32[$pass_op>>2] = 1;
  $4 = $s$addr;
  $compare_func = ((($4)) + 12|0);
  HEAP32[$compare_func>>2] = 8;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((9926|0),(9686|0),4278,(10013|0));
  // unreachable;
 }
}
function __ZL14_sg_slot_indexj($id) {
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $and = 0, $cmp = 0, $id$addr = 0, $slot_index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $id$addr = $id;
 $0 = $id$addr;
 $and = $0 & 65535;
 $slot_index = $and;
 $1 = $slot_index;
 $cmp = (0)!=($1|0);
 if ($cmp) {
  $2 = $slot_index;
  STACKTOP = sp;return ($2|0);
 } else {
  ___assert_fail((10200|0),(9686|0),9656,(10218|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZL22_sg_gl_init_caps_gles2v() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $__s1$addr$i = 0, $__s1$addr$i$i = 0, $__s1$addr$i$i103 = 0, $__s1$addr$i$i108 = 0, $__s1$addr$i$i58 = 0;
 var $__s1$addr$i$i63 = 0, $__s1$addr$i$i68 = 0, $__s1$addr$i$i73 = 0, $__s1$addr$i$i78 = 0, $__s1$addr$i$i83 = 0, $__s1$addr$i$i88 = 0, $__s1$addr$i$i93 = 0, $__s1$addr$i$i98 = 0, $__s1$addr$i100 = 0, $__s1$addr$i105 = 0, $__s1$addr$i110 = 0, $__s1$addr$i60 = 0, $__s1$addr$i65 = 0, $__s1$addr$i70 = 0, $__s1$addr$i75 = 0, $__s1$addr$i80 = 0, $__s1$addr$i85 = 0, $__s1$addr$i90 = 0, $__s1$addr$i95 = 0, $__s2$addr$i = 0;
 var $__s2$addr$i$i = 0, $__s2$addr$i$i104 = 0, $__s2$addr$i$i109 = 0, $__s2$addr$i$i59 = 0, $__s2$addr$i$i64 = 0, $__s2$addr$i$i69 = 0, $__s2$addr$i$i74 = 0, $__s2$addr$i$i79 = 0, $__s2$addr$i$i84 = 0, $__s2$addr$i$i89 = 0, $__s2$addr$i$i94 = 0, $__s2$addr$i$i99 = 0, $__s2$addr$i101 = 0, $__s2$addr$i106 = 0, $__s2$addr$i111 = 0, $__s2$addr$i61 = 0, $__s2$addr$i66 = 0, $__s2$addr$i71 = 0, $__s2$addr$i76 = 0, $__s2$addr$i81 = 0;
 var $__s2$addr$i86 = 0, $__s2$addr$i91 = 0, $__s2$addr$i96 = 0, $arrayidx = 0, $call = 0, $call$i$i = 0, $call$i$i102 = 0, $call$i$i107 = 0, $call$i$i112 = 0, $call$i$i62 = 0, $call$i$i67 = 0, $call$i$i72 = 0, $call$i$i77 = 0, $call$i$i82 = 0, $call$i$i87 = 0, $call$i$i92 = 0, $call$i$i97 = 0, $cmp = 0, $ext = 0, $frombool = 0;
 var $frombool10 = 0, $frombool13 = 0, $frombool16 = 0, $frombool19 = 0, $frombool22 = 0, $frombool25 = 0, $frombool28 = 0, $frombool31 = 0, $frombool34 = 0, $frombool36 = 0, $frombool7 = 0, $has_bgra = 0, $has_bptc = 0, $has_colorbuffer_float = 0, $has_colorbuffer_half_float = 0, $has_etc2 = 0, $has_float_blend = 0, $has_instancing = 0, $has_pvrtc = 0, $has_rgtc = 0;
 var $has_s3tc = 0, $has_texture_float = 0, $has_texture_float_linear = 0, $has_texture_half_float = 0, $has_texture_half_float_linear = 0, $i = 0, $inc = 0, $msaa = 0, $tobool = 0, $tobool12 = 0, $tobool15 = 0, $tobool18 = 0, $tobool2 = 0, $tobool21 = 0, $tobool24 = 0, $tobool27 = 0, $tobool30 = 0, $tobool33 = 0, $tobool35 = 0, $tobool37 = 0;
 var $tobool39 = 0, $tobool4 = 0, $tobool40 = 0, $tobool41 = 0, $tobool43 = 0, $tobool46 = 0, $tobool49 = 0, $tobool52 = 0, $tobool55 = 0, $tobool6 = 0, $tobool9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 HEAP32[(33688)>>2] = 1;
 $has_s3tc = 0;
 $has_rgtc = 0;
 $has_bptc = 0;
 $has_pvrtc = 0;
 $has_etc2 = 0;
 $has_texture_float = 0;
 $has_texture_float_linear = 0;
 $has_colorbuffer_float = 0;
 $has_float_blend = 0;
 $has_instancing = 0;
 $call = (_glGetString(7939)|0);
 $ext = $call;
 $0 = $ext;
 $tobool = ($0|0)!=(0|0);
 if ($tobool) {
  $1 = $ext;
  $__s1$addr$i = $1;
  $__s2$addr$i = 10481;
  $2 = $__s1$addr$i;
  $3 = $__s2$addr$i;
  $__s1$addr$i$i = $2;
  $__s2$addr$i$i = $3;
  $4 = $__s1$addr$i$i;
  $5 = $__s2$addr$i$i;
  $call$i$i = (_strstr($4,$5)|0);
  $tobool2 = ($call$i$i|0)!=(0|0);
  if ($tobool2) {
   $11 = 1;
  } else {
   $6 = $ext;
   $__s1$addr$i60 = $6;
   $__s2$addr$i61 = 10507;
   $7 = $__s1$addr$i60;
   $8 = $__s2$addr$i61;
   $__s1$addr$i$i58 = $7;
   $__s2$addr$i$i59 = $8;
   $9 = $__s1$addr$i$i58;
   $10 = $__s2$addr$i$i59;
   $call$i$i62 = (_strstr($9,$10)|0);
   $tobool4 = ($call$i$i62|0)!=(0|0);
   $11 = $tobool4;
  }
  $frombool = $11&1;
  $has_s3tc = $frombool;
  $12 = $ext;
  $__s1$addr$i65 = $12;
  $__s2$addr$i66 = 10532;
  $13 = $__s1$addr$i65;
  $14 = $__s2$addr$i66;
  $__s1$addr$i$i63 = $13;
  $__s2$addr$i$i64 = $14;
  $15 = $__s1$addr$i$i63;
  $16 = $__s2$addr$i$i64;
  $call$i$i67 = (_strstr($15,$16)|0);
  $tobool6 = ($call$i$i67|0)!=(0|0);
  $frombool7 = $tobool6&1;
  $has_rgtc = $frombool7;
  $17 = $ext;
  $__s1$addr$i70 = $17;
  $__s2$addr$i71 = 10558;
  $18 = $__s1$addr$i70;
  $19 = $__s2$addr$i71;
  $__s1$addr$i$i68 = $18;
  $__s2$addr$i$i69 = $19;
  $20 = $__s1$addr$i$i68;
  $21 = $__s2$addr$i$i69;
  $call$i$i72 = (_strstr($20,$21)|0);
  $tobool9 = ($call$i$i72|0)!=(0|0);
  $frombool10 = $tobool9&1;
  $has_bptc = $frombool10;
  $22 = $ext;
  $__s1$addr$i75 = $22;
  $__s2$addr$i76 = 10584;
  $23 = $__s1$addr$i75;
  $24 = $__s2$addr$i76;
  $__s1$addr$i$i73 = $23;
  $__s2$addr$i$i74 = $24;
  $25 = $__s1$addr$i$i73;
  $26 = $__s2$addr$i$i74;
  $call$i$i77 = (_strstr($25,$26)|0);
  $tobool12 = ($call$i$i77|0)!=(0|0);
  $frombool13 = $tobool12&1;
  $has_pvrtc = $frombool13;
  $27 = $ext;
  $__s1$addr$i80 = $27;
  $__s2$addr$i81 = 10611;
  $28 = $__s1$addr$i80;
  $29 = $__s2$addr$i81;
  $__s1$addr$i$i78 = $28;
  $__s2$addr$i$i79 = $29;
  $30 = $__s1$addr$i$i78;
  $31 = $__s2$addr$i$i79;
  $call$i$i82 = (_strstr($30,$31)|0);
  $tobool15 = ($call$i$i82|0)!=(0|0);
  $frombool16 = $tobool15&1;
  $has_etc2 = $frombool16;
  $32 = $ext;
  $__s1$addr$i85 = $32;
  $__s2$addr$i86 = 10635;
  $33 = $__s1$addr$i85;
  $34 = $__s2$addr$i86;
  $__s1$addr$i$i83 = $33;
  $__s2$addr$i$i84 = $34;
  $35 = $__s1$addr$i$i83;
  $36 = $__s2$addr$i$i84;
  $call$i$i87 = (_strstr($35,$36)|0);
  $tobool18 = ($call$i$i87|0)!=(0|0);
  $frombool19 = $tobool18&1;
  $has_texture_float = $frombool19;
  $37 = $ext;
  $__s1$addr$i90 = $37;
  $__s2$addr$i91 = 10650;
  $38 = $__s1$addr$i90;
  $39 = $__s2$addr$i91;
  $__s1$addr$i$i88 = $38;
  $__s2$addr$i$i89 = $39;
  $40 = $__s1$addr$i$i88;
  $41 = $__s2$addr$i$i89;
  $call$i$i92 = (_strstr($40,$41)|0);
  $tobool21 = ($call$i$i92|0)!=(0|0);
  $frombool22 = $tobool21&1;
  $has_texture_float_linear = $frombool22;
  $42 = $ext;
  $__s1$addr$i95 = $42;
  $__s2$addr$i96 = 10672;
  $43 = $__s1$addr$i95;
  $44 = $__s2$addr$i96;
  $__s1$addr$i$i93 = $43;
  $__s2$addr$i$i94 = $44;
  $45 = $__s1$addr$i$i93;
  $46 = $__s2$addr$i$i94;
  $call$i$i97 = (_strstr($45,$46)|0);
  $tobool24 = ($call$i$i97|0)!=(0|0);
  $frombool25 = $tobool24&1;
  $has_colorbuffer_float = $frombool25;
  $47 = $ext;
  $__s1$addr$i100 = $47;
  $__s2$addr$i101 = 10692;
  $48 = $__s1$addr$i100;
  $49 = $__s2$addr$i101;
  $__s1$addr$i$i98 = $48;
  $__s2$addr$i$i99 = $49;
  $50 = $__s1$addr$i$i98;
  $51 = $__s2$addr$i$i99;
  $call$i$i102 = (_strstr($50,$51)|0);
  $tobool27 = ($call$i$i102|0)!=(0|0);
  $frombool28 = $tobool27&1;
  $has_float_blend = $frombool28;
  $52 = $ext;
  $__s1$addr$i105 = $52;
  $__s2$addr$i106 = 10705;
  $53 = $__s1$addr$i105;
  $54 = $__s2$addr$i106;
  $__s1$addr$i$i103 = $53;
  $__s2$addr$i$i104 = $54;
  $55 = $__s1$addr$i$i103;
  $56 = $__s2$addr$i$i104;
  $call$i$i107 = (_strstr($55,$56)|0);
  $tobool30 = ($call$i$i107|0)!=(0|0);
  $frombool31 = $tobool30&1;
  $has_instancing = $frombool31;
  $57 = $ext;
  $__s1$addr$i110 = $57;
  $__s2$addr$i111 = 10723;
  $58 = $__s1$addr$i110;
  $59 = $__s2$addr$i111;
  $__s1$addr$i$i108 = $58;
  $__s2$addr$i$i109 = $59;
  $60 = $__s1$addr$i$i108;
  $61 = $__s2$addr$i$i109;
  $call$i$i112 = (_strstr($60,$61)|0);
  $tobool33 = ($call$i$i112|0)!=(0|0);
  $frombool34 = $tobool33&1;
  HEAP8[(34700)>>0] = $frombool34;
 }
 HEAP8[(33693)>>0] = 0;
 $62 = $has_instancing;
 $tobool35 = $62&1;
 $frombool36 = $tobool35&1;
 HEAP8[(33692)>>0] = $frombool36;
 HEAP8[(33694)>>0] = 0;
 HEAP8[(33695)>>0] = 0;
 HEAP8[(33696)>>0] = 0;
 HEAP8[(33697)>>0] = 0;
 HEAP8[(33698)>>0] = 0;
 __ZL18_sg_gl_init_limitsv();
 $has_bgra = 0;
 $has_texture_half_float = 0;
 $has_texture_half_float_linear = 0;
 $has_colorbuffer_half_float = 0;
 __ZL24_sg_gl_init_pixelformatsb(0);
 $63 = $has_texture_float;
 $tobool37 = $63&1;
 if ($tobool37) {
  $64 = $has_colorbuffer_float;
  $tobool39 = $64&1;
  $65 = $has_texture_float_linear;
  $tobool40 = $65&1;
  $66 = $has_float_blend;
  $tobool41 = $66&1;
  __ZL30_sg_gl_init_pixelformats_floatbbb($tobool39,$tobool40,$tobool41);
 }
 $67 = $has_s3tc;
 $tobool43 = $67&1;
 if ($tobool43) {
  __ZL29_sg_gl_init_pixelformats_s3tcv();
 }
 $68 = $has_rgtc;
 $tobool46 = $68&1;
 if ($tobool46) {
  __ZL29_sg_gl_init_pixelformats_rgtcv();
 }
 $69 = $has_bptc;
 $tobool49 = $69&1;
 if ($tobool49) {
  __ZL29_sg_gl_init_pixelformats_bptcv();
 }
 $70 = $has_pvrtc;
 $tobool52 = $70&1;
 if ($tobool52) {
  __ZL30_sg_gl_init_pixelformats_pvrtcv();
 }
 $71 = $has_etc2;
 $tobool55 = $71&1;
 if ($tobool55) {
  __ZL29_sg_gl_init_pixelformats_etc2v();
 }
 $i = 0;
 while(1) {
  $72 = $i;
  $cmp = ($72|0)<(59);
  if (!($cmp)) {
   break;
  }
  $73 = $i;
  $arrayidx = ((33724) + (($73*6)|0)|0);
  $msaa = ((($arrayidx)) + 4|0);
  HEAP8[$msaa>>0] = 0;
  $74 = $i;
  $inc = (($74) + 1)|0;
  $i = $inc;
 }
 STACKTOP = sp;return;
}
function __ZL18_sg_gl_init_limitsv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call = 0, $call1 = 0, $call15 = 0, $call20 = 0, $call5 = 0, $call9 = 0, $cmp = 0, $cmp10 = 0, $cmp13 = 0, $cmp16 = 0, $cmp2 = 0, $cmp21 = 0;
 var $cmp6 = 0, $gl_int = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $gl_int = sp;
 $call = (_glGetError()|0);
 $cmp = ($call|0)==(0);
 if (!($cmp)) {
  ___assert_fail((9883|0),(9686|0),4532,(10739|0));
  // unreachable;
 }
 _glGetIntegerv(3379,($gl_int|0));
 $call1 = (_glGetError()|0);
 $cmp2 = ($call1|0)==(0);
 if (!($cmp2)) {
  ___assert_fail((9883|0),(9686|0),4535,(10739|0));
  // unreachable;
 }
 $0 = HEAP32[$gl_int>>2]|0;
 HEAP32[(33700)>>2] = $0;
 $1 = HEAP32[$gl_int>>2]|0;
 HEAP32[(33712)>>2] = $1;
 _glGetIntegerv(34076,($gl_int|0));
 $call5 = (_glGetError()|0);
 $cmp6 = ($call5|0)==(0);
 if (!($cmp6)) {
  ___assert_fail((9883|0),(9686|0),4539,(10739|0));
  // unreachable;
 }
 $2 = HEAP32[$gl_int>>2]|0;
 HEAP32[(33704)>>2] = $2;
 _glGetIntegerv(34921,($gl_int|0));
 $call9 = (_glGetError()|0);
 $cmp10 = ($call9|0)==(0);
 if (!($cmp10)) {
  ___assert_fail((9883|0),(9686|0),4542,(10739|0));
  // unreachable;
 }
 $3 = HEAP32[$gl_int>>2]|0;
 $cmp13 = ($3|0)>(16);
 if ($cmp13) {
  HEAP32[$gl_int>>2] = 16;
 }
 $4 = HEAP32[$gl_int>>2]|0;
 HEAP32[(33720)>>2] = $4;
 $5 = HEAP8[(34700)>>0]|0;
 $tobool = $5&1;
 do {
  if ($tobool) {
   _glGetIntegerv(34047,($gl_int|0));
   $call15 = (_glGetError()|0);
   $cmp16 = ($call15|0)==(0);
   if ($cmp16) {
    $6 = HEAP32[$gl_int>>2]|0;
    HEAP32[(34704)>>2] = $6;
    break;
   } else {
    ___assert_fail((9883|0),(9686|0),4559,(10739|0));
    // unreachable;
   }
  } else {
   HEAP32[(34704)>>2] = 1;
  }
 } while(0);
 _glGetIntegerv(35661,($gl_int|0));
 $call20 = (_glGetError()|0);
 $cmp21 = ($call20|0)==(0);
 if ($cmp21) {
  $7 = HEAP32[$gl_int>>2]|0;
  HEAP32[(34708)>>2] = $7;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((9883|0),(9686|0),4566,(10739|0));
  // unreachable;
 }
}
function __ZL24_sg_gl_init_pixelformatsb($has_bgra) {
 $has_bgra = $has_bgra|0;
 var $0 = 0, $frombool = 0, $has_bgra$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $frombool = $has_bgra&1;
 $has_bgra$addr = $frombool;
 __ZL18_sg_pixelformat_sfP19sg_pixelformat_info((33736));
 __ZL19_sg_pixelformat_allP19sg_pixelformat_info((33862));
 $0 = $has_bgra$addr;
 $tobool = $0&1;
 if ($tobool) {
  __ZL19_sg_pixelformat_allP19sg_pixelformat_info((33886));
 }
 __ZL20_sg_pixelformat_srmdP19sg_pixelformat_info((33970));
 __ZL20_sg_pixelformat_srmdP19sg_pixelformat_info((33976));
 STACKTOP = sp;return;
}
function __ZL30_sg_gl_init_pixelformats_floatbbb($has_colorbuffer_float,$has_texture_float_linear,$has_float_blend) {
 $has_colorbuffer_float = $has_colorbuffer_float|0;
 $has_texture_float_linear = $has_texture_float_linear|0;
 $has_float_blend = $has_float_blend|0;
 var $0 = 0, $1 = 0, $2 = 0, $frombool = 0, $frombool1 = 0, $frombool2 = 0, $has_colorbuffer_float$addr = 0, $has_float_blend$addr = 0, $has_texture_float_linear$addr = 0, $tobool = 0, $tobool3 = 0, $tobool5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $frombool = $has_colorbuffer_float&1;
 $has_colorbuffer_float$addr = $frombool;
 $frombool1 = $has_texture_float_linear&1;
 $has_texture_float_linear$addr = $frombool1;
 $frombool2 = $has_float_blend&1;
 $has_float_blend$addr = $frombool2;
 $0 = $has_texture_float_linear$addr;
 $tobool = $0&1;
 $1 = $has_colorbuffer_float$addr;
 $tobool3 = $1&1;
 if (!($tobool)) {
  if ($tobool3) {
   __ZL20_sg_pixelformat_sbrmP19sg_pixelformat_info((33964));
  } else {
   __ZL17_sg_pixelformat_sP19sg_pixelformat_info((33964));
  }
  __ZL17_sg_pixelformat_sP19sg_pixelformat_info((33826));
  STACKTOP = sp;return;
 }
 do {
  if ($tobool3) {
   $2 = $has_float_blend$addr;
   $tobool5 = $2&1;
   if ($tobool5) {
    __ZL19_sg_pixelformat_allP19sg_pixelformat_info((33964));
    break;
   } else {
    __ZL20_sg_pixelformat_sfrmP19sg_pixelformat_info((33964));
    break;
   }
  } else {
   __ZL18_sg_pixelformat_sfP19sg_pixelformat_info((33964));
  }
 } while(0);
 __ZL18_sg_pixelformat_sfP19sg_pixelformat_info((33826));
 STACKTOP = sp;return;
}
function __ZL29_sg_gl_init_pixelformats_s3tcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL18_sg_pixelformat_sfP19sg_pixelformat_info((33982));
 __ZL18_sg_pixelformat_sfP19sg_pixelformat_info((33988));
 __ZL18_sg_pixelformat_sfP19sg_pixelformat_info((33994));
 return;
}
function __ZL29_sg_gl_init_pixelformats_rgtcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL18_sg_pixelformat_sfP19sg_pixelformat_info((34000));
 __ZL18_sg_pixelformat_sfP19sg_pixelformat_info((34006));
 __ZL18_sg_pixelformat_sfP19sg_pixelformat_info((34012));
 __ZL18_sg_pixelformat_sfP19sg_pixelformat_info((34018));
 return;
}
function __ZL29_sg_gl_init_pixelformats_bptcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL18_sg_pixelformat_sfP19sg_pixelformat_info((34024));
 __ZL18_sg_pixelformat_sfP19sg_pixelformat_info((34030));
 __ZL18_sg_pixelformat_sfP19sg_pixelformat_info((34036));
 return;
}
function __ZL30_sg_gl_init_pixelformats_pvrtcv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL18_sg_pixelformat_sfP19sg_pixelformat_info((34042));
 __ZL18_sg_pixelformat_sfP19sg_pixelformat_info((34048));
 __ZL18_sg_pixelformat_sfP19sg_pixelformat_info((34054));
 __ZL18_sg_pixelformat_sfP19sg_pixelformat_info((34060));
 return;
}
function __ZL29_sg_gl_init_pixelformats_etc2v() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZL18_sg_pixelformat_sfP19sg_pixelformat_info((34066));
 __ZL18_sg_pixelformat_sfP19sg_pixelformat_info((34072));
 return;
}
function __ZL18_sg_pixelformat_sfP19sg_pixelformat_info($pfi) {
 $pfi = $pfi|0;
 var $0 = 0, $1 = 0, $filter = 0, $pfi$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $pfi$addr = $pfi;
 $0 = $pfi$addr;
 HEAP8[$0>>0] = 1;
 $1 = $pfi$addr;
 $filter = ((($1)) + 1|0);
 HEAP8[$filter>>0] = 1;
 STACKTOP = sp;return;
}
function __ZL19_sg_pixelformat_allP19sg_pixelformat_info($pfi) {
 $pfi = $pfi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $blend = 0, $filter = 0, $msaa = 0, $pfi$addr = 0, $render = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $pfi$addr = $pfi;
 $0 = $pfi$addr;
 HEAP8[$0>>0] = 1;
 $1 = $pfi$addr;
 $filter = ((($1)) + 1|0);
 HEAP8[$filter>>0] = 1;
 $2 = $pfi$addr;
 $blend = ((($2)) + 3|0);
 HEAP8[$blend>>0] = 1;
 $3 = $pfi$addr;
 $render = ((($3)) + 2|0);
 HEAP8[$render>>0] = 1;
 $4 = $pfi$addr;
 $msaa = ((($4)) + 4|0);
 HEAP8[$msaa>>0] = 1;
 STACKTOP = sp;return;
}
function __ZL20_sg_pixelformat_sfrmP19sg_pixelformat_info($pfi) {
 $pfi = $pfi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $filter = 0, $msaa = 0, $pfi$addr = 0, $render = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $pfi$addr = $pfi;
 $0 = $pfi$addr;
 HEAP8[$0>>0] = 1;
 $1 = $pfi$addr;
 $filter = ((($1)) + 1|0);
 HEAP8[$filter>>0] = 1;
 $2 = $pfi$addr;
 $render = ((($2)) + 2|0);
 HEAP8[$render>>0] = 1;
 $3 = $pfi$addr;
 $msaa = ((($3)) + 4|0);
 HEAP8[$msaa>>0] = 1;
 STACKTOP = sp;return;
}
function __ZL20_sg_pixelformat_sbrmP19sg_pixelformat_info($pfi) {
 $pfi = $pfi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $blend = 0, $msaa = 0, $pfi$addr = 0, $render = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $pfi$addr = $pfi;
 $0 = $pfi$addr;
 HEAP8[$0>>0] = 1;
 $1 = $pfi$addr;
 $blend = ((($1)) + 3|0);
 HEAP8[$blend>>0] = 1;
 $2 = $pfi$addr;
 $render = ((($2)) + 2|0);
 HEAP8[$render>>0] = 1;
 $3 = $pfi$addr;
 $msaa = ((($3)) + 4|0);
 HEAP8[$msaa>>0] = 1;
 STACKTOP = sp;return;
}
function __ZL17_sg_pixelformat_sP19sg_pixelformat_info($pfi) {
 $pfi = $pfi|0;
 var $0 = 0, $pfi$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $pfi$addr = $pfi;
 $0 = $pfi$addr;
 HEAP8[$0>>0] = 1;
 STACKTOP = sp;return;
}
function __ZL20_sg_pixelformat_srmdP19sg_pixelformat_info($pfi) {
 $pfi = $pfi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $depth = 0, $msaa = 0, $pfi$addr = 0, $render = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $pfi$addr = $pfi;
 $0 = $pfi$addr;
 HEAP8[$0>>0] = 1;
 $1 = $pfi$addr;
 $render = ((($1)) + 2|0);
 HEAP8[$render>>0] = 1;
 $2 = $pfi$addr;
 $msaa = ((($2)) + 4|0);
 HEAP8[$msaa>>0] = 1;
 $3 = $pfi$addr;
 $depth = ((($3)) + 5|0);
 HEAP8[$depth>>0] = 1;
 STACKTOP = sp;return;
}
function __ZL13_sg_init_poolP10_sg_pool_ti($pool,$num) {
 $pool = $pool|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $call = 0, $call8 = 0, $cmp = 0, $cmp14 = 0, $dec = 0, $free_queue = 0, $free_queue15 = 0, $free_queue9 = 0, $gen_ctrs = 0, $gen_ctrs2 = 0, $gen_ctrs6 = 0;
 var $gen_ctrs_size = 0, $i = 0, $inc = 0, $mul = 0, $mul7 = 0, $num$addr = 0, $or$cond = 0, $pool$addr = 0, $queue_top = 0, $queue_top16 = 0, $sub = 0, $tobool = 0, $tobool10 = 0, $tobool3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $pool$addr = $pool;
 $num$addr = $num;
 $0 = $pool$addr;
 $tobool = ($0|0)!=(0|0);
 $1 = $num$addr;
 $cmp = ($1|0)>=(1);
 $or$cond = $tobool & $cmp;
 if (!($or$cond)) {
  ___assert_fail((11305|0),(9686|0),9480,(11324|0));
  // unreachable;
 }
 $2 = $num$addr;
 $add = (($2) + 1)|0;
 $3 = $pool$addr;
 HEAP32[$3>>2] = $add;
 $4 = $pool$addr;
 $queue_top = ((($4)) + 4|0);
 HEAP32[$queue_top>>2] = 0;
 $5 = $pool$addr;
 $6 = HEAP32[$5>>2]|0;
 $mul = $6<<2;
 $gen_ctrs_size = $mul;
 $7 = $gen_ctrs_size;
 $call = (_malloc($7)|0);
 $8 = $pool$addr;
 $gen_ctrs = ((($8)) + 8|0);
 HEAP32[$gen_ctrs>>2] = $call;
 $9 = $pool$addr;
 $gen_ctrs2 = ((($9)) + 8|0);
 $10 = HEAP32[$gen_ctrs2>>2]|0;
 $tobool3 = ($10|0)!=(0|0);
 if (!($tobool3)) {
  ___assert_fail((11338|0),(9686|0),9487,(11324|0));
  // unreachable;
 }
 $11 = $pool$addr;
 $gen_ctrs6 = ((($11)) + 8|0);
 $12 = HEAP32[$gen_ctrs6>>2]|0;
 $13 = $gen_ctrs_size;
 _memset(($12|0),0,($13|0))|0;
 $14 = $num$addr;
 $mul7 = $14<<2;
 $call8 = (_malloc($mul7)|0);
 $15 = $pool$addr;
 $free_queue = ((($15)) + 12|0);
 HEAP32[$free_queue>>2] = $call8;
 $16 = $pool$addr;
 $free_queue9 = ((($16)) + 12|0);
 $17 = HEAP32[$free_queue9>>2]|0;
 $tobool10 = ($17|0)!=(0|0);
 if (!($tobool10)) {
  ___assert_fail((10418|0),(9686|0),9491,(11324|0));
  // unreachable;
 }
 $18 = $pool$addr;
 $19 = HEAP32[$18>>2]|0;
 $sub = (($19) - 1)|0;
 $i = $sub;
 while(1) {
  $20 = $i;
  $cmp14 = ($20|0)>=(1);
  if (!($cmp14)) {
   break;
  }
  $21 = $i;
  $22 = $pool$addr;
  $free_queue15 = ((($22)) + 12|0);
  $23 = HEAP32[$free_queue15>>2]|0;
  $24 = $pool$addr;
  $queue_top16 = ((($24)) + 4|0);
  $25 = HEAP32[$queue_top16>>2]|0;
  $inc = (($25) + 1)|0;
  HEAP32[$queue_top16>>2] = $inc;
  $arrayidx = (($23) + ($25<<2)|0);
  HEAP32[$arrayidx>>2] = $21;
  $26 = $i;
  $dec = (($26) + -1)|0;
  $i = $dec;
 }
 STACKTOP = sp;return;
}
function _sg_shutdown() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $cmp = 0, $ctx = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP32[(33548)>>2]|0;
 $cmp = ($0|0)!=(0);
 if ($cmp) {
  $1 = HEAP32[(33548)>>2]|0;
  $call = (__ZL18_sg_lookup_contextPK11_sg_pools_tj((33568),$1)|0);
  $ctx = $call;
  $2 = $ctx;
  $tobool = ($2|0)!=(0|0);
  if ($tobool) {
   $3 = HEAP32[(33548)>>2]|0;
   __ZL25_sg_destroy_all_resourcesP11_sg_pools_tj((33568),$3);
   $4 = $ctx;
   __ZL19_sg_destroy_contextP13_sg_context_t($4);
  }
 }
 __ZL19_sg_discard_backendv();
 __ZL17_sg_discard_poolsP11_sg_pools_t((33568));
 HEAP8[33468] = 0;
 STACKTOP = sp;return;
}
function __ZL18_sg_lookup_contextPK11_sg_pools_tj($p,$ctx_id) {
 $p = $p|0;
 $ctx_id = $ctx_id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $call = 0, $cmp = 0, $cmp1 = 0, $ctx = 0, $ctx_id$addr = 0, $p$addr = 0, $retval = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $p$addr = $p;
 $ctx_id$addr = $ctx_id;
 $0 = $p$addr;
 $tobool = ($0|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((10758|0),(9686|0),9758,(11543|0));
  // unreachable;
 }
 $1 = $ctx_id$addr;
 $cmp = (0)!=($1|0);
 if ($cmp) {
  $2 = $p$addr;
  $3 = $ctx_id$addr;
  $call = (__ZL14_sg_context_atPK11_sg_pools_tj($2,$3)|0);
  $ctx = $call;
  $4 = $ctx;
  $5 = HEAP32[$4>>2]|0;
  $6 = $ctx_id$addr;
  $cmp1 = ($5|0)==($6|0);
  if ($cmp1) {
   $7 = $ctx;
   $retval = $7;
   $8 = $retval;
   STACKTOP = sp;return ($8|0);
  }
 }
 $retval = 0;
 $8 = $retval;
 STACKTOP = sp;return ($8|0);
}
function __ZL25_sg_destroy_all_resourcesP11_sg_pools_tj($p,$ctx_id) {
 $p = $p|0;
 $ctx_id = $ctx_id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $arrayidx = 0, $arrayidx103 = 0, $arrayidx11 = 0, $arrayidx111 = 0, $arrayidx18 = 0, $arrayidx25 = 0, $arrayidx33 = 0, $arrayidx4 = 0, $arrayidx44 = 0, $arrayidx51 = 0;
 var $arrayidx59 = 0, $arrayidx70 = 0, $arrayidx77 = 0, $arrayidx85 = 0, $arrayidx96 = 0, $buffers = 0, $buffers10 = 0, $buffers3 = 0, $cmp = 0, $cmp106 = 0, $cmp108 = 0, $cmp16 = 0, $cmp2 = 0, $cmp21 = 0, $cmp28 = 0, $cmp30 = 0, $cmp42 = 0, $cmp47 = 0, $cmp54 = 0, $cmp56 = 0;
 var $cmp68 = 0, $cmp7 = 0, $cmp73 = 0, $cmp8 = 0, $cmp80 = 0, $cmp82 = 0, $cmp94 = 0, $cmp99 = 0, $ctx_id$addr = 0, $ctx_id1 = 0, $ctx_id20 = 0, $ctx_id46 = 0, $ctx_id72 = 0, $ctx_id98 = 0, $i = 0, $i13 = 0, $i39 = 0, $i65 = 0, $i91 = 0, $image_pool = 0;
 var $images = 0, $images24 = 0, $images32 = 0, $inc = 0, $inc115 = 0, $inc37 = 0, $inc63 = 0, $inc89 = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $or$cond3 = 0, $or$cond4 = 0, $p$addr = 0, $pass_pool = 0, $passes = 0, $passes102 = 0, $passes110 = 0, $pipeline_pool = 0, $pipelines = 0;
 var $pipelines76 = 0, $pipelines84 = 0, $shader_pool = 0, $shaders = 0, $shaders50 = 0, $shaders58 = 0, $state = 0, $state101 = 0, $state105 = 0, $state23 = 0, $state27 = 0, $state49 = 0, $state53 = 0, $state6 = 0, $state75 = 0, $state79 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $p$addr = $p;
 $ctx_id$addr = $ctx_id;
 $i = 1;
 while(1) {
  $0 = $i;
  $1 = $p$addr;
  $2 = HEAP32[$1>>2]|0;
  $cmp = ($0|0)<($2|0);
  if (!($cmp)) {
   break;
  }
  $3 = $p$addr;
  $buffers = ((($3)) + 96|0);
  $4 = HEAP32[$buffers>>2]|0;
  $5 = $i;
  $arrayidx = (($4) + (($5*60)|0)|0);
  $ctx_id1 = ((($arrayidx)) + 4|0);
  $6 = HEAP32[$ctx_id1>>2]|0;
  $7 = $ctx_id$addr;
  $cmp2 = ($6|0)==($7|0);
  if ($cmp2) {
   $8 = $p$addr;
   $buffers3 = ((($8)) + 96|0);
   $9 = HEAP32[$buffers3>>2]|0;
   $10 = $i;
   $arrayidx4 = (($9) + (($10*60)|0)|0);
   $state6 = ((($arrayidx4)) + 8|0);
   $11 = HEAP32[$state6>>2]|0;
   $state = $11;
   $12 = $state;
   $cmp7 = ($12|0)==(2);
   $13 = $state;
   $cmp8 = ($13|0)==(3);
   $or$cond = $cmp7 | $cmp8;
   if ($or$cond) {
    $14 = $p$addr;
    $buffers10 = ((($14)) + 96|0);
    $15 = HEAP32[$buffers10>>2]|0;
    $16 = $i;
    $arrayidx11 = (($15) + (($16*60)|0)|0);
    __ZL18_sg_destroy_bufferP12_sg_buffer_t($arrayidx11);
   }
  }
  $17 = $i;
  $inc = (($17) + 1)|0;
  $i = $inc;
 }
 $i13 = 1;
 while(1) {
  $18 = $i13;
  $19 = $p$addr;
  $image_pool = ((($19)) + 16|0);
  $20 = HEAP32[$image_pool>>2]|0;
  $cmp16 = ($18|0)<($20|0);
  if (!($cmp16)) {
   break;
  }
  $21 = $p$addr;
  $images = ((($21)) + 100|0);
  $22 = HEAP32[$images>>2]|0;
  $23 = $i13;
  $arrayidx18 = (($22) + (($23*112)|0)|0);
  $ctx_id20 = ((($arrayidx18)) + 4|0);
  $24 = HEAP32[$ctx_id20>>2]|0;
  $25 = $ctx_id$addr;
  $cmp21 = ($24|0)==($25|0);
  if ($cmp21) {
   $26 = $p$addr;
   $images24 = ((($26)) + 100|0);
   $27 = HEAP32[$images24>>2]|0;
   $28 = $i13;
   $arrayidx25 = (($27) + (($28*112)|0)|0);
   $state27 = ((($arrayidx25)) + 8|0);
   $29 = HEAP32[$state27>>2]|0;
   $state23 = $29;
   $30 = $state23;
   $cmp28 = ($30|0)==(2);
   $31 = $state23;
   $cmp30 = ($31|0)==(3);
   $or$cond1 = $cmp28 | $cmp30;
   if ($or$cond1) {
    $32 = $p$addr;
    $images32 = ((($32)) + 100|0);
    $33 = HEAP32[$images32>>2]|0;
    $34 = $i13;
    $arrayidx33 = (($33) + (($34*112)|0)|0);
    __ZL17_sg_destroy_imageP11_sg_image_t($arrayidx33);
   }
  }
  $35 = $i13;
  $inc37 = (($35) + 1)|0;
  $i13 = $inc37;
 }
 $i39 = 1;
 while(1) {
  $36 = $i39;
  $37 = $p$addr;
  $shader_pool = ((($37)) + 32|0);
  $38 = HEAP32[$shader_pool>>2]|0;
  $cmp42 = ($36|0)<($38|0);
  if (!($cmp42)) {
   break;
  }
  $39 = $p$addr;
  $shaders = ((($39)) + 104|0);
  $40 = HEAP32[$shaders>>2]|0;
  $41 = $i39;
  $arrayidx44 = (($40) + (($41*2176)|0)|0);
  $ctx_id46 = ((($arrayidx44)) + 4|0);
  $42 = HEAP32[$ctx_id46>>2]|0;
  $43 = $ctx_id$addr;
  $cmp47 = ($42|0)==($43|0);
  if ($cmp47) {
   $44 = $p$addr;
   $shaders50 = ((($44)) + 104|0);
   $45 = HEAP32[$shaders50>>2]|0;
   $46 = $i39;
   $arrayidx51 = (($45) + (($46*2176)|0)|0);
   $state53 = ((($arrayidx51)) + 8|0);
   $47 = HEAP32[$state53>>2]|0;
   $state49 = $47;
   $48 = $state49;
   $cmp54 = ($48|0)==(2);
   $49 = $state49;
   $cmp56 = ($49|0)==(3);
   $or$cond2 = $cmp54 | $cmp56;
   if ($or$cond2) {
    $50 = $p$addr;
    $shaders58 = ((($50)) + 104|0);
    $51 = HEAP32[$shaders58>>2]|0;
    $52 = $i39;
    $arrayidx59 = (($51) + (($52*2176)|0)|0);
    __ZL18_sg_destroy_shaderP12_sg_shader_t($arrayidx59);
   }
  }
  $53 = $i39;
  $inc63 = (($53) + 1)|0;
  $i39 = $inc63;
 }
 $i65 = 1;
 while(1) {
  $54 = $i65;
  $55 = $p$addr;
  $pipeline_pool = ((($55)) + 48|0);
  $56 = HEAP32[$pipeline_pool>>2]|0;
  $cmp68 = ($54|0)<($56|0);
  if (!($cmp68)) {
   break;
  }
  $57 = $p$addr;
  $pipelines = ((($57)) + 108|0);
  $58 = HEAP32[$pipelines>>2]|0;
  $59 = $i65;
  $arrayidx70 = (($58) + (($59*440)|0)|0);
  $ctx_id72 = ((($arrayidx70)) + 4|0);
  $60 = HEAP32[$ctx_id72>>2]|0;
  $61 = $ctx_id$addr;
  $cmp73 = ($60|0)==($61|0);
  if ($cmp73) {
   $62 = $p$addr;
   $pipelines76 = ((($62)) + 108|0);
   $63 = HEAP32[$pipelines76>>2]|0;
   $64 = $i65;
   $arrayidx77 = (($63) + (($64*440)|0)|0);
   $state79 = ((($arrayidx77)) + 8|0);
   $65 = HEAP32[$state79>>2]|0;
   $state75 = $65;
   $66 = $state75;
   $cmp80 = ($66|0)==(2);
   $67 = $state75;
   $cmp82 = ($67|0)==(3);
   $or$cond3 = $cmp80 | $cmp82;
   if ($or$cond3) {
    $68 = $p$addr;
    $pipelines84 = ((($68)) + 108|0);
    $69 = HEAP32[$pipelines84>>2]|0;
    $70 = $i65;
    $arrayidx85 = (($69) + (($70*440)|0)|0);
    __ZL20_sg_destroy_pipelineP14_sg_pipeline_t($arrayidx85);
   }
  }
  $71 = $i65;
  $inc89 = (($71) + 1)|0;
  $i65 = $inc89;
 }
 $i91 = 1;
 while(1) {
  $72 = $i91;
  $73 = $p$addr;
  $pass_pool = ((($73)) + 64|0);
  $74 = HEAP32[$pass_pool>>2]|0;
  $cmp94 = ($72|0)<($74|0);
  if (!($cmp94)) {
   break;
  }
  $75 = $p$addr;
  $passes = ((($75)) + 112|0);
  $76 = HEAP32[$passes>>2]|0;
  $77 = $i91;
  $arrayidx96 = (($76) + (($77*120)|0)|0);
  $ctx_id98 = ((($arrayidx96)) + 4|0);
  $78 = HEAP32[$ctx_id98>>2]|0;
  $79 = $ctx_id$addr;
  $cmp99 = ($78|0)==($79|0);
  if ($cmp99) {
   $80 = $p$addr;
   $passes102 = ((($80)) + 112|0);
   $81 = HEAP32[$passes102>>2]|0;
   $82 = $i91;
   $arrayidx103 = (($81) + (($82*120)|0)|0);
   $state105 = ((($arrayidx103)) + 8|0);
   $83 = HEAP32[$state105>>2]|0;
   $state101 = $83;
   $84 = $state101;
   $cmp106 = ($84|0)==(2);
   $85 = $state101;
   $cmp108 = ($85|0)==(3);
   $or$cond4 = $cmp106 | $cmp108;
   if ($or$cond4) {
    $86 = $p$addr;
    $passes110 = ((($86)) + 112|0);
    $87 = HEAP32[$passes110>>2]|0;
    $88 = $i91;
    $arrayidx111 = (($87) + (($88*120)|0)|0);
    __ZL16_sg_destroy_passP10_sg_pass_t($arrayidx111);
   }
  }
  $89 = $i91;
  $inc115 = (($89) + 1)|0;
  $i91 = $inc115;
 }
 STACKTOP = sp;return;
}
function __ZL19_sg_destroy_contextP13_sg_context_t($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $ctx$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ctx$addr = $ctx;
 $0 = $ctx$addr;
 $tobool = ($0|0)!=(0|0);
 if ($tobool) {
  STACKTOP = sp;return;
 } else {
  ___assert_fail((10039|0),(9686|0),5042,(11408|0));
  // unreachable;
 }
}
function __ZL19_sg_discard_backendv() {
 var $0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[(34080)>>0]|0;
 $tobool = $0&1;
 if ($tobool) {
  HEAP8[(34080)>>0] = 0;
  return;
 } else {
  ___assert_fail((9849|0),(9686|0),4999,(11388|0));
  // unreachable;
 }
}
function __ZL17_sg_discard_poolsP11_sg_pools_t($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffers = 0, $buffers6 = 0, $context_pool = 0, $contexts = 0, $contexts1 = 0, $image_pool = 0, $images = 0, $images5 = 0, $p$addr = 0, $pass_pool = 0, $passes = 0, $passes2 = 0, $pipeline_pool = 0, $pipelines = 0, $pipelines3 = 0;
 var $shader_pool = 0, $shaders = 0, $shaders4 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $p$addr = $p;
 $0 = $p$addr;
 $tobool = ($0|0)!=(0|0);
 if ($tobool) {
  $1 = $p$addr;
  $contexts = ((($1)) + 116|0);
  $2 = HEAP32[$contexts>>2]|0;
  _free($2);
  $3 = $p$addr;
  $contexts1 = ((($3)) + 116|0);
  HEAP32[$contexts1>>2] = 0;
  $4 = $p$addr;
  $passes = ((($4)) + 112|0);
  $5 = HEAP32[$passes>>2]|0;
  _free($5);
  $6 = $p$addr;
  $passes2 = ((($6)) + 112|0);
  HEAP32[$passes2>>2] = 0;
  $7 = $p$addr;
  $pipelines = ((($7)) + 108|0);
  $8 = HEAP32[$pipelines>>2]|0;
  _free($8);
  $9 = $p$addr;
  $pipelines3 = ((($9)) + 108|0);
  HEAP32[$pipelines3>>2] = 0;
  $10 = $p$addr;
  $shaders = ((($10)) + 104|0);
  $11 = HEAP32[$shaders>>2]|0;
  _free($11);
  $12 = $p$addr;
  $shaders4 = ((($12)) + 104|0);
  HEAP32[$shaders4>>2] = 0;
  $13 = $p$addr;
  $images = ((($13)) + 100|0);
  $14 = HEAP32[$images>>2]|0;
  _free($14);
  $15 = $p$addr;
  $images5 = ((($15)) + 100|0);
  HEAP32[$images5>>2] = 0;
  $16 = $p$addr;
  $buffers = ((($16)) + 96|0);
  $17 = HEAP32[$buffers>>2]|0;
  _free($17);
  $18 = $p$addr;
  $buffers6 = ((($18)) + 96|0);
  HEAP32[$buffers6>>2] = 0;
  $19 = $p$addr;
  $context_pool = ((($19)) + 80|0);
  __ZL16_sg_discard_poolP10_sg_pool_t($context_pool);
  $20 = $p$addr;
  $pass_pool = ((($20)) + 64|0);
  __ZL16_sg_discard_poolP10_sg_pool_t($pass_pool);
  $21 = $p$addr;
  $pipeline_pool = ((($21)) + 48|0);
  __ZL16_sg_discard_poolP10_sg_pool_t($pipeline_pool);
  $22 = $p$addr;
  $shader_pool = ((($22)) + 32|0);
  __ZL16_sg_discard_poolP10_sg_pool_t($shader_pool);
  $23 = $p$addr;
  $image_pool = ((($23)) + 16|0);
  __ZL16_sg_discard_poolP10_sg_pool_t($image_pool);
  $24 = $p$addr;
  __ZL16_sg_discard_poolP10_sg_pool_t($24);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((10758|0),(9686|0),9617,(11353|0));
  // unreachable;
 }
}
function __ZL16_sg_discard_poolP10_sg_pool_t($pool) {
 $pool = $pool|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $free_queue = 0, $free_queue4 = 0, $free_queue5 = 0, $gen_ctrs = 0, $gen_ctrs10 = 0, $gen_ctrs9 = 0, $pool$addr = 0;
 var $queue_top = 0, $tobool = 0, $tobool1 = 0, $tobool6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $pool$addr = $pool;
 $0 = $pool$addr;
 $tobool = ($0|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((10392|0),(9686|0),9499,(11371|0));
  // unreachable;
 }
 $1 = $pool$addr;
 $free_queue = ((($1)) + 12|0);
 $2 = HEAP32[$free_queue>>2]|0;
 $tobool1 = ($2|0)!=(0|0);
 if (!($tobool1)) {
  ___assert_fail((10418|0),(9686|0),9500,(11371|0));
  // unreachable;
 }
 $3 = $pool$addr;
 $free_queue4 = ((($3)) + 12|0);
 $4 = HEAP32[$free_queue4>>2]|0;
 _free($4);
 $5 = $pool$addr;
 $free_queue5 = ((($5)) + 12|0);
 HEAP32[$free_queue5>>2] = 0;
 $6 = $pool$addr;
 $gen_ctrs = ((($6)) + 8|0);
 $7 = HEAP32[$gen_ctrs>>2]|0;
 $tobool6 = ($7|0)!=(0|0);
 if ($tobool6) {
  $8 = $pool$addr;
  $gen_ctrs9 = ((($8)) + 8|0);
  $9 = HEAP32[$gen_ctrs9>>2]|0;
  _free($9);
  $10 = $pool$addr;
  $gen_ctrs10 = ((($10)) + 8|0);
  HEAP32[$gen_ctrs10>>2] = 0;
  $11 = $pool$addr;
  HEAP32[$11>>2] = 0;
  $12 = $pool$addr;
  $queue_top = ((($12)) + 4|0);
  HEAP32[$queue_top>>2] = 0;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((11338|0),(9686|0),9503,(11371|0));
  // unreachable;
 }
}
function __ZL18_sg_destroy_bufferP12_sg_buffer_t($buf) {
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx8 = 0, $buf$addr = 0, $call = 0, $call9 = 0, $cmp = 0, $cmp10 = 0, $cmp4 = 0;
 var $ext_buffers = 0, $gl_buf = 0, $gl_buf7 = 0, $inc = 0, $num_slots = 0, $slot = 0, $tobool = 0, $tobool3 = 0, $tobool5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $buf$addr = $buf;
 $0 = $buf$addr;
 $tobool = ($0|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((11520|0),(9686|0),5092,(11524|0));
  // unreachable;
 }
 $call = (_glGetError()|0);
 $cmp = ($call|0)==(0);
 if (!($cmp)) {
  ___assert_fail((9883|0),(9686|0),5093,(11524|0));
  // unreachable;
 }
 $1 = $buf$addr;
 $ext_buffers = ((($1)) + 56|0);
 $2 = HEAP8[$ext_buffers>>0]|0;
 $tobool3 = $2&1;
 if ($tobool3) {
  STACKTOP = sp;return;
 }
 $slot = 0;
 while(1) {
  $3 = $slot;
  $4 = $buf$addr;
  $num_slots = ((($4)) + 40|0);
  $5 = HEAP32[$num_slots>>2]|0;
  $cmp4 = ($3|0)<($5|0);
  if (!($cmp4)) {
   break;
  }
  $6 = $buf$addr;
  $gl_buf = ((($6)) + 48|0);
  $7 = $slot;
  $arrayidx = (($gl_buf) + ($7<<2)|0);
  $8 = HEAP32[$arrayidx>>2]|0;
  $tobool5 = ($8|0)!=(0);
  if ($tobool5) {
   $9 = $buf$addr;
   $gl_buf7 = ((($9)) + 48|0);
   $10 = $slot;
   $arrayidx8 = (($gl_buf7) + ($10<<2)|0);
   _glDeleteBuffers(1,($arrayidx8|0));
  }
  $11 = $slot;
  $inc = (($11) + 1)|0;
  $slot = $inc;
 }
 $call9 = (_glGetError()|0);
 $cmp10 = ($call9|0)==(0);
 if ($cmp10) {
  STACKTOP = sp;return;
 } else {
  ___assert_fail((9883|0),(9686|0),5100,(11524|0));
  // unreachable;
 }
}
function __ZL17_sg_destroy_imageP11_sg_image_t($img) {
 $img = $img|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx8 = 0;
 var $call = 0, $call18 = 0, $cmp = 0, $cmp19 = 0, $cmp4 = 0, $ext_textures = 0, $gl_depth_render_buffer = 0, $gl_depth_render_buffer12 = 0, $gl_msaa_render_buffer = 0, $gl_msaa_render_buffer16 = 0, $gl_tex = 0, $gl_tex7 = 0, $img$addr = 0, $inc = 0, $num_slots = 0, $slot = 0, $tobool = 0, $tobool10 = 0, $tobool14 = 0, $tobool3 = 0;
 var $tobool5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $img$addr = $img;
 $0 = $img$addr;
 $tobool = ($0|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((11498|0),(9686|0),5312,(11502|0));
  // unreachable;
 }
 $call = (_glGetError()|0);
 $cmp = ($call|0)==(0);
 if (!($cmp)) {
  ___assert_fail((9883|0),(9686|0),5313,(11502|0));
  // unreachable;
 }
 $1 = $img$addr;
 $ext_textures = ((($1)) + 108|0);
 $2 = HEAP8[$ext_textures>>0]|0;
 $tobool3 = $2&1;
 L7: do {
  if (!($tobool3)) {
   $slot = 0;
   while(1) {
    $3 = $slot;
    $4 = $img$addr;
    $num_slots = ((($4)) + 92|0);
    $5 = HEAP32[$num_slots>>2]|0;
    $cmp4 = ($3|0)<($5|0);
    if (!($cmp4)) {
     break L7;
    }
    $6 = $img$addr;
    $gl_tex = ((($6)) + 100|0);
    $7 = $slot;
    $arrayidx = (($gl_tex) + ($7<<2)|0);
    $8 = HEAP32[$arrayidx>>2]|0;
    $tobool5 = ($8|0)!=(0);
    if ($tobool5) {
     $9 = $img$addr;
     $gl_tex7 = ((($9)) + 100|0);
     $10 = $slot;
     $arrayidx8 = (($gl_tex7) + ($10<<2)|0);
     _glDeleteTextures(1,($arrayidx8|0));
    }
    $11 = $slot;
    $inc = (($11) + 1)|0;
    $slot = $inc;
   }
  }
 } while(0);
 $12 = $img$addr;
 $gl_depth_render_buffer = ((($12)) + 80|0);
 $13 = HEAP32[$gl_depth_render_buffer>>2]|0;
 $tobool10 = ($13|0)!=(0);
 if ($tobool10) {
  $14 = $img$addr;
  $gl_depth_render_buffer12 = ((($14)) + 80|0);
  _glDeleteRenderbuffers(1,($gl_depth_render_buffer12|0));
 }
 $15 = $img$addr;
 $gl_msaa_render_buffer = ((($15)) + 84|0);
 $16 = HEAP32[$gl_msaa_render_buffer>>2]|0;
 $tobool14 = ($16|0)!=(0);
 if ($tobool14) {
  $17 = $img$addr;
  $gl_msaa_render_buffer16 = ((($17)) + 84|0);
  _glDeleteRenderbuffers(1,($gl_msaa_render_buffer16|0));
 }
 $call18 = (_glGetError()|0);
 $cmp19 = ($call18|0)==(0);
 if ($cmp19) {
  STACKTOP = sp;return;
 } else {
  ___assert_fail((9883|0),(9686|0),5327,(11502|0));
  // unreachable;
 }
}
function __ZL18_sg_destroy_shaderP12_sg_shader_t($shd) {
 $shd = $shd|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $call5 = 0, $cmp = 0, $cmp6 = 0, $gl_prog = 0, $gl_prog4 = 0, $shd$addr = 0, $tobool = 0, $tobool3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $shd$addr = $shd;
 $0 = $shd$addr;
 $tobool = ($0|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((11475|0),(9686|0),5464,(11479|0));
  // unreachable;
 }
 $call = (_glGetError()|0);
 $cmp = ($call|0)==(0);
 if (!($cmp)) {
  ___assert_fail((9883|0),(9686|0),5465,(11479|0));
  // unreachable;
 }
 $1 = $shd$addr;
 $gl_prog = ((($1)) + 12|0);
 $2 = HEAP32[$gl_prog>>2]|0;
 $tobool3 = ($2|0)!=(0);
 if ($tobool3) {
  $3 = $shd$addr;
  $gl_prog4 = ((($3)) + 12|0);
  $4 = HEAP32[$gl_prog4>>2]|0;
  _glDeleteProgram(($4|0));
 }
 $call5 = (_glGetError()|0);
 $cmp6 = ($call5|0)==(0);
 if ($cmp6) {
  STACKTOP = sp;return;
 } else {
  ___assert_fail((9883|0),(9686|0),5469,(11479|0));
  // unreachable;
 }
}
function __ZL20_sg_destroy_pipelineP14_sg_pipeline_t($pip) {
 $pip = $pip|0;
 var $0 = 0, $pip$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $pip$addr = $pip;
 $0 = $pip$addr;
 $tobool = ($0|0)!=(0|0);
 if ($tobool) {
  STACKTOP = sp;return;
 } else {
  ___assert_fail((11450|0),(9686|0),5534,(11454|0));
  // unreachable;
 }
}
function __ZL16_sg_destroy_passP10_sg_pass_t($pass) {
 $pass = $pass|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx9 = 0, $call = 0, $call18 = 0, $cmp = 0, $cmp19 = 0, $cmp3 = 0;
 var $cmp5 = 0, $color_atts = 0, $color_atts8 = 0, $ds_att = 0, $ds_att15 = 0, $gl_fb = 0, $gl_fb4 = 0, $gl_msaa_resolve_buffer = 0, $gl_msaa_resolve_buffer10 = 0, $gl_msaa_resolve_buffer12 = 0, $gl_msaa_resolve_buffer16 = 0, $i = 0, $inc = 0, $pass$addr = 0, $tobool = 0, $tobool13 = 0, $tobool6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $pass$addr = $pass;
 $0 = $pass$addr;
 $tobool = ($0|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((11428|0),(9686|0),5690,(11433|0));
  // unreachable;
 }
 $call = (_glGetError()|0);
 $cmp = ($call|0)==(0);
 if (!($cmp)) {
  ___assert_fail((9883|0),(9686|0),5691,(11433|0));
  // unreachable;
 }
 $1 = $pass$addr;
 $gl_fb = ((($1)) + 12|0);
 $2 = HEAP32[$gl_fb>>2]|0;
 $cmp3 = (0)!=($2|0);
 if ($cmp3) {
  $3 = $pass$addr;
  $gl_fb4 = ((($3)) + 12|0);
  _glDeleteFramebuffers(1,($gl_fb4|0));
 }
 $i = 0;
 while(1) {
  $4 = $i;
  $cmp5 = ($4|0)<(4);
  $5 = $pass$addr;
  if (!($cmp5)) {
   break;
  }
  $color_atts = ((($5)) + 20|0);
  $6 = $i;
  $arrayidx = (($color_atts) + (($6*20)|0)|0);
  $gl_msaa_resolve_buffer = ((($arrayidx)) + 16|0);
  $7 = HEAP32[$gl_msaa_resolve_buffer>>2]|0;
  $tobool6 = ($7|0)!=(0);
  if ($tobool6) {
   $8 = $pass$addr;
   $color_atts8 = ((($8)) + 20|0);
   $9 = $i;
   $arrayidx9 = (($color_atts8) + (($9*20)|0)|0);
   $gl_msaa_resolve_buffer10 = ((($arrayidx9)) + 16|0);
   _glDeleteFramebuffers(1,($gl_msaa_resolve_buffer10|0));
  }
  $10 = $i;
  $inc = (($10) + 1)|0;
  $i = $inc;
 }
 $ds_att = ((($5)) + 100|0);
 $gl_msaa_resolve_buffer12 = ((($ds_att)) + 16|0);
 $11 = HEAP32[$gl_msaa_resolve_buffer12>>2]|0;
 $tobool13 = ($11|0)!=(0);
 if ($tobool13) {
  $12 = $pass$addr;
  $ds_att15 = ((($12)) + 100|0);
  $gl_msaa_resolve_buffer16 = ((($ds_att15)) + 16|0);
  _glDeleteFramebuffers(1,($gl_msaa_resolve_buffer16|0));
 }
 $call18 = (_glGetError()|0);
 $cmp19 = ($call18|0)==(0);
 if ($cmp19) {
  STACKTOP = sp;return;
 } else {
  ___assert_fail((9883|0),(9686|0),5703,(11433|0));
  // unreachable;
 }
}
function __ZL19_sg_pool_free_indexP10_sg_pool_ti($pool,$slot_index) {
 $pool = $pool|0;
 $slot_index = $slot_index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx20 = 0, $cmp = 0, $cmp1 = 0, $cmp12 = 0, $cmp14 = 0, $cmp23 = 0, $cmp8 = 0, $free_queue = 0, $free_queue13 = 0, $free_queue17 = 0;
 var $i = 0, $inc = 0, $inc19 = 0, $pool$addr = 0, $queue_top = 0, $queue_top11 = 0, $queue_top18 = 0, $queue_top21 = 0, $slot_index$addr = 0, $sub = 0, $tobool = 0, $tobool4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $pool$addr = $pool;
 $slot_index$addr = $slot_index;
 $0 = $slot_index$addr;
 $cmp = ($0|0)>(0);
 if (!($cmp)) {
  ___assert_fail((10271|0),(9686|0),9525,(11633|0));
  // unreachable;
 }
 $1 = $slot_index$addr;
 $2 = $pool$addr;
 $3 = HEAP32[$2>>2]|0;
 $cmp1 = ($1|0)<($3|0);
 if (!($cmp1)) {
  ___assert_fail((10271|0),(9686|0),9525,(11633|0));
  // unreachable;
 }
 $4 = $pool$addr;
 $tobool = ($4|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((10392|0),(9686|0),9526,(11633|0));
  // unreachable;
 }
 $5 = $pool$addr;
 $free_queue = ((($5)) + 12|0);
 $6 = HEAP32[$free_queue>>2]|0;
 $tobool4 = ($6|0)!=(0|0);
 if (!($tobool4)) {
  ___assert_fail((10418|0),(9686|0),9527,(11633|0));
  // unreachable;
 }
 $7 = $pool$addr;
 $queue_top = ((($7)) + 4|0);
 $8 = HEAP32[$queue_top>>2]|0;
 $9 = $pool$addr;
 $10 = HEAP32[$9>>2]|0;
 $cmp8 = ($8|0)<($10|0);
 if (!($cmp8)) {
  ___assert_fail((11653|0),(9686|0),9528,(11633|0));
  // unreachable;
 }
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = $pool$addr;
  $queue_top11 = ((($12)) + 4|0);
  $13 = HEAP32[$queue_top11>>2]|0;
  $cmp12 = ($11|0)<($13|0);
  if (!($cmp12)) {
   break;
  }
  $14 = $pool$addr;
  $free_queue13 = ((($14)) + 12|0);
  $15 = HEAP32[$free_queue13>>2]|0;
  $16 = $i;
  $arrayidx = (($15) + ($16<<2)|0);
  $17 = HEAP32[$arrayidx>>2]|0;
  $18 = $slot_index$addr;
  $cmp14 = ($17|0)!=($18|0);
  if (!($cmp14)) {
   label = 13;
   break;
  }
  $19 = $i;
  $inc = (($19) + 1)|0;
  $i = $inc;
 }
 if ((label|0) == 13) {
  ___assert_fail((11682|0),(9686|0),9532,(11633|0));
  // unreachable;
 }
 $20 = $slot_index$addr;
 $21 = $pool$addr;
 $free_queue17 = ((($21)) + 12|0);
 $22 = HEAP32[$free_queue17>>2]|0;
 $23 = $pool$addr;
 $queue_top18 = ((($23)) + 4|0);
 $24 = HEAP32[$queue_top18>>2]|0;
 $inc19 = (($24) + 1)|0;
 HEAP32[$queue_top18>>2] = $inc19;
 $arrayidx20 = (($22) + ($24<<2)|0);
 HEAP32[$arrayidx20>>2] = $20;
 $25 = $pool$addr;
 $queue_top21 = ((($25)) + 4|0);
 $26 = HEAP32[$queue_top21>>2]|0;
 $27 = $pool$addr;
 $28 = HEAP32[$27>>2]|0;
 $sub = (($28) - 1)|0;
 $cmp23 = ($26|0)<=($sub|0);
 if ($cmp23) {
  STACKTOP = sp;return;
 } else {
  ___assert_fail((11716|0),(9686|0),9536,(11633|0));
  // unreachable;
 }
}
function __ZL16_sg_alloc_bufferv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arrayidx = 0, $call = 0, $call1 = 0, $cmp = 0, $retval = 0, $slot_index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $retval = sp + 4|0;
 $call = (__ZL20_sg_pool_alloc_indexP10_sg_pool_t((33568))|0);
 $slot_index = $call;
 $0 = $slot_index;
 $cmp = (0)!=($0|0);
 if ($cmp) {
  $1 = HEAP32[(33664)>>2]|0;
  $2 = $slot_index;
  $arrayidx = (($1) + (($2*60)|0)|0);
  $3 = $slot_index;
  $call1 = (__ZL14_sg_slot_allocP10_sg_pool_tP10_sg_slot_ti((33568),$arrayidx,$3)|0);
  HEAP32[$retval>>2] = $call1;
  $4 = HEAP32[$retval>>2]|0;
  STACKTOP = sp;return ($4|0);
 } else {
  HEAP32[$retval>>2] = 0;
  $4 = HEAP32[$retval>>2]|0;
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function __ZL15_sg_alloc_imagev() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arrayidx = 0, $call = 0, $call1 = 0, $cmp = 0, $retval = 0, $slot_index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $retval = sp + 4|0;
 $call = (__ZL20_sg_pool_alloc_indexP10_sg_pool_t((33584))|0);
 $slot_index = $call;
 $0 = $slot_index;
 $cmp = (0)!=($0|0);
 if ($cmp) {
  $1 = HEAP32[(33668)>>2]|0;
  $2 = $slot_index;
  $arrayidx = (($1) + (($2*112)|0)|0);
  $3 = $slot_index;
  $call1 = (__ZL14_sg_slot_allocP10_sg_pool_tP10_sg_slot_ti((33584),$arrayidx,$3)|0);
  HEAP32[$retval>>2] = $call1;
  $4 = HEAP32[$retval>>2]|0;
  STACKTOP = sp;return ($4|0);
 } else {
  HEAP32[$retval>>2] = 0;
  $4 = HEAP32[$retval>>2]|0;
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function __ZL16_sg_alloc_shaderv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arrayidx = 0, $call = 0, $call1 = 0, $cmp = 0, $retval = 0, $slot_index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $retval = sp + 4|0;
 $call = (__ZL20_sg_pool_alloc_indexP10_sg_pool_t((33600))|0);
 $slot_index = $call;
 $0 = $slot_index;
 $cmp = (0)!=($0|0);
 if ($cmp) {
  $1 = HEAP32[(33672)>>2]|0;
  $2 = $slot_index;
  $arrayidx = (($1) + (($2*2176)|0)|0);
  $3 = $slot_index;
  $call1 = (__ZL14_sg_slot_allocP10_sg_pool_tP10_sg_slot_ti((33600),$arrayidx,$3)|0);
  HEAP32[$retval>>2] = $call1;
  $4 = HEAP32[$retval>>2]|0;
  STACKTOP = sp;return ($4|0);
 } else {
  HEAP32[$retval>>2] = 0;
  $4 = HEAP32[$retval>>2]|0;
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function __ZL18_sg_alloc_pipelinev() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arrayidx = 0, $call = 0, $call1 = 0, $cmp = 0, $retval = 0, $slot_index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $retval = sp + 4|0;
 $call = (__ZL20_sg_pool_alloc_indexP10_sg_pool_t((33616))|0);
 $slot_index = $call;
 $0 = $slot_index;
 $cmp = (0)!=($0|0);
 if ($cmp) {
  $1 = HEAP32[(33676)>>2]|0;
  $2 = $slot_index;
  $arrayidx = (($1) + (($2*440)|0)|0);
  $3 = $slot_index;
  $call1 = (__ZL14_sg_slot_allocP10_sg_pool_tP10_sg_slot_ti((33616),$arrayidx,$3)|0);
  HEAP32[$retval>>2] = $call1;
  $4 = HEAP32[$retval>>2]|0;
  STACKTOP = sp;return ($4|0);
 } else {
  HEAP32[$retval>>2] = 0;
  $4 = HEAP32[$retval>>2]|0;
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function __ZL24_sg_buffer_desc_defaultsPK14sg_buffer_desc($agg$result,$desc) {
 $agg$result = $agg$result|0;
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $cmp = 0, $cmp3 = 0, $cond = 0, $cond8 = 0, $desc$addr = 0, $type = 0, $type1 = 0, $type2 = 0, $usage = 0, $usage6 = 0, $usage9 = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $desc$addr = $desc;
 $0 = $desc$addr;
 dest=$agg$result; src=$0; stop=dest+48|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $type = ((($agg$result)) + 8|0);
 $1 = HEAP32[$type>>2]|0;
 $cmp = ($1|0)==(0);
 $type1 = ((($agg$result)) + 8|0);
 $2 = HEAP32[$type1>>2]|0;
 $cond = $cmp ? 1 : $2;
 $type2 = ((($agg$result)) + 8|0);
 HEAP32[$type2>>2] = $cond;
 $usage = ((($agg$result)) + 12|0);
 $3 = HEAP32[$usage>>2]|0;
 $cmp3 = ($3|0)==(0);
 $usage6 = ((($agg$result)) + 12|0);
 $4 = HEAP32[$usage6>>2]|0;
 $cond8 = $cmp3 ? 1 : $4;
 $usage9 = ((($agg$result)) + 12|0);
 HEAP32[$usage9>>2] = $cond8;
 STACKTOP = sp;return;
}
function __ZL15_sg_init_buffer9sg_bufferPK14sg_buffer_desc($buf_id,$desc) {
 $buf_id = $buf_id|0;
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $call = 0, $call8 = 0, $call9 = 0;
 var $cmp = 0, $cmp16 = 0, $cmp19 = 0, $cmp4 = 0, $ctx_id = 0, $desc$addr = 0, $or$cond = 0, $state = 0, $state11 = 0, $state13 = 0, $state15 = 0, $state18 = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $desc$addr = $desc;
 $0 = HEAP32[$buf_id>>2]|0;
 $cmp = ($0|0)!=(0);
 $1 = $desc$addr;
 $tobool = ($1|0)!=(0|0);
 $or$cond = $cmp & $tobool;
 if (!($or$cond)) {
  ___assert_fail((11750|0),(9686|0),10712,(11785|0));
  // unreachable;
 }
 $2 = HEAP32[$buf_id>>2]|0;
 $call = (__ZL17_sg_lookup_bufferPK11_sg_pools_tj((33568),$2)|0);
 $buf = $call;
 $3 = $buf;
 $tobool2 = ($3|0)!=(0|0);
 if (!($tobool2)) {
  ___assert_fail((11801|0),(9686|0),10714,(11785|0));
  // unreachable;
 }
 $4 = $buf;
 $state = ((($4)) + 8|0);
 $5 = HEAP32[$state>>2]|0;
 $cmp4 = ($5|0)==(1);
 if (!($cmp4)) {
  ___assert_fail((11801|0),(9686|0),10714,(11785|0));
  // unreachable;
 }
 $6 = HEAP32[(33548)>>2]|0;
 $7 = $buf;
 $ctx_id = ((($7)) + 4|0);
 HEAP32[$ctx_id>>2] = $6;
 $8 = $desc$addr;
 $call8 = (__ZL24_sg_validate_buffer_descPK14sg_buffer_desc($8)|0);
 $9 = $buf;
 if ($call8) {
  $10 = $desc$addr;
  $call9 = (__ZL17_sg_create_bufferP12_sg_buffer_tPK14sg_buffer_desc($9,$10)|0);
  $11 = $buf;
  $state11 = ((($11)) + 8|0);
  HEAP32[$state11>>2] = $call9;
 } else {
  $state13 = ((($9)) + 8|0);
  HEAP32[$state13>>2] = 3;
 }
 $12 = $buf;
 $state15 = ((($12)) + 8|0);
 $13 = HEAP32[$state15>>2]|0;
 $cmp16 = ($13|0)==(2);
 if ($cmp16) {
  STACKTOP = sp;return;
 }
 $14 = $buf;
 $state18 = ((($14)) + 8|0);
 $15 = HEAP32[$state18>>2]|0;
 $cmp19 = ($15|0)==(3);
 if ($cmp19) {
  STACKTOP = sp;return;
 } else {
  ___assert_fail((11850|0),(9686|0),10722,(11785|0));
  // unreachable;
 }
}
function __ZL17_sg_lookup_bufferPK11_sg_pools_tj($p,$buf_id) {
 $p = $p|0;
 $buf_id = $buf_id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $buf = 0, $buf_id$addr = 0, $call = 0, $cmp = 0, $cmp1 = 0, $p$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $p$addr = $p;
 $buf_id$addr = $buf_id;
 $0 = $buf_id$addr;
 $cmp = (0)!=($0|0);
 if ($cmp) {
  $1 = $p$addr;
  $2 = $buf_id$addr;
  $call = (__ZL13_sg_buffer_atPK11_sg_pools_tj($1,$2)|0);
  $buf = $call;
  $3 = $buf;
  $4 = HEAP32[$3>>2]|0;
  $5 = $buf_id$addr;
  $cmp1 = ($4|0)==($5|0);
  if ($cmp1) {
   $6 = $buf;
   $retval = $6;
   $7 = $retval;
   STACKTOP = sp;return ($7|0);
  }
 }
 $retval = 0;
 $7 = $retval;
 STACKTOP = sp;return ($7|0);
}
function __ZL24_sg_validate_buffer_descPK14sg_buffer_desc($desc) {
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $_end_canary = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp10 = 0, $cmp11 = 0, $cmp13 = 0, $cmp2 = 0, $cmp3 = 0, $cmp5 = 0, $cmp7 = 0, $content = 0, $content12 = 0, $d3d11_buffer = 0, $desc$addr = 0, $ext = 0, $frombool = 0, $gl_buffers = 0, $mtl_buffers = 0;
 var $size = 0, $tobool = 0, $tobool9 = 0, $usage = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $desc$addr = $desc;
 $0 = $desc$addr;
 $tobool = ($0|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((9681|0),(9686|0),9978,(12101|0));
  // unreachable;
 }
 __ZL18_sg_validate_beginv();
 $1 = $desc$addr;
 $2 = HEAP32[$1>>2]|0;
 $cmp = ($2|0)==(0);
 __ZL12_sg_validateb20_sg_validate_error_t($cmp,1);
 $3 = $desc$addr;
 $_end_canary = ((($3)) + 44|0);
 $4 = HEAP32[$_end_canary>>2]|0;
 $cmp1 = ($4|0)==(0);
 __ZL12_sg_validateb20_sg_validate_error_t($cmp1,1);
 $5 = $desc$addr;
 $size = ((($5)) + 4|0);
 $6 = HEAP32[$size>>2]|0;
 $cmp2 = ($6|0)>(0);
 __ZL12_sg_validateb20_sg_validate_error_t($cmp2,2);
 $7 = $desc$addr;
 $gl_buffers = ((($7)) + 24|0);
 $8 = HEAP32[$gl_buffers>>2]|0;
 $cmp3 = (0)!=($8|0);
 if ($cmp3) {
  $13 = 1;
 } else {
  $9 = $desc$addr;
  $mtl_buffers = ((($9)) + 32|0);
  $10 = HEAP32[$mtl_buffers>>2]|0;
  $cmp5 = (0|0)!=($10|0);
  if ($cmp5) {
   $13 = 1;
  } else {
   $11 = $desc$addr;
   $d3d11_buffer = ((($11)) + 40|0);
   $12 = HEAP32[$d3d11_buffer>>2]|0;
   $cmp7 = (0|0)!=($12|0);
   $13 = $cmp7;
  }
 }
 $frombool = $13&1;
 $ext = $frombool;
 $14 = $ext;
 $tobool9 = $14&1;
 if (!($tobool9)) {
  $15 = $desc$addr;
  $usage = ((($15)) + 12|0);
  $16 = HEAP32[$usage>>2]|0;
  $cmp10 = ($16|0)==(1);
  if ($cmp10) {
   $17 = $desc$addr;
   $content = ((($17)) + 16|0);
   $18 = HEAP32[$content>>2]|0;
   $cmp11 = (0|0)!=($18|0);
   __ZL12_sg_validateb20_sg_validate_error_t($cmp11,3);
   $call = (__ZL16_sg_validate_endv()|0);
   STACKTOP = sp;return ($call|0);
  }
 }
 $19 = $desc$addr;
 $content12 = ((($19)) + 16|0);
 $20 = HEAP32[$content12>>2]|0;
 $cmp13 = (0|0)==($20|0);
 __ZL12_sg_validateb20_sg_validate_error_t($cmp13,4);
 $call = (__ZL16_sg_validate_endv()|0);
 STACKTOP = sp;return ($call|0);
}
function __ZL17_sg_create_bufferP12_sg_buffer_tPK14sg_buffer_desc($buf,$desc) {
 $buf = $buf|0;
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $active_slot = 0, $append_frame_index = 0;
 var $append_overflow = 0, $append_pos = 0, $arrayidx19 = 0, $arrayidx24 = 0, $arrayidx36 = 0, $buf$addr = 0, $call = 0, $call11 = 0, $call13 = 0, $call37 = 0, $cmp = 0, $cmp15 = 0, $cmp27 = 0, $cmp38 = 0, $cmp8 = 0, $cmp9 = 0, $cond = 0, $content = 0, $content33 = 0, $desc$addr = 0;
 var $ext_buffers = 0, $ext_buffers16 = 0, $frombool = 0, $gl_buf = 0, $gl_buf35 = 0, $gl_buffers = 0, $gl_buffers18 = 0, $gl_buffers23 = 0, $gl_target = 0, $gl_usage = 0, $inc = 0, $num_slots = 0, $num_slots14 = 0, $or$cond = 0, $size = 0, $size25 = 0, $size32 = 0, $size4 = 0, $slot = 0, $tobool = 0;
 var $tobool1 = 0, $tobool17 = 0, $tobool20 = 0, $tobool29 = 0, $type = 0, $type10 = 0, $type5 = 0, $update_frame_index = 0, $usage = 0, $usage12 = 0, $usage26 = 0, $usage6 = 0, $usage7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $gl_buf = sp;
 $buf$addr = $buf;
 $desc$addr = $desc;
 $0 = $buf$addr;
 $tobool = ($0|0)!=(0|0);
 $1 = $desc$addr;
 $tobool1 = ($1|0)!=(0|0);
 $or$cond = $tobool & $tobool1;
 if (!($or$cond)) {
  ___assert_fail((11940|0),(9686|0),5054,(11952|0));
  // unreachable;
 }
 $call = (_glGetError()|0);
 $cmp = ($call|0)==(0);
 if (!($cmp)) {
  ___assert_fail((9883|0),(9686|0),5055,(11952|0));
  // unreachable;
 }
 $2 = $desc$addr;
 $size = ((($2)) + 4|0);
 $3 = HEAP32[$size>>2]|0;
 $4 = $buf$addr;
 $size4 = ((($4)) + 12|0);
 HEAP32[$size4>>2] = $3;
 $5 = $buf$addr;
 $append_pos = ((($5)) + 16|0);
 HEAP32[$append_pos>>2] = 0;
 $6 = $buf$addr;
 $append_overflow = ((($6)) + 20|0);
 HEAP8[$append_overflow>>0] = 0;
 $7 = $desc$addr;
 $type = ((($7)) + 8|0);
 $8 = HEAP32[$type>>2]|0;
 $9 = $buf$addr;
 $type5 = ((($9)) + 24|0);
 HEAP32[$type5>>2] = $8;
 $10 = $desc$addr;
 $usage = ((($10)) + 12|0);
 $11 = HEAP32[$usage>>2]|0;
 $12 = $buf$addr;
 $usage6 = ((($12)) + 28|0);
 HEAP32[$usage6>>2] = $11;
 $13 = $buf$addr;
 $update_frame_index = ((($13)) + 32|0);
 HEAP32[$update_frame_index>>2] = 0;
 $14 = $buf$addr;
 $append_frame_index = ((($14)) + 36|0);
 HEAP32[$append_frame_index>>2] = 0;
 $15 = $buf$addr;
 $usage7 = ((($15)) + 28|0);
 $16 = HEAP32[$usage7>>2]|0;
 $cmp8 = ($16|0)==(1);
 $cond = $cmp8 ? 1 : 2;
 $17 = $buf$addr;
 $num_slots = ((($17)) + 40|0);
 HEAP32[$num_slots>>2] = $cond;
 $18 = $buf$addr;
 $active_slot = ((($18)) + 44|0);
 HEAP32[$active_slot>>2] = 0;
 $19 = $desc$addr;
 $gl_buffers = ((($19)) + 24|0);
 $20 = HEAP32[$gl_buffers>>2]|0;
 $cmp9 = (0)!=($20|0);
 $21 = $buf$addr;
 $ext_buffers = ((($21)) + 56|0);
 $frombool = $cmp9&1;
 HEAP8[$ext_buffers>>0] = $frombool;
 $22 = $buf$addr;
 $type10 = ((($22)) + 24|0);
 $23 = HEAP32[$type10>>2]|0;
 $call11 = (__ZL20_sg_gl_buffer_target14sg_buffer_type($23)|0);
 $gl_target = $call11;
 $24 = $buf$addr;
 $usage12 = ((($24)) + 28|0);
 $25 = HEAP32[$usage12>>2]|0;
 $call13 = (__ZL12_sg_gl_usage8sg_usage($25)|0);
 $gl_usage = $call13;
 $slot = 0;
 while(1) {
  $26 = $slot;
  $27 = $buf$addr;
  $num_slots14 = ((($27)) + 40|0);
  $28 = HEAP32[$num_slots14>>2]|0;
  $cmp15 = ($26|0)<($28|0);
  if (!($cmp15)) {
   label = 17;
   break;
  }
  HEAP32[$gl_buf>>2] = 0;
  $29 = $buf$addr;
  $ext_buffers16 = ((($29)) + 56|0);
  $30 = HEAP8[$ext_buffers16>>0]|0;
  $tobool17 = $30&1;
  if ($tobool17) {
   $31 = $desc$addr;
   $gl_buffers18 = ((($31)) + 24|0);
   $32 = $slot;
   $arrayidx19 = (($gl_buffers18) + ($32<<2)|0);
   $33 = HEAP32[$arrayidx19>>2]|0;
   $tobool20 = ($33|0)!=(0);
   if (!($tobool20)) {
    label = 9;
    break;
   }
   $34 = $desc$addr;
   $gl_buffers23 = ((($34)) + 24|0);
   $35 = $slot;
   $arrayidx24 = (($gl_buffers23) + ($35<<2)|0);
   $36 = HEAP32[$arrayidx24>>2]|0;
   HEAP32[$gl_buf>>2] = $36;
  } else {
   _glGenBuffers(1,($gl_buf|0));
   $37 = $gl_target;
   __ZL27_sg_gl_store_buffer_bindingj($37);
   $38 = $gl_target;
   $39 = HEAP32[$gl_buf>>2]|0;
   __ZL18_sg_gl_bind_bufferjj($38,$39);
   $40 = $gl_target;
   $41 = $buf$addr;
   $size25 = ((($41)) + 12|0);
   $42 = HEAP32[$size25>>2]|0;
   $43 = $gl_usage;
   _glBufferData(($40|0),($42|0),(0|0),($43|0));
   $44 = $buf$addr;
   $usage26 = ((($44)) + 28|0);
   $45 = HEAP32[$usage26>>2]|0;
   $cmp27 = ($45|0)==(1);
   if ($cmp27) {
    $46 = $desc$addr;
    $content = ((($46)) + 16|0);
    $47 = HEAP32[$content>>2]|0;
    $tobool29 = ($47|0)!=(0|0);
    if (!($tobool29)) {
     label = 13;
     break;
    }
    $48 = $gl_target;
    $49 = $buf$addr;
    $size32 = ((($49)) + 12|0);
    $50 = HEAP32[$size32>>2]|0;
    $51 = $desc$addr;
    $content33 = ((($51)) + 16|0);
    $52 = HEAP32[$content33>>2]|0;
    _glBufferSubData(($48|0),0,($50|0),($52|0));
   }
   $53 = $gl_target;
   __ZL29_sg_gl_restore_buffer_bindingj($53);
  }
  $54 = HEAP32[$gl_buf>>2]|0;
  $55 = $buf$addr;
  $gl_buf35 = ((($55)) + 48|0);
  $56 = $slot;
  $arrayidx36 = (($gl_buf35) + ($56<<2)|0);
  HEAP32[$arrayidx36>>2] = $54;
  $57 = $slot;
  $inc = (($57) + 1)|0;
  $slot = $inc;
 }
 if ((label|0) == 9) {
  ___assert_fail((11970|0),(9686|0),5071,(11952|0));
  // unreachable;
 }
 else if ((label|0) == 13) {
  ___assert_fail((11993|0),(9686|0),5080,(11952|0));
  // unreachable;
 }
 else if ((label|0) == 17) {
  $call37 = (_glGetError()|0);
  $cmp38 = ($call37|0)==(0);
  if ($cmp38) {
   STACKTOP = sp;return 2;
  } else {
   ___assert_fail((9883|0),(9686|0),5087,(11952|0));
   // unreachable;
  }
 }
 return (0)|0;
}
function __ZL20_sg_gl_buffer_target14sg_buffer_type($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $retval = 0, $t$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $t$addr = $t;
 $0 = $t$addr;
 switch ($0|0) {
 case 1:  {
  $retval = 34962;
  break;
 }
 case 2:  {
  $retval = 34963;
  break;
 }
 default: {
  ___assert_fail((24519|0),(9686|0),3811,(12080|0));
  // unreachable;
 }
 }
 $1 = $retval;
 STACKTOP = sp;return ($1|0);
}
function __ZL12_sg_gl_usage8sg_usage($u) {
 $u = $u|0;
 var $0 = 0, $1 = 0, $retval = 0, $u$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $u$addr = $u;
 $0 = $u$addr;
 switch ($0|0) {
 case 1:  {
  $retval = 35044;
  break;
 }
 case 2:  {
  $retval = 35048;
  break;
 }
 case 3:  {
  $retval = 35040;
  break;
 }
 default: {
  ___assert_fail((24519|0),(9686|0),3832,(12067|0));
  // unreachable;
 }
 }
 $1 = $retval;
 STACKTOP = sp;return ($1|0);
}
function __ZL27_sg_gl_store_buffer_bindingj($target) {
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $cmp = 0, $target$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $target$addr = $target;
 $0 = $target$addr;
 $cmp = ($0|0)==(34962);
 if ($cmp) {
  $1 = HEAP32[(34560)>>2]|0;
  HEAP32[(34568)>>2] = $1;
  STACKTOP = sp;return;
 } else {
  $2 = HEAP32[(34564)>>2]|0;
  HEAP32[(34572)>>2] = $2;
  STACKTOP = sp;return;
 }
}
function __ZL18_sg_gl_bind_bufferjj($target,$buffer) {
 $target = $target|0;
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer$addr = 0, $cmp = 0, $cmp1 = 0, $cmp2 = 0, $cmp3 = 0, $cmp5 = 0, $or$cond = 0;
 var $target$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $target$addr = $target;
 $buffer$addr = $buffer;
 $0 = $target$addr;
 $cmp = (34962)==($0|0);
 $1 = $target$addr;
 $cmp1 = (34963)==($1|0);
 $or$cond = $cmp | $cmp1;
 if (!($or$cond)) {
  ___assert_fail((12007|0),(9686|0),4832,(12048|0));
  // unreachable;
 }
 $2 = $target$addr;
 $cmp2 = ($2|0)==(34962);
 if ($cmp2) {
  $3 = HEAP32[(34560)>>2]|0;
  $4 = $buffer$addr;
  $cmp3 = ($3|0)!=($4|0);
  if (!($cmp3)) {
   STACKTOP = sp;return;
  }
  $5 = $buffer$addr;
  HEAP32[(34560)>>2] = $5;
  $6 = $target$addr;
  $7 = $buffer$addr;
  _glBindBuffer(($6|0),($7|0));
  STACKTOP = sp;return;
 } else {
  $8 = HEAP32[(34564)>>2]|0;
  $9 = $buffer$addr;
  $cmp5 = ($8|0)!=($9|0);
  if (!($cmp5)) {
   STACKTOP = sp;return;
  }
  $10 = $buffer$addr;
  HEAP32[(34564)>>2] = $10;
  $11 = $target$addr;
  $12 = $buffer$addr;
  _glBindBuffer(($11|0),($12|0));
  STACKTOP = sp;return;
 }
}
function __ZL29_sg_gl_restore_buffer_bindingj($target) {
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $cmp = 0, $target$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $target$addr = $target;
 $0 = $target$addr;
 $cmp = ($0|0)==(34962);
 $1 = $target$addr;
 if ($cmp) {
  $2 = HEAP32[(34568)>>2]|0;
  __ZL18_sg_gl_bind_bufferjj($1,$2);
  STACKTOP = sp;return;
 } else {
  $3 = HEAP32[(34572)>>2]|0;
  __ZL18_sg_gl_bind_bufferjj($1,$3);
  STACKTOP = sp;return;
 }
}
function __ZL18_sg_validate_beginv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(33564)>>2] = 0;
 return;
}
function __ZL12_sg_validateb20_sg_validate_error_t($cond,$err) {
 $cond = $cond|0;
 $err = $err|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $call2 = 0, $cond$addr = 0, $err$addr = 0, $frombool = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $frombool = $cond&1;
 $cond$addr = $frombool;
 $err$addr = $err;
 $0 = $cond$addr;
 $tobool = $0&1;
 if ($tobool) {
  STACKTOP = sp;return;
 }
 $1 = $err$addr;
 HEAP32[(33564)>>2] = $1;
 $2 = $err$addr;
 $call = (__ZL19_sg_validate_string20_sg_validate_error_t($2)|0);
 $tobool1 = ($call|0)!=(0|0);
 if (!($tobool1)) {
  ___assert_fail((12185|0),(9686|0),9955,(12210|0));
  // unreachable;
 }
 $3 = $err$addr;
 $call2 = (__ZL19_sg_validate_string20_sg_validate_error_t($3)|0);
 (_puts($call2)|0);
 STACKTOP = sp;return;
}
function __ZL16_sg_validate_endv() {
 var $0 = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(33564)>>2]|0;
 $cmp = ($0|0)!=(0);
 if ($cmp) {
  (_puts(12126)|0);
  ___assert_fail((24519|0),(9686|0),9963,(12168|0));
  // unreachable;
 } else {
  return 1;
 }
 return (0)|0;
}
function __ZL19_sg_validate_string20_sg_validate_error_t($err) {
 $err = $err|0;
 var $0 = 0, $1 = 0, $err$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $err$addr = $err;
 $0 = $err$addr;
 do {
  switch ($0|0) {
  case 1:  {
   $retval = 12223;
   break;
  }
  case 2:  {
   $retval = 12254;
   break;
  }
  case 3:  {
   $retval = 12286;
   break;
  }
  case 4:  {
   $retval = 12362;
   break;
  }
  case 5:  {
   $retval = 12426;
   break;
  }
  case 6:  {
   $retval = 12456;
   break;
  }
  case 7:  {
   $retval = 12488;
   break;
  }
  case 8:  {
   $retval = 12521;
   break;
  }
  case 9:  {
   $retval = 12566;
   break;
  }
  case 10:  {
   $retval = 12615;
   break;
  }
  case 11:  {
   $retval = 12663;
   break;
  }
  case 12:  {
   $retval = 12704;
   break;
  }
  case 13:  {
   $retval = 12752;
   break;
  }
  case 14:  {
   $retval = 12808;
   break;
  }
  case 15:  {
   $retval = 12855;
   break;
  }
  case 16:  {
   $retval = 12918;
   break;
  }
  case 17:  {
   $retval = 12949;
   break;
  }
  case 18:  {
   $retval = 12977;
   break;
  }
  case 19:  {
   $retval = 13003;
   break;
  }
  case 20:  {
   $retval = 13039;
   break;
  }
  case 21:  {
   $retval = 13083;
   break;
  }
  case 23:  {
   $retval = 13134;
   break;
  }
  case 24:  {
   $retval = 13185;
   break;
  }
  case 25:  {
   $retval = 13239;
   break;
  }
  case 26:  {
   $retval = 13273;
   break;
  }
  case 22:  {
   $retval = 13336;
   break;
  }
  case 27:  {
   $retval = 13379;
   break;
  }
  case 28:  {
   $retval = 13426;
   break;
  }
  case 29:  {
   $retval = 13472;
   break;
  }
  case 30:  {
   $retval = 13522;
   break;
  }
  case 31:  {
   $retval = 13582;
   break;
  }
  case 32:  {
   $retval = 13615;
   break;
  }
  case 33:  {
   $retval = 13658;
   break;
  }
  case 34:  {
   $retval = 13715;
   break;
  }
  case 35:  {
   $retval = 13778;
   break;
  }
  case 36:  {
   $retval = 13830;
   break;
  }
  case 37:  {
   $retval = 13881;
   break;
  }
  case 38:  {
   $retval = 13910;
   break;
  }
  case 39:  {
   $retval = 13958;
   break;
  }
  case 40:  {
   $retval = 14005;
   break;
  }
  case 41:  {
   $retval = 14040;
   break;
  }
  case 42:  {
   $retval = 14099;
   break;
  }
  case 43:  {
   $retval = 14159;
   break;
  }
  case 44:  {
   $retval = 14226;
   break;
  }
  case 45:  {
   $retval = 14290;
   break;
  }
  case 46:  {
   $retval = 14335;
   break;
  }
  case 47:  {
   $retval = 14400;
   break;
  }
  case 48:  {
   $retval = 14465;
   break;
  }
  case 49:  {
   $retval = 14522;
   break;
  }
  case 50:  {
   $retval = 14567;
   break;
  }
  case 51:  {
   $retval = 14620;
   break;
  }
  case 52:  {
   $retval = 14654;
   break;
  }
  case 53:  {
   $retval = 14713;
   break;
  }
  case 54:  {
   $retval = 14761;
   break;
  }
  case 55:  {
   $retval = 14812;
   break;
  }
  case 56:  {
   $retval = 14866;
   break;
  }
  case 57:  {
   $retval = 14915;
   break;
  }
  case 58:  {
   $retval = 14967;
   break;
  }
  case 59:  {
   $retval = 15068;
   break;
  }
  case 60:  {
   $retval = 15161;
   break;
  }
  case 61:  {
   $retval = 15254;
   break;
  }
  case 62:  {
   $retval = 15353;
   break;
  }
  case 63:  {
   $retval = 15411;
   break;
  }
  case 64:  {
   $retval = 15480;
   break;
  }
  case 65:  {
   $retval = 15552;
   break;
  }
  case 66:  {
   $retval = 15644;
   break;
  }
  case 67:  {
   $retval = 15693;
   break;
  }
  case 68:  {
   $retval = 15777;
   break;
  }
  case 69:  {
   $retval = 15838;
   break;
  }
  case 70:  {
   $retval = 15929;
   break;
  }
  case 71:  {
   $retval = 16021;
   break;
  }
  case 72:  {
   $retval = 16069;
   break;
  }
  case 73:  {
   $retval = 16151;
   break;
  }
  case 74:  {
   $retval = 16211;
   break;
  }
  case 75:  {
   $retval = 16285;
   break;
  }
  case 76:  {
   $retval = 16340;
   break;
  }
  case 77:  {
   $retval = 16424;
   break;
  }
  case 78:  {
   $retval = 16500;
   break;
  }
  case 79:  {
   $retval = 16557;
   break;
  }
  case 80:  {
   $retval = 16643;
   break;
  }
  case 81:  {
   $retval = 16703;
   break;
  }
  case 82:  {
   $retval = 16780;
   break;
  }
  case 83:  {
   $retval = 16845;
   break;
  }
  case 84:  {
   $retval = 16894;
   break;
  }
  case 85:  {
   $retval = 16951;
   break;
  }
  case 86:  {
   $retval = 17014;
   break;
  }
  case 87:  {
   $retval = 17096;
   break;
  }
  case 88:  {
   $retval = 17148;
   break;
  }
  case 89:  {
   $retval = 17215;
   break;
  }
  case 90:  {
   $retval = 17297;
   break;
  }
  case 91:  {
   $retval = 17344;
   break;
  }
  case 92:  {
   $retval = 17395;
   break;
  }
  case 93:  {
   $retval = 17448;
   break;
  }
  case 94:  {
   $retval = 17509;
   break;
  }
  default: {
   $retval = 17570;
  }
  }
 } while(0);
 $1 = $retval;
 STACKTOP = sp;return ($1|0);
}
function __ZL13_sg_buffer_atPK11_sg_pools_tj($p,$buf_id) {
 $p = $p|0;
 $buf_id = $buf_id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $buf_id$addr = 0, $buffers = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp3 = 0, $or$cond = 0, $p$addr = 0, $slot_index = 0;
 var $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $p$addr = $p;
 $buf_id$addr = $buf_id;
 $0 = $p$addr;
 $tobool = ($0|0)!=(0|0);
 $1 = $buf_id$addr;
 $cmp = (0)!=($1|0);
 $or$cond = $tobool & $cmp;
 if (!($or$cond)) {
  ___assert_fail((17595|0),(9686|0),9662,(17626|0));
  // unreachable;
 }
 $2 = $buf_id$addr;
 $call = (__ZL14_sg_slot_indexj($2)|0);
 $slot_index = $call;
 $3 = $slot_index;
 $cmp1 = ($3|0)>(0);
 if (!($cmp1)) {
  ___assert_fail((17640|0),(9686|0),9664,(17626|0));
  // unreachable;
 }
 $4 = $slot_index;
 $5 = $p$addr;
 $6 = HEAP32[$5>>2]|0;
 $cmp3 = ($4|0)<($6|0);
 if ($cmp3) {
  $7 = $p$addr;
  $buffers = ((($7)) + 96|0);
  $8 = HEAP32[$buffers>>2]|0;
  $9 = $slot_index;
  $arrayidx = (($8) + (($9*60)|0)|0);
  STACKTOP = sp;return ($arrayidx|0);
 } else {
  ___assert_fail((17640|0),(9686|0),9664,(17626|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZL23_sg_image_desc_defaultsPK13sg_image_desc($agg$result,$desc) {
 $agg$result = $agg$result|0;
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $border_color = 0, $border_color84 = 0, $border_color87 = 0, $call = 0, $cmp = 0;
 var $cmp10 = 0, $cmp17 = 0, $cmp24 = 0, $cmp3 = 0, $cmp39 = 0, $cmp46 = 0, $cmp53 = 0, $cmp60 = 0, $cmp67 = 0, $cmp74 = 0, $cmp81 = 0, $cmp88 = 0, $cmp95 = 0, $cond = 0, $cond100 = 0.0, $cond15 = 0, $cond22 = 0, $cond29 = 0, $cond37 = 0, $cond44 = 0;
 var $cond51 = 0, $cond58 = 0, $cond65 = 0, $cond72 = 0, $cond79 = 0, $cond8 = 0, $cond86 = 0, $cond93 = 0, $desc$addr = 0, $mag_filter = 0, $mag_filter56 = 0, $mag_filter59 = 0, $max_anisotropy = 0, $max_anisotropy91 = 0, $max_anisotropy94 = 0, $max_lod = 0, $max_lod101 = 0, $max_lod98 = 0, $min_filter = 0, $min_filter49 = 0;
 var $min_filter52 = 0, $num_mipmaps = 0, $num_mipmaps13 = 0, $num_mipmaps16 = 0, $pixel_format = 0, $pixel_format27 = 0, $pixel_format30 = 0, $pixel_format35 = 0, $pixel_format38 = 0, $render_target = 0, $sample_count = 0, $sample_count42 = 0, $sample_count45 = 0, $tobool = 0, $type = 0, $type1 = 0, $type2 = 0, $usage = 0, $usage20 = 0, $usage23 = 0;
 var $wrap_u = 0, $wrap_u63 = 0, $wrap_u66 = 0, $wrap_v = 0, $wrap_v70 = 0, $wrap_v73 = 0, $wrap_w = 0, $wrap_w77 = 0, $wrap_w80 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $desc$addr = $desc;
 $0 = $desc$addr;
 _memcpy(($agg$result|0),($0|0),872)|0;
 $type = ((($agg$result)) + 4|0);
 $1 = HEAP32[$type>>2]|0;
 $cmp = ($1|0)==(0);
 $type1 = ((($agg$result)) + 4|0);
 $2 = HEAP32[$type1>>2]|0;
 $cond = $cmp ? 1 : $2;
 $type2 = ((($agg$result)) + 4|0);
 HEAP32[$type2>>2] = $cond;
 $3 = ((($agg$result)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $cmp3 = ($4|0)==(0);
 $5 = ((($agg$result)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $cond8 = $cmp3 ? 1 : $6;
 $7 = ((($agg$result)) + 20|0);
 HEAP32[$7>>2] = $cond8;
 $num_mipmaps = ((($agg$result)) + 24|0);
 $8 = HEAP32[$num_mipmaps>>2]|0;
 $cmp10 = ($8|0)==(0);
 $num_mipmaps13 = ((($agg$result)) + 24|0);
 $9 = HEAP32[$num_mipmaps13>>2]|0;
 $cond15 = $cmp10 ? 1 : $9;
 $num_mipmaps16 = ((($agg$result)) + 24|0);
 HEAP32[$num_mipmaps16>>2] = $cond15;
 $usage = ((($agg$result)) + 28|0);
 $10 = HEAP32[$usage>>2]|0;
 $cmp17 = ($10|0)==(0);
 $usage20 = ((($agg$result)) + 28|0);
 $11 = HEAP32[$usage20>>2]|0;
 $cond22 = $cmp17 ? 1 : $11;
 $usage23 = ((($agg$result)) + 28|0);
 HEAP32[$usage23>>2] = $cond22;
 $12 = $desc$addr;
 $render_target = ((($12)) + 8|0);
 $13 = HEAP8[$render_target>>0]|0;
 $tobool = $13&1;
 $pixel_format = ((($agg$result)) + 32|0);
 $14 = HEAP32[$pixel_format>>2]|0;
 $cmp24 = ($14|0)==(0);
 if ($tobool) {
  if ($cmp24) {
   $call = (__ZL36_sg_default_rendertarget_colorformatv()|0);
   $cond29 = $call;
  } else {
   $pixel_format27 = ((($agg$result)) + 32|0);
   $15 = HEAP32[$pixel_format27>>2]|0;
   $cond29 = $15;
  }
  $pixel_format30 = ((($agg$result)) + 32|0);
  HEAP32[$pixel_format30>>2] = $cond29;
 } else {
  $pixel_format35 = ((($agg$result)) + 32|0);
  $16 = HEAP32[$pixel_format35>>2]|0;
  $cond37 = $cmp24 ? 23 : $16;
  $pixel_format38 = ((($agg$result)) + 32|0);
  HEAP32[$pixel_format38>>2] = $cond37;
 }
 $sample_count = ((($agg$result)) + 36|0);
 $17 = HEAP32[$sample_count>>2]|0;
 $cmp39 = ($17|0)==(0);
 $sample_count42 = ((($agg$result)) + 36|0);
 $18 = HEAP32[$sample_count42>>2]|0;
 $cond44 = $cmp39 ? 1 : $18;
 $sample_count45 = ((($agg$result)) + 36|0);
 HEAP32[$sample_count45>>2] = $cond44;
 $min_filter = ((($agg$result)) + 40|0);
 $19 = HEAP32[$min_filter>>2]|0;
 $cmp46 = ($19|0)==(0);
 $min_filter49 = ((($agg$result)) + 40|0);
 $20 = HEAP32[$min_filter49>>2]|0;
 $cond51 = $cmp46 ? 1 : $20;
 $min_filter52 = ((($agg$result)) + 40|0);
 HEAP32[$min_filter52>>2] = $cond51;
 $mag_filter = ((($agg$result)) + 44|0);
 $21 = HEAP32[$mag_filter>>2]|0;
 $cmp53 = ($21|0)==(0);
 $mag_filter56 = ((($agg$result)) + 44|0);
 $22 = HEAP32[$mag_filter56>>2]|0;
 $cond58 = $cmp53 ? 1 : $22;
 $mag_filter59 = ((($agg$result)) + 44|0);
 HEAP32[$mag_filter59>>2] = $cond58;
 $wrap_u = ((($agg$result)) + 48|0);
 $23 = HEAP32[$wrap_u>>2]|0;
 $cmp60 = ($23|0)==(0);
 $wrap_u63 = ((($agg$result)) + 48|0);
 $24 = HEAP32[$wrap_u63>>2]|0;
 $cond65 = $cmp60 ? 1 : $24;
 $wrap_u66 = ((($agg$result)) + 48|0);
 HEAP32[$wrap_u66>>2] = $cond65;
 $wrap_v = ((($agg$result)) + 52|0);
 $25 = HEAP32[$wrap_v>>2]|0;
 $cmp67 = ($25|0)==(0);
 $wrap_v70 = ((($agg$result)) + 52|0);
 $26 = HEAP32[$wrap_v70>>2]|0;
 $cond72 = $cmp67 ? 1 : $26;
 $wrap_v73 = ((($agg$result)) + 52|0);
 HEAP32[$wrap_v73>>2] = $cond72;
 $wrap_w = ((($agg$result)) + 56|0);
 $27 = HEAP32[$wrap_w>>2]|0;
 $cmp74 = ($27|0)==(0);
 $wrap_w77 = ((($agg$result)) + 56|0);
 $28 = HEAP32[$wrap_w77>>2]|0;
 $cond79 = $cmp74 ? 1 : $28;
 $wrap_w80 = ((($agg$result)) + 56|0);
 HEAP32[$wrap_w80>>2] = $cond79;
 $border_color = ((($agg$result)) + 60|0);
 $29 = HEAP32[$border_color>>2]|0;
 $cmp81 = ($29|0)==(0);
 $border_color84 = ((($agg$result)) + 60|0);
 $30 = HEAP32[$border_color84>>2]|0;
 $cond86 = $cmp81 ? 2 : $30;
 $border_color87 = ((($agg$result)) + 60|0);
 HEAP32[$border_color87>>2] = $cond86;
 $max_anisotropy = ((($agg$result)) + 64|0);
 $31 = HEAP32[$max_anisotropy>>2]|0;
 $cmp88 = ($31|0)==(0);
 $max_anisotropy91 = ((($agg$result)) + 64|0);
 $32 = HEAP32[$max_anisotropy91>>2]|0;
 $cond93 = $cmp88 ? 1 : $32;
 $max_anisotropy94 = ((($agg$result)) + 64|0);
 HEAP32[$max_anisotropy94>>2] = $cond93;
 $max_lod = ((($agg$result)) + 72|0);
 $33 = +HEAPF32[$max_lod>>2];
 $cmp95 = $33 == 0.0;
 $max_lod98 = ((($agg$result)) + 72|0);
 $34 = +HEAPF32[$max_lod98>>2];
 $cond100 = $cmp95 ? 3.4028234663852886E+38 : $34;
 $max_lod101 = ((($agg$result)) + 72|0);
 HEAPF32[$max_lod101>>2] = $cond100;
 STACKTOP = sp;return;
}
function __ZL14_sg_init_image8sg_imagePK13sg_image_desc($img_id,$desc) {
 $img_id = $img_id|0;
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call8 = 0, $call9 = 0, $cmp = 0;
 var $cmp16 = 0, $cmp19 = 0, $cmp4 = 0, $ctx_id = 0, $desc$addr = 0, $img = 0, $or$cond = 0, $state = 0, $state11 = 0, $state13 = 0, $state15 = 0, $state18 = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $desc$addr = $desc;
 $0 = HEAP32[$img_id>>2]|0;
 $cmp = ($0|0)!=(0);
 $1 = $desc$addr;
 $tobool = ($1|0)!=(0|0);
 $or$cond = $cmp & $tobool;
 if (!($or$cond)) {
  ___assert_fail((17697|0),(9686|0),10726,(17732|0));
  // unreachable;
 }
 $2 = HEAP32[$img_id>>2]|0;
 $call = (__ZL16_sg_lookup_imagePK11_sg_pools_tj((33568),$2)|0);
 $img = $call;
 $3 = $img;
 $tobool2 = ($3|0)!=(0|0);
 if (!($tobool2)) {
  ___assert_fail((17747|0),(9686|0),10728,(17732|0));
  // unreachable;
 }
 $4 = $img;
 $state = ((($4)) + 8|0);
 $5 = HEAP32[$state>>2]|0;
 $cmp4 = ($5|0)==(1);
 if (!($cmp4)) {
  ___assert_fail((17747|0),(9686|0),10728,(17732|0));
  // unreachable;
 }
 $6 = HEAP32[(33548)>>2]|0;
 $7 = $img;
 $ctx_id = ((($7)) + 4|0);
 HEAP32[$ctx_id>>2] = $6;
 $8 = $desc$addr;
 $call8 = (__ZL23_sg_validate_image_descPK13sg_image_desc($8)|0);
 $9 = $img;
 if ($call8) {
  $10 = $desc$addr;
  $call9 = (__ZL16_sg_create_imageP11_sg_image_tPK13sg_image_desc($9,$10)|0);
  $11 = $img;
  $state11 = ((($11)) + 8|0);
  HEAP32[$state11>>2] = $call9;
 } else {
  $state13 = ((($9)) + 8|0);
  HEAP32[$state13>>2] = 3;
 }
 $12 = $img;
 $state15 = ((($12)) + 8|0);
 $13 = HEAP32[$state15>>2]|0;
 $cmp16 = ($13|0)==(2);
 if ($cmp16) {
  STACKTOP = sp;return;
 }
 $14 = $img;
 $state18 = ((($14)) + 8|0);
 $15 = HEAP32[$state18>>2]|0;
 $cmp19 = ($15|0)==(3);
 if ($cmp19) {
  STACKTOP = sp;return;
 } else {
  ___assert_fail((17796|0),(9686|0),10736,(17732|0));
  // unreachable;
 }
}
function __ZL16_sg_lookup_imagePK11_sg_pools_tj($p,$img_id) {
 $p = $p|0;
 $img_id = $img_id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $call = 0, $cmp = 0, $cmp1 = 0, $img = 0, $img_id$addr = 0, $p$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $p$addr = $p;
 $img_id$addr = $img_id;
 $0 = $img_id$addr;
 $cmp = (0)!=($0|0);
 if ($cmp) {
  $1 = $p$addr;
  $2 = $img_id$addr;
  $call = (__ZL12_sg_image_atPK11_sg_pools_tj($1,$2)|0);
  $img = $call;
  $3 = $img;
  $4 = HEAP32[$3>>2]|0;
  $5 = $img_id$addr;
  $cmp1 = ($4|0)==($5|0);
  if ($cmp1) {
   $6 = $img;
   $retval = $6;
   $7 = $retval;
   STACKTOP = sp;return ($7|0);
  }
 }
 $retval = 0;
 $7 = $retval;
 STACKTOP = sp;return ($7|0);
}
function __ZL23_sg_validate_image_descPK13sg_image_desc($desc) {
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $_end_canary = 0, $arrayidx16 = 0;
 var $arrayidx23 = 0, $arrayidx45 = 0, $arrayidx46 = 0, $arrayidx52 = 0, $arrayidx53 = 0, $arrayidx74 = 0, $arrayidx75 = 0, $arrayidx81 = 0, $arrayidx82 = 0, $call = 0, $call98 = 0, $cmp = 0, $cmp1 = 0, $cmp12 = 0, $cmp13 = 0, $cmp2 = 0, $cmp20 = 0, $cmp26 = 0, $cmp29 = 0, $cmp3 = 0;
 var $cmp31 = 0, $cmp36 = 0, $cmp38 = 0, $cmp39 = 0, $cmp41 = 0, $cmp48 = 0, $cmp5 = 0, $cmp54 = 0, $cmp66 = 0, $cmp7 = 0, $cmp70 = 0, $cmp77 = 0, $cmp84 = 0, $cmp9 = 0, $cond = 0, $content = 0, $content43 = 0, $content50 = 0, $content72 = 0, $content79 = 0;
 var $d3d11_texture = 0, $desc$addr = 0, $ext = 0, $face_index = 0, $face_index64 = 0, $fmt = 0, $frombool = 0, $frombool32 = 0, $frombool49 = 0, $frombool55 = 0, $frombool78 = 0, $frombool85 = 0, $gl_textures = 0, $has_data = 0, $has_size = 0, $height = 0, $inc = 0, $inc61 = 0, $inc91 = 0, $inc94 = 0;
 var $lnot = 0, $mip_index = 0, $mip_index68 = 0, $msaa = 0, $mtl_textures = 0, $no_data = 0, $no_size = 0, $num_faces = 0, $num_mipmaps = 0, $num_mips = 0, $or$cond = 0, $or$cond1 = 0, $pixel_format = 0, $render = 0, $render_target = 0, $sample_count = 0, $sample_count30 = 0, $size = 0, $size83 = 0, $tobool = 0;
 var $tobool11 = 0, $tobool17 = 0, $tobool18 = 0, $tobool22 = 0, $tobool24 = 0, $tobool33 = 0, $tobool34 = 0, $tobool34$not = 0, $tobool56 = 0, $tobool58 = 0, $tobool86 = 0, $tobool88 = 0, $type = 0, $usage = 0, $usage4 = 0, $valid_nonrt_fmt = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $desc$addr = $desc;
 $0 = $desc$addr;
 $tobool = ($0|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((9681|0),(9686|0),9999,(18537|0));
  // unreachable;
 }
 __ZL18_sg_validate_beginv();
 $1 = $desc$addr;
 $2 = HEAP32[$1>>2]|0;
 $cmp = ($2|0)==(0);
 __ZL12_sg_validateb20_sg_validate_error_t($cmp,5);
 $3 = $desc$addr;
 $_end_canary = ((($3)) + 868|0);
 $4 = HEAP32[$_end_canary>>2]|0;
 $cmp1 = ($4|0)==(0);
 __ZL12_sg_validateb20_sg_validate_error_t($cmp1,5);
 $5 = $desc$addr;
 $width = ((($5)) + 12|0);
 $6 = HEAP32[$width>>2]|0;
 $cmp2 = ($6|0)>(0);
 __ZL12_sg_validateb20_sg_validate_error_t($cmp2,6);
 $7 = $desc$addr;
 $height = ((($7)) + 16|0);
 $8 = HEAP32[$height>>2]|0;
 $cmp3 = ($8|0)>(0);
 __ZL12_sg_validateb20_sg_validate_error_t($cmp3,7);
 $9 = $desc$addr;
 $pixel_format = ((($9)) + 32|0);
 $10 = HEAP32[$pixel_format>>2]|0;
 $fmt = $10;
 $11 = $desc$addr;
 $usage4 = ((($11)) + 28|0);
 $12 = HEAP32[$usage4>>2]|0;
 $usage = $12;
 $13 = $desc$addr;
 $gl_textures = ((($13)) + 848|0);
 $14 = HEAP32[$gl_textures>>2]|0;
 $cmp5 = (0)!=($14|0);
 if ($cmp5) {
  $19 = 1;
 } else {
  $15 = $desc$addr;
  $mtl_textures = ((($15)) + 856|0);
  $16 = HEAP32[$mtl_textures>>2]|0;
  $cmp7 = (0|0)!=($16|0);
  if ($cmp7) {
   $19 = 1;
  } else {
   $17 = $desc$addr;
   $d3d11_texture = ((($17)) + 864|0);
   $18 = HEAP32[$d3d11_texture>>2]|0;
   $cmp9 = (0|0)!=($18|0);
   $19 = $cmp9;
  }
 }
 $frombool = $19&1;
 $ext = $frombool;
 $20 = $desc$addr;
 $render_target = ((($20)) + 8|0);
 $21 = HEAP8[$render_target>>0]|0;
 $tobool11 = $21&1;
 if ($tobool11) {
  $22 = $fmt;
  $cmp12 = ($22|0)>=(0);
  $23 = $fmt;
  $cmp13 = ($23|0)<(59);
  $or$cond = $cmp12 & $cmp13;
  if (!($or$cond)) {
   ___assert_fail((18561|0),(9686|0),10009,(18537|0));
   // unreachable;
  }
  $24 = $fmt;
  $arrayidx16 = ((33724) + (($24*6)|0)|0);
  $render = ((($arrayidx16)) + 2|0);
  $25 = HEAP8[$render>>0]|0;
  $tobool17 = $25&1;
  __ZL12_sg_validateb20_sg_validate_error_t($tobool17,8);
  $26 = HEAP8[(34081)>>0]|0;
  $tobool18 = $26&1;
  if (!($tobool18)) {
   $27 = $desc$addr;
   $sample_count = ((($27)) + 36|0);
   $28 = HEAP32[$sample_count>>2]|0;
   $cmp20 = ($28|0)>(1);
   if ($cmp20) {
    $29 = HEAP8[(33695)>>0]|0;
    $tobool22 = $29&1;
    if ($tobool22) {
     $30 = $fmt;
     $arrayidx23 = ((33724) + (($30*6)|0)|0);
     $msaa = ((($arrayidx23)) + 4|0);
     $31 = HEAP8[$msaa>>0]|0;
     $tobool24 = $31&1;
     $32 = $tobool24;
    } else {
     $32 = 0;
    }
    __ZL12_sg_validateb20_sg_validate_error_t($32,11);
   }
  }
  $33 = $usage;
  $cmp26 = ($33|0)==(1);
  __ZL12_sg_validateb20_sg_validate_error_t($cmp26,12);
  $34 = $desc$addr;
  $content = ((($34)) + 76|0);
  $35 = HEAP32[$content>>2]|0;
  $cmp29 = ($35|0)==(0|0);
  __ZL12_sg_validateb20_sg_validate_error_t($cmp29,13);
  $call98 = (__ZL16_sg_validate_endv()|0);
  STACKTOP = sp;return ($call98|0);
 }
 $36 = $desc$addr;
 $sample_count30 = ((($36)) + 36|0);
 $37 = HEAP32[$sample_count30>>2]|0;
 $cmp31 = ($37|0)<=(1);
 __ZL12_sg_validateb20_sg_validate_error_t($cmp31,10);
 $38 = $fmt;
 $call = (__ZL38_sg_is_valid_rendertarget_depth_format15sg_pixel_format($38)|0);
 $lnot = $call ^ 1;
 $frombool32 = $lnot&1;
 $valid_nonrt_fmt = $frombool32;
 $39 = $valid_nonrt_fmt;
 $tobool33 = $39&1;
 __ZL12_sg_validateb20_sg_validate_error_t($tobool33,9);
 $40 = $ext;
 $tobool34 = $40&1;
 $tobool34$not = $tobool34 ^ 1;
 $41 = $usage;
 $cmp36 = ($41|0)==(1);
 $or$cond1 = $tobool34$not & $cmp36;
 if ($or$cond1) {
  $42 = $desc$addr;
  $type = ((($42)) + 4|0);
  $43 = HEAP32[$type>>2]|0;
  $cmp38 = ($43|0)==(2);
  $cond = $cmp38 ? 6 : 1;
  $num_faces = $cond;
  $44 = $desc$addr;
  $num_mipmaps = ((($44)) + 24|0);
  $45 = HEAP32[$num_mipmaps>>2]|0;
  $num_mips = $45;
  $face_index = 0;
  while(1) {
   $46 = $face_index;
   $47 = $num_faces;
   $cmp39 = ($46|0)<($47|0);
   if (!($cmp39)) {
    break;
   }
   $mip_index = 0;
   while(1) {
    $48 = $mip_index;
    $49 = $num_mips;
    $cmp41 = ($48|0)<($49|0);
    if (!($cmp41)) {
     break;
    }
    $50 = $desc$addr;
    $content43 = ((($50)) + 76|0);
    $51 = $face_index;
    $arrayidx45 = (($content43) + ($51<<7)|0);
    $52 = $mip_index;
    $arrayidx46 = (($arrayidx45) + ($52<<3)|0);
    $53 = HEAP32[$arrayidx46>>2]|0;
    $cmp48 = ($53|0)!=(0|0);
    $frombool49 = $cmp48&1;
    $has_data = $frombool49;
    $54 = $desc$addr;
    $content50 = ((($54)) + 76|0);
    $55 = $face_index;
    $arrayidx52 = (($content50) + ($55<<7)|0);
    $56 = $mip_index;
    $arrayidx53 = (($arrayidx52) + ($56<<3)|0);
    $size = ((($arrayidx53)) + 4|0);
    $57 = HEAP32[$size>>2]|0;
    $cmp54 = ($57|0)>(0);
    $frombool55 = $cmp54&1;
    $has_size = $frombool55;
    $58 = $has_data;
    $tobool56 = $58&1;
    $59 = $has_size;
    $tobool58 = $59&1;
    $60 = $tobool56 ? $tobool58 : 0;
    __ZL12_sg_validateb20_sg_validate_error_t($60,14);
    $61 = $mip_index;
    $inc = (($61) + 1)|0;
    $mip_index = $inc;
   }
   $62 = $face_index;
   $inc61 = (($62) + 1)|0;
   $face_index = $inc61;
  }
  $call98 = (__ZL16_sg_validate_endv()|0);
  STACKTOP = sp;return ($call98|0);
 } else {
  $face_index64 = 0;
  while(1) {
   $63 = $face_index64;
   $cmp66 = ($63|0)<(6);
   if (!($cmp66)) {
    break;
   }
   $mip_index68 = 0;
   while(1) {
    $64 = $mip_index68;
    $cmp70 = ($64|0)<(16);
    if (!($cmp70)) {
     break;
    }
    $65 = $desc$addr;
    $content72 = ((($65)) + 76|0);
    $66 = $face_index64;
    $arrayidx74 = (($content72) + ($66<<7)|0);
    $67 = $mip_index68;
    $arrayidx75 = (($arrayidx74) + ($67<<3)|0);
    $68 = HEAP32[$arrayidx75>>2]|0;
    $cmp77 = (0|0)==($68|0);
    $frombool78 = $cmp77&1;
    $no_data = $frombool78;
    $69 = $desc$addr;
    $content79 = ((($69)) + 76|0);
    $70 = $face_index64;
    $arrayidx81 = (($content79) + ($70<<7)|0);
    $71 = $mip_index68;
    $arrayidx82 = (($arrayidx81) + ($71<<3)|0);
    $size83 = ((($arrayidx82)) + 4|0);
    $72 = HEAP32[$size83>>2]|0;
    $cmp84 = (0)==($72|0);
    $frombool85 = $cmp84&1;
    $no_size = $frombool85;
    $73 = $no_data;
    $tobool86 = $73&1;
    $74 = $no_size;
    $tobool88 = $74&1;
    $75 = $tobool86 ? $tobool88 : 0;
    __ZL12_sg_validateb20_sg_validate_error_t($75,15);
    $76 = $mip_index68;
    $inc91 = (($76) + 1)|0;
    $mip_index68 = $inc91;
   }
   $77 = $face_index64;
   $inc94 = (($77) + 1)|0;
   $face_index64 = $inc94;
  }
  $call98 = (__ZL16_sg_validate_endv()|0);
  STACKTOP = sp;return ($call98|0);
 }
 return (0)|0;
}
function __ZL16_sg_create_imageP11_sg_image_tPK13sg_image_desc($img,$desc) {
 $img = $img|0;
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $active_slot = 0, $arrayidx140 = 0, $arrayidx141 = 0, $arrayidx144 = 0, $arrayidx145 = 0, $arrayidx71 = 0, $arrayidx76 = 0, $arrayidx77 = 0, $arrayidx90 = 0, $arrayidx93 = 0, $border_color = 0, $border_color19 = 0, $call = 0, $call119 = 0, $call122 = 0;
 var $call138 = 0, $call164 = 0, $call179 = 0, $call22 = 0, $call43 = 0, $call58 = 0, $call62 = 0, $call64 = 0, $call80 = 0, $call82 = 0, $call95 = 0, $call97 = 0, $cmp = 0, $cmp103 = 0, $cmp106 = 0, $cmp112 = 0, $cmp125 = 0, $cmp128 = 0, $cmp132 = 0, $cmp136 = 0;
 var $cmp147 = 0, $cmp152 = 0, $cmp156 = 0, $cmp158 = 0, $cmp180 = 0, $cmp25 = 0, $cmp32 = 0, $cmp39 = 0, $cmp40 = 0, $cmp46 = 0, $cmp49 = 0, $cmp69 = 0, $cmp87 = 0, $cond = 0, $cond126 = 0, $content = 0, $content142 = 0, $data_index = 0, $data_ptr = 0, $data_size = 0;
 var $depth9 = 0, $desc$addr = 0, $ext_textures = 0, $ext_textures52 = 0, $ext_textures65 = 0, $face_index = 0, $frombool = 0, $frombool41 = 0, $frombool83 = 0, $gl_depth_format = 0, $gl_depth_render_buffer = 0, $gl_depth_render_buffer56 = 0, $gl_format = 0, $gl_img_target = 0, $gl_internal_format = 0, $gl_mag_filter = 0, $gl_min_filter = 0, $gl_target = 0, $gl_target109 = 0, $gl_target114 = 0;
 var $gl_target115 = 0, $gl_target120 = 0, $gl_target134 = 0, $gl_target91 = 0, $gl_target98 = 0, $gl_target99 = 0, $gl_tex = 0, $gl_tex89 = 0, $gl_tex92 = 0, $gl_textures = 0, $gl_textures70 = 0, $gl_textures75 = 0, $gl_type = 0, $height = 0, $height150 = 0, $height60 = 0, $height8 = 0, $img$addr = 0, $inc = 0, $inc168 = 0;
 var $inc169 = 0, $inc172 = 0, $inc175 = 0, $is_compressed = 0, $mag_filter = 0, $mag_filter15 = 0, $mag_filter96 = 0, $max_aniso = 0, $max_anisotropy = 0, $max_anisotropy102 = 0, $max_anisotropy105 = 0, $max_anisotropy20 = 0, $min_filter = 0, $min_filter14 = 0, $min_filter94 = 0, $mip_height = 0, $mip_index = 0, $mip_width = 0, $num_faces = 0, $num_mipmaps = 0;
 var $num_mipmaps10 = 0, $num_mipmaps131 = 0, $num_slots = 0, $num_slots48 = 0, $num_slots68 = 0, $num_slots86 = 0, $or$cond = 0, $pixel_format = 0, $pixel_format12 = 0, $pixel_format163 = 0, $pixel_format21 = 0, $pixel_format42 = 0, $pixel_format57 = 0, $pixel_format63 = 0, $pixel_format79 = 0, $pixel_format81 = 0, $render_target = 0, $render_target6 = 0, $retval = 0, $sample_count = 0;
 var $sample_count13 = 0, $shr = 0, $shr151 = 0, $size = 0, $slot = 0, $slot84 = 0, $spec$store$select = 0, $spec$store$select1 = 0, $tobool = 0, $tobool1 = 0, $tobool100 = 0, $tobool160 = 0, $tobool27 = 0, $tobool34 = 0, $tobool5 = 0, $tobool53 = 0, $tobool66 = 0, $tobool72 = 0, $type = 0, $type111 = 0;
 var $type124 = 0, $type135 = 0, $type155 = 0, $type157 = 0, $type24 = 0, $type31 = 0, $type4 = 0, $type61 = 0, $upd_frame_index = 0, $usage = 0, $usage11 = 0, $usage38 = 0, $usage45 = 0, $width = 0, $width146 = 0, $width59 = 0, $width7 = 0, $wrap_u = 0, $wrap_u118 = 0, $wrap_u16 = 0;
 var $wrap_v = 0, $wrap_v121 = 0, $wrap_v17 = 0, $wrap_w = 0, $wrap_w18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $img$addr = $img;
 $desc$addr = $desc;
 $0 = $img$addr;
 $tobool = ($0|0)!=(0|0);
 $1 = $desc$addr;
 $tobool1 = ($1|0)!=(0|0);
 $or$cond = $tobool & $tobool1;
 if (!($or$cond)) {
  ___assert_fail((17886|0),(9686|0),5111,(17898|0));
  // unreachable;
 }
 $call = (_glGetError()|0);
 $cmp = ($call|0)==(0);
 if (!($cmp)) {
  ___assert_fail((9883|0),(9686|0),5112,(17898|0));
  // unreachable;
 }
 $2 = $desc$addr;
 $type = ((($2)) + 4|0);
 $3 = HEAP32[$type>>2]|0;
 $4 = $img$addr;
 $type4 = ((($4)) + 12|0);
 HEAP32[$type4>>2] = $3;
 $5 = $desc$addr;
 $render_target = ((($5)) + 8|0);
 $6 = HEAP8[$render_target>>0]|0;
 $tobool5 = $6&1;
 $7 = $img$addr;
 $render_target6 = ((($7)) + 16|0);
 $frombool = $tobool5&1;
 HEAP8[$render_target6>>0] = $frombool;
 $8 = $desc$addr;
 $width = ((($8)) + 12|0);
 $9 = HEAP32[$width>>2]|0;
 $10 = $img$addr;
 $width7 = ((($10)) + 20|0);
 HEAP32[$width7>>2] = $9;
 $11 = $desc$addr;
 $height = ((($11)) + 16|0);
 $12 = HEAP32[$height>>2]|0;
 $13 = $img$addr;
 $height8 = ((($13)) + 24|0);
 HEAP32[$height8>>2] = $12;
 $14 = $desc$addr;
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $img$addr;
 $depth9 = ((($17)) + 28|0);
 HEAP32[$depth9>>2] = $16;
 $18 = $desc$addr;
 $num_mipmaps = ((($18)) + 24|0);
 $19 = HEAP32[$num_mipmaps>>2]|0;
 $20 = $img$addr;
 $num_mipmaps10 = ((($20)) + 32|0);
 HEAP32[$num_mipmaps10>>2] = $19;
 $21 = $desc$addr;
 $usage = ((($21)) + 28|0);
 $22 = HEAP32[$usage>>2]|0;
 $23 = $img$addr;
 $usage11 = ((($23)) + 36|0);
 HEAP32[$usage11>>2] = $22;
 $24 = $desc$addr;
 $pixel_format = ((($24)) + 32|0);
 $25 = HEAP32[$pixel_format>>2]|0;
 $26 = $img$addr;
 $pixel_format12 = ((($26)) + 40|0);
 HEAP32[$pixel_format12>>2] = $25;
 $27 = $desc$addr;
 $sample_count = ((($27)) + 36|0);
 $28 = HEAP32[$sample_count>>2]|0;
 $29 = $img$addr;
 $sample_count13 = ((($29)) + 44|0);
 HEAP32[$sample_count13>>2] = $28;
 $30 = $desc$addr;
 $min_filter = ((($30)) + 40|0);
 $31 = HEAP32[$min_filter>>2]|0;
 $32 = $img$addr;
 $min_filter14 = ((($32)) + 48|0);
 HEAP32[$min_filter14>>2] = $31;
 $33 = $desc$addr;
 $mag_filter = ((($33)) + 44|0);
 $34 = HEAP32[$mag_filter>>2]|0;
 $35 = $img$addr;
 $mag_filter15 = ((($35)) + 52|0);
 HEAP32[$mag_filter15>>2] = $34;
 $36 = $desc$addr;
 $wrap_u = ((($36)) + 48|0);
 $37 = HEAP32[$wrap_u>>2]|0;
 $38 = $img$addr;
 $wrap_u16 = ((($38)) + 56|0);
 HEAP32[$wrap_u16>>2] = $37;
 $39 = $desc$addr;
 $wrap_v = ((($39)) + 52|0);
 $40 = HEAP32[$wrap_v>>2]|0;
 $41 = $img$addr;
 $wrap_v17 = ((($41)) + 60|0);
 HEAP32[$wrap_v17>>2] = $40;
 $42 = $desc$addr;
 $wrap_w = ((($42)) + 56|0);
 $43 = HEAP32[$wrap_w>>2]|0;
 $44 = $img$addr;
 $wrap_w18 = ((($44)) + 64|0);
 HEAP32[$wrap_w18>>2] = $43;
 $45 = $desc$addr;
 $border_color = ((($45)) + 60|0);
 $46 = HEAP32[$border_color>>2]|0;
 $47 = $img$addr;
 $border_color19 = ((($47)) + 68|0);
 HEAP32[$border_color19>>2] = $46;
 $48 = $desc$addr;
 $max_anisotropy = ((($48)) + 64|0);
 $49 = HEAP32[$max_anisotropy>>2]|0;
 $50 = $img$addr;
 $max_anisotropy20 = ((($50)) + 72|0);
 HEAP32[$max_anisotropy20>>2] = $49;
 $51 = $img$addr;
 $upd_frame_index = ((($51)) + 88|0);
 HEAP32[$upd_frame_index>>2] = 0;
 $52 = $img$addr;
 $pixel_format21 = ((($52)) + 40|0);
 $53 = HEAP32[$pixel_format21>>2]|0;
 $call22 = (__ZL31_sg_gl_supported_texture_format15sg_pixel_format($53)|0);
 if (!($call22)) {
  (_puts(17915)|0);
  $retval = 3;
  $204 = $retval;
  STACKTOP = sp;return ($204|0);
 }
 $54 = $img$addr;
 $type24 = ((($54)) + 12|0);
 $55 = HEAP32[$type24>>2]|0;
 $cmp25 = ($55|0)==(3);
 if ($cmp25) {
  $56 = HEAP8[(33696)>>0]|0;
  $tobool27 = $56&1;
  if (!($tobool27)) {
   (_puts(17959)|0);
   $retval = 3;
   $204 = $retval;
   STACKTOP = sp;return ($204|0);
  }
 }
 $57 = $img$addr;
 $type31 = ((($57)) + 12|0);
 $58 = HEAP32[$type31>>2]|0;
 $cmp32 = ($58|0)==(4);
 if ($cmp32) {
  $59 = HEAP8[(33697)>>0]|0;
  $tobool34 = $59&1;
  if (!($tobool34)) {
   (_puts(18000)|0);
   $retval = 3;
   $204 = $retval;
   STACKTOP = sp;return ($204|0);
  }
 }
 $60 = $img$addr;
 $usage38 = ((($60)) + 36|0);
 $61 = HEAP32[$usage38>>2]|0;
 $cmp39 = ($61|0)==(1);
 $cond = $cmp39 ? 1 : 2;
 $62 = $img$addr;
 $num_slots = ((($62)) + 92|0);
 HEAP32[$num_slots>>2] = $cond;
 $63 = $img$addr;
 $active_slot = ((($63)) + 96|0);
 HEAP32[$active_slot>>2] = 0;
 $64 = $desc$addr;
 $gl_textures = ((($64)) + 848|0);
 $65 = HEAP32[$gl_textures>>2]|0;
 $cmp40 = (0)!=($65|0);
 $66 = $img$addr;
 $ext_textures = ((($66)) + 108|0);
 $frombool41 = $cmp40&1;
 HEAP8[$ext_textures>>0] = $frombool41;
 $67 = $img$addr;
 $pixel_format42 = ((($67)) + 40|0);
 $68 = HEAP32[$pixel_format42>>2]|0;
 $call43 = (__ZL38_sg_is_valid_rendertarget_depth_format15sg_pixel_format($68)|0);
 $69 = $img$addr;
 L21: do {
  if ($call43) {
   $usage45 = ((($69)) + 36|0);
   $70 = HEAP32[$usage45>>2]|0;
   $cmp46 = ($70|0)==(1);
   if (!($cmp46)) {
    ___assert_fail((18044|0),(9686|0),5160,(17898|0));
    // unreachable;
   }
   $71 = $img$addr;
   $num_slots48 = ((($71)) + 92|0);
   $72 = HEAP32[$num_slots48>>2]|0;
   $cmp49 = ($72|0)==(1);
   if (!($cmp49)) {
    ___assert_fail((18044|0),(9686|0),5160,(17898|0));
    // unreachable;
   }
   $73 = $img$addr;
   $ext_textures52 = ((($73)) + 108|0);
   $74 = HEAP8[$ext_textures52>>0]|0;
   $tobool53 = $74&1;
   if ($tobool53) {
    ___assert_fail((18104|0),(9686|0),5161,(17898|0));
    // unreachable;
   } else {
    $75 = $img$addr;
    $gl_depth_render_buffer = ((($75)) + 80|0);
    _glGenRenderbuffers(1,($gl_depth_render_buffer|0));
    $76 = $img$addr;
    $gl_depth_render_buffer56 = ((($76)) + 80|0);
    $77 = HEAP32[$gl_depth_render_buffer56>>2]|0;
    _glBindRenderbuffer(36161,($77|0));
    $78 = $img$addr;
    $pixel_format57 = ((($78)) + 40|0);
    $79 = HEAP32[$pixel_format57>>2]|0;
    $call58 = (__ZL30_sg_gl_depth_attachment_format15sg_pixel_format($79)|0);
    $gl_depth_format = $call58;
    $80 = $gl_depth_format;
    $81 = $img$addr;
    $width59 = ((($81)) + 20|0);
    $82 = HEAP32[$width59>>2]|0;
    $83 = $img$addr;
    $height60 = ((($83)) + 24|0);
    $84 = HEAP32[$height60>>2]|0;
    _glRenderbufferStorage(36161,($80|0),($82|0),($84|0));
    break;
   }
  } else {
   $type61 = ((($69)) + 12|0);
   $85 = HEAP32[$type61>>2]|0;
   $call62 = (__ZL21_sg_gl_texture_target13sg_image_type($85)|0);
   $86 = $img$addr;
   $gl_target = ((($86)) + 76|0);
   HEAP32[$gl_target>>2] = $call62;
   $87 = $img$addr;
   $pixel_format63 = ((($87)) + 40|0);
   $88 = HEAP32[$pixel_format63>>2]|0;
   $call64 = (__ZL31_sg_gl_teximage_internal_format15sg_pixel_format($88)|0);
   $gl_internal_format = $call64;
   $89 = $img$addr;
   $ext_textures65 = ((($89)) + 108|0);
   $90 = HEAP8[$ext_textures65>>0]|0;
   $tobool66 = $90&1;
   if ($tobool66) {
    $slot = 0;
    while(1) {
     $91 = $slot;
     $92 = $img$addr;
     $num_slots68 = ((($92)) + 92|0);
     $93 = HEAP32[$num_slots68>>2]|0;
     $cmp69 = ($91|0)<($93|0);
     if (!($cmp69)) {
      break L21;
     }
     $94 = $desc$addr;
     $gl_textures70 = ((($94)) + 848|0);
     $95 = $slot;
     $arrayidx71 = (($gl_textures70) + ($95<<2)|0);
     $96 = HEAP32[$arrayidx71>>2]|0;
     $tobool72 = ($96|0)!=(0);
     if (!($tobool72)) {
      break;
     }
     $97 = $desc$addr;
     $gl_textures75 = ((($97)) + 848|0);
     $98 = $slot;
     $arrayidx76 = (($gl_textures75) + ($98<<2)|0);
     $99 = HEAP32[$arrayidx76>>2]|0;
     $100 = $img$addr;
     $gl_tex = ((($100)) + 100|0);
     $101 = $slot;
     $arrayidx77 = (($gl_tex) + ($101<<2)|0);
     HEAP32[$arrayidx77>>2] = $99;
     $102 = $slot;
     $inc = (($102) + 1)|0;
     $slot = $inc;
    }
    ___assert_fail((18123|0),(9686|0),5192,(17898|0));
    // unreachable;
   }
   $103 = $img$addr;
   $pixel_format79 = ((($103)) + 40|0);
   $104 = HEAP32[$pixel_format79>>2]|0;
   $call80 = (__ZL22_sg_gl_teximage_format15sg_pixel_format($104)|0);
   $gl_format = $call80;
   $105 = $img$addr;
   $pixel_format81 = ((($105)) + 40|0);
   $106 = HEAP32[$pixel_format81>>2]|0;
   $call82 = (__ZL30_sg_is_compressed_pixel_format15sg_pixel_format($106)|0);
   $frombool83 = $call82&1;
   $is_compressed = $frombool83;
   $slot84 = 0;
   while(1) {
    $107 = $slot84;
    $108 = $img$addr;
    $num_slots86 = ((($108)) + 92|0);
    $109 = HEAP32[$num_slots86>>2]|0;
    $cmp87 = ($107|0)<($109|0);
    if (!($cmp87)) {
     break L21;
    }
    $110 = $img$addr;
    $gl_tex89 = ((($110)) + 100|0);
    $111 = $slot84;
    $arrayidx90 = (($gl_tex89) + ($111<<2)|0);
    _glGenTextures(1,($arrayidx90|0));
    __ZL28_sg_gl_store_texture_bindingi(0);
    $112 = $img$addr;
    $gl_target91 = ((($112)) + 76|0);
    $113 = HEAP32[$gl_target91>>2]|0;
    $114 = $img$addr;
    $gl_tex92 = ((($114)) + 100|0);
    $115 = $slot84;
    $arrayidx93 = (($gl_tex92) + ($115<<2)|0);
    $116 = HEAP32[$arrayidx93>>2]|0;
    __ZL19_sg_gl_bind_textureijj(0,$113,$116);
    $117 = $img$addr;
    $min_filter94 = ((($117)) + 48|0);
    $118 = HEAP32[$min_filter94>>2]|0;
    $call95 = (__ZL13_sg_gl_filter9sg_filter($118)|0);
    $gl_min_filter = $call95;
    $119 = $img$addr;
    $mag_filter96 = ((($119)) + 52|0);
    $120 = HEAP32[$mag_filter96>>2]|0;
    $call97 = (__ZL13_sg_gl_filter9sg_filter($120)|0);
    $gl_mag_filter = $call97;
    $121 = $img$addr;
    $gl_target98 = ((($121)) + 76|0);
    $122 = HEAP32[$gl_target98>>2]|0;
    $123 = $gl_min_filter;
    _glTexParameteri(($122|0),10241,($123|0));
    $124 = $img$addr;
    $gl_target99 = ((($124)) + 76|0);
    $125 = HEAP32[$gl_target99>>2]|0;
    $126 = $gl_mag_filter;
    _glTexParameteri(($125|0),10240,($126|0));
    $127 = HEAP8[(34700)>>0]|0;
    $tobool100 = $127&1;
    if ($tobool100) {
     $128 = $img$addr;
     $max_anisotropy102 = ((($128)) + 72|0);
     $129 = HEAP32[$max_anisotropy102>>2]|0;
     $cmp103 = ($129>>>0)>(1);
     if ($cmp103) {
      $130 = $img$addr;
      $max_anisotropy105 = ((($130)) + 72|0);
      $131 = HEAP32[$max_anisotropy105>>2]|0;
      $max_aniso = $131;
      $132 = $max_aniso;
      $133 = HEAP32[(34704)>>2]|0;
      $cmp106 = ($132|0)>($133|0);
      if ($cmp106) {
       $134 = HEAP32[(34704)>>2]|0;
       $max_aniso = $134;
      }
      $135 = $img$addr;
      $gl_target109 = ((($135)) + 76|0);
      $136 = HEAP32[$gl_target109>>2]|0;
      $137 = $max_aniso;
      _glTexParameteri(($136|0),34046,($137|0));
     }
    }
    $138 = $img$addr;
    $type111 = ((($138)) + 12|0);
    $139 = HEAP32[$type111>>2]|0;
    $cmp112 = ($139|0)==(2);
    $140 = $img$addr;
    $gl_target114 = ((($140)) + 76|0);
    $141 = HEAP32[$gl_target114>>2]|0;
    if ($cmp112) {
     _glTexParameteri(($141|0),10242,33071);
     $142 = $img$addr;
     $gl_target115 = ((($142)) + 76|0);
     $143 = HEAP32[$gl_target115>>2]|0;
     _glTexParameteri(($143|0),10243,33071);
    } else {
     $144 = $img$addr;
     $wrap_u118 = ((($144)) + 56|0);
     $145 = HEAP32[$wrap_u118>>2]|0;
     $call119 = (__ZL11_sg_gl_wrap7sg_wrap($145)|0);
     _glTexParameteri(($141|0),10242,($call119|0));
     $146 = $img$addr;
     $gl_target120 = ((($146)) + 76|0);
     $147 = HEAP32[$gl_target120>>2]|0;
     $148 = $img$addr;
     $wrap_v121 = ((($148)) + 60|0);
     $149 = HEAP32[$wrap_v121>>2]|0;
     $call122 = (__ZL11_sg_gl_wrap7sg_wrap($149)|0);
     _glTexParameteri(($147|0),10243,($call122|0));
    }
    $150 = $img$addr;
    $type124 = ((($150)) + 12|0);
    $151 = HEAP32[$type124>>2]|0;
    $cmp125 = ($151|0)==(2);
    $cond126 = $cmp125 ? 6 : 1;
    $num_faces = $cond126;
    $data_index = 0;
    $face_index = 0;
    while(1) {
     $152 = $face_index;
     $153 = $num_faces;
     $cmp128 = ($152|0)<($153|0);
     if (!($cmp128)) {
      break;
     }
     $mip_index = 0;
     while(1) {
      $154 = $mip_index;
      $155 = $img$addr;
      $num_mipmaps131 = ((($155)) + 32|0);
      $156 = HEAP32[$num_mipmaps131>>2]|0;
      $cmp132 = ($154|0)<($156|0);
      if (!($cmp132)) {
       break;
      }
      $157 = $img$addr;
      $gl_target134 = ((($157)) + 76|0);
      $158 = HEAP32[$gl_target134>>2]|0;
      $gl_img_target = $158;
      $159 = $img$addr;
      $type135 = ((($159)) + 12|0);
      $160 = HEAP32[$type135>>2]|0;
      $cmp136 = (2)==($160|0);
      if ($cmp136) {
       $161 = $face_index;
       $call138 = (__ZL22_sg_gl_cubeface_targeti($161)|0);
       $gl_img_target = $call138;
      }
      $162 = $desc$addr;
      $content = ((($162)) + 76|0);
      $163 = $face_index;
      $arrayidx140 = (($content) + ($163<<7)|0);
      $164 = $mip_index;
      $arrayidx141 = (($arrayidx140) + ($164<<3)|0);
      $165 = HEAP32[$arrayidx141>>2]|0;
      $data_ptr = $165;
      $166 = $desc$addr;
      $content142 = ((($166)) + 76|0);
      $167 = $face_index;
      $arrayidx144 = (($content142) + ($167<<7)|0);
      $168 = $mip_index;
      $arrayidx145 = (($arrayidx144) + ($168<<3)|0);
      $size = ((($arrayidx145)) + 4|0);
      $169 = HEAP32[$size>>2]|0;
      $data_size = $169;
      $170 = $img$addr;
      $width146 = ((($170)) + 20|0);
      $171 = HEAP32[$width146>>2]|0;
      $172 = $mip_index;
      $shr = $171 >> $172;
      $mip_width = $shr;
      $173 = $mip_width;
      $cmp147 = ($173|0)==(0);
      $spec$store$select = $cmp147 ? 1 : $shr;
      $mip_width = $spec$store$select;
      $174 = $img$addr;
      $height150 = ((($174)) + 24|0);
      $175 = HEAP32[$height150>>2]|0;
      $176 = $mip_index;
      $shr151 = $175 >> $176;
      $mip_height = $shr151;
      $177 = $mip_height;
      $cmp152 = ($177|0)==(0);
      $spec$store$select1 = $cmp152 ? 1 : $shr151;
      $mip_height = $spec$store$select1;
      $178 = $img$addr;
      $type155 = ((($178)) + 12|0);
      $179 = HEAP32[$type155>>2]|0;
      $cmp156 = (1)==($179|0);
      if ($cmp156) {
       label = 44;
      } else {
       $180 = $img$addr;
       $type157 = ((($180)) + 12|0);
       $181 = HEAP32[$type157>>2]|0;
       $cmp158 = (2)==($181|0);
       if ($cmp158) {
        label = 44;
       }
      }
      do {
       if ((label|0) == 44) {
        label = 0;
        $182 = $is_compressed;
        $tobool160 = $182&1;
        if ($tobool160) {
         $183 = $gl_img_target;
         $184 = $mip_index;
         $185 = $gl_internal_format;
         $186 = $mip_width;
         $187 = $mip_height;
         $188 = $data_size;
         $189 = $data_ptr;
         _glCompressedTexImage2D(($183|0),($184|0),($185|0),($186|0),($187|0),0,($188|0),($189|0));
         break;
        } else {
         $190 = $img$addr;
         $pixel_format163 = ((($190)) + 40|0);
         $191 = HEAP32[$pixel_format163>>2]|0;
         $call164 = (__ZL20_sg_gl_teximage_type15sg_pixel_format($191)|0);
         $gl_type = $call164;
         $192 = $gl_img_target;
         $193 = $mip_index;
         $194 = $gl_internal_format;
         $195 = $mip_width;
         $196 = $mip_height;
         $197 = $gl_format;
         $198 = $gl_type;
         $199 = $data_ptr;
         _glTexImage2D(($192|0),($193|0),($194|0),($195|0),($196|0),0,($197|0),($198|0),($199|0));
         break;
        }
       }
      } while(0);
      $200 = $mip_index;
      $inc168 = (($200) + 1)|0;
      $mip_index = $inc168;
      $201 = $data_index;
      $inc169 = (($201) + 1)|0;
      $data_index = $inc169;
     }
     $202 = $face_index;
     $inc172 = (($202) + 1)|0;
     $face_index = $inc172;
    }
    __ZL30_sg_gl_restore_texture_bindingi(0);
    $203 = $slot84;
    $inc175 = (($203) + 1)|0;
    $slot84 = $inc175;
   }
  }
 } while(0);
 $call179 = (_glGetError()|0);
 $cmp180 = ($call179|0)==(0);
 if (!($cmp180)) {
  ___assert_fail((9883|0),(9686|0),5307,(17898|0));
  // unreachable;
 }
 $retval = 2;
 $204 = $retval;
 STACKTOP = sp;return ($204|0);
}
function __ZL31_sg_gl_supported_texture_format15sg_pixel_format($fmt) {
 $fmt = $fmt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arrayidx = 0, $cmp = 0, $cmp1 = 0, $fmt$addr = 0, $fmt_index = 0, $or$cond = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $fmt$addr = $fmt;
 $0 = $fmt$addr;
 $fmt_index = $0;
 $1 = $fmt_index;
 $cmp = ($1|0)>(1);
 $2 = $fmt_index;
 $cmp1 = ($2|0)<(59);
 $or$cond = $cmp & $cmp1;
 if ($or$cond) {
  $3 = $fmt_index;
  $arrayidx = ((33724) + (($3*6)|0)|0);
  $4 = HEAP8[$arrayidx>>0]|0;
  $tobool = $4&1;
  STACKTOP = sp;return ($tobool|0);
 } else {
  ___assert_fail((11562|0),(9686|0),5106,(18505|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZL38_sg_is_valid_rendertarget_depth_format15sg_pixel_format($fmt) {
 $fmt = $fmt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arrayidx = 0, $arrayidx2 = 0, $cmp = 0, $cmp1 = 0, $depth = 0, $fmt$addr = 0, $fmt_index = 0, $or$cond = 0, $render = 0, $tobool = 0, $tobool3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $fmt$addr = $fmt;
 $0 = $fmt$addr;
 $fmt_index = $0;
 $1 = $fmt_index;
 $cmp = ($1|0)>=(0);
 $2 = $fmt_index;
 $cmp1 = ($2|0)<(59);
 $or$cond = $cmp & $cmp1;
 if (!($or$cond)) {
  ___assert_fail((18412|0),(9686|0),3271,(18466|0));
  // unreachable;
 }
 $3 = $fmt_index;
 $arrayidx = ((33724) + (($3*6)|0)|0);
 $render = ((($arrayidx)) + 2|0);
 $4 = HEAP8[$render>>0]|0;
 $tobool = $4&1;
 if (!($tobool)) {
  $7 = 0;
  STACKTOP = sp;return ($7|0);
 }
 $5 = $fmt_index;
 $arrayidx2 = ((33724) + (($5*6)|0)|0);
 $depth = ((($arrayidx2)) + 5|0);
 $6 = HEAP8[$depth>>0]|0;
 $tobool3 = $6&1;
 $7 = $tobool3;
 STACKTOP = sp;return ($7|0);
}
function __ZL30_sg_gl_depth_attachment_format15sg_pixel_format($fmt) {
 $fmt = $fmt|0;
 var $0 = 0, $1 = 0, $fmt$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $fmt$addr = $fmt;
 $0 = $fmt$addr;
 switch ($0|0) {
 case 41:  {
  $retval = 33189;
  break;
 }
 case 42:  {
  $retval = 35056;
  break;
 }
 default: {
  ___assert_fail((24519|0),(9686|0),4268,(18381|0));
  // unreachable;
 }
 }
 $1 = $retval;
 STACKTOP = sp;return ($1|0);
}
function __ZL21_sg_gl_texture_target13sg_image_type($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $retval = 0, $t$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $t$addr = $t;
 $0 = $t$addr;
 switch ($0|0) {
 case 1:  {
  $retval = 3553;
  break;
 }
 case 2:  {
  $retval = 34067;
  break;
 }
 default: {
  ___assert_fail((24519|0),(9686|0),3823,(18359|0));
  // unreachable;
 }
 }
 $1 = $retval;
 STACKTOP = sp;return ($1|0);
}
function __ZL31_sg_gl_teximage_internal_format15sg_pixel_format($fmt) {
 $fmt = $fmt|0;
 var $0 = 0, $call = 0, $fmt$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $fmt$addr = $fmt;
 $0 = $fmt$addr;
 $call = (__ZL22_sg_gl_teximage_format15sg_pixel_format($0)|0);
 STACKTOP = sp;return ($call|0);
}
function __ZL22_sg_gl_teximage_format15sg_pixel_format($fmt) {
 $fmt = $fmt|0;
 var $0 = 0, $1 = 0, $fmt$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $fmt$addr = $fmt;
 $0 = $fmt$addr;
 do {
  switch ($0|0) {
  case 17: case 10: case 7: case 6: case 3: case 2:  {
   $retval = 6409;
   break;
  }
  case 28: case 40: case 37: case 34: case 33: case 24: case 23:  {
   $retval = 6408;
   break;
  }
  case 29:  {
   $retval = 6407;
   break;
  }
  case 41:  {
   $retval = 6402;
   break;
  }
  case 42:  {
   $retval = 34041;
   break;
  }
  case 43:  {
   $retval = 33777;
   break;
  }
  case 44:  {
   $retval = 33778;
   break;
  }
  case 45:  {
   $retval = 33779;
   break;
  }
  case 46:  {
   $retval = 36283;
   break;
  }
  case 47:  {
   $retval = 36284;
   break;
  }
  case 48:  {
   $retval = 36285;
   break;
  }
  case 49:  {
   $retval = 36286;
   break;
  }
  case 50:  {
   $retval = 36494;
   break;
  }
  case 51:  {
   $retval = 36495;
   break;
  }
  case 52:  {
   $retval = 36492;
   break;
  }
  case 53:  {
   $retval = 35841;
   break;
  }
  case 54:  {
   $retval = 35840;
   break;
  }
  case 55:  {
   $retval = 35843;
   break;
  }
  case 56:  {
   $retval = 35842;
   break;
  }
  case 57:  {
   $retval = 37492;
   break;
  }
  case 58:  {
   $retval = 37496;
   break;
  }
  default: {
   ___assert_fail((24519|0),(9686|0),4171,(18336|0));
   // unreachable;
  }
  }
 } while(0);
 $1 = $retval;
 STACKTOP = sp;return ($1|0);
}
function __ZL30_sg_is_compressed_pixel_format15sg_pixel_format($fmt) {
 $fmt = $fmt|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$off = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $fmt$addr = 0, $retval = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $retval = sp + 4|0;
 $fmt$addr = $fmt;
 $0 = $fmt$addr;
 $$off = (($0) + -43)|0;
 $switch = ($$off>>>0)<(16);
 if ($switch) {
  $$expand_i1_val = 1;
  HEAP8[$retval>>0] = $$expand_i1_val;
 } else {
  $$expand_i1_val2 = 0;
  HEAP8[$retval>>0] = $$expand_i1_val2;
 }
 $$pre_trunc = HEAP8[$retval>>0]|0;
 $1 = $$pre_trunc&1;
 STACKTOP = sp;return ($1|0);
}
function __ZL28_sg_gl_store_texture_bindingi($slot_index) {
 $slot_index = $slot_index|0;
 var $0 = 0, $1 = 0, $arrayidx = 0, $cmp = 0, $slot_index$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $slot_index$addr = $slot_index;
 $0 = $slot_index$addr;
 $cmp = ($0|0)<(12);
 if ($cmp) {
  $1 = $slot_index$addr;
  $arrayidx = ((34576) + ($1<<3)|0);
  ;HEAP32[(34672)>>2]=HEAP32[$arrayidx>>2]|0;HEAP32[(34672)+4>>2]=HEAP32[$arrayidx+4>>2]|0;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((18147|0),(9686|0),4909,(18307|0));
  // unreachable;
 }
}
function __ZL19_sg_gl_bind_textureijj($slot_index,$target,$texture) {
 $slot_index = $slot_index|0;
 $target = $target|0;
 $texture = $texture|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $arrayidx = 0, $cmp = 0, $cmp1 = 0, $cmp10 = 0, $cmp14 = 0, $cmp3 = 0, $cmp5 = 0, $cmp8 = 0, $slot = 0, $slot_index$addr = 0, $target$addr = 0, $texture$addr = 0, $texture18 = 0, $texture4 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $slot_index$addr = $slot_index;
 $target$addr = $target;
 $texture$addr = $texture;
 $0 = $slot_index$addr;
 $cmp = ($0|0)<(12);
 if (!($cmp)) {
  ___assert_fail((18147|0),(9686|0),4888,(18287|0));
  // unreachable;
 }
 $1 = $slot_index$addr;
 $2 = HEAP32[(34708)>>2]|0;
 $cmp1 = ($1|0)>=($2|0);
 if ($cmp1) {
  STACKTOP = sp;return;
 }
 $3 = $slot_index$addr;
 $arrayidx = ((34576) + ($3<<3)|0);
 $slot = $arrayidx;
 $4 = $slot;
 $5 = HEAP32[$4>>2]|0;
 $6 = $target$addr;
 $cmp3 = ($5|0)!=($6|0);
 if (!($cmp3)) {
  $7 = $slot;
  $texture4 = ((($7)) + 4|0);
  $8 = HEAP32[$texture4>>2]|0;
  $9 = $texture$addr;
  $cmp5 = ($8|0)!=($9|0);
  if (!($cmp5)) {
   STACKTOP = sp;return;
  }
 }
 $10 = $slot_index$addr;
 $add = (33984 + ($10))|0;
 _glActiveTexture(($add|0));
 $11 = $target$addr;
 $12 = $slot;
 $13 = HEAP32[$12>>2]|0;
 $cmp8 = ($11|0)!=($13|0);
 if ($cmp8) {
  $14 = $slot;
  $15 = HEAP32[$14>>2]|0;
  $cmp10 = ($15|0)!=(0);
  if ($cmp10) {
   $16 = $slot;
   $17 = HEAP32[$16>>2]|0;
   _glBindTexture(($17|0),0);
  }
 }
 $18 = $target$addr;
 $cmp14 = ($18|0)!=(0);
 if ($cmp14) {
  $19 = $target$addr;
  $20 = $texture$addr;
  _glBindTexture(($19|0),($20|0));
 }
 $21 = $target$addr;
 $22 = $slot;
 HEAP32[$22>>2] = $21;
 $23 = $texture$addr;
 $24 = $slot;
 $texture18 = ((($24)) + 4|0);
 HEAP32[$texture18>>2] = $23;
 STACKTOP = sp;return;
}
function __ZL13_sg_gl_filter9sg_filter($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $f$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $f$addr = $f;
 $0 = $f$addr;
 switch ($0|0) {
 case 1:  {
  $retval = 9728;
  break;
 }
 case 2:  {
  $retval = 9729;
  break;
 }
 case 3:  {
  $retval = 9984;
  break;
 }
 case 4:  {
  $retval = 9986;
  break;
 }
 case 5:  {
  $retval = 9985;
  break;
 }
 case 6:  {
  $retval = 9987;
  break;
 }
 default: {
  ___assert_fail((24519|0),(9686|0),3994,(18273|0));
  // unreachable;
 }
 }
 $1 = $retval;
 STACKTOP = sp;return ($1|0);
}
function __ZL11_sg_gl_wrap7sg_wrap($w) {
 $w = $w|0;
 var $0 = 0, $1 = 0, $retval = 0, $w$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $w$addr = $w;
 $0 = $w$addr;
 switch ($0|0) {
 case 2:  {
  $retval = 33071;
  break;
 }
 case 3:  {
  $retval = 33071;
  break;
 }
 case 1:  {
  $retval = 10497;
  break;
 }
 case 4:  {
  $retval = 33648;
  break;
 }
 default: {
  ___assert_fail((24519|0),(9686|0),4008,(18261|0));
  // unreachable;
 }
 }
 $1 = $retval;
 STACKTOP = sp;return ($1|0);
}
function __ZL22_sg_gl_cubeface_targeti($face_index) {
 $face_index = $face_index|0;
 var $0 = 0, $1 = 0, $face_index$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $face_index$addr = $face_index;
 $0 = $face_index$addr;
 switch ($0|0) {
 case 0:  {
  $retval = 34069;
  break;
 }
 case 1:  {
  $retval = 34070;
  break;
 }
 case 2:  {
  $retval = 34071;
  break;
 }
 case 3:  {
  $retval = 34072;
  break;
 }
 case 4:  {
  $retval = 34073;
  break;
 }
 case 5:  {
  $retval = 34074;
  break;
 }
 default: {
  ___assert_fail((24519|0),(9686|0),4260,(18238|0));
  // unreachable;
 }
 }
 $1 = $retval;
 STACKTOP = sp;return ($1|0);
}
function __ZL20_sg_gl_teximage_type15sg_pixel_format($fmt) {
 $fmt = $fmt|0;
 var $0 = 0, $1 = 0, $fmt$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $fmt$addr = $fmt;
 $0 = $fmt$addr;
 do {
  switch ($0|0) {
  case 27: case 25: case 23: case 13: case 11: case 4: case 2:  {
   $retval = 5121;
   break;
  }
  case 26: case 24: case 14: case 12: case 5: case 3:  {
   $retval = 5120;
   break;
  }
  case 35: case 33: case 20: case 18: case 8: case 6:  {
   $retval = 5123;
   break;
  }
  case 36: case 34: case 21: case 19: case 9: case 7:  {
   $retval = 5122;
   break;
  }
  case 37: case 22: case 10:  {
   $retval = 5131;
   break;
  }
  case 38: case 30: case 15:  {
   $retval = 5125;
   break;
  }
  case 39: case 31: case 16:  {
   $retval = 5124;
   break;
  }
  case 40: case 32: case 17:  {
   $retval = 5126;
   break;
  }
  case 41:  {
   $retval = 5123;
   break;
  }
  case 42:  {
   $retval = 34042;
   break;
  }
  default: {
   ___assert_fail((24519|0),(9686|0),4070,(18217|0));
   // unreachable;
  }
  }
 } while(0);
 $1 = $retval;
 STACKTOP = sp;return ($1|0);
}
function __ZL30_sg_gl_restore_texture_bindingi($slot_index) {
 $slot_index = $slot_index|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $cmp = 0, $slot = 0, $slot_index$addr = 0, $texture = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $slot_index$addr = $slot_index;
 $0 = $slot_index$addr;
 $cmp = ($0|0)<(12);
 if ($cmp) {
  $slot = (34672);
  $1 = $slot_index$addr;
  $2 = $slot;
  $3 = HEAP32[$2>>2]|0;
  $4 = $slot;
  $texture = ((($4)) + 4|0);
  $5 = HEAP32[$texture>>2]|0;
  __ZL19_sg_gl_bind_textureijj($1,$3,$5);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((18147|0),(9686|0),4914,(18186|0));
  // unreachable;
 }
}
function __ZL12_sg_image_atPK11_sg_pools_tj($p,$img_id) {
 $p = $p|0;
 $img_id = $img_id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp3 = 0, $image_pool = 0, $images = 0, $img_id$addr = 0, $or$cond = 0, $p$addr = 0;
 var $slot_index = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $p$addr = $p;
 $img_id$addr = $img_id;
 $0 = $p$addr;
 $tobool = ($0|0)!=(0|0);
 $1 = $img_id$addr;
 $cmp = (0)!=($1|0);
 $or$cond = $tobool & $cmp;
 if (!($or$cond)) {
  ___assert_fail((18613|0),(9686|0),9669,(18644|0));
  // unreachable;
 }
 $2 = $img_id$addr;
 $call = (__ZL14_sg_slot_indexj($2)|0);
 $slot_index = $call;
 $3 = $slot_index;
 $cmp1 = ($3|0)>(0);
 if (!($cmp1)) {
  ___assert_fail((18657|0),(9686|0),9671,(18644|0));
  // unreachable;
 }
 $4 = $slot_index;
 $5 = $p$addr;
 $image_pool = ((($5)) + 16|0);
 $6 = HEAP32[$image_pool>>2]|0;
 $cmp3 = ($4|0)<($6|0);
 if ($cmp3) {
  $7 = $p$addr;
  $images = ((($7)) + 100|0);
  $8 = HEAP32[$images>>2]|0;
  $9 = $slot_index;
  $arrayidx = (($8) + (($9*112)|0)|0);
  STACKTOP = sp;return ($arrayidx|0);
 } else {
  ___assert_fail((18657|0),(9686|0),9671,(18644|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZL36_sg_default_rendertarget_colorformatv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 23;
}
function __ZL24_sg_shader_desc_defaultsPK14sg_shader_desc($agg$result,$desc) {
 $agg$result = $agg$result|0;
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $array_count = 0, $array_count38 = 0, $array_count41 = 0, $arrayidx = 0, $arrayidx31 = 0, $cmp = 0, $cmp16 = 0, $cmp17 = 0, $cmp25 = 0, $cmp27 = 0, $cmp29 = 0, $cmp32 = 0, $cmp35 = 0, $cmp7 = 0, $cond = 0;
 var $cond13 = 0, $cond23 = 0, $cond40 = 0, $desc$addr = 0, $entry1 = 0, $entry11 = 0, $entry15 = 0, $entry3 = 0, $entry5 = 0, $entry6 = 0, $fs = 0, $fs10 = 0, $fs14 = 0, $fs21 = 0, $inc = 0, $inc43 = 0, $inc46 = 0, $stage_desc = 0, $stage_index = 0, $type = 0;
 var $u_desc = 0, $u_index = 0, $ub_desc = 0, $ub_index = 0, $uniform_blocks = 0, $uniforms = 0, $vs = 0, $vs19 = 0, $vs2 = 0, $vs4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $desc$addr = $desc;
 $0 = $desc$addr;
 _memcpy(($agg$result|0),($0|0),1996)|0;
 $vs = ((($agg$result)) + 196|0);
 $entry1 = ((($vs)) + 12|0);
 $1 = HEAP32[$entry1>>2]|0;
 $cmp = ($1|0)==(0|0);
 if ($cmp) {
  $cond = 19290;
 } else {
  $vs2 = ((($agg$result)) + 196|0);
  $entry3 = ((($vs2)) + 12|0);
  $2 = HEAP32[$entry3>>2]|0;
  $cond = $2;
 }
 $vs4 = ((($agg$result)) + 196|0);
 $entry5 = ((($vs4)) + 12|0);
 HEAP32[$entry5>>2] = $cond;
 $fs = ((($agg$result)) + 1092|0);
 $entry6 = ((($fs)) + 12|0);
 $3 = HEAP32[$entry6>>2]|0;
 $cmp7 = ($3|0)==(0|0);
 if ($cmp7) {
  $cond13 = 19290;
 } else {
  $fs10 = ((($agg$result)) + 1092|0);
  $entry11 = ((($fs10)) + 12|0);
  $4 = HEAP32[$entry11>>2]|0;
  $cond13 = $4;
 }
 $fs14 = ((($agg$result)) + 1092|0);
 $entry15 = ((($fs14)) + 12|0);
 HEAP32[$entry15>>2] = $cond13;
 $stage_index = 0;
 while(1) {
  $5 = $stage_index;
  $cmp16 = ($5|0)<(2);
  if (!($cmp16)) {
   break;
  }
  $6 = $stage_index;
  $cmp17 = ($6|0)==(0);
  $vs19 = ((($agg$result)) + 196|0);
  $fs21 = ((($agg$result)) + 1092|0);
  $cond23 = $cmp17 ? $vs19 : $fs21;
  $stage_desc = $cond23;
  $ub_index = 0;
  while(1) {
   $7 = $ub_index;
   $cmp25 = ($7|0)<(4);
   if (!($cmp25)) {
    break;
   }
   $8 = $stage_desc;
   $uniform_blocks = ((($8)) + 16|0);
   $9 = $ub_index;
   $arrayidx = (($uniform_blocks) + (($9*196)|0)|0);
   $ub_desc = $arrayidx;
   $10 = $ub_desc;
   $11 = HEAP32[$10>>2]|0;
   $cmp27 = (0)==($11|0);
   if ($cmp27) {
    break;
   }
   $u_index = 0;
   while(1) {
    $12 = $u_index;
    $cmp29 = ($12|0)<(16);
    if (!($cmp29)) {
     break;
    }
    $13 = $ub_desc;
    $uniforms = ((($13)) + 4|0);
    $14 = $u_index;
    $arrayidx31 = (($uniforms) + (($14*12)|0)|0);
    $u_desc = $arrayidx31;
    $15 = $u_desc;
    $type = ((($15)) + 4|0);
    $16 = HEAP32[$type>>2]|0;
    $cmp32 = ($16|0)==(0);
    if ($cmp32) {
     break;
    }
    $17 = $u_desc;
    $array_count = ((($17)) + 8|0);
    $18 = HEAP32[$array_count>>2]|0;
    $cmp35 = ($18|0)==(0);
    if ($cmp35) {
     $cond40 = 1;
    } else {
     $19 = $u_desc;
     $array_count38 = ((($19)) + 8|0);
     $20 = HEAP32[$array_count38>>2]|0;
     $cond40 = $20;
    }
    $21 = $u_desc;
    $array_count41 = ((($21)) + 8|0);
    HEAP32[$array_count41>>2] = $cond40;
    $22 = $u_index;
    $inc = (($22) + 1)|0;
    $u_index = $inc;
   }
   $23 = $ub_index;
   $inc43 = (($23) + 1)|0;
   $ub_index = $inc43;
  }
  $24 = $stage_index;
  $inc46 = (($24) + 1)|0;
  $stage_index = $inc46;
 }
 STACKTOP = sp;return;
}
function __ZL15_sg_init_shader9sg_shaderPK14sg_shader_desc($shd_id,$desc) {
 $shd_id = $shd_id|0;
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call8 = 0, $call9 = 0, $cmp = 0;
 var $cmp16 = 0, $cmp19 = 0, $cmp4 = 0, $ctx_id = 0, $desc$addr = 0, $or$cond = 0, $shd = 0, $state = 0, $state11 = 0, $state13 = 0, $state15 = 0, $state18 = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $desc$addr = $desc;
 $0 = HEAP32[$shd_id>>2]|0;
 $cmp = ($0|0)!=(0);
 $1 = $desc$addr;
 $tobool = ($1|0)!=(0|0);
 $or$cond = $cmp & $tobool;
 if (!($or$cond)) {
  ___assert_fail((18713|0),(9686|0),10740,(18748|0));
  // unreachable;
 }
 $2 = HEAP32[$shd_id>>2]|0;
 $call = (__ZL17_sg_lookup_shaderPK11_sg_pools_tj((33568),$2)|0);
 $shd = $call;
 $3 = $shd;
 $tobool2 = ($3|0)!=(0|0);
 if (!($tobool2)) {
  ___assert_fail((18764|0),(9686|0),10742,(18748|0));
  // unreachable;
 }
 $4 = $shd;
 $state = ((($4)) + 8|0);
 $5 = HEAP32[$state>>2]|0;
 $cmp4 = ($5|0)==(1);
 if (!($cmp4)) {
  ___assert_fail((18764|0),(9686|0),10742,(18748|0));
  // unreachable;
 }
 $6 = HEAP32[(33548)>>2]|0;
 $7 = $shd;
 $ctx_id = ((($7)) + 4|0);
 HEAP32[$ctx_id>>2] = $6;
 $8 = $desc$addr;
 $call8 = (__ZL24_sg_validate_shader_descPK14sg_shader_desc($8)|0);
 $9 = $shd;
 if ($call8) {
  $10 = $desc$addr;
  $call9 = (__ZL17_sg_create_shaderP12_sg_shader_tPK14sg_shader_desc($9,$10)|0);
  $11 = $shd;
  $state11 = ((($11)) + 8|0);
  HEAP32[$state11>>2] = $call9;
 } else {
  $state13 = ((($9)) + 8|0);
  HEAP32[$state13>>2] = 3;
 }
 $12 = $shd;
 $state15 = ((($12)) + 8|0);
 $13 = HEAP32[$state15>>2]|0;
 $cmp16 = ($13|0)==(2);
 if ($cmp16) {
  STACKTOP = sp;return;
 }
 $14 = $shd;
 $state18 = ((($14)) + 8|0);
 $15 = HEAP32[$state18>>2]|0;
 $cmp19 = ($15|0)==(3);
 if ($cmp19) {
  STACKTOP = sp;return;
 } else {
  ___assert_fail((18813|0),(9686|0),10750,(18748|0));
  // unreachable;
 }
}
function __ZL17_sg_lookup_shaderPK11_sg_pools_tj($p,$shd_id) {
 $p = $p|0;
 $shd_id = $shd_id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $call = 0, $cmp = 0, $cmp1 = 0, $p$addr = 0, $retval = 0, $shd = 0, $shd_id$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $p$addr = $p;
 $shd_id$addr = $shd_id;
 $0 = $p$addr;
 $tobool = ($0|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((10758|0),(9686|0),9725,(19170|0));
  // unreachable;
 }
 $1 = $shd_id$addr;
 $cmp = (0)!=($1|0);
 if ($cmp) {
  $2 = $p$addr;
  $3 = $shd_id$addr;
  $call = (__ZL13_sg_shader_atPK11_sg_pools_tj($2,$3)|0);
  $shd = $call;
  $4 = $shd;
  $5 = HEAP32[$4>>2]|0;
  $6 = $shd_id$addr;
  $cmp1 = ($5|0)==($6|0);
  if ($cmp1) {
   $7 = $shd;
   $retval = $7;
   $8 = $retval;
   STACKTOP = sp;return ($8|0);
  }
 }
 $retval = 0;
 $8 = $retval;
 STACKTOP = sp;return ($8|0);
}
function __ZL24_sg_validate_shader_descPK14sg_shader_desc($desc) {
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $_end_canary = 0, $add = 0, $array_count = 0, $array_count61 = 0, $arrayidx12 = 0, $arrayidx16 = 0, $arrayidx20 = 0, $arrayidx48 = 0;
 var $arrayidx55 = 0, $arrayidx8 = 0, $arrayidx80 = 0, $attrs = 0, $attrs11 = 0, $attrs15 = 0, $attrs19 = 0, $attrs7 = 0, $byte_code = 0, $byte_code32 = 0, $byte_code_size = 0, $byte_code_size36 = 0, $call = 0, $call22 = 0, $call63 = 0, $call95 = 0, $cmp = 0, $cmp1 = 0, $cmp14 = 0, $cmp2 = 0;
 var $cmp23 = 0, $cmp26 = 0, $cmp29 = 0, $cmp3 = 0, $cmp33 = 0, $cmp37 = 0, $cmp40 = 0, $cmp42 = 0, $cmp46 = 0, $cmp49 = 0, $cmp5 = 0, $cmp53 = 0, $cmp56 = 0, $cmp6 = 0, $cmp70 = 0, $cmp71 = 0, $cmp78 = 0, $cmp82 = 0, $cond = 0, $desc$addr = 0;
 var $fs = 0, $fs31 = 0, $fs35 = 0, $fs44 = 0, $i = 0, $images = 0, $images_continuous = 0, $img_desc = 0, $img_index = 0, $inc = 0, $inc64 = 0, $inc67 = 0, $inc75 = 0, $inc90 = 0, $inc93 = 0, $num_uniforms = 0, $sem_name = 0, $sem_name21 = 0, $stage_desc = 0, $stage_index = 0;
 var $tobool = 0, $tobool10 = 0, $tobool17 = 0, $tobool51 = 0, $tobool58 = 0, $tobool60 = 0, $tobool84 = 0, $tobool86 = 0, $type = 0, $type62 = 0, $type81 = 0, $u_desc = 0, $u_index = 0, $ub_desc = 0, $ub_index = 0, $uniform_blocks = 0, $uniform_blocks_continuous = 0, $uniform_offset = 0, $uniforms = 0, $uniforms_continuous = 0;
 var $vs = 0, $vs25 = 0, $vs28 = 0, $vs43 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $desc$addr = $desc;
 $0 = $desc$addr;
 $tobool = ($0|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((9681|0),(9686|0),10059,(19145|0));
  // unreachable;
 }
 __ZL18_sg_validate_beginv();
 $1 = $desc$addr;
 $2 = HEAP32[$1>>2]|0;
 $cmp = ($2|0)==(0);
 __ZL12_sg_validateb20_sg_validate_error_t($cmp,16);
 $3 = $desc$addr;
 $_end_canary = ((($3)) + 1992|0);
 $4 = HEAP32[$_end_canary>>2]|0;
 $cmp1 = ($4|0)==(0);
 __ZL12_sg_validateb20_sg_validate_error_t($cmp1,16);
 $5 = $desc$addr;
 $attrs = ((($5)) + 4|0);
 $6 = HEAP32[$attrs>>2]|0;
 $cmp2 = (0|0)!=($6|0);
 __ZL12_sg_validateb20_sg_validate_error_t($cmp2,28);
 $7 = $desc$addr;
 $vs = ((($7)) + 196|0);
 $8 = HEAP32[$vs>>2]|0;
 $cmp3 = (0|0)!=($8|0);
 __ZL12_sg_validateb20_sg_validate_error_t($cmp3,17);
 $9 = $desc$addr;
 $fs = ((($9)) + 1092|0);
 $10 = HEAP32[$fs>>2]|0;
 $cmp5 = (0|0)!=($10|0);
 __ZL12_sg_validateb20_sg_validate_error_t($cmp5,17);
 $i = 0;
 while(1) {
  $11 = $i;
  $cmp6 = ($11|0)<(16);
  $12 = $desc$addr;
  if (!($cmp6)) {
   break;
  }
  $attrs7 = ((($12)) + 4|0);
  $13 = $i;
  $arrayidx8 = (($attrs7) + (($13*12)|0)|0);
  $14 = HEAP32[$arrayidx8>>2]|0;
  $tobool10 = ($14|0)!=(0|0);
  if ($tobool10) {
   $15 = $desc$addr;
   $attrs11 = ((($15)) + 4|0);
   $16 = $i;
   $arrayidx12 = (($attrs11) + (($16*12)|0)|0);
   $17 = HEAP32[$arrayidx12>>2]|0;
   $call = (_strlen($17)|0);
   $cmp14 = ($call>>>0)<(16);
   __ZL12_sg_validateb20_sg_validate_error_t($cmp14,30);
  }
  $18 = $desc$addr;
  $attrs15 = ((($18)) + 4|0);
  $19 = $i;
  $arrayidx16 = (($attrs15) + (($19*12)|0)|0);
  $sem_name = ((($arrayidx16)) + 4|0);
  $20 = HEAP32[$sem_name>>2]|0;
  $tobool17 = ($20|0)!=(0|0);
  if ($tobool17) {
   $21 = $desc$addr;
   $attrs19 = ((($21)) + 4|0);
   $22 = $i;
   $arrayidx20 = (($attrs19) + (($22*12)|0)|0);
   $sem_name21 = ((($arrayidx20)) + 4|0);
   $23 = HEAP32[$sem_name21>>2]|0;
   $call22 = (_strlen($23)|0);
   $cmp23 = ($call22>>>0)<(16);
   __ZL12_sg_validateb20_sg_validate_error_t($cmp23,30);
  }
  $24 = $i;
  $inc = (($24) + 1)|0;
  $i = $inc;
 }
 $vs25 = ((($12)) + 196|0);
 $byte_code = ((($vs25)) + 4|0);
 $25 = HEAP32[$byte_code>>2]|0;
 $cmp26 = (0|0)!=($25|0);
 if ($cmp26) {
  $26 = $desc$addr;
  $vs28 = ((($26)) + 196|0);
  $byte_code_size = ((($vs28)) + 8|0);
  $27 = HEAP32[$byte_code_size>>2]|0;
  $cmp29 = ($27|0)>(0);
  __ZL12_sg_validateb20_sg_validate_error_t($cmp29,20);
 }
 $28 = $desc$addr;
 $fs31 = ((($28)) + 1092|0);
 $byte_code32 = ((($fs31)) + 4|0);
 $29 = HEAP32[$byte_code32>>2]|0;
 $cmp33 = (0|0)!=($29|0);
 if ($cmp33) {
  $30 = $desc$addr;
  $fs35 = ((($30)) + 1092|0);
  $byte_code_size36 = ((($fs35)) + 8|0);
  $31 = HEAP32[$byte_code_size36>>2]|0;
  $cmp37 = ($31|0)>(0);
  __ZL12_sg_validateb20_sg_validate_error_t($cmp37,20);
 }
 $stage_index = 0;
 while(1) {
  $32 = $stage_index;
  $cmp40 = ($32|0)<(2);
  if (!($cmp40)) {
   break;
  }
  $33 = $stage_index;
  $cmp42 = ($33|0)==(0);
  $34 = $desc$addr;
  $vs43 = ((($34)) + 196|0);
  $fs44 = ((($34)) + 1092|0);
  $cond = $cmp42 ? $vs43 : $fs44;
  $stage_desc = $cond;
  $uniform_blocks_continuous = 1;
  $ub_index = 0;
  while(1) {
   $35 = $ub_index;
   $cmp46 = ($35|0)<(4);
   if (!($cmp46)) {
    break;
   }
   $36 = $stage_desc;
   $uniform_blocks = ((($36)) + 16|0);
   $37 = $ub_index;
   $arrayidx48 = (($uniform_blocks) + (($37*196)|0)|0);
   $ub_desc = $arrayidx48;
   $38 = $ub_desc;
   $39 = HEAP32[$38>>2]|0;
   $cmp49 = ($39|0)>(0);
   if ($cmp49) {
    $40 = $uniform_blocks_continuous;
    $tobool51 = $40&1;
    __ZL12_sg_validateb20_sg_validate_error_t($tobool51,21);
    $uniforms_continuous = 1;
    $uniform_offset = 0;
    $num_uniforms = 0;
    $u_index = 0;
    while(1) {
     $41 = $u_index;
     $cmp53 = ($41|0)<(16);
     if (!($cmp53)) {
      break;
     }
     $42 = $ub_desc;
     $uniforms = ((($42)) + 4|0);
     $43 = $u_index;
     $arrayidx55 = (($uniforms) + (($43*12)|0)|0);
     $u_desc = $arrayidx55;
     $44 = $u_desc;
     $type = ((($44)) + 4|0);
     $45 = HEAP32[$type>>2]|0;
     $cmp56 = ($45|0)!=(0);
     if ($cmp56) {
      $46 = $uniforms_continuous;
      $tobool58 = $46&1;
      __ZL12_sg_validateb20_sg_validate_error_t($tobool58,23);
      $47 = $u_desc;
      $48 = HEAP32[$47>>2]|0;
      $tobool60 = ($48|0)!=(0|0);
      __ZL12_sg_validateb20_sg_validate_error_t($tobool60,25);
      $49 = $u_desc;
      $array_count61 = ((($49)) + 8|0);
      $50 = HEAP32[$array_count61>>2]|0;
      $array_count = $50;
      $51 = $u_desc;
      $type62 = ((($51)) + 4|0);
      $52 = HEAP32[$type62>>2]|0;
      $53 = $array_count;
      $call63 = (__ZL16_sg_uniform_size15sg_uniform_typei($52,$53)|0);
      $54 = $uniform_offset;
      $add = (($54) + ($call63))|0;
      $uniform_offset = $add;
      $55 = $num_uniforms;
      $inc64 = (($55) + 1)|0;
      $num_uniforms = $inc64;
     } else {
      $uniforms_continuous = 0;
     }
     $56 = $u_index;
     $inc67 = (($56) + 1)|0;
     $u_index = $inc67;
    }
    $57 = $uniform_offset;
    $58 = $ub_desc;
    $59 = HEAP32[$58>>2]|0;
    $cmp70 = ($57|0)==($59|0);
    __ZL12_sg_validateb20_sg_validate_error_t($cmp70,26);
    $60 = $num_uniforms;
    $cmp71 = ($60|0)>(0);
    __ZL12_sg_validateb20_sg_validate_error_t($cmp71,24);
   } else {
    $uniform_blocks_continuous = 0;
   }
   $61 = $ub_index;
   $inc75 = (($61) + 1)|0;
   $ub_index = $inc75;
  }
  $images_continuous = 1;
  $img_index = 0;
  while(1) {
   $62 = $img_index;
   $cmp78 = ($62|0)<(12);
   if (!($cmp78)) {
    break;
   }
   $63 = $stage_desc;
   $images = ((($63)) + 800|0);
   $64 = $img_index;
   $arrayidx80 = (($images) + ($64<<3)|0);
   $img_desc = $arrayidx80;
   $65 = $img_desc;
   $type81 = ((($65)) + 4|0);
   $66 = HEAP32[$type81>>2]|0;
   $cmp82 = ($66|0)!=(0);
   if ($cmp82) {
    $67 = $images_continuous;
    $tobool84 = $67&1;
    __ZL12_sg_validateb20_sg_validate_error_t($tobool84,22);
    $68 = $img_desc;
    $69 = HEAP32[$68>>2]|0;
    $tobool86 = ($69|0)!=(0|0);
    __ZL12_sg_validateb20_sg_validate_error_t($tobool86,27);
   } else {
    $images_continuous = 0;
   }
   $70 = $img_index;
   $inc90 = (($70) + 1)|0;
   $img_index = $inc90;
  }
  $71 = $stage_index;
  $inc93 = (($71) + 1)|0;
  $stage_index = $inc93;
 }
 $call95 = (__ZL16_sg_validate_endv()|0);
 STACKTOP = sp;return ($call95|0);
}
function __ZL17_sg_create_shaderP12_sg_shader_tPK14sg_shader_desc($shd,$desc) {
 $shd = $shd|0;
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $add = 0, $array_count = 0, $arrayidx = 0, $arrayidx122 = 0, $arrayidx129 = 0, $arrayidx135 = 0, $arrayidx46 = 0, $arrayidx53 = 0, $arrayidx58 = 0, $arrayidx67 = 0;
 var $arrayidx72 = 0, $arrayidx9 = 0, $attrs = 0, $attrs8 = 0, $call = 0, $call104 = 0, $call11 = 0, $call13 = 0, $call143 = 0, $call162 = 0, $call18 = 0, $call19 = 0, $call27 = 0, $call35 = 0, $call79 = 0, $call84 = 0, $cmp = 0, $cmp105 = 0, $cmp110 = 0, $cmp113 = 0;
 var $cmp123 = 0, $cmp127 = 0, $cmp131 = 0, $cmp147 = 0, $cmp163 = 0, $cmp20 = 0, $cmp25 = 0, $cmp36 = 0, $cmp40 = 0, $cmp42 = 0, $cmp47 = 0, $cmp51 = 0, $cmp54 = 0, $cmp61 = 0, $cmp65 = 0, $cmp68 = 0, $cmp7 = 0, $cmp93 = 0, $cond = 0, $cond119 = 0;
 var $conv = 0, $conv75 = 0, $conv78 = 0, $count = 0, $count77 = 0, $cur_uniform_offset = 0, $desc$addr = 0, $fs = 0, $fs117 = 0, $fs44 = 0, $gl_fs = 0, $gl_loc138 = 0, $gl_loc144 = 0, $gl_loc146 = 0, $gl_prog = 0, $gl_prog17 = 0, $gl_prog34 = 0, $gl_tex_slot = 0, $gl_tex_slot150 = 0, $gl_tex_slot152 = 0;
 var $gl_vs = 0, $i = 0, $images = 0, $images134 = 0, $img = 0, $img_desc = 0, $img_index = 0, $inc = 0, $inc102 = 0, $inc149 = 0, $inc155 = 0, $inc157 = 0, $inc160 = 0, $inc88 = 0, $inc90 = 0, $inc97 = 0, $inc99 = 0, $link_status = 0, $log_buf = 0, $log_len = 0;
 var $num_images = 0, $num_images154 = 0, $num_uniforms = 0, $num_uniforms87 = 0, $offset = 0, $or$cond = 0, $or$cond1 = 0, $retval = 0, $shd$addr = 0, $stage = 0, $stage120 = 0, $stage121 = 0, $stage45 = 0, $stage_desc = 0, $stage_desc112 = 0, $stage_index = 0, $stage_index108 = 0, $tobool = 0, $tobool1 = 0, $tobool14 = 0;
 var $tobool140 = 0, $tobool16 = 0, $tobool2 = 0, $tobool23 = 0, $tobool28 = 0, $tobool81 = 0, $type = 0, $type130 = 0, $type136 = 0, $type73 = 0, $type74 = 0, $type76 = 0, $u = 0, $u_desc = 0, $u_index = 0, $ub = 0, $ub_desc = 0, $ub_index = 0, $uniform_blocks = 0, $uniform_blocks57 = 0;
 var $uniforms = 0, $uniforms71 = 0, $vs = 0, $vs115 = 0, $vs43 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $link_status = sp + 76|0;
 $log_len = sp + 72|0;
 $shd$addr = $shd;
 $desc$addr = $desc;
 $0 = $shd$addr;
 $tobool = ($0|0)!=(0|0);
 $1 = $desc$addr;
 $tobool1 = ($1|0)!=(0|0);
 $or$cond = $tobool & $tobool1;
 if (!($or$cond)) {
  ___assert_fail((18903|0),(9686|0),5356,(18915|0));
  // unreachable;
 }
 $2 = $shd$addr;
 $gl_prog = ((($2)) + 12|0);
 $3 = HEAP32[$gl_prog>>2]|0;
 $tobool2 = ($3|0)!=(0);
 if ($tobool2) {
  ___assert_fail((18933|0),(9686|0),5357,(18915|0));
  // unreachable;
 }
 $call = (_glGetError()|0);
 $cmp = ($call|0)==(0);
 if (!($cmp)) {
  ___assert_fail((9883|0),(9686|0),5358,(18915|0));
  // unreachable;
 }
 $i = 0;
 while(1) {
  $4 = $i;
  $cmp7 = ($4|0)<(16);
  if (!($cmp7)) {
   break;
  }
  $5 = $shd$addr;
  $attrs = ((($5)) + 16|0);
  $6 = $i;
  $arrayidx = (($attrs) + ($6<<4)|0);
  $7 = $desc$addr;
  $attrs8 = ((($7)) + 4|0);
  $8 = $i;
  $arrayidx9 = (($attrs8) + (($8*12)|0)|0);
  $9 = HEAP32[$arrayidx9>>2]|0;
  __ZL10_sg_strcpyP9_sg_str_tPKc($arrayidx,$9);
  $10 = $i;
  $inc = (($10) + 1)|0;
  $i = $inc;
 }
 $11 = $desc$addr;
 $vs = ((($11)) + 196|0);
 $12 = HEAP32[$vs>>2]|0;
 $call11 = (__ZL21_sg_gl_compile_shader15sg_shader_stagePKc(0,$12)|0);
 $gl_vs = $call11;
 $13 = $desc$addr;
 $fs = ((($13)) + 1092|0);
 $14 = HEAP32[$fs>>2]|0;
 $call13 = (__ZL21_sg_gl_compile_shader15sg_shader_stagePKc(1,$14)|0);
 $gl_fs = $call13;
 $15 = $gl_vs;
 $tobool14 = ($15|0)!=(0);
 $16 = $gl_fs;
 $tobool16 = ($16|0)!=(0);
 $or$cond1 = $tobool14 & $tobool16;
 if (!($or$cond1)) {
  $retval = 3;
  $129 = $retval;
  STACKTOP = sp;return ($129|0);
 }
 $call18 = (_glCreateProgram()|0);
 $gl_prog17 = $call18;
 $17 = $gl_prog17;
 $18 = $gl_vs;
 _glAttachShader(($17|0),($18|0));
 $19 = $gl_prog17;
 $20 = $gl_fs;
 _glAttachShader(($19|0),($20|0));
 $21 = $gl_prog17;
 _glLinkProgram(($21|0));
 $22 = $gl_vs;
 _glDeleteShader(($22|0));
 $23 = $gl_fs;
 _glDeleteShader(($23|0));
 $call19 = (_glGetError()|0);
 $cmp20 = ($call19|0)==(0);
 if (!($cmp20)) {
  ___assert_fail((9883|0),(9686|0),5376,(18915|0));
  // unreachable;
 }
 $24 = $gl_prog17;
 _glGetProgramiv(($24|0),35714,($link_status|0));
 $25 = HEAP32[$link_status>>2]|0;
 $tobool23 = ($25|0)!=(0);
 if (!($tobool23)) {
  HEAP32[$log_len>>2] = 0;
  $26 = $gl_prog17;
  _glGetProgramiv(($26|0),35716,($log_len|0));
  $27 = HEAP32[$log_len>>2]|0;
  $cmp25 = ($27|0)>(0);
  do {
   if ($cmp25) {
    $28 = HEAP32[$log_len>>2]|0;
    $call27 = (_malloc($28)|0);
    $log_buf = $call27;
    $29 = $gl_prog17;
    $30 = HEAP32[$log_len>>2]|0;
    $31 = $log_buf;
    _glGetProgramInfoLog(($29|0),($30|0),($log_len|0),($31|0));
    $32 = $log_buf;
    $tobool28 = ($32|0)!=(0|0);
    if ($tobool28) {
     $33 = $log_buf;
     (_puts($33)|0);
     $34 = $log_buf;
     _free($34);
     break;
    } else {
     ___assert_fail((18947|0),(9686|0),5386,(18915|0));
     // unreachable;
    }
   }
  } while(0);
  $35 = $gl_prog17;
  _glDeleteProgram(($35|0));
  $retval = 3;
  $129 = $retval;
  STACKTOP = sp;return ($129|0);
 }
 $36 = $gl_prog17;
 $37 = $shd$addr;
 $gl_prog34 = ((($37)) + 12|0);
 HEAP32[$gl_prog34>>2] = $36;
 $call35 = (_glGetError()|0);
 $cmp36 = ($call35|0)==(0);
 if (!($cmp36)) {
  ___assert_fail((9883|0),(9686|0),5395,(18915|0));
  // unreachable;
 }
 $stage_index = 0;
 L34: while(1) {
  $38 = $stage_index;
  $cmp40 = ($38|0)<(2);
  if (!($cmp40)) {
   label = 42;
   break;
  }
  $39 = $stage_index;
  $cmp42 = ($39|0)==(0);
  $40 = $desc$addr;
  $vs43 = ((($40)) + 196|0);
  $fs44 = ((($40)) + 1092|0);
  $cond = $cmp42 ? $vs43 : $fs44;
  $stage_desc = $cond;
  $41 = $shd$addr;
  $stage45 = ((($41)) + 272|0);
  $42 = $stage_index;
  $arrayidx46 = (($stage45) + (($42*952)|0)|0);
  $stage = $arrayidx46;
  $43 = $stage;
  $44 = HEAP32[$43>>2]|0;
  $cmp47 = ($44|0)==(0);
  if (!($cmp47)) {
   label = 25;
   break;
  }
  $ub_index = 0;
  while(1) {
   $45 = $ub_index;
   $cmp51 = ($45|0)<(4);
   if (!($cmp51)) {
    break;
   }
   $46 = $stage_desc;
   $uniform_blocks = ((($46)) + 16|0);
   $47 = $ub_index;
   $arrayidx53 = (($uniform_blocks) + (($47*196)|0)|0);
   $ub_desc = $arrayidx53;
   $48 = $ub_desc;
   $49 = HEAP32[$48>>2]|0;
   $cmp54 = (0)==($49|0);
   if ($cmp54) {
    break;
   }
   $50 = $stage;
   $uniform_blocks57 = ((($50)) + 8|0);
   $51 = $ub_index;
   $arrayidx58 = (($uniform_blocks57) + (($51*200)|0)|0);
   $ub = $arrayidx58;
   $52 = $ub_desc;
   $53 = HEAP32[$52>>2]|0;
   $54 = $ub;
   HEAP32[$54>>2] = $53;
   $55 = $ub;
   $num_uniforms = ((($55)) + 4|0);
   $56 = HEAP32[$num_uniforms>>2]|0;
   $cmp61 = ($56|0)==(0);
   if (!($cmp61)) {
    label = 30;
    break L34;
   }
   $cur_uniform_offset = 0;
   $u_index = 0;
   while(1) {
    $57 = $u_index;
    $cmp65 = ($57|0)<(16);
    if (!($cmp65)) {
     break;
    }
    $58 = $ub_desc;
    $uniforms = ((($58)) + 4|0);
    $59 = $u_index;
    $arrayidx67 = (($uniforms) + (($59*12)|0)|0);
    $u_desc = $arrayidx67;
    $60 = $u_desc;
    $type = ((($60)) + 4|0);
    $61 = HEAP32[$type>>2]|0;
    $cmp68 = ($61|0)==(0);
    if ($cmp68) {
     break;
    }
    $62 = $ub;
    $uniforms71 = ((($62)) + 8|0);
    $63 = $u_index;
    $arrayidx72 = (($uniforms71) + (($63*12)|0)|0);
    $u = $arrayidx72;
    $64 = $u_desc;
    $type73 = ((($64)) + 4|0);
    $65 = HEAP32[$type73>>2]|0;
    $66 = $u;
    $type74 = ((($66)) + 4|0);
    HEAP32[$type74>>2] = $65;
    $67 = $u_desc;
    $array_count = ((($67)) + 8|0);
    $68 = HEAP32[$array_count>>2]|0;
    $conv = $68&255;
    $69 = $u;
    $count = ((($69)) + 8|0);
    HEAP8[$count>>0] = $conv;
    $70 = $cur_uniform_offset;
    $conv75 = $70&65535;
    $71 = $u;
    $offset = ((($71)) + 10|0);
    HEAP16[$offset>>1] = $conv75;
    $72 = $u;
    $type76 = ((($72)) + 4|0);
    $73 = HEAP32[$type76>>2]|0;
    $74 = $u;
    $count77 = ((($74)) + 8|0);
    $75 = HEAP8[$count77>>0]|0;
    $conv78 = $75&255;
    $call79 = (__ZL16_sg_uniform_size15sg_uniform_typei($73,$conv78)|0);
    $76 = $cur_uniform_offset;
    $add = (($76) + ($call79))|0;
    $cur_uniform_offset = $add;
    $77 = $u_desc;
    $78 = HEAP32[$77>>2]|0;
    $tobool81 = ($78|0)!=(0|0);
    if ($tobool81) {
     $79 = $gl_prog17;
     $80 = $u_desc;
     $81 = HEAP32[$80>>2]|0;
     $call84 = (_glGetUniformLocation(($79|0),($81|0))|0);
     $82 = $u;
     HEAP32[$82>>2] = $call84;
    } else {
     $83 = $u_index;
     $84 = $u;
     HEAP32[$84>>2] = $83;
    }
    $85 = $ub;
    $num_uniforms87 = ((($85)) + 4|0);
    $86 = HEAP32[$num_uniforms87>>2]|0;
    $inc88 = (($86) + 1)|0;
    HEAP32[$num_uniforms87>>2] = $inc88;
    $87 = $u_index;
    $inc90 = (($87) + 1)|0;
    $u_index = $inc90;
   }
   $88 = $ub_desc;
   $89 = HEAP32[$88>>2]|0;
   $90 = $cur_uniform_offset;
   $cmp93 = ($89|0)==($90|0);
   if (!($cmp93)) {
    label = 39;
    break L34;
   }
   $91 = $stage;
   $92 = HEAP32[$91>>2]|0;
   $inc97 = (($92) + 1)|0;
   HEAP32[$91>>2] = $inc97;
   $93 = $ub_index;
   $inc99 = (($93) + 1)|0;
   $ub_index = $inc99;
  }
  $94 = $stage_index;
  $inc102 = (($94) + 1)|0;
  $stage_index = $inc102;
 }
 if ((label|0) == 25) {
  ___assert_fail((18955|0),(9686|0),5399,(18915|0));
  // unreachable;
 }
 else if ((label|0) == 30) {
  ___assert_fail((18986|0),(9686|0),5407,(18915|0));
  // unreachable;
 }
 else if ((label|0) == 39) {
  ___assert_fail((19008|0),(9686|0),5427,(18915|0));
  // unreachable;
 }
 else if ((label|0) == 42) {
  $call104 = (_glGetError()|0);
  $cmp105 = ($call104|0)==(0);
  if (!($cmp105)) {
   ___assert_fail((9883|0),(9686|0),5433,(18915|0));
   // unreachable;
  }
  $gl_tex_slot = 0;
  $stage_index108 = 0;
  while(1) {
   $95 = $stage_index108;
   $cmp110 = ($95|0)<(2);
   if (!($cmp110)) {
    break;
   }
   $96 = $stage_index108;
   $cmp113 = ($96|0)==(0);
   $97 = $desc$addr;
   $vs115 = ((($97)) + 196|0);
   $fs117 = ((($97)) + 1092|0);
   $cond119 = $cmp113 ? $vs115 : $fs117;
   $stage_desc112 = $cond119;
   $98 = $shd$addr;
   $stage121 = ((($98)) + 272|0);
   $99 = $stage_index108;
   $arrayidx122 = (($stage121) + (($99*952)|0)|0);
   $stage120 = $arrayidx122;
   $100 = $stage120;
   $num_images = ((($100)) + 4|0);
   $101 = HEAP32[$num_images>>2]|0;
   $cmp123 = ($101|0)==(0);
   if (!($cmp123)) {
    label = 47;
    break;
   }
   $img_index = 0;
   while(1) {
    $102 = $img_index;
    $cmp127 = ($102|0)<(12);
    if (!($cmp127)) {
     break;
    }
    $103 = $stage_desc112;
    $images = ((($103)) + 800|0);
    $104 = $img_index;
    $arrayidx129 = (($images) + ($104<<3)|0);
    $img_desc = $arrayidx129;
    $105 = $img_desc;
    $type130 = ((($105)) + 4|0);
    $106 = HEAP32[$type130>>2]|0;
    $cmp131 = ($106|0)==(0);
    if ($cmp131) {
     break;
    }
    $107 = $stage120;
    $images134 = ((($107)) + 808|0);
    $108 = $img_index;
    $arrayidx135 = (($images134) + (($108*12)|0)|0);
    $img = $arrayidx135;
    $109 = $img_desc;
    $type136 = ((($109)) + 4|0);
    $110 = HEAP32[$type136>>2]|0;
    $111 = $img;
    HEAP32[$111>>2] = $110;
    $112 = $img_index;
    $113 = $img;
    $gl_loc138 = ((($113)) + 4|0);
    HEAP32[$gl_loc138>>2] = $112;
    $114 = $img_desc;
    $115 = HEAP32[$114>>2]|0;
    $tobool140 = ($115|0)!=(0|0);
    if ($tobool140) {
     $116 = $gl_prog17;
     $117 = $img_desc;
     $118 = HEAP32[$117>>2]|0;
     $call143 = (_glGetUniformLocation(($116|0),($118|0))|0);
     $119 = $img;
     $gl_loc144 = ((($119)) + 4|0);
     HEAP32[$gl_loc144>>2] = $call143;
    }
    $120 = $img;
    $gl_loc146 = ((($120)) + 4|0);
    $121 = HEAP32[$gl_loc146>>2]|0;
    $cmp147 = ($121|0)!=(-1);
    if ($cmp147) {
     $122 = $gl_tex_slot;
     $inc149 = (($122) + 1)|0;
     $gl_tex_slot = $inc149;
     $123 = $img;
     $gl_tex_slot150 = ((($123)) + 8|0);
     HEAP32[$gl_tex_slot150>>2] = $122;
    } else {
     $124 = $img;
     $gl_tex_slot152 = ((($124)) + 8|0);
     HEAP32[$gl_tex_slot152>>2] = -1;
    }
    $125 = $stage120;
    $num_images154 = ((($125)) + 4|0);
    $126 = HEAP32[$num_images154>>2]|0;
    $inc155 = (($126) + 1)|0;
    HEAP32[$num_images154>>2] = $inc155;
    $127 = $img_index;
    $inc157 = (($127) + 1)|0;
    $img_index = $inc157;
   }
   $128 = $stage_index108;
   $inc160 = (($128) + 1)|0;
   $stage_index108 = $inc160;
  }
  if ((label|0) == 47) {
   ___assert_fail((19044|0),(9686|0),5438,(18915|0));
   // unreachable;
  }
  $call162 = (_glGetError()|0);
  $cmp163 = ($call162|0)==(0);
  if (!($cmp163)) {
   ___assert_fail((9883|0),(9686|0),5459,(18915|0));
   // unreachable;
  }
  $retval = 2;
  $129 = $retval;
  STACKTOP = sp;return ($129|0);
 }
 return (0)|0;
}
function __ZL10_sg_strcpyP9_sg_str_tPKc($dst,$src) {
 $dst = $dst|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $arrayidx = 0, $dst$addr = 0, $src$addr = 0, $tobool = 0, $tobool1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $dst$addr = $dst;
 $src$addr = $src;
 $0 = $dst$addr;
 $tobool = ($0|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((19130|0),(9686|0),3169,(19134|0));
  // unreachable;
 }
 $1 = $src$addr;
 $tobool1 = ($1|0)!=(0|0);
 $2 = $dst$addr;
 if ($tobool1) {
  $3 = $src$addr;
  (_strncpy($2,$3,16)|0);
  $4 = $dst$addr;
  $arrayidx = ((($4)) + 15|0);
  HEAP8[$arrayidx>>0] = 0;
  STACKTOP = sp;return;
 } else {
  dest=$2; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
 }
}
function __ZL21_sg_gl_compile_shader15sg_shader_stagePKc($stage,$src) {
 $stage = $stage|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call14 = 0, $call3 = 0;
 var $call4 = 0, $call8 = 0, $cmp = 0, $cmp15 = 0, $cmp6 = 0, $compile_status = 0, $gl_shd = 0, $log_buf = 0, $log_len = 0, $src$addr = 0, $stage$addr = 0, $tobool = 0, $tobool5 = 0, $tobool9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $src$addr = sp + 16|0;
 $compile_status = sp + 8|0;
 $log_len = sp + 4|0;
 $stage$addr = $stage;
 HEAP32[$src$addr>>2] = $src;
 $0 = HEAP32[$src$addr>>2]|0;
 $tobool = ($0|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((19084|0),(9686|0),5331,(19088|0));
  // unreachable;
 }
 $call = (_glGetError()|0);
 $cmp = ($call|0)==(0);
 if (!($cmp)) {
  ___assert_fail((9883|0),(9686|0),5332,(19088|0));
  // unreachable;
 }
 $1 = $stage$addr;
 $call3 = (__ZL19_sg_gl_shader_stage15sg_shader_stage($1)|0);
 $call4 = (_glCreateShader(($call3|0))|0);
 $gl_shd = $call4;
 $2 = $gl_shd;
 _glShaderSource(($2|0),1,($src$addr|0),(0|0));
 $3 = $gl_shd;
 _glCompileShader(($3|0));
 HEAP32[$compile_status>>2] = 0;
 $4 = $gl_shd;
 _glGetShaderiv(($4|0),35713,($compile_status|0));
 $5 = HEAP32[$compile_status>>2]|0;
 $tobool5 = ($5|0)!=(0);
 if (!($tobool5)) {
  HEAP32[$log_len>>2] = 0;
  $6 = $gl_shd;
  _glGetShaderiv(($6|0),35716,($log_len|0));
  $7 = HEAP32[$log_len>>2]|0;
  $cmp6 = ($7|0)>(0);
  do {
   if ($cmp6) {
    $8 = HEAP32[$log_len>>2]|0;
    $call8 = (_malloc($8)|0);
    $log_buf = $call8;
    $9 = $gl_shd;
    $10 = HEAP32[$log_len>>2]|0;
    $11 = $log_buf;
    _glGetShaderInfoLog(($9|0),($10|0),($log_len|0),($11|0));
    $12 = $log_buf;
    $tobool9 = ($12|0)!=(0|0);
    if ($tobool9) {
     $13 = $log_buf;
     (_puts($13)|0);
     $14 = $log_buf;
     _free($14);
     break;
    } else {
     ___assert_fail((18947|0),(9686|0),5345,(19088|0));
     // unreachable;
    }
   }
  } while(0);
  $15 = $gl_shd;
  _glDeleteShader(($15|0));
  $gl_shd = 0;
 }
 $call14 = (_glGetError()|0);
 $cmp15 = ($call14|0)==(0);
 if ($cmp15) {
  $16 = $gl_shd;
  STACKTOP = sp;return ($16|0);
 } else {
  ___assert_fail((9883|0),(9686|0),5351,(19088|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZL16_sg_uniform_size15sg_uniform_typei($type,$count) {
 $type = $type|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $count$addr = 0, $mul = 0, $mul3 = 0, $mul5 = 0, $mul7 = 0, $mul9 = 0, $retval = 0, $type$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $type$addr = $type;
 $count$addr = $count;
 $0 = $type$addr;
 switch ($0|0) {
 case 0:  {
  $retval = 0;
  break;
 }
 case 1:  {
  $1 = $count$addr;
  $mul = $1<<2;
  $retval = $mul;
  break;
 }
 case 2:  {
  $2 = $count$addr;
  $mul3 = $2<<3;
  $retval = $mul3;
  break;
 }
 case 3:  {
  $3 = $count$addr;
  $mul5 = ($3*12)|0;
  $retval = $mul5;
  break;
 }
 case 4:  {
  $4 = $count$addr;
  $mul7 = $4<<4;
  $retval = $mul7;
  break;
 }
 case 5:  {
  $5 = $count$addr;
  $mul9 = $5<<6;
  $retval = $mul9;
  break;
 }
 default: {
  ___assert_fail((24519|0),(9686|0),3218,(19067|0));
  // unreachable;
 }
 }
 $6 = $retval;
 STACKTOP = sp;return ($6|0);
}
function __ZL19_sg_gl_shader_stage15sg_shader_stage($stage) {
 $stage = $stage|0;
 var $0 = 0, $1 = 0, $retval = 0, $stage$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $stage$addr = $stage;
 $0 = $stage$addr;
 switch ($0|0) {
 case 0:  {
  $retval = 35633;
  break;
 }
 case 1:  {
  $retval = 35632;
  break;
 }
 default: {
  ___assert_fail((24519|0),(9686|0),3840,(19110|0));
  // unreachable;
 }
 }
 $1 = $retval;
 STACKTOP = sp;return ($1|0);
}
function __ZL13_sg_shader_atPK11_sg_pools_tj($p,$shd_id) {
 $p = $p|0;
 $shd_id = $shd_id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp3 = 0, $or$cond = 0, $p$addr = 0, $shader_pool = 0, $shaders = 0, $shd_id$addr = 0;
 var $slot_index = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $p$addr = $p;
 $shd_id$addr = $shd_id;
 $0 = $p$addr;
 $tobool = ($0|0)!=(0|0);
 $1 = $shd_id$addr;
 $cmp = (0)!=($1|0);
 $or$cond = $tobool & $cmp;
 if (!($or$cond)) {
  ___assert_fail((19188|0),(9686|0),9676,(19219|0));
  // unreachable;
 }
 $2 = $shd_id$addr;
 $call = (__ZL14_sg_slot_indexj($2)|0);
 $slot_index = $call;
 $3 = $slot_index;
 $cmp1 = ($3|0)>(0);
 if (!($cmp1)) {
  ___assert_fail((19233|0),(9686|0),9678,(19219|0));
  // unreachable;
 }
 $4 = $slot_index;
 $5 = $p$addr;
 $shader_pool = ((($5)) + 32|0);
 $6 = HEAP32[$shader_pool>>2]|0;
 $cmp3 = ($4|0)<($6|0);
 if ($cmp3) {
  $7 = $p$addr;
  $shaders = ((($7)) + 104|0);
  $8 = HEAP32[$shaders>>2]|0;
  $9 = $slot_index;
  $arrayidx = (($8) + (($9*2176)|0)|0);
  STACKTOP = sp;return ($arrayidx|0);
 } else {
  ___assert_fail((19233|0),(9686|0),9678,(19219|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZL26_sg_pipeline_desc_defaultsPK16sg_pipeline_desc($agg$result,$desc) {
 $agg$result = $agg$result|0;
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a_desc = 0, $a_desc303 = 0, $add = 0, $arrayidx = 0, $arrayidx271 = 0, $arrayidx292 = 0, $arrayidx306 = 0, $arrayidx320 = 0, $arrayidx326 = 0, $arrayidx335 = 0, $arrayidx338 = 0, $attr_index = 0, $attr_index286 = 0, $attr_index299 = 0, $attrs = 0, $attrs291 = 0, $attrs305 = 0, $auto_offset = 0;
 var $b_desc = 0, $blend = 0, $blend128 = 0, $blend132 = 0, $blend134 = 0, $blend138 = 0, $blend142 = 0, $blend144 = 0, $blend148 = 0, $blend152 = 0, $blend154 = 0, $blend158 = 0, $blend162 = 0, $blend164 = 0, $blend168 = 0, $blend172 = 0, $blend174 = 0, $blend178 = 0, $blend182 = 0, $blend184 = 0;
 var $blend186 = 0, $blend194 = 0, $blend200 = 0, $blend202 = 0, $blend206 = 0, $blend210 = 0, $blend212 = 0, $blend216 = 0, $blend220 = 0, $blend222 = 0, $blend227 = 0, $blend231 = 0, $buf_index = 0, $call = 0, $call225 = 0, $call324 = 0, $cmp = 0, $cmp10 = 0, $cmp104 = 0, $cmp116 = 0;
 var $cmp125 = 0, $cmp135 = 0, $cmp145 = 0, $cmp155 = 0, $cmp165 = 0, $cmp175 = 0, $cmp185 = 0, $cmp191 = 0, $cmp203 = 0, $cmp213 = 0, $cmp223 = 0, $cmp23 = 0, $cmp233 = 0, $cmp243 = 0, $cmp253 = 0, $cmp262 = 0, $cmp263 = 0, $cmp266 = 0, $cmp268 = 0, $cmp272 = 0;
 var $cmp279 = 0, $cmp288 = 0, $cmp293 = 0, $cmp3 = 0, $cmp301 = 0, $cmp308 = 0, $cmp312 = 0, $cmp315 = 0, $cmp331 = 0, $cmp336 = 0, $cmp36 = 0, $cmp49 = 0, $cmp62 = 0, $cmp76 = 0, $cmp90 = 0, $color_attachment_count = 0, $color_attachment_count207 = 0, $color_attachment_count211 = 0, $color_format = 0, $color_format217 = 0;
 var $color_format221 = 0, $color_write_mask = 0, $color_write_mask187 = 0, $color_write_mask195 = 0, $color_write_mask201 = 0, $compare_func = 0, $compare_func103 = 0, $compare_func109 = 0, $compare_func114 = 0, $compare_func54 = 0, $compare_func59 = 0, $cond = 0, $cond111 = 0, $cond122 = 0, $cond131 = 0, $cond141 = 0, $cond151 = 0, $cond161 = 0, $cond17 = 0, $cond171 = 0;
 var $cond181 = 0, $cond198 = 0, $cond209 = 0, $cond219 = 0, $cond230 = 0, $cond239 = 0, $cond249 = 0, $cond259 = 0, $cond277 = 0, $cond284 = 0, $cond30 = 0, $cond43 = 0, $cond56 = 0, $cond69 = 0, $cond8 = 0, $cond83 = 0, $cond97 = 0, $conv = 0, $conv190 = 0, $conv196 = 0;
 var $conv199 = 0, $cull_mode = 0, $cull_mode237 = 0, $cull_mode241 = 0, $depth_compare_func = 0, $depth_compare_func120 = 0, $depth_compare_func124 = 0, $depth_fail_op = 0, $depth_fail_op28 = 0, $depth_fail_op33 = 0, $depth_fail_op75 = 0, $depth_fail_op81 = 0, $depth_fail_op86 = 0, $depth_format = 0, $depth_format228 = 0, $depth_format232 = 0, $depth_stencil = 0, $depth_stencil101 = 0, $depth_stencil107 = 0, $depth_stencil112 = 0;
 var $depth_stencil115 = 0, $depth_stencil119 = 0, $depth_stencil123 = 0, $depth_stencil13 = 0, $depth_stencil18 = 0, $depth_stencil21 = 0, $depth_stencil26 = 0, $depth_stencil31 = 0, $depth_stencil34 = 0, $depth_stencil39 = 0, $depth_stencil44 = 0, $depth_stencil47 = 0, $depth_stencil52 = 0, $depth_stencil57 = 0, $depth_stencil60 = 0, $depth_stencil65 = 0, $depth_stencil70 = 0, $depth_stencil73 = 0, $depth_stencil79 = 0, $depth_stencil84 = 0;
 var $depth_stencil87 = 0, $depth_stencil93 = 0, $depth_stencil98 = 0, $desc$addr = 0, $dst_factor_alpha = 0, $dst_factor_alpha169 = 0, $dst_factor_alpha173 = 0, $dst_factor_rgb = 0, $dst_factor_rgb139 = 0, $dst_factor_rgb143 = 0, $face_winding = 0, $face_winding247 = 0, $face_winding251 = 0, $format = 0, $format307 = 0, $format323 = 0, $inc = 0, $inc297 = 0, $inc328 = 0, $inc342 = 0;
 var $index_type = 0, $index_type6 = 0, $index_type9 = 0, $l_desc = 0, $layout = 0, $layout269 = 0, $layout290 = 0, $layout304 = 0, $layout333 = 0, $offset = 0, $offset321 = 0, $op_alpha = 0, $op_alpha179 = 0, $op_alpha183 = 0, $op_rgb = 0, $op_rgb149 = 0, $op_rgb153 = 0, $pass_op = 0, $pass_op100 = 0, $pass_op41 = 0;
 var $pass_op46 = 0, $pass_op89 = 0, $pass_op95 = 0, $primitive_type = 0, $primitive_type1 = 0, $primitive_type2 = 0, $rasterizer = 0, $rasterizer236 = 0, $rasterizer240 = 0, $rasterizer242 = 0, $rasterizer246 = 0, $rasterizer250 = 0, $rasterizer252 = 0, $rasterizer256 = 0, $rasterizer260 = 0, $sample_count = 0, $sample_count257 = 0, $sample_count261 = 0, $src_factor_alpha = 0, $src_factor_alpha159 = 0;
 var $src_factor_alpha163 = 0, $src_factor_rgb = 0, $src_factor_rgb129 = 0, $src_factor_rgb133 = 0, $stencil_back = 0, $stencil_back102 = 0, $stencil_back108 = 0, $stencil_back113 = 0, $stencil_back66 = 0, $stencil_back71 = 0, $stencil_back74 = 0, $stencil_back80 = 0, $stencil_back85 = 0, $stencil_back88 = 0, $stencil_back94 = 0, $stencil_back99 = 0, $step_func = 0, $step_func275 = 0, $step_func278 = 0, $step_rate = 0;
 var $step_rate282 = 0, $step_rate285 = 0, $tobool = 0, $use_auto_offset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $auto_offset = sp;
 $desc$addr = $desc;
 $0 = $desc$addr;
 _memcpy(($agg$result|0),($0|0),444)|0;
 $primitive_type = ((($agg$result)) + 296|0);
 $1 = HEAP32[$primitive_type>>2]|0;
 $cmp = ($1|0)==(0);
 $primitive_type1 = ((($agg$result)) + 296|0);
 $2 = HEAP32[$primitive_type1>>2]|0;
 $cond = $cmp ? 4 : $2;
 $primitive_type2 = ((($agg$result)) + 296|0);
 HEAP32[$primitive_type2>>2] = $cond;
 $index_type = ((($agg$result)) + 300|0);
 $3 = HEAP32[$index_type>>2]|0;
 $cmp3 = ($3|0)==(0);
 $index_type6 = ((($agg$result)) + 300|0);
 $4 = HEAP32[$index_type6>>2]|0;
 $cond8 = $cmp3 ? 1 : $4;
 $index_type9 = ((($agg$result)) + 300|0);
 HEAP32[$index_type9>>2] = $cond8;
 $depth_stencil = ((($agg$result)) + 304|0);
 $5 = HEAP32[$depth_stencil>>2]|0;
 $cmp10 = ($5|0)==(0);
 $depth_stencil13 = ((($agg$result)) + 304|0);
 $6 = HEAP32[$depth_stencil13>>2]|0;
 $cond17 = $cmp10 ? 1 : $6;
 $depth_stencil18 = ((($agg$result)) + 304|0);
 HEAP32[$depth_stencil18>>2] = $cond17;
 $depth_stencil21 = ((($agg$result)) + 304|0);
 $depth_fail_op = ((($depth_stencil21)) + 4|0);
 $7 = HEAP32[$depth_fail_op>>2]|0;
 $cmp23 = ($7|0)==(0);
 if ($cmp23) {
  $cond30 = 1;
 } else {
  $depth_stencil26 = ((($agg$result)) + 304|0);
  $depth_fail_op28 = ((($depth_stencil26)) + 4|0);
  $8 = HEAP32[$depth_fail_op28>>2]|0;
  $cond30 = $8;
 }
 $depth_stencil31 = ((($agg$result)) + 304|0);
 $depth_fail_op33 = ((($depth_stencil31)) + 4|0);
 HEAP32[$depth_fail_op33>>2] = $cond30;
 $depth_stencil34 = ((($agg$result)) + 304|0);
 $pass_op = ((($depth_stencil34)) + 8|0);
 $9 = HEAP32[$pass_op>>2]|0;
 $cmp36 = ($9|0)==(0);
 if ($cmp36) {
  $cond43 = 1;
 } else {
  $depth_stencil39 = ((($agg$result)) + 304|0);
  $pass_op41 = ((($depth_stencil39)) + 8|0);
  $10 = HEAP32[$pass_op41>>2]|0;
  $cond43 = $10;
 }
 $depth_stencil44 = ((($agg$result)) + 304|0);
 $pass_op46 = ((($depth_stencil44)) + 8|0);
 HEAP32[$pass_op46>>2] = $cond43;
 $depth_stencil47 = ((($agg$result)) + 304|0);
 $compare_func = ((($depth_stencil47)) + 12|0);
 $11 = HEAP32[$compare_func>>2]|0;
 $cmp49 = ($11|0)==(0);
 if ($cmp49) {
  $cond56 = 8;
 } else {
  $depth_stencil52 = ((($agg$result)) + 304|0);
  $compare_func54 = ((($depth_stencil52)) + 12|0);
  $12 = HEAP32[$compare_func54>>2]|0;
  $cond56 = $12;
 }
 $depth_stencil57 = ((($agg$result)) + 304|0);
 $compare_func59 = ((($depth_stencil57)) + 12|0);
 HEAP32[$compare_func59>>2] = $cond56;
 $depth_stencil60 = ((($agg$result)) + 304|0);
 $stencil_back = ((($depth_stencil60)) + 16|0);
 $13 = HEAP32[$stencil_back>>2]|0;
 $cmp62 = ($13|0)==(0);
 if ($cmp62) {
  $cond69 = 1;
 } else {
  $depth_stencil65 = ((($agg$result)) + 304|0);
  $stencil_back66 = ((($depth_stencil65)) + 16|0);
  $14 = HEAP32[$stencil_back66>>2]|0;
  $cond69 = $14;
 }
 $depth_stencil70 = ((($agg$result)) + 304|0);
 $stencil_back71 = ((($depth_stencil70)) + 16|0);
 HEAP32[$stencil_back71>>2] = $cond69;
 $depth_stencil73 = ((($agg$result)) + 304|0);
 $stencil_back74 = ((($depth_stencil73)) + 16|0);
 $depth_fail_op75 = ((($stencil_back74)) + 4|0);
 $15 = HEAP32[$depth_fail_op75>>2]|0;
 $cmp76 = ($15|0)==(0);
 if ($cmp76) {
  $cond83 = 1;
 } else {
  $depth_stencil79 = ((($agg$result)) + 304|0);
  $stencil_back80 = ((($depth_stencil79)) + 16|0);
  $depth_fail_op81 = ((($stencil_back80)) + 4|0);
  $16 = HEAP32[$depth_fail_op81>>2]|0;
  $cond83 = $16;
 }
 $depth_stencil84 = ((($agg$result)) + 304|0);
 $stencil_back85 = ((($depth_stencil84)) + 16|0);
 $depth_fail_op86 = ((($stencil_back85)) + 4|0);
 HEAP32[$depth_fail_op86>>2] = $cond83;
 $depth_stencil87 = ((($agg$result)) + 304|0);
 $stencil_back88 = ((($depth_stencil87)) + 16|0);
 $pass_op89 = ((($stencil_back88)) + 8|0);
 $17 = HEAP32[$pass_op89>>2]|0;
 $cmp90 = ($17|0)==(0);
 if ($cmp90) {
  $cond97 = 1;
 } else {
  $depth_stencil93 = ((($agg$result)) + 304|0);
  $stencil_back94 = ((($depth_stencil93)) + 16|0);
  $pass_op95 = ((($stencil_back94)) + 8|0);
  $18 = HEAP32[$pass_op95>>2]|0;
  $cond97 = $18;
 }
 $depth_stencil98 = ((($agg$result)) + 304|0);
 $stencil_back99 = ((($depth_stencil98)) + 16|0);
 $pass_op100 = ((($stencil_back99)) + 8|0);
 HEAP32[$pass_op100>>2] = $cond97;
 $depth_stencil101 = ((($agg$result)) + 304|0);
 $stencil_back102 = ((($depth_stencil101)) + 16|0);
 $compare_func103 = ((($stencil_back102)) + 12|0);
 $19 = HEAP32[$compare_func103>>2]|0;
 $cmp104 = ($19|0)==(0);
 if ($cmp104) {
  $cond111 = 8;
 } else {
  $depth_stencil107 = ((($agg$result)) + 304|0);
  $stencil_back108 = ((($depth_stencil107)) + 16|0);
  $compare_func109 = ((($stencil_back108)) + 12|0);
  $20 = HEAP32[$compare_func109>>2]|0;
  $cond111 = $20;
 }
 $depth_stencil112 = ((($agg$result)) + 304|0);
 $stencil_back113 = ((($depth_stencil112)) + 16|0);
 $compare_func114 = ((($stencil_back113)) + 12|0);
 HEAP32[$compare_func114>>2] = $cond111;
 $depth_stencil115 = ((($agg$result)) + 304|0);
 $depth_compare_func = ((($depth_stencil115)) + 32|0);
 $21 = HEAP32[$depth_compare_func>>2]|0;
 $cmp116 = ($21|0)==(0);
 if ($cmp116) {
  $cond122 = 8;
 } else {
  $depth_stencil119 = ((($agg$result)) + 304|0);
  $depth_compare_func120 = ((($depth_stencil119)) + 32|0);
  $22 = HEAP32[$depth_compare_func120>>2]|0;
  $cond122 = $22;
 }
 $depth_stencil123 = ((($agg$result)) + 304|0);
 $depth_compare_func124 = ((($depth_stencil123)) + 32|0);
 HEAP32[$depth_compare_func124>>2] = $cond122;
 $blend = ((($agg$result)) + 348|0);
 $src_factor_rgb = ((($blend)) + 4|0);
 $23 = HEAP32[$src_factor_rgb>>2]|0;
 $cmp125 = ($23|0)==(0);
 if ($cmp125) {
  $cond131 = 2;
 } else {
  $blend128 = ((($agg$result)) + 348|0);
  $src_factor_rgb129 = ((($blend128)) + 4|0);
  $24 = HEAP32[$src_factor_rgb129>>2]|0;
  $cond131 = $24;
 }
 $blend132 = ((($agg$result)) + 348|0);
 $src_factor_rgb133 = ((($blend132)) + 4|0);
 HEAP32[$src_factor_rgb133>>2] = $cond131;
 $blend134 = ((($agg$result)) + 348|0);
 $dst_factor_rgb = ((($blend134)) + 8|0);
 $25 = HEAP32[$dst_factor_rgb>>2]|0;
 $cmp135 = ($25|0)==(0);
 if ($cmp135) {
  $cond141 = 1;
 } else {
  $blend138 = ((($agg$result)) + 348|0);
  $dst_factor_rgb139 = ((($blend138)) + 8|0);
  $26 = HEAP32[$dst_factor_rgb139>>2]|0;
  $cond141 = $26;
 }
 $blend142 = ((($agg$result)) + 348|0);
 $dst_factor_rgb143 = ((($blend142)) + 8|0);
 HEAP32[$dst_factor_rgb143>>2] = $cond141;
 $blend144 = ((($agg$result)) + 348|0);
 $op_rgb = ((($blend144)) + 12|0);
 $27 = HEAP32[$op_rgb>>2]|0;
 $cmp145 = ($27|0)==(0);
 if ($cmp145) {
  $cond151 = 1;
 } else {
  $blend148 = ((($agg$result)) + 348|0);
  $op_rgb149 = ((($blend148)) + 12|0);
  $28 = HEAP32[$op_rgb149>>2]|0;
  $cond151 = $28;
 }
 $blend152 = ((($agg$result)) + 348|0);
 $op_rgb153 = ((($blend152)) + 12|0);
 HEAP32[$op_rgb153>>2] = $cond151;
 $blend154 = ((($agg$result)) + 348|0);
 $src_factor_alpha = ((($blend154)) + 16|0);
 $29 = HEAP32[$src_factor_alpha>>2]|0;
 $cmp155 = ($29|0)==(0);
 if ($cmp155) {
  $cond161 = 2;
 } else {
  $blend158 = ((($agg$result)) + 348|0);
  $src_factor_alpha159 = ((($blend158)) + 16|0);
  $30 = HEAP32[$src_factor_alpha159>>2]|0;
  $cond161 = $30;
 }
 $blend162 = ((($agg$result)) + 348|0);
 $src_factor_alpha163 = ((($blend162)) + 16|0);
 HEAP32[$src_factor_alpha163>>2] = $cond161;
 $blend164 = ((($agg$result)) + 348|0);
 $dst_factor_alpha = ((($blend164)) + 20|0);
 $31 = HEAP32[$dst_factor_alpha>>2]|0;
 $cmp165 = ($31|0)==(0);
 if ($cmp165) {
  $cond171 = 1;
 } else {
  $blend168 = ((($agg$result)) + 348|0);
  $dst_factor_alpha169 = ((($blend168)) + 20|0);
  $32 = HEAP32[$dst_factor_alpha169>>2]|0;
  $cond171 = $32;
 }
 $blend172 = ((($agg$result)) + 348|0);
 $dst_factor_alpha173 = ((($blend172)) + 20|0);
 HEAP32[$dst_factor_alpha173>>2] = $cond171;
 $blend174 = ((($agg$result)) + 348|0);
 $op_alpha = ((($blend174)) + 24|0);
 $33 = HEAP32[$op_alpha>>2]|0;
 $cmp175 = ($33|0)==(0);
 if ($cmp175) {
  $cond181 = 1;
 } else {
  $blend178 = ((($agg$result)) + 348|0);
  $op_alpha179 = ((($blend178)) + 24|0);
  $34 = HEAP32[$op_alpha179>>2]|0;
  $cond181 = $34;
 }
 $blend182 = ((($agg$result)) + 348|0);
 $op_alpha183 = ((($blend182)) + 24|0);
 HEAP32[$op_alpha183>>2] = $cond181;
 $blend184 = ((($agg$result)) + 348|0);
 $color_write_mask = ((($blend184)) + 28|0);
 $35 = HEAP8[$color_write_mask>>0]|0;
 $conv = $35&255;
 $cmp185 = ($conv|0)==(16);
 $blend186 = ((($agg$result)) + 348|0);
 $color_write_mask187 = ((($blend186)) + 28|0);
 if ($cmp185) {
  HEAP8[$color_write_mask187>>0] = 0;
 } else {
  $36 = HEAP8[$color_write_mask187>>0]|0;
  $conv190 = $36&255;
  $cmp191 = ($conv190|0)==(0);
  if ($cmp191) {
   $cond198 = 15;
  } else {
   $blend194 = ((($agg$result)) + 348|0);
   $color_write_mask195 = ((($blend194)) + 28|0);
   $37 = HEAP8[$color_write_mask195>>0]|0;
   $conv196 = $37&255;
   $cond198 = $conv196;
  }
  $conv199 = $cond198&255;
  $blend200 = ((($agg$result)) + 348|0);
  $color_write_mask201 = ((($blend200)) + 28|0);
  HEAP8[$color_write_mask201>>0] = $conv199;
 }
 $blend202 = ((($agg$result)) + 348|0);
 $color_attachment_count = ((($blend202)) + 32|0);
 $38 = HEAP32[$color_attachment_count>>2]|0;
 $cmp203 = ($38|0)==(0);
 if ($cmp203) {
  $cond209 = 1;
 } else {
  $blend206 = ((($agg$result)) + 348|0);
  $color_attachment_count207 = ((($blend206)) + 32|0);
  $39 = HEAP32[$color_attachment_count207>>2]|0;
  $cond209 = $39;
 }
 $blend210 = ((($agg$result)) + 348|0);
 $color_attachment_count211 = ((($blend210)) + 32|0);
 HEAP32[$color_attachment_count211>>2] = $cond209;
 $blend212 = ((($agg$result)) + 348|0);
 $color_format = ((($blend212)) + 36|0);
 $40 = HEAP32[$color_format>>2]|0;
 $cmp213 = ($40|0)==(0);
 if ($cmp213) {
  $call = (__ZL36_sg_default_rendertarget_colorformatv()|0);
  $cond219 = $call;
 } else {
  $blend216 = ((($agg$result)) + 348|0);
  $color_format217 = ((($blend216)) + 36|0);
  $41 = HEAP32[$color_format217>>2]|0;
  $cond219 = $41;
 }
 $blend220 = ((($agg$result)) + 348|0);
 $color_format221 = ((($blend220)) + 36|0);
 HEAP32[$color_format221>>2] = $cond219;
 $blend222 = ((($agg$result)) + 348|0);
 $depth_format = ((($blend222)) + 40|0);
 $42 = HEAP32[$depth_format>>2]|0;
 $cmp223 = ($42|0)==(0);
 if ($cmp223) {
  $call225 = (__ZL36_sg_default_rendertarget_depthformatv()|0);
  $cond230 = $call225;
 } else {
  $blend227 = ((($agg$result)) + 348|0);
  $depth_format228 = ((($blend227)) + 40|0);
  $43 = HEAP32[$depth_format228>>2]|0;
  $cond230 = $43;
 }
 $blend231 = ((($agg$result)) + 348|0);
 $depth_format232 = ((($blend231)) + 40|0);
 HEAP32[$depth_format232>>2] = $cond230;
 $rasterizer = ((($agg$result)) + 408|0);
 $cull_mode = ((($rasterizer)) + 4|0);
 $44 = HEAP32[$cull_mode>>2]|0;
 $cmp233 = ($44|0)==(0);
 if ($cmp233) {
  $cond239 = 1;
 } else {
  $rasterizer236 = ((($agg$result)) + 408|0);
  $cull_mode237 = ((($rasterizer236)) + 4|0);
  $45 = HEAP32[$cull_mode237>>2]|0;
  $cond239 = $45;
 }
 $rasterizer240 = ((($agg$result)) + 408|0);
 $cull_mode241 = ((($rasterizer240)) + 4|0);
 HEAP32[$cull_mode241>>2] = $cond239;
 $rasterizer242 = ((($agg$result)) + 408|0);
 $face_winding = ((($rasterizer242)) + 8|0);
 $46 = HEAP32[$face_winding>>2]|0;
 $cmp243 = ($46|0)==(0);
 if ($cmp243) {
  $cond249 = 2;
 } else {
  $rasterizer246 = ((($agg$result)) + 408|0);
  $face_winding247 = ((($rasterizer246)) + 8|0);
  $47 = HEAP32[$face_winding247>>2]|0;
  $cond249 = $47;
 }
 $rasterizer250 = ((($agg$result)) + 408|0);
 $face_winding251 = ((($rasterizer250)) + 8|0);
 HEAP32[$face_winding251>>2] = $cond249;
 $rasterizer252 = ((($agg$result)) + 408|0);
 $sample_count = ((($rasterizer252)) + 12|0);
 $48 = HEAP32[$sample_count>>2]|0;
 $cmp253 = ($48|0)==(0);
 if ($cmp253) {
  $cond259 = 1;
 } else {
  $rasterizer256 = ((($agg$result)) + 408|0);
  $sample_count257 = ((($rasterizer256)) + 12|0);
  $49 = HEAP32[$sample_count257>>2]|0;
  $cond259 = $49;
 }
 $rasterizer260 = ((($agg$result)) + 408|0);
 $sample_count261 = ((($rasterizer260)) + 12|0);
 HEAP32[$sample_count261>>2] = $cond259;
 $attr_index = 0;
 while(1) {
  $50 = $attr_index;
  $cmp262 = ($50|0)<(16);
  if (!($cmp262)) {
   label = 59;
   break;
  }
  $layout = ((($agg$result)) + 4|0);
  $attrs = ((($layout)) + 96|0);
  $51 = $attr_index;
  $arrayidx = (($attrs) + (($51*12)|0)|0);
  $a_desc = $arrayidx;
  $52 = $a_desc;
  $format = ((($52)) + 8|0);
  $53 = HEAP32[$format>>2]|0;
  $cmp263 = ($53|0)==(0);
  if ($cmp263) {
   label = 59;
   break;
  }
  $54 = $a_desc;
  $55 = HEAP32[$54>>2]|0;
  $cmp266 = ($55|0)>=(0);
  if (!($cmp266)) {
   label = 53;
   break;
  }
  $56 = $a_desc;
  $57 = HEAP32[$56>>2]|0;
  $cmp268 = ($57|0)<(8);
  if (!($cmp268)) {
   label = 53;
   break;
  }
  $layout269 = ((($agg$result)) + 4|0);
  $58 = $a_desc;
  $59 = HEAP32[$58>>2]|0;
  $arrayidx271 = (($layout269) + (($59*12)|0)|0);
  $b_desc = $arrayidx271;
  $60 = $b_desc;
  $step_func = ((($60)) + 4|0);
  $61 = HEAP32[$step_func>>2]|0;
  $cmp272 = ($61|0)==(0);
  if ($cmp272) {
   $cond277 = 1;
  } else {
   $62 = $b_desc;
   $step_func275 = ((($62)) + 4|0);
   $63 = HEAP32[$step_func275>>2]|0;
   $cond277 = $63;
  }
  $64 = $b_desc;
  $step_func278 = ((($64)) + 4|0);
  HEAP32[$step_func278>>2] = $cond277;
  $65 = $b_desc;
  $step_rate = ((($65)) + 8|0);
  $66 = HEAP32[$step_rate>>2]|0;
  $cmp279 = ($66|0)==(0);
  if ($cmp279) {
   $cond284 = 1;
  } else {
   $67 = $b_desc;
   $step_rate282 = ((($67)) + 8|0);
   $68 = HEAP32[$step_rate282>>2]|0;
   $cond284 = $68;
  }
  $69 = $b_desc;
  $step_rate285 = ((($69)) + 8|0);
  HEAP32[$step_rate285>>2] = $cond284;
  $70 = $attr_index;
  $inc = (($70) + 1)|0;
  $attr_index = $inc;
 }
 if ((label|0) == 53) {
  ___assert_fail((19671|0),(9686|0),10601,(20176|0));
  // unreachable;
 }
 else if ((label|0) == 59) {
  ;HEAP32[$auto_offset>>2]=0|0;HEAP32[$auto_offset+4>>2]=0|0;HEAP32[$auto_offset+8>>2]=0|0;HEAP32[$auto_offset+12>>2]=0|0;HEAP32[$auto_offset+16>>2]=0|0;HEAP32[$auto_offset+20>>2]=0|0;HEAP32[$auto_offset+24>>2]=0|0;HEAP32[$auto_offset+28>>2]=0|0;
  $use_auto_offset = 1;
  $attr_index286 = 0;
  while(1) {
   $71 = $attr_index286;
   $cmp288 = ($71|0)<(16);
   if (!($cmp288)) {
    break;
   }
   $layout290 = ((($agg$result)) + 4|0);
   $attrs291 = ((($layout290)) + 96|0);
   $72 = $attr_index286;
   $arrayidx292 = (($attrs291) + (($72*12)|0)|0);
   $offset = ((($arrayidx292)) + 4|0);
   $73 = HEAP32[$offset>>2]|0;
   $cmp293 = ($73|0)!=(0);
   if ($cmp293) {
    $use_auto_offset = 0;
   }
   $74 = $attr_index286;
   $inc297 = (($74) + 1)|0;
   $attr_index286 = $inc297;
  }
  $attr_index299 = 0;
  while(1) {
   $75 = $attr_index299;
   $cmp301 = ($75|0)<(16);
   if (!($cmp301)) {
    label = 73;
    break;
   }
   $layout304 = ((($agg$result)) + 4|0);
   $attrs305 = ((($layout304)) + 96|0);
   $76 = $attr_index299;
   $arrayidx306 = (($attrs305) + (($76*12)|0)|0);
   $a_desc303 = $arrayidx306;
   $77 = $a_desc303;
   $format307 = ((($77)) + 8|0);
   $78 = HEAP32[$format307>>2]|0;
   $cmp308 = ($78|0)==(0);
   if ($cmp308) {
    label = 73;
    break;
   }
   $79 = $a_desc303;
   $80 = HEAP32[$79>>2]|0;
   $cmp312 = ($80|0)>=(0);
   if (!($cmp312)) {
    label = 69;
    break;
   }
   $81 = $a_desc303;
   $82 = HEAP32[$81>>2]|0;
   $cmp315 = ($82|0)<(8);
   if (!($cmp315)) {
    label = 69;
    break;
   }
   $83 = $use_auto_offset;
   $tobool = $83&1;
   if ($tobool) {
    $84 = $a_desc303;
    $85 = HEAP32[$84>>2]|0;
    $arrayidx320 = (($auto_offset) + ($85<<2)|0);
    $86 = HEAP32[$arrayidx320>>2]|0;
    $87 = $a_desc303;
    $offset321 = ((($87)) + 4|0);
    HEAP32[$offset321>>2] = $86;
   }
   $88 = $a_desc303;
   $format323 = ((($88)) + 8|0);
   $89 = HEAP32[$format323>>2]|0;
   $call324 = (__ZL25_sg_vertexformat_bytesize16sg_vertex_format($89)|0);
   $90 = $a_desc303;
   $91 = HEAP32[$90>>2]|0;
   $arrayidx326 = (($auto_offset) + ($91<<2)|0);
   $92 = HEAP32[$arrayidx326>>2]|0;
   $add = (($92) + ($call324))|0;
   HEAP32[$arrayidx326>>2] = $add;
   $93 = $attr_index299;
   $inc328 = (($93) + 1)|0;
   $attr_index299 = $inc328;
  }
  if ((label|0) == 69) {
   ___assert_fail((19671|0),(9686|0),10622,(20176|0));
   // unreachable;
  }
  else if ((label|0) == 73) {
   $buf_index = 0;
   while(1) {
    $94 = $buf_index;
    $cmp331 = ($94|0)<(8);
    if (!($cmp331)) {
     break;
    }
    $layout333 = ((($agg$result)) + 4|0);
    $95 = $buf_index;
    $arrayidx335 = (($layout333) + (($95*12)|0)|0);
    $l_desc = $arrayidx335;
    $96 = $l_desc;
    $97 = HEAP32[$96>>2]|0;
    $cmp336 = ($97|0)==(0);
    if ($cmp336) {
     $98 = $buf_index;
     $arrayidx338 = (($auto_offset) + ($98<<2)|0);
     $99 = HEAP32[$arrayidx338>>2]|0;
     $100 = $l_desc;
     HEAP32[$100>>2] = $99;
    }
    $101 = $buf_index;
    $inc342 = (($101) + 1)|0;
    $buf_index = $inc342;
   }
   STACKTOP = sp;return;
  }
 }
}
function __ZL17_sg_init_pipeline11sg_pipelinePK16sg_pipeline_desc($pip_id,$desc) {
 $pip_id = $pip_id|0;
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $call = 0, $call10 = 0, $call18 = 0, $call8 = 0, $cmp = 0, $cmp15 = 0, $cmp25 = 0, $cmp28 = 0, $cmp4 = 0, $ctx_id = 0, $desc$addr = 0, $or$cond = 0, $pip = 0, $shader = 0, $shd = 0, $state = 0, $state14 = 0;
 var $state20 = 0, $state22 = 0, $state24 = 0, $state27 = 0, $tobool = 0, $tobool11 = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $desc$addr = $desc;
 $0 = HEAP32[$pip_id>>2]|0;
 $cmp = ($0|0)!=(0);
 $1 = $desc$addr;
 $tobool = ($1|0)!=(0|0);
 $or$cond = $cmp & $tobool;
 if (!($or$cond)) {
  ___assert_fail((19295|0),(9686|0),10754,(19330|0));
  // unreachable;
 }
 $2 = HEAP32[$pip_id>>2]|0;
 $call = (__ZL19_sg_lookup_pipelinePK11_sg_pools_tj((33568),$2)|0);
 $pip = $call;
 $3 = $pip;
 $tobool2 = ($3|0)!=(0|0);
 if (!($tobool2)) {
  ___assert_fail((19348|0),(9686|0),10756,(19330|0));
  // unreachable;
 }
 $4 = $pip;
 $state = ((($4)) + 8|0);
 $5 = HEAP32[$state>>2]|0;
 $cmp4 = ($5|0)==(1);
 if (!($cmp4)) {
  ___assert_fail((19348|0),(9686|0),10756,(19330|0));
  // unreachable;
 }
 $6 = HEAP32[(33548)>>2]|0;
 $7 = $pip;
 $ctx_id = ((($7)) + 4|0);
 HEAP32[$ctx_id>>2] = $6;
 $8 = $desc$addr;
 $call8 = (__ZL26_sg_validate_pipeline_descPK16sg_pipeline_desc($8)|0);
 do {
  if ($call8) {
   $9 = $desc$addr;
   $shader = ((($9)) + 292|0);
   $10 = HEAP32[$shader>>2]|0;
   $call10 = (__ZL17_sg_lookup_shaderPK11_sg_pools_tj((33568),$10)|0);
   $shd = $call10;
   $11 = $shd;
   $tobool11 = ($11|0)!=(0|0);
   if (!($tobool11)) {
    ___assert_fail((19397|0),(9686|0),10760,(19330|0));
    // unreachable;
   }
   $12 = $shd;
   $state14 = ((($12)) + 8|0);
   $13 = HEAP32[$state14>>2]|0;
   $cmp15 = ($13|0)==(2);
   if ($cmp15) {
    $14 = $pip;
    $15 = $shd;
    $16 = $desc$addr;
    $call18 = (__ZL19_sg_create_pipelineP14_sg_pipeline_tP12_sg_shader_tPK16sg_pipeline_desc($14,$15,$16)|0);
    $17 = $pip;
    $state20 = ((($17)) + 8|0);
    HEAP32[$state20>>2] = $call18;
    break;
   } else {
    ___assert_fail((19397|0),(9686|0),10760,(19330|0));
    // unreachable;
   }
  } else {
   $18 = $pip;
   $state22 = ((($18)) + 8|0);
   HEAP32[$state22>>2] = 3;
  }
 } while(0);
 $19 = $pip;
 $state24 = ((($19)) + 8|0);
 $20 = HEAP32[$state24>>2]|0;
 $cmp25 = ($20|0)==(2);
 if ($cmp25) {
  STACKTOP = sp;return;
 }
 $21 = $pip;
 $state27 = ((($21)) + 8|0);
 $22 = HEAP32[$state27>>2]|0;
 $cmp28 = ($22|0)==(3);
 if ($cmp28) {
  STACKTOP = sp;return;
 } else {
  ___assert_fail((19446|0),(9686|0),10766,(19330|0));
  // unreachable;
 }
}
function __ZL19_sg_lookup_pipelinePK11_sg_pools_tj($p,$pip_id) {
 $p = $p|0;
 $pip_id = $pip_id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $call = 0, $cmp = 0, $cmp1 = 0, $p$addr = 0, $pip = 0, $pip_id$addr = 0, $retval = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $p$addr = $p;
 $pip_id$addr = $pip_id;
 $0 = $p$addr;
 $tobool = ($0|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((10758|0),(9686|0),9736,(20050|0));
  // unreachable;
 }
 $1 = $pip_id$addr;
 $cmp = (0)!=($1|0);
 if ($cmp) {
  $2 = $p$addr;
  $3 = $pip_id$addr;
  $call = (__ZL15_sg_pipeline_atPK11_sg_pools_tj($2,$3)|0);
  $pip = $call;
  $4 = $pip;
  $5 = HEAP32[$4>>2]|0;
  $6 = $pip_id$addr;
  $cmp1 = ($5|0)==($6|0);
  if ($cmp1) {
   $7 = $pip;
   $retval = $7;
   $8 = $retval;
   STACKTOP = sp;return ($8|0);
  }
 }
 $retval = 0;
 $8 = $retval;
 STACKTOP = sp;return ($8|0);
}
function __ZL26_sg_validate_pipeline_descPK16sg_pipeline_desc($desc) {
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_end_canary = 0, $a_desc = 0, $and = 0, $arrayidx = 0, $arrayidx19 = 0, $arrayidx29 = 0, $attr_index = 0;
 var $attrs = 0, $attrs18 = 0, $attrs28 = 0, $attrs_cont = 0, $buf_index = 0, $call = 0, $call30 = 0, $call34 = 0, $cmp = 0, $cmp1 = 0, $cmp10 = 0, $cmp13 = 0, $cmp15 = 0, $cmp2 = 0, $cmp21 = 0, $cmp25 = 0, $cmp6 = 0, $cmp7 = 0, $cmp8 = 0, $desc$addr = 0;
 var $format = 0, $format20 = 0, $inc = 0, $inc32 = 0, $l_desc = 0, $layout = 0, $layout17 = 0, $lnot = 0, $shader = 0, $shader3 = 0, $shd = 0, $state = 0, $tobool = 0, $tobool24 = 0, $tobool5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $desc$addr = $desc;
 $0 = $desc$addr;
 $tobool = ($0|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((9681|0),(9686|0),10151,(19973|0));
  // unreachable;
 }
 __ZL18_sg_validate_beginv();
 $1 = $desc$addr;
 $2 = HEAP32[$1>>2]|0;
 $cmp = ($2|0)==(0);
 __ZL12_sg_validateb20_sg_validate_error_t($cmp,31);
 $3 = $desc$addr;
 $_end_canary = ((($3)) + 440|0);
 $4 = HEAP32[$_end_canary>>2]|0;
 $cmp1 = ($4|0)==(0);
 __ZL12_sg_validateb20_sg_validate_error_t($cmp1,31);
 $5 = $desc$addr;
 $shader = ((($5)) + 292|0);
 $6 = HEAP32[$shader>>2]|0;
 $cmp2 = ($6|0)!=(0);
 __ZL12_sg_validateb20_sg_validate_error_t($cmp2,32);
 $7 = $desc$addr;
 $shader3 = ((($7)) + 292|0);
 $8 = HEAP32[$shader3>>2]|0;
 $call = (__ZL17_sg_lookup_shaderPK11_sg_pools_tj((33568),$8)|0);
 $shd = $call;
 $9 = $shd;
 $tobool5 = ($9|0)!=(0|0);
 if ($tobool5) {
  $10 = $shd;
  $state = ((($10)) + 8|0);
  $11 = HEAP32[$state>>2]|0;
  $cmp6 = ($11|0)==(2);
  $12 = $cmp6;
 } else {
  $12 = 0;
 }
 __ZL12_sg_validateb20_sg_validate_error_t($12,32);
 $buf_index = 0;
 while(1) {
  $13 = $buf_index;
  $cmp7 = ($13|0)<(8);
  $14 = $desc$addr;
  $layout = ((($14)) + 4|0);
  if (!($cmp7)) {
   break;
  }
  $15 = $buf_index;
  $arrayidx = (($layout) + (($15*12)|0)|0);
  $l_desc = $arrayidx;
  $16 = $l_desc;
  $17 = HEAP32[$16>>2]|0;
  $cmp8 = ($17|0)==(0);
  if (!($cmp8)) {
   $18 = $l_desc;
   $19 = HEAP32[$18>>2]|0;
   $and = $19 & 3;
   $cmp10 = ($and|0)==(0);
   __ZL12_sg_validateb20_sg_validate_error_t($cmp10,34);
  }
  $20 = $buf_index;
  $inc = (($20) + 1)|0;
  $buf_index = $inc;
 }
 $attrs = ((($layout)) + 96|0);
 $format = ((($attrs)) + 8|0);
 $21 = HEAP32[$format>>2]|0;
 $cmp13 = ($21|0)!=(0);
 __ZL12_sg_validateb20_sg_validate_error_t($cmp13,33);
 $attrs_cont = 1;
 $attr_index = 0;
 while(1) {
  $22 = $attr_index;
  $cmp15 = ($22|0)<(16);
  if (!($cmp15)) {
   label = 18;
   break;
  }
  $23 = $desc$addr;
  $layout17 = ((($23)) + 4|0);
  $attrs18 = ((($layout17)) + 96|0);
  $24 = $attr_index;
  $arrayidx19 = (($attrs18) + (($24*12)|0)|0);
  $a_desc = $arrayidx19;
  $25 = $a_desc;
  $format20 = ((($25)) + 8|0);
  $26 = HEAP32[$format20>>2]|0;
  $cmp21 = ($26|0)==(0);
  if ($cmp21) {
   $attrs_cont = 0;
  } else {
   $27 = $attrs_cont;
   $tobool24 = $27&1;
   __ZL12_sg_validateb20_sg_validate_error_t($tobool24,33);
   $28 = $a_desc;
   $29 = HEAP32[$28>>2]|0;
   $cmp25 = ($29|0)<(8);
   if (!($cmp25)) {
    label = 15;
    break;
   }
   $30 = $shd;
   $attrs28 = ((($30)) + 16|0);
   $31 = $attr_index;
   $arrayidx29 = (($attrs28) + ($31<<4)|0);
   $call30 = (__ZL12_sg_stremptyPK9_sg_str_t($arrayidx29)|0);
   $lnot = $call30 ^ 1;
   __ZL12_sg_validateb20_sg_validate_error_t($lnot,35);
  }
  $32 = $attr_index;
  $inc32 = (($32) + 1)|0;
  $attr_index = $inc32;
 }
 if ((label|0) == 15) {
  ___assert_fail((20000|0),(9686|0),10174,(19973|0));
  // unreachable;
 }
 else if ((label|0) == 18) {
  $call34 = (__ZL16_sg_validate_endv()|0);
  STACKTOP = sp;return ($call34|0);
 }
 return (0)|0;
}
function __ZL19_sg_create_pipelineP14_sg_pipeline_tP12_sg_shader_tPK16sg_pipeline_desc($pip,$shd,$desc) {
 $pip = $pip|0;
 $shd = $shd|0;
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a_desc = 0, $arrayidx = 0, $arrayidx106 = 0, $arrayidx37 = 0, $arrayidx47 = 0, $arrayidx51 = 0, $arrayidx56 = 0, $arrayidx67 = 0, $arrayidx95 = 0, $arrayidx99 = 0, $attr_index = 0;
 var $attr_index33 = 0, $attr_loc = 0, $attrs = 0, $attrs105 = 0, $attrs50 = 0, $attrs55 = 0, $attrs98 = 0, $blend = 0, $blend23 = 0, $blend25 = 0, $blend29 = 0, $blend30 = 0, $call = 0, $call101 = 0, $call108 = 0, $call58 = 0, $call59 = 0, $call88 = 0, $call91 = 0, $call93 = 0;
 var $cmp = 0, $cmp11 = 0, $cmp32 = 0, $cmp35 = 0, $cmp38 = 0, $cmp39 = 0, $cmp42 = 0, $cmp61 = 0, $cmp64 = 0, $cmp69 = 0, $cmp75 = 0, $cmp80 = 0, $color_attachment_count = 0, $color_attachment_count22 = 0, $color_format = 0, $color_format24 = 0, $conv = 0, $conv73 = 0, $conv77 = 0, $conv84 = 0;
 var $conv89 = 0, $depth_format = 0, $depth_format26 = 0, $depth_stencil = 0, $depth_stencil28 = 0, $desc$addr = 0, $divisor = 0, $divisor78 = 0, $format = 0, $format87 = 0, $format90 = 0, $format92 = 0, $gl_attr = 0, $gl_attrs = 0, $gl_attrs66 = 0, $gl_prog = 0, $gl_prog54 = 0, $inc = 0, $inc112 = 0, $index_type = 0;
 var $index_type21 = 0, $l_desc = 0, $layout = 0, $layout45 = 0, $normalized = 0, $offset = 0, $offset86 = 0, $or$cond = 0, $or$cond1 = 0, $pip$addr = 0, $primitive_type = 0, $primitive_type20 = 0, $rast = 0, $rasterizer = 0, $rasterizer31 = 0, $sample_count = 0, $sample_count27 = 0, $shader = 0, $shader17 = 0, $shader18 = 0;
 var $shader53 = 0, $shader8 = 0, $shader_id = 0, $shader_id19 = 0, $shd$addr = 0, $size = 0, $step_func = 0, $step_func48 = 0, $step_rate = 0, $step_rate49 = 0, $stride85 = 0, $tobool = 0, $tobool1 = 0, $tobool102 = 0, $tobool14 = 0, $tobool3 = 0, $tobool4 = 0, $type = 0, $vertex_layout_valid = 0, dest = 0;
 var label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $pip$addr = $pip;
 $shd$addr = $shd;
 $desc$addr = $desc;
 $0 = $pip$addr;
 $tobool = ($0|0)!=(0|0);
 $1 = $shd$addr;
 $tobool1 = ($1|0)!=(0|0);
 $or$cond = $tobool & $tobool1;
 $2 = $desc$addr;
 $tobool3 = ($2|0)!=(0|0);
 $or$cond1 = $or$cond & $tobool3;
 if (!($or$cond1)) {
  ___assert_fail((19536|0),(9686|0),5473,(19555|0));
  // unreachable;
 }
 $3 = $pip$addr;
 $shader = ((($3)) + 12|0);
 $4 = HEAP32[$shader>>2]|0;
 $tobool4 = ($4|0)!=(0|0);
 if ($tobool4) {
  ___assert_fail((19575|0),(9686|0),5474,(19555|0));
  // unreachable;
 }
 $5 = $pip$addr;
 $shader_id = ((($5)) + 16|0);
 $6 = HEAP32[$shader_id>>2]|0;
 $cmp = ($6|0)==(0);
 if (!($cmp)) {
  ___assert_fail((19575|0),(9686|0),5474,(19555|0));
  // unreachable;
 }
 $7 = $desc$addr;
 $shader8 = ((($7)) + 292|0);
 $8 = HEAP32[$shader8>>2]|0;
 $9 = $shd$addr;
 $10 = HEAP32[$9>>2]|0;
 $cmp11 = ($8|0)==($10|0);
 if (!($cmp11)) {
  ___assert_fail((19626|0),(9686|0),5475,(19555|0));
  // unreachable;
 }
 $11 = $shd$addr;
 $gl_prog = ((($11)) + 12|0);
 $12 = HEAP32[$gl_prog>>2]|0;
 $tobool14 = ($12|0)!=(0);
 if (!($tobool14)) {
  ___assert_fail((19658|0),(9686|0),5476,(19555|0));
  // unreachable;
 }
 $13 = $shd$addr;
 $14 = $pip$addr;
 $shader17 = ((($14)) + 12|0);
 HEAP32[$shader17>>2] = $13;
 $15 = $desc$addr;
 $shader18 = ((($15)) + 292|0);
 $16 = $pip$addr;
 $shader_id19 = ((($16)) + 16|0);
 ;HEAP32[$shader_id19>>2]=HEAP32[$shader18>>2]|0;
 $17 = $desc$addr;
 $primitive_type = ((($17)) + 296|0);
 $18 = HEAP32[$primitive_type>>2]|0;
 $19 = $pip$addr;
 $primitive_type20 = ((($19)) + 20|0);
 HEAP32[$primitive_type20>>2] = $18;
 $20 = $desc$addr;
 $index_type = ((($20)) + 300|0);
 $21 = HEAP32[$index_type>>2]|0;
 $22 = $pip$addr;
 $index_type21 = ((($22)) + 24|0);
 HEAP32[$index_type21>>2] = $21;
 $23 = $desc$addr;
 $blend = ((($23)) + 348|0);
 $color_attachment_count = ((($blend)) + 32|0);
 $24 = HEAP32[$color_attachment_count>>2]|0;
 $25 = $pip$addr;
 $color_attachment_count22 = ((($25)) + 36|0);
 HEAP32[$color_attachment_count22>>2] = $24;
 $26 = $desc$addr;
 $blend23 = ((($26)) + 348|0);
 $color_format = ((($blend23)) + 36|0);
 $27 = HEAP32[$color_format>>2]|0;
 $28 = $pip$addr;
 $color_format24 = ((($28)) + 40|0);
 HEAP32[$color_format24>>2] = $27;
 $29 = $desc$addr;
 $blend25 = ((($29)) + 348|0);
 $depth_format = ((($blend25)) + 40|0);
 $30 = HEAP32[$depth_format>>2]|0;
 $31 = $pip$addr;
 $depth_format26 = ((($31)) + 44|0);
 HEAP32[$depth_format26>>2] = $30;
 $32 = $desc$addr;
 $rasterizer = ((($32)) + 408|0);
 $sample_count = ((($rasterizer)) + 12|0);
 $33 = HEAP32[$sample_count>>2]|0;
 $34 = $pip$addr;
 $sample_count27 = ((($34)) + 48|0);
 HEAP32[$sample_count27>>2] = $33;
 $35 = $desc$addr;
 $depth_stencil = ((($35)) + 304|0);
 $36 = $pip$addr;
 $depth_stencil28 = ((($36)) + 308|0);
 dest=$depth_stencil28; src=$depth_stencil; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $37 = $desc$addr;
 $blend29 = ((($37)) + 348|0);
 $38 = $pip$addr;
 $blend30 = ((($38)) + 352|0);
 dest=$blend30; src=$blend29; stop=dest+60|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $39 = $desc$addr;
 $rasterizer31 = ((($39)) + 408|0);
 $40 = $pip$addr;
 $rast = ((($40)) + 412|0);
 ;HEAP32[$rast>>2]=HEAP32[$rasterizer31>>2]|0;HEAP32[$rast+4>>2]=HEAP32[$rasterizer31+4>>2]|0;HEAP32[$rast+8>>2]=HEAP32[$rasterizer31+8>>2]|0;HEAP32[$rast+12>>2]=HEAP32[$rasterizer31+12>>2]|0;HEAP32[$rast+16>>2]=HEAP32[$rasterizer31+16>>2]|0;HEAP32[$rast+20>>2]=HEAP32[$rasterizer31+20>>2]|0;HEAP32[$rast+24>>2]=HEAP32[$rasterizer31+24>>2]|0;
 $attr_index = 0;
 while(1) {
  $41 = $attr_index;
  $cmp32 = ($41|0)<(16);
  if (!($cmp32)) {
   break;
  }
  $42 = $pip$addr;
  $gl_attrs = ((($42)) + 52|0);
  $43 = $attr_index;
  $arrayidx = (($gl_attrs) + ($43<<4)|0);
  HEAP8[$arrayidx>>0] = -1;
  $44 = $attr_index;
  $inc = (($44) + 1)|0;
  $attr_index = $inc;
 }
 $attr_index33 = 0;
 while(1) {
  $45 = $attr_index33;
  $46 = HEAP32[(33720)>>2]|0;
  $cmp35 = ($45>>>0)<($46>>>0);
  if (!($cmp35)) {
   label = 36;
   break;
  }
  $47 = $desc$addr;
  $layout = ((($47)) + 4|0);
  $attrs = ((($layout)) + 96|0);
  $48 = $attr_index33;
  $arrayidx37 = (($attrs) + (($48*12)|0)|0);
  $a_desc = $arrayidx37;
  $49 = $a_desc;
  $format = ((($49)) + 8|0);
  $50 = HEAP32[$format>>2]|0;
  $cmp38 = ($50|0)==(0);
  if ($cmp38) {
   label = 36;
   break;
  }
  $51 = $a_desc;
  $52 = HEAP32[$51>>2]|0;
  $cmp39 = ($52|0)>=(0);
  if (!($cmp39)) {
   label = 18;
   break;
  }
  $53 = $a_desc;
  $54 = HEAP32[$53>>2]|0;
  $cmp42 = ($54|0)<(8);
  if (!($cmp42)) {
   label = 18;
   break;
  }
  $55 = $desc$addr;
  $layout45 = ((($55)) + 4|0);
  $56 = $a_desc;
  $57 = HEAP32[$56>>2]|0;
  $arrayidx47 = (($layout45) + (($57*12)|0)|0);
  $l_desc = $arrayidx47;
  $58 = $l_desc;
  $step_func48 = ((($58)) + 4|0);
  $59 = HEAP32[$step_func48>>2]|0;
  $step_func = $59;
  $60 = $l_desc;
  $step_rate49 = ((($60)) + 8|0);
  $61 = HEAP32[$step_rate49>>2]|0;
  $step_rate = $61;
  $62 = $attr_index33;
  $attr_loc = $62;
  $63 = $shd$addr;
  $attrs50 = ((($63)) + 16|0);
  $64 = $attr_index33;
  $arrayidx51 = (($attrs50) + ($64<<4)|0);
  $call = (__ZL12_sg_stremptyPK9_sg_str_t($arrayidx51)|0);
  if (!($call)) {
   $65 = $pip$addr;
   $shader53 = ((($65)) + 12|0);
   $66 = HEAP32[$shader53>>2]|0;
   $gl_prog54 = ((($66)) + 12|0);
   $67 = HEAP32[$gl_prog54>>2]|0;
   $68 = $shd$addr;
   $attrs55 = ((($68)) + 16|0);
   $69 = $attr_index33;
   $arrayidx56 = (($attrs55) + ($69<<4)|0);
   $call58 = (__ZL10_sg_strptrPK9_sg_str_t($arrayidx56)|0);
   $call59 = (_glGetAttribLocation(($67|0),($call58|0))|0);
   $attr_loc = $call59;
  }
  $70 = $attr_loc;
  $71 = HEAP32[(33720)>>2]|0;
  $cmp61 = ($70|0)<($71|0);
  if (!($cmp61)) {
   label = 22;
   break;
  }
  $72 = $attr_loc;
  $cmp64 = ($72|0)!=(-1);
  if ($cmp64) {
   $73 = $pip$addr;
   $gl_attrs66 = ((($73)) + 52|0);
   $74 = $attr_loc;
   $arrayidx67 = (($gl_attrs66) + ($74<<4)|0);
   $gl_attr = $arrayidx67;
   $75 = $gl_attr;
   $76 = HEAP8[$75>>0]|0;
   $conv = $76 << 24 >> 24;
   $cmp69 = ($conv|0)==(-1);
   if (!($cmp69)) {
    label = 25;
    break;
   }
   $77 = $a_desc;
   $78 = HEAP32[$77>>2]|0;
   $conv73 = $78&255;
   $79 = $gl_attr;
   HEAP8[$79>>0] = $conv73;
   $80 = $step_func;
   $cmp75 = ($80|0)==(1);
   if ($cmp75) {
    $81 = $gl_attr;
    $divisor = ((($81)) + 1|0);
    HEAP8[$divisor>>0] = 0;
   } else {
    $82 = $step_rate;
    $conv77 = $82&255;
    $83 = $gl_attr;
    $divisor78 = ((($83)) + 1|0);
    HEAP8[$divisor78>>0] = $conv77;
   }
   $84 = $l_desc;
   $85 = HEAP32[$84>>2]|0;
   $cmp80 = ($85|0)>(0);
   if (!($cmp80)) {
    label = 30;
    break;
   }
   $86 = $l_desc;
   $87 = HEAP32[$86>>2]|0;
   $conv84 = $87&255;
   $88 = $gl_attr;
   $stride85 = ((($88)) + 2|0);
   HEAP8[$stride85>>0] = $conv84;
   $89 = $a_desc;
   $offset = ((($89)) + 4|0);
   $90 = HEAP32[$offset>>2]|0;
   $91 = $gl_attr;
   $offset86 = ((($91)) + 8|0);
   HEAP32[$offset86>>2] = $90;
   $92 = $a_desc;
   $format87 = ((($92)) + 8|0);
   $93 = HEAP32[$format87>>2]|0;
   $call88 = (__ZL24_sg_gl_vertexformat_size16sg_vertex_format($93)|0);
   $conv89 = $call88&255;
   $94 = $gl_attr;
   $size = ((($94)) + 3|0);
   HEAP8[$size>>0] = $conv89;
   $95 = $a_desc;
   $format90 = ((($95)) + 8|0);
   $96 = HEAP32[$format90>>2]|0;
   $call91 = (__ZL24_sg_gl_vertexformat_type16sg_vertex_format($96)|0);
   $97 = $gl_attr;
   $type = ((($97)) + 12|0);
   HEAP32[$type>>2] = $call91;
   $98 = $a_desc;
   $format92 = ((($98)) + 8|0);
   $99 = HEAP32[$format92>>2]|0;
   $call93 = (__ZL30_sg_gl_vertexformat_normalized16sg_vertex_format($99)|0);
   $100 = $gl_attr;
   $normalized = ((($100)) + 4|0);
   HEAP8[$normalized>>0] = $call93;
   $101 = $pip$addr;
   $vertex_layout_valid = ((($101)) + 28|0);
   $102 = $a_desc;
   $103 = HEAP32[$102>>2]|0;
   $arrayidx95 = (($vertex_layout_valid) + ($103)|0);
   HEAP8[$arrayidx95>>0] = 1;
  } else {
   (_puts(19843)|0);
   $104 = $shd$addr;
   $attrs98 = ((($104)) + 16|0);
   $105 = $attr_index33;
   $arrayidx99 = (($attrs98) + ($105<<4)|0);
   $call101 = (__ZL10_sg_strptrPK9_sg_str_t($arrayidx99)|0);
   $tobool102 = ($call101|0)!=(0|0);
   if (!($tobool102)) {
    label = 33;
    break;
   }
   $106 = $shd$addr;
   $attrs105 = ((($106)) + 16|0);
   $107 = $attr_index33;
   $arrayidx106 = (($attrs105) + ($107<<4)|0);
   $call108 = (__ZL10_sg_strptrPK9_sg_str_t($arrayidx106)|0);
   (_puts($call108)|0);
  }
  $108 = $attr_index33;
  $inc112 = (($108) + 1)|0;
  $attr_index33 = $inc112;
 }
 if ((label|0) == 18) {
  ___assert_fail((19671|0),(9686|0),5498,(19555|0));
  // unreachable;
 }
 else if ((label|0) == 22) {
  ___assert_fail((19754|0),(9686|0),5506,(19555|0));
  // unreachable;
 }
 else if ((label|0) == 25) {
  ___assert_fail((19800|0),(9686|0),5509,(19555|0));
  // unreachable;
 }
 else if ((label|0) == 30) {
  ___assert_fail((19824|0),(9686|0),5517,(19555|0));
  // unreachable;
 }
 else if ((label|0) == 33) {
  ___assert_fail((19882|0),(9686|0),5527,(19555|0));
  // unreachable;
 }
 else if ((label|0) == 36) {
  STACKTOP = sp;return 2;
 }
 return (0)|0;
}
function __ZL12_sg_stremptyPK9_sg_str_t($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, $cmp = 0, $conv = 0, $str$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $str$addr = $str;
 $0 = $str$addr;
 $1 = HEAP8[$0>>0]|0;
 $conv = $1 << 24 >> 24;
 $cmp = (0)==($conv|0);
 STACKTOP = sp;return ($cmp|0);
}
function __ZL10_sg_strptrPK9_sg_str_t($str) {
 $str = $str|0;
 var $0 = 0, $str$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $str$addr = $str;
 $0 = $str$addr;
 STACKTOP = sp;return ($0|0);
}
function __ZL24_sg_gl_vertexformat_size16sg_vertex_format($fmt) {
 $fmt = $fmt|0;
 var $0 = 0, $1 = 0, $fmt$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $fmt$addr = $fmt;
 $0 = $fmt$addr;
 do {
  switch ($0|0) {
  case 1:  {
   $retval = 1;
   break;
  }
  case 2:  {
   $retval = 2;
   break;
  }
  case 3:  {
   $retval = 3;
   break;
  }
  case 4:  {
   $retval = 4;
   break;
  }
  case 5:  {
   $retval = 4;
   break;
  }
  case 6:  {
   $retval = 4;
   break;
  }
  case 7:  {
   $retval = 4;
   break;
  }
  case 8:  {
   $retval = 4;
   break;
  }
  case 9:  {
   $retval = 2;
   break;
  }
  case 10:  {
   $retval = 2;
   break;
  }
  case 11:  {
   $retval = 2;
   break;
  }
  case 12:  {
   $retval = 4;
   break;
  }
  case 13:  {
   $retval = 4;
   break;
  }
  case 14:  {
   $retval = 4;
   break;
  }
  case 15:  {
   $retval = 4;
   break;
  }
  default: {
   ___assert_fail((24519|0),(9686|0),3861,(19948|0));
   // unreachable;
  }
  }
 } while(0);
 $1 = $retval;
 STACKTOP = sp;return ($1|0);
}
function __ZL24_sg_gl_vertexformat_type16sg_vertex_format($fmt) {
 $fmt = $fmt|0;
 var $0 = 0, $1 = 0, $fmt$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $fmt$addr = $fmt;
 $0 = $fmt$addr;
 switch ($0|0) {
 case 4: case 3: case 2: case 1:  {
  $retval = 5126;
  break;
 }
 case 6: case 5:  {
  $retval = 5120;
  break;
 }
 case 8: case 7:  {
  $retval = 5121;
  break;
 }
 case 13: case 12: case 10: case 9:  {
  $retval = 5122;
  break;
 }
 case 14: case 11:  {
  $retval = 5123;
  break;
 }
 case 15:  {
  $retval = 33640;
  break;
 }
 default: {
  ___assert_fail((24519|0),(9686|0),3889,(19923|0));
  // unreachable;
 }
 }
 $1 = $retval;
 STACKTOP = sp;return ($1|0);
}
function __ZL30_sg_gl_vertexformat_normalized16sg_vertex_format($fmt) {
 $fmt = $fmt|0;
 var $0 = 0, $1 = 0, $fmt$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $fmt$addr = $fmt;
 $0 = $fmt$addr;
 switch ($0|0) {
 case 15: case 14: case 13: case 11: case 10: case 8: case 6:  {
  $retval = 1;
  break;
 }
 default: {
  $retval = 0;
 }
 }
 $1 = $retval;
 STACKTOP = sp;return ($1|0);
}
function __ZL15_sg_pipeline_atPK11_sg_pools_tj($p,$pip_id) {
 $p = $p|0;
 $pip_id = $pip_id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp3 = 0, $or$cond = 0, $p$addr = 0, $pip_id$addr = 0, $pipeline_pool = 0, $pipelines = 0;
 var $slot_index = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $p$addr = $p;
 $pip_id$addr = $pip_id;
 $0 = $p$addr;
 $tobool = ($0|0)!=(0|0);
 $1 = $pip_id$addr;
 $cmp = (0)!=($1|0);
 $or$cond = $tobool & $cmp;
 if (!($or$cond)) {
  ___assert_fail((20070|0),(9686|0),9683,(20101|0));
  // unreachable;
 }
 $2 = $pip_id$addr;
 $call = (__ZL14_sg_slot_indexj($2)|0);
 $slot_index = $call;
 $3 = $slot_index;
 $cmp1 = ($3|0)>(0);
 if (!($cmp1)) {
  ___assert_fail((20117|0),(9686|0),9685,(20101|0));
  // unreachable;
 }
 $4 = $slot_index;
 $5 = $p$addr;
 $pipeline_pool = ((($5)) + 48|0);
 $6 = HEAP32[$pipeline_pool>>2]|0;
 $cmp3 = ($4|0)<($6|0);
 if ($cmp3) {
  $7 = $p$addr;
  $pipelines = ((($7)) + 108|0);
  $8 = HEAP32[$pipelines>>2]|0;
  $9 = $slot_index;
  $arrayidx = (($8) + (($9*440)|0)|0);
  STACKTOP = sp;return ($arrayidx|0);
 } else {
  ___assert_fail((20117|0),(9686|0),9685,(20101|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZL36_sg_default_rendertarget_depthformatv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 42;
}
function __ZL25_sg_vertexformat_bytesize16sg_vertex_format($fmt) {
 $fmt = $fmt|0;
 var $0 = 0, $1 = 0, $fmt$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $fmt$addr = $fmt;
 $0 = $fmt$addr;
 do {
  switch ($0|0) {
  case 1:  {
   $retval = 4;
   break;
  }
  case 2:  {
   $retval = 8;
   break;
  }
  case 3:  {
   $retval = 12;
   break;
  }
  case 4:  {
   $retval = 16;
   break;
  }
  case 5:  {
   $retval = 4;
   break;
  }
  case 6:  {
   $retval = 4;
   break;
  }
  case 7:  {
   $retval = 4;
   break;
  }
  case 8:  {
   $retval = 4;
   break;
  }
  case 9:  {
   $retval = 4;
   break;
  }
  case 10:  {
   $retval = 4;
   break;
  }
  case 11:  {
   $retval = 4;
   break;
  }
  case 12:  {
   $retval = 8;
   break;
  }
  case 13:  {
   $retval = 8;
   break;
  }
  case 14:  {
   $retval = 8;
   break;
  }
  case 15:  {
   $retval = 4;
   break;
  }
  case 0:  {
   $retval = 0;
   break;
  }
  default: {
   ___assert_fail((24519|0),(9686|0),3203,(20203|0));
   // unreachable;
  }
  }
 } while(0);
 $1 = $retval;
 STACKTOP = sp;return ($1|0);
}
function __ZL15_sg_lookup_passPK11_sg_pools_tj($p,$pass_id) {
 $p = $p|0;
 $pass_id = $pass_id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $call = 0, $cmp = 0, $cmp1 = 0, $p$addr = 0, $pass = 0, $pass_id$addr = 0, $retval = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $p$addr = $p;
 $pass_id$addr = $pass_id;
 $0 = $p$addr;
 $tobool = ($0|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((10758|0),(9686|0),9747,(20229|0));
  // unreachable;
 }
 $1 = $pass_id$addr;
 $cmp = (0)!=($1|0);
 if ($cmp) {
  $2 = $p$addr;
  $3 = $pass_id$addr;
  $call = (__ZL11_sg_pass_atPK11_sg_pools_tj($2,$3)|0);
  $pass = $call;
  $4 = $pass;
  $5 = HEAP32[$4>>2]|0;
  $6 = $pass_id$addr;
  $cmp1 = ($5|0)==($6|0);
  if ($cmp1) {
   $7 = $pass;
   $retval = $7;
   $8 = $retval;
   STACKTOP = sp;return ($8|0);
  }
 }
 $retval = 0;
 $8 = $retval;
 STACKTOP = sp;return ($8|0);
}
function __ZL11_sg_pass_atPK11_sg_pools_tj($p,$pass_id) {
 $p = $p|0;
 $pass_id = $pass_id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp3 = 0, $or$cond = 0, $p$addr = 0, $pass_id$addr = 0, $pass_pool = 0, $passes = 0;
 var $slot_index = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $p$addr = $p;
 $pass_id$addr = $pass_id;
 $0 = $p$addr;
 $tobool = ($0|0)!=(0|0);
 $1 = $pass_id$addr;
 $cmp = (0)!=($1|0);
 $or$cond = $tobool & $cmp;
 if (!($or$cond)) {
  ___assert_fail((20245|0),(9686|0),9690,(20277|0));
  // unreachable;
 }
 $2 = $pass_id$addr;
 $call = (__ZL14_sg_slot_indexj($2)|0);
 $slot_index = $call;
 $3 = $slot_index;
 $cmp1 = ($3|0)>(0);
 if (!($cmp1)) {
  ___assert_fail((20289|0),(9686|0),9692,(20277|0));
  // unreachable;
 }
 $4 = $slot_index;
 $5 = $p$addr;
 $pass_pool = ((($5)) + 64|0);
 $6 = HEAP32[$pass_pool>>2]|0;
 $cmp3 = ($4|0)<($6|0);
 if ($cmp3) {
  $7 = $p$addr;
  $passes = ((($7)) + 112|0);
  $8 = HEAP32[$passes>>2]|0;
  $9 = $slot_index;
  $arrayidx = (($8) + (($9*120)|0)|0);
  STACKTOP = sp;return ($arrayidx|0);
 } else {
  ___assert_fail((20289|0),(9686|0),9692,(20277|0));
  // unreachable;
 }
 return (0)|0;
}
function _sg_query_buffer_state($buf_id) {
 $buf_id = $buf_id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $buf = 0, $call = 0, $cond = 0, $res = 0, $state = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP8[33468]|0;
 $tobool = $0&1;
 if (!($tobool)) {
  ___assert_fail((9780|0),(9686|0),11050,(20344|0));
  // unreachable;
 }
 $1 = HEAP32[$buf_id>>2]|0;
 $call = (__ZL17_sg_lookup_bufferPK11_sg_pools_tj((33568),$1)|0);
 $buf = $call;
 $2 = $buf;
 $tobool1 = ($2|0)!=(0|0);
 if (!($tobool1)) {
  $cond = 4;
  $res = $cond;
  $5 = $res;
  STACKTOP = sp;return ($5|0);
 }
 $3 = $buf;
 $state = ((($3)) + 8|0);
 $4 = HEAP32[$state>>2]|0;
 $cond = $4;
 $res = $cond;
 $5 = $res;
 STACKTOP = sp;return ($5|0);
}
function _sg_query_image_state($img_id) {
 $img_id = $img_id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $cond = 0, $img = 0, $res = 0, $state = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP8[33468]|0;
 $tobool = $0&1;
 if (!($tobool)) {
  ___assert_fail((9780|0),(9686|0),11057,(20366|0));
  // unreachable;
 }
 $1 = HEAP32[$img_id>>2]|0;
 $call = (__ZL16_sg_lookup_imagePK11_sg_pools_tj((33568),$1)|0);
 $img = $call;
 $2 = $img;
 $tobool1 = ($2|0)!=(0|0);
 if (!($tobool1)) {
  $cond = 4;
  $res = $cond;
  $5 = $res;
  STACKTOP = sp;return ($5|0);
 }
 $3 = $img;
 $state = ((($3)) + 8|0);
 $4 = HEAP32[$state>>2]|0;
 $cond = $4;
 $res = $cond;
 $5 = $res;
 STACKTOP = sp;return ($5|0);
}
function _sg_query_shader_state($shd_id) {
 $shd_id = $shd_id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $cond = 0, $res = 0, $shd = 0, $state = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP8[33468]|0;
 $tobool = $0&1;
 if (!($tobool)) {
  ___assert_fail((9780|0),(9686|0),11064,(20387|0));
  // unreachable;
 }
 $1 = HEAP32[$shd_id>>2]|0;
 $call = (__ZL17_sg_lookup_shaderPK11_sg_pools_tj((33568),$1)|0);
 $shd = $call;
 $2 = $shd;
 $tobool1 = ($2|0)!=(0|0);
 if (!($tobool1)) {
  $cond = 4;
  $res = $cond;
  $5 = $res;
  STACKTOP = sp;return ($5|0);
 }
 $3 = $shd;
 $state = ((($3)) + 8|0);
 $4 = HEAP32[$state>>2]|0;
 $cond = $4;
 $res = $cond;
 $5 = $res;
 STACKTOP = sp;return ($5|0);
}
function _sg_query_pipeline_state($pip_id) {
 $pip_id = $pip_id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $cond = 0, $pip = 0, $res = 0, $state = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP8[33468]|0;
 $tobool = $0&1;
 if (!($tobool)) {
  ___assert_fail((9780|0),(9686|0),11071,(20409|0));
  // unreachable;
 }
 $1 = HEAP32[$pip_id>>2]|0;
 $call = (__ZL19_sg_lookup_pipelinePK11_sg_pools_tj((33568),$1)|0);
 $pip = $call;
 $2 = $pip;
 $tobool1 = ($2|0)!=(0|0);
 if (!($tobool1)) {
  $cond = 4;
  $res = $cond;
  $5 = $res;
  STACKTOP = sp;return ($5|0);
 }
 $3 = $pip;
 $state = ((($3)) + 8|0);
 $4 = HEAP32[$state>>2]|0;
 $cond = $4;
 $res = $cond;
 $5 = $res;
 STACKTOP = sp;return ($5|0);
}
function _sg_make_buffer($desc) {
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $cmp = 0, $desc$addr = 0, $desc_def = 0, $retval = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $agg$tmp$byval_copy = sp + 64|0;
 $retval = sp + 60|0;
 $desc_def = sp + 8|0;
 $agg$tmp = sp;
 $desc$addr = $desc;
 $0 = HEAP8[33468]|0;
 $tobool = $0&1;
 if (!($tobool)) {
  ___assert_fail((9780|0),(9686|0),11086,(20433|0));
  // unreachable;
 }
 $1 = $desc$addr;
 $tobool1 = ($1|0)!=(0|0);
 if (!($tobool1)) {
  ___assert_fail((9681|0),(9686|0),11087,(20433|0));
  // unreachable;
 }
 $2 = $desc$addr;
 __ZL24_sg_buffer_desc_defaultsPK14sg_buffer_desc($desc_def,$2);
 $call = (__ZL16_sg_alloc_bufferv()|0);
 HEAP32[$retval>>2] = $call;
 $3 = HEAP32[$retval>>2]|0;
 $cmp = ($3|0)!=(0);
 if ($cmp) {
  ;HEAP32[$agg$tmp>>2]=HEAP32[$retval>>2]|0;
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
  __ZL15_sg_init_buffer9sg_bufferPK14sg_buffer_desc($agg$tmp$byval_copy,$desc_def);
  $4 = HEAP32[$retval>>2]|0;
  STACKTOP = sp;return ($4|0);
 } else {
  (_puts(20448)|0);
  $4 = HEAP32[$retval>>2]|0;
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function _sg_make_image($desc) {
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $cmp = 0, $desc$addr = 0, $desc_def = 0, $retval = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 896|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(896|0);
 $agg$tmp$byval_copy = sp + 888|0;
 $retval = sp + 884|0;
 $desc_def = sp + 8|0;
 $agg$tmp = sp;
 $desc$addr = $desc;
 $0 = HEAP8[33468]|0;
 $tobool = $0&1;
 if (!($tobool)) {
  ___assert_fail((9780|0),(9686|0),11102,(20471|0));
  // unreachable;
 }
 $1 = $desc$addr;
 $tobool1 = ($1|0)!=(0|0);
 if (!($tobool1)) {
  ___assert_fail((9681|0),(9686|0),11103,(20471|0));
  // unreachable;
 }
 $2 = $desc$addr;
 __ZL23_sg_image_desc_defaultsPK13sg_image_desc($desc_def,$2);
 $call = (__ZL15_sg_alloc_imagev()|0);
 HEAP32[$retval>>2] = $call;
 $3 = HEAP32[$retval>>2]|0;
 $cmp = ($3|0)!=(0);
 if ($cmp) {
  ;HEAP32[$agg$tmp>>2]=HEAP32[$retval>>2]|0;
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
  __ZL14_sg_init_image8sg_imagePK13sg_image_desc($agg$tmp$byval_copy,$desc_def);
  $4 = HEAP32[$retval>>2]|0;
  STACKTOP = sp;return ($4|0);
 } else {
  (_puts(20485)|0);
  $4 = HEAP32[$retval>>2]|0;
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function _sg_make_shader($desc) {
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $cmp = 0, $desc$addr = 0, $desc_def = 0, $retval = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2016|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2016|0);
 $agg$tmp$byval_copy = sp + 2008|0;
 $retval = sp + 2004|0;
 $desc_def = sp + 4|0;
 $agg$tmp = sp;
 $desc$addr = $desc;
 $0 = HEAP8[33468]|0;
 $tobool = $0&1;
 if (!($tobool)) {
  ___assert_fail((9780|0),(9686|0),11118,(20507|0));
  // unreachable;
 }
 $1 = $desc$addr;
 $tobool1 = ($1|0)!=(0|0);
 if (!($tobool1)) {
  ___assert_fail((9681|0),(9686|0),11119,(20507|0));
  // unreachable;
 }
 $2 = $desc$addr;
 __ZL24_sg_shader_desc_defaultsPK14sg_shader_desc($desc_def,$2);
 $call = (__ZL16_sg_alloc_shaderv()|0);
 HEAP32[$retval>>2] = $call;
 $3 = HEAP32[$retval>>2]|0;
 $cmp = ($3|0)!=(0);
 if ($cmp) {
  ;HEAP32[$agg$tmp>>2]=HEAP32[$retval>>2]|0;
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
  __ZL15_sg_init_shader9sg_shaderPK14sg_shader_desc($agg$tmp$byval_copy,$desc_def);
  $4 = HEAP32[$retval>>2]|0;
  STACKTOP = sp;return ($4|0);
 } else {
  (_puts(20522)|0);
  $4 = HEAP32[$retval>>2]|0;
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function _sg_make_pipeline($desc) {
 $desc = $desc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $cmp = 0, $desc$addr = 0, $desc_def = 0, $retval = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 464|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(464|0);
 $agg$tmp$byval_copy = sp + 456|0;
 $retval = sp + 452|0;
 $desc_def = sp + 4|0;
 $agg$tmp = sp;
 $desc$addr = $desc;
 $0 = HEAP8[33468]|0;
 $tobool = $0&1;
 if (!($tobool)) {
  ___assert_fail((9780|0),(9686|0),11134,(20545|0));
  // unreachable;
 }
 $1 = $desc$addr;
 $tobool1 = ($1|0)!=(0|0);
 if (!($tobool1)) {
  ___assert_fail((9681|0),(9686|0),11135,(20545|0));
  // unreachable;
 }
 $2 = $desc$addr;
 __ZL26_sg_pipeline_desc_defaultsPK16sg_pipeline_desc($desc_def,$2);
 $call = (__ZL18_sg_alloc_pipelinev()|0);
 HEAP32[$retval>>2] = $call;
 $3 = HEAP32[$retval>>2]|0;
 $cmp = ($3|0)!=(0);
 if ($cmp) {
  ;HEAP32[$agg$tmp>>2]=HEAP32[$retval>>2]|0;
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
  __ZL17_sg_init_pipeline11sg_pipelinePK16sg_pipeline_desc($agg$tmp$byval_copy,$desc_def);
  $4 = HEAP32[$retval>>2]|0;
  STACKTOP = sp;return ($4|0);
 } else {
  (_puts(20562)|0);
  $4 = HEAP32[$retval>>2]|0;
  STACKTOP = sp;return ($4|0);
 }
 return (0)|0;
}
function _sg_destroy_buffer($buf_id) {
 $buf_id = $buf_id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $buf = 0, $call = 0, $call4 = 0, $cmp = 0, $ctx_id = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP8[33468]|0;
 $tobool = $0&1;
 if (!($tobool)) {
  ___assert_fail((9780|0),(9686|0),11167,(20587|0));
  // unreachable;
 }
 $1 = HEAP32[$buf_id>>2]|0;
 $call = (__ZL17_sg_lookup_bufferPK11_sg_pools_tj((33568),$1)|0);
 $buf = $call;
 $2 = $buf;
 $tobool1 = ($2|0)!=(0|0);
 if (!($tobool1)) {
  STACKTOP = sp;return;
 }
 $3 = $buf;
 $ctx_id = ((($3)) + 4|0);
 $4 = HEAP32[$ctx_id>>2]|0;
 $5 = HEAP32[(33548)>>2]|0;
 $cmp = ($4|0)==($5|0);
 if ($cmp) {
  $6 = $buf;
  __ZL18_sg_destroy_bufferP12_sg_buffer_t($6);
  $7 = $buf;
  __ZL16_sg_reset_bufferP12_sg_buffer_t($7);
  $8 = HEAP32[$buf_id>>2]|0;
  $call4 = (__ZL14_sg_slot_indexj($8)|0);
  __ZL19_sg_pool_free_indexP10_sg_pool_ti((33568),$call4);
  STACKTOP = sp;return;
 } else {
  (_puts(20605)|0);
  STACKTOP = sp;return;
 }
}
function __ZL16_sg_reset_bufferP12_sg_buffer_t($buf) {
 $buf = $buf|0;
 var $0 = 0, $1 = 0, $buf$addr = 0, $tobool = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $buf$addr = $buf;
 $0 = $buf$addr;
 $tobool = ($0|0)!=(0|0);
 if ($tobool) {
  $1 = $buf$addr;
  dest=$1; stop=dest+60|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
 } else {
  ___assert_fail((11520|0),(9686|0),9540,(20679|0));
  // unreachable;
 }
}
function _sg_destroy_image($img_id) {
 $img_id = $img_id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $call = 0, $call4 = 0, $cmp = 0, $ctx_id = 0, $img = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP8[33468]|0;
 $tobool = $0&1;
 if (!($tobool)) {
  ___assert_fail((9780|0),(9686|0),11184,(20696|0));
  // unreachable;
 }
 $1 = HEAP32[$img_id>>2]|0;
 $call = (__ZL16_sg_lookup_imagePK11_sg_pools_tj((33568),$1)|0);
 $img = $call;
 $2 = $img;
 $tobool1 = ($2|0)!=(0|0);
 if (!($tobool1)) {
  STACKTOP = sp;return;
 }
 $3 = $img;
 $ctx_id = ((($3)) + 4|0);
 $4 = HEAP32[$ctx_id>>2]|0;
 $5 = HEAP32[(33548)>>2]|0;
 $cmp = ($4|0)==($5|0);
 if ($cmp) {
  $6 = $img;
  __ZL17_sg_destroy_imageP11_sg_image_t($6);
  $7 = $img;
  __ZL15_sg_reset_imageP11_sg_image_t($7);
  $8 = HEAP32[$img_id>>2]|0;
  $call4 = (__ZL14_sg_slot_indexj($8)|0);
  __ZL19_sg_pool_free_indexP10_sg_pool_ti((33584),$call4);
  STACKTOP = sp;return;
 } else {
  (_puts(20713)|0);
  STACKTOP = sp;return;
 }
}
function __ZL15_sg_reset_imageP11_sg_image_t($img) {
 $img = $img|0;
 var $0 = 0, $1 = 0, $img$addr = 0, $tobool = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $img$addr = $img;
 $0 = $img$addr;
 $tobool = ($0|0)!=(0|0);
 if ($tobool) {
  $1 = $img$addr;
  dest=$1; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
 } else {
  ___assert_fail((11498|0),(9686|0),9545,(20786|0));
  // unreachable;
 }
}
function _sg_destroy_shader($shd_id) {
 $shd_id = $shd_id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $call = 0, $call4 = 0, $cmp = 0, $ctx_id = 0, $shd = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP8[33468]|0;
 $tobool = $0&1;
 if (!($tobool)) {
  ___assert_fail((9780|0),(9686|0),11201,(20802|0));
  // unreachable;
 }
 $1 = HEAP32[$shd_id>>2]|0;
 $call = (__ZL17_sg_lookup_shaderPK11_sg_pools_tj((33568),$1)|0);
 $shd = $call;
 $2 = $shd;
 $tobool1 = ($2|0)!=(0|0);
 if (!($tobool1)) {
  STACKTOP = sp;return;
 }
 $3 = $shd;
 $ctx_id = ((($3)) + 4|0);
 $4 = HEAP32[$ctx_id>>2]|0;
 $5 = HEAP32[(33548)>>2]|0;
 $cmp = ($4|0)==($5|0);
 if ($cmp) {
  $6 = $shd;
  __ZL18_sg_destroy_shaderP12_sg_shader_t($6);
  $7 = $shd;
  __ZL16_sg_reset_shaderP12_sg_shader_t($7);
  $8 = HEAP32[$shd_id>>2]|0;
  $call4 = (__ZL14_sg_slot_indexj($8)|0);
  __ZL19_sg_pool_free_indexP10_sg_pool_ti((33600),$call4);
  STACKTOP = sp;return;
 } else {
  (_puts(20820)|0);
  STACKTOP = sp;return;
 }
}
function __ZL16_sg_reset_shaderP12_sg_shader_t($shd) {
 $shd = $shd|0;
 var $0 = 0, $1 = 0, $shd$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $shd$addr = $shd;
 $0 = $shd$addr;
 $tobool = ($0|0)!=(0|0);
 if ($tobool) {
  $1 = $shd$addr;
  _memset(($1|0),0,2176)|0;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((11475|0),(9686|0),9550,(20894|0));
  // unreachable;
 }
}
function _sg_destroy_pipeline($pip_id) {
 $pip_id = $pip_id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $call = 0, $call4 = 0, $cmp = 0, $ctx_id = 0, $pip = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = HEAP8[33468]|0;
 $tobool = $0&1;
 if (!($tobool)) {
  ___assert_fail((9780|0),(9686|0),11218,(20911|0));
  // unreachable;
 }
 $1 = HEAP32[$pip_id>>2]|0;
 $call = (__ZL19_sg_lookup_pipelinePK11_sg_pools_tj((33568),$1)|0);
 $pip = $call;
 $2 = $pip;
 $tobool1 = ($2|0)!=(0|0);
 if (!($tobool1)) {
  STACKTOP = sp;return;
 }
 $3 = $pip;
 $ctx_id = ((($3)) + 4|0);
 $4 = HEAP32[$ctx_id>>2]|0;
 $5 = HEAP32[(33548)>>2]|0;
 $cmp = ($4|0)==($5|0);
 if ($cmp) {
  $6 = $pip;
  __ZL20_sg_destroy_pipelineP14_sg_pipeline_t($6);
  $7 = $pip;
  __ZL18_sg_reset_pipelineP14_sg_pipeline_t($7);
  $8 = HEAP32[$pip_id>>2]|0;
  $call4 = (__ZL14_sg_slot_indexj($8)|0);
  __ZL19_sg_pool_free_indexP10_sg_pool_ti((33616),$call4);
  STACKTOP = sp;return;
 } else {
  (_puts(20931)|0);
  STACKTOP = sp;return;
 }
}
function __ZL18_sg_reset_pipelineP14_sg_pipeline_t($pip) {
 $pip = $pip|0;
 var $0 = 0, $1 = 0, $pip$addr = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $pip$addr = $pip;
 $0 = $pip$addr;
 $tobool = ($0|0)!=(0|0);
 if ($tobool) {
  $1 = $pip$addr;
  _memset(($1|0),0,440)|0;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((11450|0),(9686|0),9555,(21007|0));
  // unreachable;
 }
}
function _sg_begin_default_pass($pass_action,$width,$height) {
 $pass_action = $pass_action|0;
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $_end_canary = 0, $cmp = 0, $cmp4 = 0, $height$addr = 0, $pa = 0, $pass_action$addr = 0, $tobool = 0, $tobool1 = 0, $width$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $pa = sp;
 $pass_action$addr = $pass_action;
 $width$addr = $width;
 $height$addr = $height;
 $0 = HEAP8[33468]|0;
 $tobool = $0&1;
 if (!($tobool)) {
  ___assert_fail((9780|0),(9686|0),11252,(21026|0));
  // unreachable;
 }
 $1 = $pass_action$addr;
 $tobool1 = ($1|0)!=(0|0);
 if (!($tobool1)) {
  ___assert_fail((21048|0),(9686|0),11253,(21026|0));
  // unreachable;
 }
 $2 = $pass_action$addr;
 $3 = HEAP32[$2>>2]|0;
 $cmp = ($3|0)==(0);
 if (!($cmp)) {
  ___assert_fail((21060|0),(9686|0),11254,(21026|0));
  // unreachable;
 }
 $4 = $pass_action$addr;
 $_end_canary = ((($4)) + 100|0);
 $5 = HEAP32[$_end_canary>>2]|0;
 $cmp4 = ($5|0)==(0);
 if ($cmp4) {
  $6 = $pass_action$addr;
  __ZL31_sg_resolve_default_pass_actionPK14sg_pass_actionPS_($6,$pa);
  HEAP32[(33552)>>2] = 0;
  HEAP8[(33560)>>0] = 1;
  $7 = $width$addr;
  $8 = $height$addr;
  __ZL14_sg_begin_passP10_sg_pass_tPK14sg_pass_actionii(0,$pa,$7,$8);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((21060|0),(9686|0),11254,(21026|0));
  // unreachable;
 }
}
function __ZL31_sg_resolve_default_pass_actionPK14sg_pass_actionPS_($from,$to) {
 $from = $from|0;
 $to = $to|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx10 = 0, $arrayidx12 = 0, $arrayidx14 = 0, $arrayidx16 = 0, $arrayidx18 = 0, $arrayidx20 = 0, $arrayidx4 = 0, $arrayidx7 = 0, $cmp = 0, $cmp2 = 0, $cmp22 = 0, $cmp30 = 0, $colors = 0;
 var $colors13 = 0, $colors17 = 0, $colors3 = 0, $colors6 = 0, $colors9 = 0, $depth = 0, $depth24 = 0, $depth26 = 0, $from$addr = 0, $i = 0, $inc = 0, $or$cond = 0, $stencil = 0, $stencil32 = 0, $stencil34 = 0, $to$addr = 0, $tobool = 0, $tobool1 = 0, $val = 0, $val11 = 0;
 var $val15 = 0, $val19 = 0, $val27 = 0, $val35 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $from$addr = $from;
 $to$addr = $to;
 $0 = $from$addr;
 $tobool = ($0|0)!=(0|0);
 $1 = $to$addr;
 $tobool1 = ($1|0)!=(0|0);
 $or$cond = $tobool & $tobool1;
 if (!($or$cond)) {
  ___assert_fail((21198|0),(9686|0),3487,(21209|0));
  // unreachable;
 }
 $2 = $from$addr;
 $3 = $to$addr;
 dest=$3; src=$2; stop=dest+104|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $i = 0;
 while(1) {
  $4 = $i;
  $cmp = ($4|0)<(4);
  $5 = $to$addr;
  if (!($cmp)) {
   break;
  }
  $colors = ((($5)) + 4|0);
  $6 = $i;
  $arrayidx = (($colors) + (($6*20)|0)|0);
  $7 = HEAP32[$arrayidx>>2]|0;
  $cmp2 = ($7|0)==(0);
  if ($cmp2) {
   $8 = $to$addr;
   $colors3 = ((($8)) + 4|0);
   $9 = $i;
   $arrayidx4 = (($colors3) + (($9*20)|0)|0);
   HEAP32[$arrayidx4>>2] = 1;
   $10 = $to$addr;
   $colors6 = ((($10)) + 4|0);
   $11 = $i;
   $arrayidx7 = (($colors6) + (($11*20)|0)|0);
   $val = ((($arrayidx7)) + 4|0);
   HEAPF32[$val>>2] = 0.5;
   $12 = $to$addr;
   $colors9 = ((($12)) + 4|0);
   $13 = $i;
   $arrayidx10 = (($colors9) + (($13*20)|0)|0);
   $val11 = ((($arrayidx10)) + 4|0);
   $arrayidx12 = ((($val11)) + 4|0);
   HEAPF32[$arrayidx12>>2] = 0.5;
   $14 = $to$addr;
   $colors13 = ((($14)) + 4|0);
   $15 = $i;
   $arrayidx14 = (($colors13) + (($15*20)|0)|0);
   $val15 = ((($arrayidx14)) + 4|0);
   $arrayidx16 = ((($val15)) + 8|0);
   HEAPF32[$arrayidx16>>2] = 0.5;
   $16 = $to$addr;
   $colors17 = ((($16)) + 4|0);
   $17 = $i;
   $arrayidx18 = (($colors17) + (($17*20)|0)|0);
   $val19 = ((($arrayidx18)) + 4|0);
   $arrayidx20 = ((($val19)) + 12|0);
   HEAPF32[$arrayidx20>>2] = 1.0;
  }
  $18 = $i;
  $inc = (($18) + 1)|0;
  $i = $inc;
 }
 $depth = ((($5)) + 84|0);
 $19 = HEAP32[$depth>>2]|0;
 $cmp22 = ($19|0)==(0);
 if ($cmp22) {
  $20 = $to$addr;
  $depth24 = ((($20)) + 84|0);
  HEAP32[$depth24>>2] = 1;
  $21 = $to$addr;
  $depth26 = ((($21)) + 84|0);
  $val27 = ((($depth26)) + 4|0);
  HEAPF32[$val27>>2] = 1.0;
 }
 $22 = $to$addr;
 $stencil = ((($22)) + 92|0);
 $23 = HEAP32[$stencil>>2]|0;
 $cmp30 = ($23|0)==(0);
 if (!($cmp30)) {
  STACKTOP = sp;return;
 }
 $24 = $to$addr;
 $stencil32 = ((($24)) + 92|0);
 HEAP32[$stencil32>>2] = 1;
 $25 = $to$addr;
 $stencil34 = ((($25)) + 92|0);
 $val35 = ((($stencil34)) + 4|0);
 HEAP8[$val35>>0] = 0;
 STACKTOP = sp;return;
}
function __ZL14_sg_begin_passP10_sg_pass_tPK14sg_pass_actionii($pass,$action,$w,$h) {
 $pass = $pass|0;
 $action = $action|0;
 $w = $w|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $action$addr = 0, $arrayidx43 = 0, $arrayidx44 = 0, $arrayidx45 = 0, $c = 0, $call = 0, $call66 = 0, $clear_mask = 0, $cmp = 0;
 var $cmp18 = 0, $cmp24 = 0, $cmp28 = 0, $cmp34 = 0, $cmp38 = 0, $cmp48 = 0, $cmp55 = 0, $cmp62 = 0, $cmp67 = 0, $colors = 0, $colors40 = 0, $conv = 0, $conv27 = 0, $conv60 = 0, $default_framebuffer = 0, $depth = 0, $depth51 = 0, $frombool = 0, $gl_fb = 0, $gl_fb12 = 0;
 var $h$addr = 0, $need_pip_cache_flush = 0, $or = 0, $or50 = 0, $or57 = 0, $pass$addr = 0, $stencil = 0, $stencil58 = 0, $tobool = 0, $tobool1 = 0, $tobool14 = 0, $tobool21 = 0, $tobool31 = 0, $tobool35 = 0, $tobool6 = 0, $tobool7 = 0, $tobool9 = 0, $use_mrt_clear = 0, $val = 0, $val52 = 0;
 var $val59 = 0, $w$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $pass$addr = $pass;
 $action$addr = $action;
 $w$addr = $w;
 $h$addr = $h;
 $0 = $action$addr;
 $tobool = ($0|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((21129|0),(9686|0),5710,(21136|0));
  // unreachable;
 }
 $1 = HEAP8[(34082)>>0]|0;
 $tobool1 = $1&1;
 if ($tobool1) {
  ___assert_fail((21151|0),(9686|0),5711,(21136|0));
  // unreachable;
 }
 $call = (_glGetError()|0);
 $cmp = ($call|0)==(0);
 if (!($cmp)) {
  ___assert_fail((9883|0),(9686|0),5712,(21136|0));
  // unreachable;
 }
 HEAP8[(34082)>>0] = 1;
 $2 = $pass$addr;
 HEAP32[(34096)>>2] = $2;
 $3 = $pass$addr;
 $tobool6 = ($3|0)!=(0|0);
 if ($tobool6) {
  $4 = $pass$addr;
  $5 = HEAP32[$4>>2]|0;
  HEAP32[(34100)>>2] = $5;
 } else {
  HEAP32[(34100)>>2] = 0;
 }
 $6 = $w$addr;
 HEAP32[(34084)>>2] = $6;
 $7 = $h$addr;
 HEAP32[(34088)>>2] = $7;
 $8 = $pass$addr;
 $tobool7 = ($8|0)!=(0|0);
 do {
  if ($tobool7) {
   $9 = $pass$addr;
   $gl_fb = ((($9)) + 12|0);
   $10 = HEAP32[$gl_fb>>2]|0;
   $tobool9 = ($10|0)!=(0);
   if ($tobool9) {
    $11 = $pass$addr;
    $gl_fb12 = ((($11)) + 12|0);
    $12 = HEAP32[$gl_fb12>>2]|0;
    _glBindFramebuffer(36160,($12|0));
    break;
   } else {
    ___assert_fail((21167|0),(9686|0),5725,(21136|0));
    // unreachable;
   }
  } else {
   $13 = HEAP32[(34092)>>2]|0;
   $tobool14 = ($13|0)!=(0|0);
   if ($tobool14) {
    $14 = HEAP32[(34092)>>2]|0;
    $default_framebuffer = ((($14)) + 12|0);
    $15 = HEAP32[$default_framebuffer>>2]|0;
    _glBindFramebuffer(36160,($15|0));
    break;
   } else {
    ___assert_fail((21179|0),(9686|0),5750,(21136|0));
    // unreachable;
   }
  }
 } while(0);
 $16 = $w$addr;
 $17 = $h$addr;
 _glViewport(0,0,($16|0),($17|0));
 $18 = $w$addr;
 $19 = $h$addr;
 _glScissor(0,0,($18|0),($19|0));
 $need_pip_cache_flush = 0;
 $20 = HEAP8[(34176)>>0]|0;
 $conv = $20&255;
 $cmp18 = ($conv|0)!=(15);
 if ($cmp18) {
  $need_pip_cache_flush = 1;
  HEAP8[(34176)>>0] = 15;
  _glColorMask(1,1,1,1);
 }
 $21 = HEAP8[(34140)>>0]|0;
 $tobool21 = $21&1;
 if (!($tobool21)) {
  $need_pip_cache_flush = 1;
  HEAP8[(34140)>>0] = 1;
  _glDepthMask(1);
 }
 $22 = HEAP32[(34136)>>2]|0;
 $cmp24 = ($22|0)!=(8);
 if ($cmp24) {
  $need_pip_cache_flush = 1;
  HEAP32[(34136)>>2] = 8;
  _glDepthFunc(519);
 }
 $23 = HEAP8[(34143)>>0]|0;
 $conv27 = $23&255;
 $cmp28 = ($conv27|0)!=(255);
 if ($cmp28) {
  $need_pip_cache_flush = 1;
  HEAP8[(34143)>>0] = -1;
  _glStencilMask(255);
 }
 $24 = $need_pip_cache_flush;
 $tobool31 = $24&1;
 if ($tobool31) {
  HEAP32[(34692)>>2] = 0;
  HEAP32[(34696)>>2] = 0;
 }
 $25 = $pass$addr;
 $cmp34 = (0|0)!=($25|0);
 $frombool = $cmp34&1;
 $use_mrt_clear = $frombool;
 $use_mrt_clear = 0;
 $26 = $use_mrt_clear;
 $tobool35 = $26&1;
 if (!($tobool35)) {
  $clear_mask = 0;
  $27 = $action$addr;
  $colors = ((($27)) + 4|0);
  $28 = HEAP32[$colors>>2]|0;
  $cmp38 = ($28|0)==(1);
  if ($cmp38) {
   $29 = $clear_mask;
   $or = $29 | 16384;
   $clear_mask = $or;
   $30 = $action$addr;
   $colors40 = ((($30)) + 4|0);
   $val = ((($colors40)) + 4|0);
   $c = $val;
   $31 = $c;
   $32 = +HEAPF32[$31>>2];
   $33 = $c;
   $arrayidx43 = ((($33)) + 4|0);
   $34 = +HEAPF32[$arrayidx43>>2];
   $35 = $c;
   $arrayidx44 = ((($35)) + 8|0);
   $36 = +HEAPF32[$arrayidx44>>2];
   $37 = $c;
   $arrayidx45 = ((($37)) + 12|0);
   $38 = +HEAPF32[$arrayidx45>>2];
   _glClearColor((+$32),(+$34),(+$36),(+$38));
  }
  $39 = $action$addr;
  $depth = ((($39)) + 84|0);
  $40 = HEAP32[$depth>>2]|0;
  $cmp48 = ($40|0)==(1);
  if ($cmp48) {
   $41 = $clear_mask;
   $or50 = $41 | 256;
   $clear_mask = $or50;
   $42 = $action$addr;
   $depth51 = ((($42)) + 84|0);
   $val52 = ((($depth51)) + 4|0);
   $43 = +HEAPF32[$val52>>2];
   _glClearDepthf((+$43));
  }
  $44 = $action$addr;
  $stencil = ((($44)) + 92|0);
  $45 = HEAP32[$stencil>>2]|0;
  $cmp55 = ($45|0)==(1);
  if ($cmp55) {
   $46 = $clear_mask;
   $or57 = $46 | 1024;
   $clear_mask = $or57;
   $47 = $action$addr;
   $stencil58 = ((($47)) + 92|0);
   $val59 = ((($stencil58)) + 4|0);
   $48 = HEAP8[$val59>>0]|0;
   $conv60 = $48&255;
   _glClearStencil(($conv60|0));
  }
  $49 = $clear_mask;
  $cmp62 = (0)!=($49|0);
  if ($cmp62) {
   $50 = $clear_mask;
   _glClear(($50|0));
  }
 }
 $call66 = (_glGetError()|0);
 $cmp67 = ($call66|0)==(0);
 if ($cmp67) {
  STACKTOP = sp;return;
 } else {
  ___assert_fail((9883|0),(9686|0),5840,(21136|0));
  // unreachable;
 }
}
function _sg_apply_pipeline($pip_id) {
 $pip_id = $pip_id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call4 = 0, $cmp = 0, $cmp13 = 0;
 var $frombool = 0, $pip = 0, $shader = 0, $shader9 = 0, $shader_id = 0, $state = 0, $tobool = 0, $tobool1 = 0, $tobool5 = 0, $tobool8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp + 4|0;
 $0 = HEAP8[33468]|0;
 $tobool = $0&1;
 if (!($tobool)) {
  ___assert_fail((9780|0),(9686|0),11305,(21256|0));
  // unreachable;
 }
 HEAP8[(33561)>>0] = 0;
 ;HEAP32[$agg$tmp>>2]=HEAP32[$pip_id>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;
 $call = (__ZL27_sg_validate_apply_pipeline11sg_pipeline($agg$tmp$byval_copy)|0);
 if (!($call)) {
  HEAP8[(33562)>>0] = 0;
  STACKTOP = sp;return;
 }
 $1 = HEAP8[(33560)>>0]|0;
 $tobool1 = $1&1;
 if (!($tobool1)) {
  STACKTOP = sp;return;
 }
 ;HEAP32[(33556)>>2]=HEAP32[$pip_id>>2]|0;
 $2 = HEAP32[$pip_id>>2]|0;
 $call4 = (__ZL19_sg_lookup_pipelinePK11_sg_pools_tj((33568),$2)|0);
 $pip = $call4;
 $3 = $pip;
 $tobool5 = ($3|0)!=(0|0);
 if (!($tobool5)) {
  ___assert_fail((11450|0),(9686|0),11318,(21256|0));
  // unreachable;
 }
 $4 = $pip;
 $state = ((($4)) + 8|0);
 $5 = HEAP32[$state>>2]|0;
 $cmp = (2)==($5|0);
 $frombool = $cmp&1;
 HEAP8[(33562)>>0] = $frombool;
 $6 = $pip;
 $shader = ((($6)) + 12|0);
 $7 = HEAP32[$shader>>2]|0;
 $tobool8 = ($7|0)!=(0|0);
 if (!($tobool8)) {
  ___assert_fail((21274|0),(9686|0),11320,(21256|0));
  // unreachable;
 }
 $8 = $pip;
 $shader9 = ((($8)) + 12|0);
 $9 = HEAP32[$shader9>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = $pip;
 $shader_id = ((($11)) + 16|0);
 $12 = HEAP32[$shader_id>>2]|0;
 $cmp13 = ($10|0)==($12|0);
 if (!($cmp13)) {
  ___assert_fail((21274|0),(9686|0),11320,(21256|0));
  // unreachable;
 }
 $13 = $pip;
 __ZL18_sg_apply_pipelineP14_sg_pipeline_t($13);
 STACKTOP = sp;return;
}
function __ZL27_sg_validate_apply_pipeline11sg_pipeline($pip_id) {
 $pip_id = $pip_id|0;
 var $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $call15 = 0, $call3 = 0, $call3$expand_i1_val = 0, $call39 = 0, $call42 = 0, $call45 = 0, $call45$expand_i1_val = 0, $cmp = 0, $cmp10 = 0, $cmp14 = 0, $cmp18 = 0, $cmp19 = 0, $cmp2 = 0, $cmp24 = 0;
 var $cmp31 = 0, $cmp33 = 0, $cmp37 = 0, $cmp4 = 0, $cmp40 = 0, $cmp43 = 0, $color_attachment_count = 0, $color_atts = 0, $color_atts20 = 0, $color_format = 0, $color_format38 = 0, $depth_format = 0, $depth_format41 = 0, $ds_att = 0, $ds_att28 = 0, $num_color_atts = 0, $pass = 0, $pip = 0, $pixel_format = 0, $pixel_format30 = 0;
 var $retval = 0, $sample_count = 0, $sample_count23 = 0, $shader = 0, $shader11 = 0, $shader6 = 0, $shader_id = 0, $state = 0, $state13 = 0, $tobool = 0, $tobool16 = 0, $tobool26 = 0, $tobool5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $retval = sp + 8|0;
 __ZL18_sg_validate_beginv();
 $0 = HEAP32[$pip_id>>2]|0;
 $cmp = ($0|0)!=(0);
 __ZL12_sg_validateb20_sg_validate_error_t($cmp,53);
 $1 = HEAP32[$pip_id>>2]|0;
 $call = (__ZL19_sg_lookup_pipelinePK11_sg_pools_tj((33568),$1)|0);
 $pip = $call;
 $2 = $pip;
 $cmp2 = ($2|0)!=(0|0);
 __ZL12_sg_validateb20_sg_validate_error_t($cmp2,54);
 $3 = $pip;
 $tobool = ($3|0)!=(0|0);
 if (!($tobool)) {
  $call3 = (__ZL16_sg_validate_endv()|0);
  $call3$expand_i1_val = $call3&1;
  HEAP8[$retval>>0] = $call3$expand_i1_val;
  $$pre_trunc = HEAP8[$retval>>0]|0;
  $43 = $$pre_trunc&1;
  STACKTOP = sp;return ($43|0);
 }
 $4 = $pip;
 $state = ((($4)) + 8|0);
 $5 = HEAP32[$state>>2]|0;
 $cmp4 = ($5|0)==(2);
 __ZL12_sg_validateb20_sg_validate_error_t($cmp4,55);
 $6 = $pip;
 $shader = ((($6)) + 12|0);
 $7 = HEAP32[$shader>>2]|0;
 $tobool5 = ($7|0)!=(0|0);
 if (!($tobool5)) {
  ___assert_fail((21352|0),(9686|0),10296,(21478|0));
  // unreachable;
 }
 $8 = $pip;
 $shader6 = ((($8)) + 12|0);
 $9 = HEAP32[$shader6>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = $pip;
 $shader_id = ((($11)) + 16|0);
 $12 = HEAP32[$shader_id>>2]|0;
 $cmp10 = ($10|0)==($12|0);
 __ZL12_sg_validateb20_sg_validate_error_t($cmp10,56);
 $13 = $pip;
 $shader11 = ((($13)) + 12|0);
 $14 = HEAP32[$shader11>>2]|0;
 $state13 = ((($14)) + 8|0);
 $15 = HEAP32[$state13>>2]|0;
 $cmp14 = ($15|0)==(2);
 __ZL12_sg_validateb20_sg_validate_error_t($cmp14,57);
 $16 = HEAP32[(33552)>>2]|0;
 $call15 = (__ZL15_sg_lookup_passPK11_sg_pools_tj((33568),$16)|0);
 $pass = $call15;
 $17 = $pass;
 $tobool16 = ($17|0)!=(0|0);
 $18 = $pip;
 $color_attachment_count = ((($18)) + 36|0);
 $19 = HEAP32[$color_attachment_count>>2]|0;
 do {
  if ($tobool16) {
   $20 = $pass;
   $num_color_atts = ((($20)) + 16|0);
   $21 = HEAP32[$num_color_atts>>2]|0;
   $cmp18 = ($19|0)==($21|0);
   __ZL12_sg_validateb20_sg_validate_error_t($cmp18,58);
   $22 = $pip;
   $color_format = ((($22)) + 40|0);
   $23 = HEAP32[$color_format>>2]|0;
   $24 = $pass;
   $color_atts = ((($24)) + 20|0);
   $25 = HEAP32[$color_atts>>2]|0;
   $pixel_format = ((($25)) + 40|0);
   $26 = HEAP32[$pixel_format>>2]|0;
   $cmp19 = ($23|0)==($26|0);
   __ZL12_sg_validateb20_sg_validate_error_t($cmp19,59);
   $27 = $pip;
   $sample_count = ((($27)) + 48|0);
   $28 = HEAP32[$sample_count>>2]|0;
   $29 = $pass;
   $color_atts20 = ((($29)) + 20|0);
   $30 = HEAP32[$color_atts20>>2]|0;
   $sample_count23 = ((($30)) + 44|0);
   $31 = HEAP32[$sample_count23>>2]|0;
   $cmp24 = ($28|0)==($31|0);
   __ZL12_sg_validateb20_sg_validate_error_t($cmp24,61);
   $32 = $pass;
   $ds_att = ((($32)) + 100|0);
   $33 = HEAP32[$ds_att>>2]|0;
   $tobool26 = ($33|0)!=(0|0);
   $34 = $pip;
   $depth_format = ((($34)) + 44|0);
   $35 = HEAP32[$depth_format>>2]|0;
   if ($tobool26) {
    $36 = $pass;
    $ds_att28 = ((($36)) + 100|0);
    $37 = HEAP32[$ds_att28>>2]|0;
    $pixel_format30 = ((($37)) + 40|0);
    $38 = HEAP32[$pixel_format30>>2]|0;
    $cmp31 = ($35|0)==($38|0);
    __ZL12_sg_validateb20_sg_validate_error_t($cmp31,60);
    break;
   } else {
    $cmp33 = ($35|0)==(1);
    __ZL12_sg_validateb20_sg_validate_error_t($cmp33,60);
    break;
   }
  } else {
   $cmp37 = ($19|0)==(1);
   __ZL12_sg_validateb20_sg_validate_error_t($cmp37,58);
   $39 = $pip;
   $color_format38 = ((($39)) + 40|0);
   $40 = HEAP32[$color_format38>>2]|0;
   $call39 = (__ZL36_sg_default_rendertarget_colorformatv()|0);
   $cmp40 = ($40|0)==($call39|0);
   __ZL12_sg_validateb20_sg_validate_error_t($cmp40,59);
   $41 = $pip;
   $depth_format41 = ((($41)) + 44|0);
   $42 = HEAP32[$depth_format41>>2]|0;
   $call42 = (__ZL36_sg_default_rendertarget_depthformatv()|0);
   $cmp43 = ($42|0)==($call42|0);
   __ZL12_sg_validateb20_sg_validate_error_t($cmp43,60);
  }
 } while(0);
 $call45 = (__ZL16_sg_validate_endv()|0);
 $call45$expand_i1_val = $call45&1;
 HEAP8[$retval>>0] = $call45$expand_i1_val;
 $$pre_trunc = HEAP8[$retval>>0]|0;
 $43 = $$pre_trunc&1;
 STACKTOP = sp;return ($43|0);
}
function __ZL18_sg_apply_pipelineP14_sg_pipeline_t($pip) {
 $pip = $pip|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0, $197 = 0.0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0, $203 = 0.0, $204 = 0, $205 = 0.0;
 var $206 = 0, $207 = 0.0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0.0, $216 = 0, $217 = 0.0, $218 = 0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0.0, $222 = 0, $223 = 0.0;
 var $224 = 0, $225 = 0.0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0, $233 = 0, $234 = 0.0, $235 = 0, $236 = 0.0, $237 = 0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0.0, $275 = 0, $276 = 0.0, $277 = 0, $278 = 0.0;
 var $279 = 0, $28 = 0, $280 = 0.0, $281 = 0, $282 = 0.0, $283 = 0, $284 = 0.0, $285 = 0, $286 = 0.0, $287 = 0, $288 = 0.0, $289 = 0, $29 = 0, $290 = 0.0, $291 = 0, $292 = 0, $293 = 0.0, $294 = 0, $295 = 0, $296 = 0.0;
 var $297 = 0, $298 = 0.0, $299 = 0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0, $302 = 0.0, $303 = 0, $304 = 0.0, $305 = 0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $and = 0, $and191 = 0, $and196 = 0, $and201 = 0, $arrayidx216 = 0, $arrayidx218 = 0;
 var $arrayidx223 = 0, $arrayidx225 = 0, $arrayidx230 = 0, $arrayidx232 = 0, $arrayidx237 = 0, $arrayidx239 = 0, $arrayidx244 = 0, $arrayidx246 = 0, $arrayidx251 = 0, $arrayidx253 = 0, $arrayidx262 = 0, $arrayidx264 = 0, $arrayidx269 = 0, $arrayidx270 = 0, $arrayidx271 = 0, $bc = 0, $blend = 0, $blend_color = 0, $blend_color205 = 0, $blend_color208 = 0;
 var $blend_color210 = 0, $blend_color215 = 0, $blend_color217 = 0, $blend_color222 = 0, $blend_color224 = 0, $blend_color229 = 0, $blend_color231 = 0, $blend_color236 = 0, $blend_color238 = 0, $blend_color243 = 0, $blend_color245 = 0, $blend_color250 = 0, $blend_color252 = 0, $blend_color257 = 0, $blend_color263 = 0, $cache_b = 0, $cache_ds = 0, $cache_r = 0, $cache_ss = 0, $call = 0;
 var $call10 = 0, $call107 = 0, $call109 = 0, $call11 = 0, $call111 = 0, $call155 = 0, $call157 = 0, $call159 = 0, $call161 = 0, $call174 = 0, $call176 = 0, $call18 = 0, $call85 = 0, $cmp = 0, $cmp122 = 0, $cmp13 = 0, $cmp135 = 0, $cmp138 = 0, $cmp141 = 0, $cmp144 = 0;
 var $cmp164 = 0, $cmp167 = 0, $cmp181 = 0, $cmp187 = 0, $cmp192 = 0, $cmp197 = 0, $cmp202 = 0, $cmp207 = 0, $cmp213 = 0, $cmp220 = 0, $cmp227 = 0, $cmp23 = 0, $cmp234 = 0, $cmp241 = 0, $cmp248 = 0, $cmp255 = 0, $cmp260 = 0, $cmp274 = 0, $cmp279 = 0, $cmp283 = 0;
 var $cmp288 = 0, $cmp293 = 0, $cmp301 = 0, $cmp315 = 0, $cmp320 = 0, $cmp324 = 0, $cmp329 = 0, $cmp339 = 0, $cmp343 = 0, $cmp347 = 0, $cmp351 = 0, $cmp358 = 0, $cmp37 = 0, $cmp51 = 0, $cmp58 = 0, $cmp59 = 0, $cmp6 = 0, $cmp60 = 0, $cmp67 = 0, $cmp7 = 0;
 var $cmp70 = 0, $cmp75 = 0, $cmp80 = 0, $cmp92 = 0, $cmp95 = 0, $cmp98 = 0, $color_write_mask = 0, $color_write_mask179 = 0, $color_write_mask183 = 0, $color_write_mask184 = 0, $color_write_mask185 = 0, $color_write_mask189 = 0, $color_write_mask194 = 0, $color_write_mask199 = 0, $compare_func = 0, $compare_func69 = 0, $compare_func82 = 0, $compare_func83 = 0, $compare_func84 = 0, $cond = 0;
 var $cond284 = 0, $cond294 = 0, $cond66 = 0, $cond68 = 0, $conv = 0, $conv118 = 0, $conv121 = 0, $conv178 = 0, $conv180 = 0, $conv186 = 0, $conv188 = 0, $conv190 = 0, $conv193 = 0, $conv195 = 0, $conv198 = 0, $conv200 = 0, $conv203 = 0, $conv22 = 0, $conv297 = 0, $conv30 = 0;
 var $conv300 = 0, $conv33 = 0, $conv355 = 0, $conv357 = 0, $conv36 = 0, $conv48 = 0, $conv50 = 0, $conv56 = 0, $conv72 = 0, $conv74 = 0, $conv77 = 0, $conv79 = 0, $conv87 = 0, $conv89 = 0, $cull_mode = 0, $cull_mode273 = 0, $cull_mode276 = 0, $cull_mode277 = 0, $cull_mode278 = 0, $cull_mode282 = 0;
 var $depth_bias = 0, $depth_bias313 = 0, $depth_bias317 = 0, $depth_bias318 = 0, $depth_bias331 = 0, $depth_bias332 = 0, $depth_bias336 = 0, $depth_bias337 = 0, $depth_bias341 = 0, $depth_bias_slope_scale = 0, $depth_bias_slope_scale322 = 0, $depth_bias_slope_scale326 = 0, $depth_bias_slope_scale327 = 0, $depth_bias_slope_scale333 = 0, $depth_bias_slope_scale334 = 0, $depth_bias_slope_scale335 = 0, $depth_bias_slope_scale345 = 0, $depth_bias_slope_scale349 = 0, $depth_compare_func = 0, $depth_compare_func12 = 0;
 var $depth_compare_func15 = 0, $depth_compare_func16 = 0, $depth_compare_func17 = 0, $depth_fail_op = 0, $depth_fail_op102 = 0, $depth_fail_op103 = 0, $depth_fail_op108 = 0, $depth_fail_op94 = 0, $depth_stencil = 0, $depth_write_enabled = 0, $depth_write_enabled20 = 0, $depth_write_enabled25 = 0, $depth_write_enabled27 = 0, $depth_write_enabled28 = 0, $dst_factor_alpha = 0, $dst_factor_alpha143 = 0, $dst_factor_alpha152 = 0, $dst_factor_alpha153 = 0, $dst_factor_alpha160 = 0, $dst_factor_rgb = 0;
 var $dst_factor_rgb137 = 0, $dst_factor_rgb148 = 0, $dst_factor_rgb149 = 0, $dst_factor_rgb156 = 0, $face_winding = 0, $face_winding287 = 0, $face_winding290 = 0, $face_winding291 = 0, $face_winding292 = 0, $frombool = 0, $frombool127 = 0, $frombool306 = 0, $frombool361 = 0, $frombool42 = 0, $gl_face = 0, $gl_mode = 0, $gl_prog = 0, $gl_winding = 0, $i = 0, $i258 = 0;
 var $inc = 0, $inc266 = 0, $index_type = 0, $new_b = 0, $new_ds = 0, $new_r = 0, $new_ss = 0, $op_alpha = 0, $op_alpha166 = 0, $op_alpha171 = 0, $op_alpha172 = 0, $op_alpha175 = 0, $op_rgb = 0, $op_rgb163 = 0, $op_rgb169 = 0, $op_rgb170 = 0, $op_rgb173 = 0, $pass_op = 0, $pass_op104 = 0, $pass_op105 = 0;
 var $pass_op110 = 0, $pass_op97 = 0, $pip$addr = 0, $po_enabled = 0, $primitive_type = 0, $rast = 0, $shader = 0, $shader368 = 0, $src_factor_alpha = 0, $src_factor_alpha140 = 0, $src_factor_alpha150 = 0, $src_factor_alpha151 = 0, $src_factor_alpha158 = 0, $src_factor_rgb = 0, $src_factor_rgb134 = 0, $src_factor_rgb146 = 0, $src_factor_rgb147 = 0, $src_factor_rgb154 = 0, $stencil_back = 0, $stencil_back64 = 0;
 var $stencil_enabled = 0, $stencil_enabled34 = 0, $stencil_enabled39 = 0, $stencil_enabled41 = 0, $stencil_enabled43 = 0, $stencil_read_mask = 0, $stencil_read_mask113 = 0, $stencil_read_mask114 = 0, $stencil_read_mask73 = 0, $stencil_read_mask88 = 0, $stencil_ref = 0, $stencil_ref115 = 0, $stencil_ref116 = 0, $stencil_ref78 = 0, $stencil_ref86 = 0, $stencil_write_mask = 0, $stencil_write_mask49 = 0, $stencil_write_mask53 = 0, $stencil_write_mask54 = 0, $stencil_write_mask55 = 0;
 var $sub = 0.0, $sub212 = 0.0, $sub219 = 0.0, $sub226 = 0.0, $sub233 = 0.0, $sub240 = 0.0, $sub247 = 0.0, $sub254 = 0.0, $sub314 = 0.0, $sub319 = 0.0, $sub323 = 0.0, $sub328 = 0.0, $sub338 = 0.0, $sub342 = 0.0, $sub346 = 0.0, $sub350 = 0.0, $tobool = 0, $tobool1 = 0, $tobool117 = 0, $tobool120 = 0;
 var $tobool125 = 0, $tobool129 = 0, $tobool19 = 0, $tobool21 = 0, $tobool26 = 0, $tobool29 = 0, $tobool296 = 0, $tobool299 = 0, $tobool304 = 0, $tobool308 = 0, $tobool32 = 0, $tobool35 = 0, $tobool354 = 0, $tobool356 = 0, $tobool360 = 0, $tobool362 = 0, $tobool40 = 0, $tobool44 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $pip$addr = $pip;
 $0 = $pip$addr;
 $tobool = ($0|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((11450|0),(9686|0),5902,(21333|0));
  // unreachable;
 }
 $1 = $pip$addr;
 $shader = ((($1)) + 12|0);
 $2 = HEAP32[$shader>>2]|0;
 $tobool1 = ($2|0)!=(0|0);
 if (!($tobool1)) {
  ___assert_fail((21352|0),(9686|0),5903,(21333|0));
  // unreachable;
 }
 $call = (_glGetError()|0);
 $cmp = ($call|0)==(0);
 if (!($cmp)) {
  ___assert_fail((9883|0),(9686|0),5904,(21333|0));
  // unreachable;
 }
 $3 = HEAP32[(34692)>>2]|0;
 $4 = $pip$addr;
 $cmp6 = ($3|0)!=($4|0);
 if (!($cmp6)) {
  $5 = HEAP32[(34696)>>2]|0;
  $6 = $pip$addr;
  $7 = HEAP32[$6>>2]|0;
  $cmp7 = ($5|0)!=($7|0);
  if (!($cmp7)) {
   STACKTOP = sp;return;
  }
 }
 $8 = $pip$addr;
 HEAP32[(34692)>>2] = $8;
 $9 = $pip$addr;
 $10 = HEAP32[$9>>2]|0;
 HEAP32[(34696)>>2] = $10;
 $11 = $pip$addr;
 $primitive_type = ((($11)) + 20|0);
 $12 = HEAP32[$primitive_type>>2]|0;
 $call10 = (__ZL21_sg_gl_primitive_type17sg_primitive_type($12)|0);
 HEAP32[(34684)>>2] = $call10;
 $13 = $pip$addr;
 $index_type = ((($13)) + 24|0);
 $14 = HEAP32[$index_type>>2]|0;
 $call11 = (__ZL17_sg_gl_index_type13sg_index_type($14)|0);
 HEAP32[(34688)>>2] = $call11;
 $15 = $pip$addr;
 $depth_stencil = ((($15)) + 308|0);
 $new_ds = $depth_stencil;
 $cache_ds = (34104);
 $16 = $new_ds;
 $depth_compare_func = ((($16)) + 32|0);
 $17 = HEAP32[$depth_compare_func>>2]|0;
 $18 = $cache_ds;
 $depth_compare_func12 = ((($18)) + 32|0);
 $19 = HEAP32[$depth_compare_func12>>2]|0;
 $cmp13 = ($17|0)!=($19|0);
 if ($cmp13) {
  $20 = $new_ds;
  $depth_compare_func15 = ((($20)) + 32|0);
  $21 = HEAP32[$depth_compare_func15>>2]|0;
  $22 = $cache_ds;
  $depth_compare_func16 = ((($22)) + 32|0);
  HEAP32[$depth_compare_func16>>2] = $21;
  $23 = $new_ds;
  $depth_compare_func17 = ((($23)) + 32|0);
  $24 = HEAP32[$depth_compare_func17>>2]|0;
  $call18 = (__ZL19_sg_gl_compare_func15sg_compare_func($24)|0);
  _glDepthFunc(($call18|0));
 }
 $25 = $new_ds;
 $depth_write_enabled = ((($25)) + 36|0);
 $26 = HEAP8[$depth_write_enabled>>0]|0;
 $tobool19 = $26&1;
 $conv = $tobool19&1;
 $27 = $cache_ds;
 $depth_write_enabled20 = ((($27)) + 36|0);
 $28 = HEAP8[$depth_write_enabled20>>0]|0;
 $tobool21 = $28&1;
 $conv22 = $tobool21&1;
 $cmp23 = ($conv|0)!=($conv22|0);
 if ($cmp23) {
  $29 = $new_ds;
  $depth_write_enabled25 = ((($29)) + 36|0);
  $30 = HEAP8[$depth_write_enabled25>>0]|0;
  $tobool26 = $30&1;
  $31 = $cache_ds;
  $depth_write_enabled27 = ((($31)) + 36|0);
  $frombool = $tobool26&1;
  HEAP8[$depth_write_enabled27>>0] = $frombool;
  $32 = $new_ds;
  $depth_write_enabled28 = ((($32)) + 36|0);
  $33 = HEAP8[$depth_write_enabled28>>0]|0;
  $tobool29 = $33&1;
  $conv30 = $tobool29&1;
  _glDepthMask(($conv30|0));
 }
 $34 = $new_ds;
 $stencil_enabled = ((($34)) + 37|0);
 $35 = HEAP8[$stencil_enabled>>0]|0;
 $tobool32 = $35&1;
 $conv33 = $tobool32&1;
 $36 = $cache_ds;
 $stencil_enabled34 = ((($36)) + 37|0);
 $37 = HEAP8[$stencil_enabled34>>0]|0;
 $tobool35 = $37&1;
 $conv36 = $tobool35&1;
 $cmp37 = ($conv33|0)!=($conv36|0);
 do {
  if ($cmp37) {
   $38 = $new_ds;
   $stencil_enabled39 = ((($38)) + 37|0);
   $39 = HEAP8[$stencil_enabled39>>0]|0;
   $tobool40 = $39&1;
   $40 = $cache_ds;
   $stencil_enabled41 = ((($40)) + 37|0);
   $frombool42 = $tobool40&1;
   HEAP8[$stencil_enabled41>>0] = $frombool42;
   $41 = $new_ds;
   $stencil_enabled43 = ((($41)) + 37|0);
   $42 = HEAP8[$stencil_enabled43>>0]|0;
   $tobool44 = $42&1;
   if ($tobool44) {
    _glEnable(2960);
    break;
   } else {
    _glDisable(2960);
    break;
   }
  }
 } while(0);
 $43 = $new_ds;
 $stencil_write_mask = ((($43)) + 39|0);
 $44 = HEAP8[$stencil_write_mask>>0]|0;
 $conv48 = $44&255;
 $45 = $cache_ds;
 $stencil_write_mask49 = ((($45)) + 39|0);
 $46 = HEAP8[$stencil_write_mask49>>0]|0;
 $conv50 = $46&255;
 $cmp51 = ($conv48|0)!=($conv50|0);
 if ($cmp51) {
  $47 = $new_ds;
  $stencil_write_mask53 = ((($47)) + 39|0);
  $48 = HEAP8[$stencil_write_mask53>>0]|0;
  $49 = $cache_ds;
  $stencil_write_mask54 = ((($49)) + 39|0);
  HEAP8[$stencil_write_mask54>>0] = $48;
  $50 = $new_ds;
  $stencil_write_mask55 = ((($50)) + 39|0);
  $51 = HEAP8[$stencil_write_mask55>>0]|0;
  $conv56 = $51&255;
  _glStencilMask(($conv56|0));
 }
 $i = 0;
 while(1) {
  $52 = $i;
  $cmp58 = ($52|0)<(2);
  if (!($cmp58)) {
   break;
  }
  $53 = $i;
  $cmp59 = ($53|0)==(0);
  $54 = $new_ds;
  $stencil_back = ((($54)) + 16|0);
  $cond = $cmp59 ? $54 : $stencil_back;
  $new_ss = $cond;
  $55 = $i;
  $cmp60 = ($55|0)==(0);
  $56 = $cache_ds;
  $stencil_back64 = ((($56)) + 16|0);
  $cond66 = $cmp60 ? $56 : $stencil_back64;
  $cache_ss = $cond66;
  $57 = $i;
  $cmp67 = ($57|0)==(0);
  $cond68 = $cmp67 ? 1028 : 1029;
  $gl_face = $cond68;
  $58 = $new_ss;
  $compare_func = ((($58)) + 12|0);
  $59 = HEAP32[$compare_func>>2]|0;
  $60 = $cache_ss;
  $compare_func69 = ((($60)) + 12|0);
  $61 = HEAP32[$compare_func69>>2]|0;
  $cmp70 = ($59|0)!=($61|0);
  if ($cmp70) {
   label = 24;
  } else {
   $62 = $new_ds;
   $stencil_read_mask = ((($62)) + 38|0);
   $63 = HEAP8[$stencil_read_mask>>0]|0;
   $conv72 = $63&255;
   $64 = $cache_ds;
   $stencil_read_mask73 = ((($64)) + 38|0);
   $65 = HEAP8[$stencil_read_mask73>>0]|0;
   $conv74 = $65&255;
   $cmp75 = ($conv72|0)!=($conv74|0);
   if ($cmp75) {
    label = 24;
   } else {
    $66 = $new_ds;
    $stencil_ref = ((($66)) + 40|0);
    $67 = HEAP8[$stencil_ref>>0]|0;
    $conv77 = $67&255;
    $68 = $cache_ds;
    $stencil_ref78 = ((($68)) + 40|0);
    $69 = HEAP8[$stencil_ref78>>0]|0;
    $conv79 = $69&255;
    $cmp80 = ($conv77|0)!=($conv79|0);
    if ($cmp80) {
     label = 24;
    }
   }
  }
  if ((label|0) == 24) {
   label = 0;
   $70 = $new_ss;
   $compare_func82 = ((($70)) + 12|0);
   $71 = HEAP32[$compare_func82>>2]|0;
   $72 = $cache_ss;
   $compare_func83 = ((($72)) + 12|0);
   HEAP32[$compare_func83>>2] = $71;
   $73 = $gl_face;
   $74 = $new_ss;
   $compare_func84 = ((($74)) + 12|0);
   $75 = HEAP32[$compare_func84>>2]|0;
   $call85 = (__ZL19_sg_gl_compare_func15sg_compare_func($75)|0);
   $76 = $new_ds;
   $stencil_ref86 = ((($76)) + 40|0);
   $77 = HEAP8[$stencil_ref86>>0]|0;
   $conv87 = $77&255;
   $78 = $new_ds;
   $stencil_read_mask88 = ((($78)) + 38|0);
   $79 = HEAP8[$stencil_read_mask88>>0]|0;
   $conv89 = $79&255;
   _glStencilFuncSeparate(($73|0),($call85|0),($conv87|0),($conv89|0));
  }
  $80 = $new_ss;
  $81 = HEAP32[$80>>2]|0;
  $82 = $cache_ss;
  $83 = HEAP32[$82>>2]|0;
  $cmp92 = ($81|0)!=($83|0);
  if ($cmp92) {
   label = 28;
  } else {
   $84 = $new_ss;
   $depth_fail_op = ((($84)) + 4|0);
   $85 = HEAP32[$depth_fail_op>>2]|0;
   $86 = $cache_ss;
   $depth_fail_op94 = ((($86)) + 4|0);
   $87 = HEAP32[$depth_fail_op94>>2]|0;
   $cmp95 = ($85|0)!=($87|0);
   if ($cmp95) {
    label = 28;
   } else {
    $88 = $new_ss;
    $pass_op = ((($88)) + 8|0);
    $89 = HEAP32[$pass_op>>2]|0;
    $90 = $cache_ss;
    $pass_op97 = ((($90)) + 8|0);
    $91 = HEAP32[$pass_op97>>2]|0;
    $cmp98 = ($89|0)!=($91|0);
    if ($cmp98) {
     label = 28;
    }
   }
  }
  if ((label|0) == 28) {
   label = 0;
   $92 = $new_ss;
   $93 = HEAP32[$92>>2]|0;
   $94 = $cache_ss;
   HEAP32[$94>>2] = $93;
   $95 = $new_ss;
   $depth_fail_op102 = ((($95)) + 4|0);
   $96 = HEAP32[$depth_fail_op102>>2]|0;
   $97 = $cache_ss;
   $depth_fail_op103 = ((($97)) + 4|0);
   HEAP32[$depth_fail_op103>>2] = $96;
   $98 = $new_ss;
   $pass_op104 = ((($98)) + 8|0);
   $99 = HEAP32[$pass_op104>>2]|0;
   $100 = $cache_ss;
   $pass_op105 = ((($100)) + 8|0);
   HEAP32[$pass_op105>>2] = $99;
   $101 = $gl_face;
   $102 = $new_ss;
   $103 = HEAP32[$102>>2]|0;
   $call107 = (__ZL17_sg_gl_stencil_op13sg_stencil_op($103)|0);
   $104 = $new_ss;
   $depth_fail_op108 = ((($104)) + 4|0);
   $105 = HEAP32[$depth_fail_op108>>2]|0;
   $call109 = (__ZL17_sg_gl_stencil_op13sg_stencil_op($105)|0);
   $106 = $new_ss;
   $pass_op110 = ((($106)) + 8|0);
   $107 = HEAP32[$pass_op110>>2]|0;
   $call111 = (__ZL17_sg_gl_stencil_op13sg_stencil_op($107)|0);
   _glStencilOpSeparate(($101|0),($call107|0),($call109|0),($call111|0));
  }
  $108 = $i;
  $inc = (($108) + 1)|0;
  $i = $inc;
 }
 $109 = $new_ds;
 $stencil_read_mask113 = ((($109)) + 38|0);
 $110 = HEAP8[$stencil_read_mask113>>0]|0;
 $111 = $cache_ds;
 $stencil_read_mask114 = ((($111)) + 38|0);
 HEAP8[$stencil_read_mask114>>0] = $110;
 $112 = $new_ds;
 $stencil_ref115 = ((($112)) + 40|0);
 $113 = HEAP8[$stencil_ref115>>0]|0;
 $114 = $cache_ds;
 $stencil_ref116 = ((($114)) + 40|0);
 HEAP8[$stencil_ref116>>0] = $113;
 $115 = $pip$addr;
 $blend = ((($115)) + 352|0);
 $new_b = $blend;
 $cache_b = (34148);
 $116 = $new_b;
 $117 = HEAP8[$116>>0]|0;
 $tobool117 = $117&1;
 $conv118 = $tobool117&1;
 $118 = $cache_b;
 $119 = HEAP8[$118>>0]|0;
 $tobool120 = $119&1;
 $conv121 = $tobool120&1;
 $cmp122 = ($conv118|0)!=($conv121|0);
 do {
  if ($cmp122) {
   $120 = $new_b;
   $121 = HEAP8[$120>>0]|0;
   $tobool125 = $121&1;
   $122 = $cache_b;
   $frombool127 = $tobool125&1;
   HEAP8[$122>>0] = $frombool127;
   $123 = $new_b;
   $124 = HEAP8[$123>>0]|0;
   $tobool129 = $124&1;
   if ($tobool129) {
    _glEnable(3042);
    break;
   } else {
    _glDisable(3042);
    break;
   }
  }
 } while(0);
 $125 = $new_b;
 $src_factor_rgb = ((($125)) + 4|0);
 $126 = HEAP32[$src_factor_rgb>>2]|0;
 $127 = $cache_b;
 $src_factor_rgb134 = ((($127)) + 4|0);
 $128 = HEAP32[$src_factor_rgb134>>2]|0;
 $cmp135 = ($126|0)!=($128|0);
 if ($cmp135) {
  label = 38;
 } else {
  $129 = $new_b;
  $dst_factor_rgb = ((($129)) + 8|0);
  $130 = HEAP32[$dst_factor_rgb>>2]|0;
  $131 = $cache_b;
  $dst_factor_rgb137 = ((($131)) + 8|0);
  $132 = HEAP32[$dst_factor_rgb137>>2]|0;
  $cmp138 = ($130|0)!=($132|0);
  if ($cmp138) {
   label = 38;
  } else {
   $133 = $new_b;
   $src_factor_alpha = ((($133)) + 16|0);
   $134 = HEAP32[$src_factor_alpha>>2]|0;
   $135 = $cache_b;
   $src_factor_alpha140 = ((($135)) + 16|0);
   $136 = HEAP32[$src_factor_alpha140>>2]|0;
   $cmp141 = ($134|0)!=($136|0);
   if ($cmp141) {
    label = 38;
   } else {
    $137 = $new_b;
    $dst_factor_alpha = ((($137)) + 20|0);
    $138 = HEAP32[$dst_factor_alpha>>2]|0;
    $139 = $cache_b;
    $dst_factor_alpha143 = ((($139)) + 20|0);
    $140 = HEAP32[$dst_factor_alpha143>>2]|0;
    $cmp144 = ($138|0)!=($140|0);
    if ($cmp144) {
     label = 38;
    }
   }
  }
 }
 if ((label|0) == 38) {
  $141 = $new_b;
  $src_factor_rgb146 = ((($141)) + 4|0);
  $142 = HEAP32[$src_factor_rgb146>>2]|0;
  $143 = $cache_b;
  $src_factor_rgb147 = ((($143)) + 4|0);
  HEAP32[$src_factor_rgb147>>2] = $142;
  $144 = $new_b;
  $dst_factor_rgb148 = ((($144)) + 8|0);
  $145 = HEAP32[$dst_factor_rgb148>>2]|0;
  $146 = $cache_b;
  $dst_factor_rgb149 = ((($146)) + 8|0);
  HEAP32[$dst_factor_rgb149>>2] = $145;
  $147 = $new_b;
  $src_factor_alpha150 = ((($147)) + 16|0);
  $148 = HEAP32[$src_factor_alpha150>>2]|0;
  $149 = $cache_b;
  $src_factor_alpha151 = ((($149)) + 16|0);
  HEAP32[$src_factor_alpha151>>2] = $148;
  $150 = $new_b;
  $dst_factor_alpha152 = ((($150)) + 20|0);
  $151 = HEAP32[$dst_factor_alpha152>>2]|0;
  $152 = $cache_b;
  $dst_factor_alpha153 = ((($152)) + 20|0);
  HEAP32[$dst_factor_alpha153>>2] = $151;
  $153 = $new_b;
  $src_factor_rgb154 = ((($153)) + 4|0);
  $154 = HEAP32[$src_factor_rgb154>>2]|0;
  $call155 = (__ZL19_sg_gl_blend_factor15sg_blend_factor($154)|0);
  $155 = $new_b;
  $dst_factor_rgb156 = ((($155)) + 8|0);
  $156 = HEAP32[$dst_factor_rgb156>>2]|0;
  $call157 = (__ZL19_sg_gl_blend_factor15sg_blend_factor($156)|0);
  $157 = $new_b;
  $src_factor_alpha158 = ((($157)) + 16|0);
  $158 = HEAP32[$src_factor_alpha158>>2]|0;
  $call159 = (__ZL19_sg_gl_blend_factor15sg_blend_factor($158)|0);
  $159 = $new_b;
  $dst_factor_alpha160 = ((($159)) + 20|0);
  $160 = HEAP32[$dst_factor_alpha160>>2]|0;
  $call161 = (__ZL19_sg_gl_blend_factor15sg_blend_factor($160)|0);
  _glBlendFuncSeparate(($call155|0),($call157|0),($call159|0),($call161|0));
 }
 $161 = $new_b;
 $op_rgb = ((($161)) + 12|0);
 $162 = HEAP32[$op_rgb>>2]|0;
 $163 = $cache_b;
 $op_rgb163 = ((($163)) + 12|0);
 $164 = HEAP32[$op_rgb163>>2]|0;
 $cmp164 = ($162|0)!=($164|0);
 if ($cmp164) {
  label = 41;
 } else {
  $165 = $new_b;
  $op_alpha = ((($165)) + 24|0);
  $166 = HEAP32[$op_alpha>>2]|0;
  $167 = $cache_b;
  $op_alpha166 = ((($167)) + 24|0);
  $168 = HEAP32[$op_alpha166>>2]|0;
  $cmp167 = ($166|0)!=($168|0);
  if ($cmp167) {
   label = 41;
  }
 }
 if ((label|0) == 41) {
  $169 = $new_b;
  $op_rgb169 = ((($169)) + 12|0);
  $170 = HEAP32[$op_rgb169>>2]|0;
  $171 = $cache_b;
  $op_rgb170 = ((($171)) + 12|0);
  HEAP32[$op_rgb170>>2] = $170;
  $172 = $new_b;
  $op_alpha171 = ((($172)) + 24|0);
  $173 = HEAP32[$op_alpha171>>2]|0;
  $174 = $cache_b;
  $op_alpha172 = ((($174)) + 24|0);
  HEAP32[$op_alpha172>>2] = $173;
  $175 = $new_b;
  $op_rgb173 = ((($175)) + 12|0);
  $176 = HEAP32[$op_rgb173>>2]|0;
  $call174 = (__ZL15_sg_gl_blend_op11sg_blend_op($176)|0);
  $177 = $new_b;
  $op_alpha175 = ((($177)) + 24|0);
  $178 = HEAP32[$op_alpha175>>2]|0;
  $call176 = (__ZL15_sg_gl_blend_op11sg_blend_op($178)|0);
  _glBlendEquationSeparate(($call174|0),($call176|0));
 }
 $179 = $new_b;
 $color_write_mask = ((($179)) + 28|0);
 $180 = HEAP8[$color_write_mask>>0]|0;
 $conv178 = $180&255;
 $181 = $cache_b;
 $color_write_mask179 = ((($181)) + 28|0);
 $182 = HEAP8[$color_write_mask179>>0]|0;
 $conv180 = $182&255;
 $cmp181 = ($conv178|0)!=($conv180|0);
 if ($cmp181) {
  $183 = $new_b;
  $color_write_mask183 = ((($183)) + 28|0);
  $184 = HEAP8[$color_write_mask183>>0]|0;
  $185 = $cache_b;
  $color_write_mask184 = ((($185)) + 28|0);
  HEAP8[$color_write_mask184>>0] = $184;
  $186 = $new_b;
  $color_write_mask185 = ((($186)) + 28|0);
  $187 = HEAP8[$color_write_mask185>>0]|0;
  $conv186 = $187&255;
  $and = $conv186 & 1;
  $cmp187 = ($and|0)!=(0);
  $conv188 = $cmp187&1;
  $188 = $new_b;
  $color_write_mask189 = ((($188)) + 28|0);
  $189 = HEAP8[$color_write_mask189>>0]|0;
  $conv190 = $189&255;
  $and191 = $conv190 & 2;
  $cmp192 = ($and191|0)!=(0);
  $conv193 = $cmp192&1;
  $190 = $new_b;
  $color_write_mask194 = ((($190)) + 28|0);
  $191 = HEAP8[$color_write_mask194>>0]|0;
  $conv195 = $191&255;
  $and196 = $conv195 & 4;
  $cmp197 = ($and196|0)!=(0);
  $conv198 = $cmp197&1;
  $192 = $new_b;
  $color_write_mask199 = ((($192)) + 28|0);
  $193 = HEAP8[$color_write_mask199>>0]|0;
  $conv200 = $193&255;
  $and201 = $conv200 & 8;
  $cmp202 = ($and201|0)!=(0);
  $conv203 = $cmp202&1;
  _glColorMask(($conv188|0),($conv193|0),($conv198|0),($conv203|0));
 }
 $194 = $new_b;
 $blend_color = ((($194)) + 44|0);
 $195 = +HEAPF32[$blend_color>>2];
 $196 = $cache_b;
 $blend_color205 = ((($196)) + 44|0);
 $197 = +HEAPF32[$blend_color205>>2];
 $sub = $195 - $197;
 $cmp207 = $sub > -9.9999997473787516E-5;
 if ($cmp207) {
  $198 = $new_b;
  $blend_color208 = ((($198)) + 44|0);
  $199 = +HEAPF32[$blend_color208>>2];
  $200 = $cache_b;
  $blend_color210 = ((($200)) + 44|0);
  $201 = +HEAPF32[$blend_color210>>2];
  $sub212 = $199 - $201;
  $cmp213 = $sub212 < 9.9999997473787516E-5;
  if ($cmp213) {
   $202 = $new_b;
   $blend_color215 = ((($202)) + 44|0);
   $arrayidx216 = ((($blend_color215)) + 4|0);
   $203 = +HEAPF32[$arrayidx216>>2];
   $204 = $cache_b;
   $blend_color217 = ((($204)) + 44|0);
   $arrayidx218 = ((($blend_color217)) + 4|0);
   $205 = +HEAPF32[$arrayidx218>>2];
   $sub219 = $203 - $205;
   $cmp220 = $sub219 > -9.9999997473787516E-5;
   if ($cmp220) {
    $206 = $new_b;
    $blend_color222 = ((($206)) + 44|0);
    $arrayidx223 = ((($blend_color222)) + 4|0);
    $207 = +HEAPF32[$arrayidx223>>2];
    $208 = $cache_b;
    $blend_color224 = ((($208)) + 44|0);
    $arrayidx225 = ((($blend_color224)) + 4|0);
    $209 = +HEAPF32[$arrayidx225>>2];
    $sub226 = $207 - $209;
    $cmp227 = $sub226 < 9.9999997473787516E-5;
    if ($cmp227) {
     $210 = $new_b;
     $blend_color229 = ((($210)) + 44|0);
     $arrayidx230 = ((($blend_color229)) + 8|0);
     $211 = +HEAPF32[$arrayidx230>>2];
     $212 = $cache_b;
     $blend_color231 = ((($212)) + 44|0);
     $arrayidx232 = ((($blend_color231)) + 8|0);
     $213 = +HEAPF32[$arrayidx232>>2];
     $sub233 = $211 - $213;
     $cmp234 = $sub233 > -9.9999997473787516E-5;
     if ($cmp234) {
      $214 = $new_b;
      $blend_color236 = ((($214)) + 44|0);
      $arrayidx237 = ((($blend_color236)) + 8|0);
      $215 = +HEAPF32[$arrayidx237>>2];
      $216 = $cache_b;
      $blend_color238 = ((($216)) + 44|0);
      $arrayidx239 = ((($blend_color238)) + 8|0);
      $217 = +HEAPF32[$arrayidx239>>2];
      $sub240 = $215 - $217;
      $cmp241 = $sub240 < 9.9999997473787516E-5;
      if ($cmp241) {
       $218 = $new_b;
       $blend_color243 = ((($218)) + 44|0);
       $arrayidx244 = ((($blend_color243)) + 12|0);
       $219 = +HEAPF32[$arrayidx244>>2];
       $220 = $cache_b;
       $blend_color245 = ((($220)) + 44|0);
       $arrayidx246 = ((($blend_color245)) + 12|0);
       $221 = +HEAPF32[$arrayidx246>>2];
       $sub247 = $219 - $221;
       $cmp248 = $sub247 > -9.9999997473787516E-5;
       if ($cmp248) {
        $222 = $new_b;
        $blend_color250 = ((($222)) + 44|0);
        $arrayidx251 = ((($blend_color250)) + 12|0);
        $223 = +HEAPF32[$arrayidx251>>2];
        $224 = $cache_b;
        $blend_color252 = ((($224)) + 44|0);
        $arrayidx253 = ((($blend_color252)) + 12|0);
        $225 = +HEAPF32[$arrayidx253>>2];
        $sub254 = $223 - $225;
        $cmp255 = $sub254 < 9.9999997473787516E-5;
        if (!($cmp255)) {
         label = 52;
        }
       } else {
        label = 52;
       }
      } else {
       label = 52;
      }
     } else {
      label = 52;
     }
    } else {
     label = 52;
    }
   } else {
    label = 52;
   }
  } else {
   label = 52;
  }
 } else {
  label = 52;
 }
 if ((label|0) == 52) {
  $226 = $new_b;
  $blend_color257 = ((($226)) + 44|0);
  $bc = $blend_color257;
  $i258 = 0;
  while(1) {
   $227 = $i258;
   $cmp260 = ($227|0)<(4);
   $228 = $bc;
   if (!($cmp260)) {
    break;
   }
   $229 = $i258;
   $arrayidx262 = (($228) + ($229<<2)|0);
   $230 = +HEAPF32[$arrayidx262>>2];
   $231 = $cache_b;
   $blend_color263 = ((($231)) + 44|0);
   $232 = $i258;
   $arrayidx264 = (($blend_color263) + ($232<<2)|0);
   HEAPF32[$arrayidx264>>2] = $230;
   $233 = $i258;
   $inc266 = (($233) + 1)|0;
   $i258 = $inc266;
  }
  $234 = +HEAPF32[$228>>2];
  $235 = $bc;
  $arrayidx269 = ((($235)) + 4|0);
  $236 = +HEAPF32[$arrayidx269>>2];
  $237 = $bc;
  $arrayidx270 = ((($237)) + 8|0);
  $238 = +HEAPF32[$arrayidx270>>2];
  $239 = $bc;
  $arrayidx271 = ((($239)) + 12|0);
  $240 = +HEAPF32[$arrayidx271>>2];
  _glBlendColor((+$234),(+$236),(+$238),(+$240));
 }
 $241 = $pip$addr;
 $rast = ((($241)) + 412|0);
 $new_r = $rast;
 $cache_r = (34208);
 $242 = $new_r;
 $cull_mode = ((($242)) + 4|0);
 $243 = HEAP32[$cull_mode>>2]|0;
 $244 = $cache_r;
 $cull_mode273 = ((($244)) + 4|0);
 $245 = HEAP32[$cull_mode273>>2]|0;
 $cmp274 = ($243|0)!=($245|0);
 do {
  if ($cmp274) {
   $246 = $new_r;
   $cull_mode276 = ((($246)) + 4|0);
   $247 = HEAP32[$cull_mode276>>2]|0;
   $248 = $cache_r;
   $cull_mode277 = ((($248)) + 4|0);
   HEAP32[$cull_mode277>>2] = $247;
   $249 = $new_r;
   $cull_mode278 = ((($249)) + 4|0);
   $250 = HEAP32[$cull_mode278>>2]|0;
   $cmp279 = (1)==($250|0);
   if ($cmp279) {
    _glDisable(2884);
    break;
   } else {
    _glEnable(2884);
    $251 = $new_r;
    $cull_mode282 = ((($251)) + 4|0);
    $252 = HEAP32[$cull_mode282>>2]|0;
    $cmp283 = (2)==($252|0);
    $cond284 = $cmp283 ? 1028 : 1029;
    $gl_mode = $cond284;
    $253 = $gl_mode;
    _glCullFace(($253|0));
    break;
   }
  }
 } while(0);
 $254 = $new_r;
 $face_winding = ((($254)) + 8|0);
 $255 = HEAP32[$face_winding>>2]|0;
 $256 = $cache_r;
 $face_winding287 = ((($256)) + 8|0);
 $257 = HEAP32[$face_winding287>>2]|0;
 $cmp288 = ($255|0)!=($257|0);
 if ($cmp288) {
  $258 = $new_r;
  $face_winding290 = ((($258)) + 8|0);
  $259 = HEAP32[$face_winding290>>2]|0;
  $260 = $cache_r;
  $face_winding291 = ((($260)) + 8|0);
  HEAP32[$face_winding291>>2] = $259;
  $261 = $new_r;
  $face_winding292 = ((($261)) + 8|0);
  $262 = HEAP32[$face_winding292>>2]|0;
  $cmp293 = (2)==($262|0);
  $cond294 = $cmp293 ? 2304 : 2305;
  $gl_winding = $cond294;
  $263 = $gl_winding;
  _glFrontFace(($263|0));
 }
 $264 = $new_r;
 $265 = HEAP8[$264>>0]|0;
 $tobool296 = $265&1;
 $conv297 = $tobool296&1;
 $266 = $cache_r;
 $267 = HEAP8[$266>>0]|0;
 $tobool299 = $267&1;
 $conv300 = $tobool299&1;
 $cmp301 = ($conv297|0)!=($conv300|0);
 do {
  if ($cmp301) {
   $268 = $new_r;
   $269 = HEAP8[$268>>0]|0;
   $tobool304 = $269&1;
   $270 = $cache_r;
   $frombool306 = $tobool304&1;
   HEAP8[$270>>0] = $frombool306;
   $271 = $new_r;
   $272 = HEAP8[$271>>0]|0;
   $tobool308 = $272&1;
   if ($tobool308) {
    _glEnable(32926);
    break;
   } else {
    _glDisable(32926);
    break;
   }
  }
 } while(0);
 $273 = $new_r;
 $depth_bias = ((($273)) + 16|0);
 $274 = +HEAPF32[$depth_bias>>2];
 $275 = $cache_r;
 $depth_bias313 = ((($275)) + 16|0);
 $276 = +HEAPF32[$depth_bias313>>2];
 $sub314 = $274 - $276;
 $cmp315 = $sub314 > -9.9999999747524271E-7;
 if ($cmp315) {
  $277 = $new_r;
  $depth_bias317 = ((($277)) + 16|0);
  $278 = +HEAPF32[$depth_bias317>>2];
  $279 = $cache_r;
  $depth_bias318 = ((($279)) + 16|0);
  $280 = +HEAPF32[$depth_bias318>>2];
  $sub319 = $278 - $280;
  $cmp320 = $sub319 < 9.9999999747524271E-7;
  if ($cmp320) {
   $281 = $new_r;
   $depth_bias_slope_scale = ((($281)) + 20|0);
   $282 = +HEAPF32[$depth_bias_slope_scale>>2];
   $283 = $cache_r;
   $depth_bias_slope_scale322 = ((($283)) + 20|0);
   $284 = +HEAPF32[$depth_bias_slope_scale322>>2];
   $sub323 = $282 - $284;
   $cmp324 = $sub323 > -9.9999999747524271E-7;
   if ($cmp324) {
    $285 = $new_r;
    $depth_bias_slope_scale326 = ((($285)) + 20|0);
    $286 = +HEAPF32[$depth_bias_slope_scale326>>2];
    $287 = $cache_r;
    $depth_bias_slope_scale327 = ((($287)) + 20|0);
    $288 = +HEAPF32[$depth_bias_slope_scale327>>2];
    $sub328 = $286 - $288;
    $cmp329 = $sub328 < 9.9999999747524271E-7;
    if (!($cmp329)) {
     label = 70;
    }
   } else {
    label = 70;
   }
  } else {
   label = 70;
  }
 } else {
  label = 70;
 }
 do {
  if ((label|0) == 70) {
   $289 = $new_r;
   $depth_bias331 = ((($289)) + 16|0);
   $290 = +HEAPF32[$depth_bias331>>2];
   $291 = $cache_r;
   $depth_bias332 = ((($291)) + 16|0);
   HEAPF32[$depth_bias332>>2] = $290;
   $292 = $new_r;
   $depth_bias_slope_scale333 = ((($292)) + 20|0);
   $293 = +HEAPF32[$depth_bias_slope_scale333>>2];
   $294 = $cache_r;
   $depth_bias_slope_scale334 = ((($294)) + 20|0);
   HEAPF32[$depth_bias_slope_scale334>>2] = $293;
   $295 = $new_r;
   $depth_bias_slope_scale335 = ((($295)) + 20|0);
   $296 = +HEAPF32[$depth_bias_slope_scale335>>2];
   $297 = $new_r;
   $depth_bias336 = ((($297)) + 16|0);
   $298 = +HEAPF32[$depth_bias336>>2];
   _glPolygonOffset((+$296),(+$298));
   $po_enabled = 1;
   $299 = $new_r;
   $depth_bias337 = ((($299)) + 16|0);
   $300 = +HEAPF32[$depth_bias337>>2];
   $sub338 = $300 - 0.0;
   $cmp339 = $sub338 > -9.9999999747524271E-7;
   do {
    if ($cmp339) {
     $301 = $new_r;
     $depth_bias341 = ((($301)) + 16|0);
     $302 = +HEAPF32[$depth_bias341>>2];
     $sub342 = $302 - 0.0;
     $cmp343 = $sub342 < 9.9999999747524271E-7;
     if (!($cmp343)) {
      break;
     }
     $303 = $new_r;
     $depth_bias_slope_scale345 = ((($303)) + 20|0);
     $304 = +HEAPF32[$depth_bias_slope_scale345>>2];
     $sub346 = $304 - 0.0;
     $cmp347 = $sub346 > -9.9999999747524271E-7;
     if (!($cmp347)) {
      break;
     }
     $305 = $new_r;
     $depth_bias_slope_scale349 = ((($305)) + 20|0);
     $306 = +HEAPF32[$depth_bias_slope_scale349>>2];
     $sub350 = $306 - 0.0;
     $cmp351 = $sub350 < 9.9999999747524271E-7;
     if (!($cmp351)) {
      break;
     }
     $po_enabled = 0;
    }
   } while(0);
   $307 = $po_enabled;
   $tobool354 = $307&1;
   $conv355 = $tobool354&1;
   $308 = HEAP8[(34236)>>0]|0;
   $tobool356 = $308&1;
   $conv357 = $tobool356&1;
   $cmp358 = ($conv355|0)!=($conv357|0);
   if ($cmp358) {
    $309 = $po_enabled;
    $tobool360 = $309&1;
    $frombool361 = $tobool360&1;
    HEAP8[(34236)>>0] = $frombool361;
    $310 = $po_enabled;
    $tobool362 = $310&1;
    if ($tobool362) {
     _glEnable(32823);
     break;
    } else {
     _glDisable(32823);
     break;
    }
   }
  }
 } while(0);
 $311 = $pip$addr;
 $shader368 = ((($311)) + 12|0);
 $312 = HEAP32[$shader368>>2]|0;
 $gl_prog = ((($312)) + 12|0);
 $313 = HEAP32[$gl_prog>>2]|0;
 _glUseProgram(($313|0));
 STACKTOP = sp;return;
}
function __ZL21_sg_gl_primitive_type17sg_primitive_type($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $retval = 0, $t$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $t$addr = $t;
 $0 = $t$addr;
 switch ($0|0) {
 case 1:  {
  $retval = 0;
  break;
 }
 case 2:  {
  $retval = 1;
  break;
 }
 case 3:  {
  $retval = 3;
  break;
 }
 case 4:  {
  $retval = 4;
  break;
 }
 case 5:  {
  $retval = 5;
  break;
 }
 default: {
  ___assert_fail((24519|0),(9686|0),3915,(21456|0));
  // unreachable;
 }
 }
 $1 = $retval;
 STACKTOP = sp;return ($1|0);
}
function __ZL17_sg_gl_index_type13sg_index_type($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $retval = 0, $t$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $t$addr = $t;
 $0 = $t$addr;
 switch ($0|0) {
 case 1:  {
  $retval = 0;
  break;
 }
 case 2:  {
  $retval = 5123;
  break;
 }
 case 3:  {
  $retval = 5125;
  break;
 }
 default: {
  ___assert_fail((24519|0),(9686|0),3924,(21438|0));
  // unreachable;
 }
 }
 $1 = $retval;
 STACKTOP = sp;return ($1|0);
}
function __ZL19_sg_gl_compare_func15sg_compare_func($cmp) {
 $cmp = $cmp|0;
 var $0 = 0, $1 = 0, $cmp$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $cmp$addr = $cmp;
 $0 = $cmp$addr;
 switch ($0|0) {
 case 1:  {
  $retval = 512;
  break;
 }
 case 2:  {
  $retval = 513;
  break;
 }
 case 3:  {
  $retval = 514;
  break;
 }
 case 4:  {
  $retval = 515;
  break;
 }
 case 5:  {
  $retval = 516;
  break;
 }
 case 6:  {
  $retval = 517;
  break;
 }
 case 7:  {
  $retval = 518;
  break;
 }
 case 8:  {
  $retval = 519;
  break;
 }
 default: {
  ___assert_fail((24519|0),(9686|0),3938,(21418|0));
  // unreachable;
 }
 }
 $1 = $retval;
 STACKTOP = sp;return ($1|0);
}
function __ZL17_sg_gl_stencil_op13sg_stencil_op($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $op$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $op$addr = $op;
 $0 = $op$addr;
 switch ($0|0) {
 case 1:  {
  $retval = 7680;
  break;
 }
 case 2:  {
  $retval = 0;
  break;
 }
 case 3:  {
  $retval = 7681;
  break;
 }
 case 4:  {
  $retval = 7682;
  break;
 }
 case 5:  {
  $retval = 7683;
  break;
 }
 case 6:  {
  $retval = 5386;
  break;
 }
 case 7:  {
  $retval = 34055;
  break;
 }
 case 8:  {
  $retval = 34056;
  break;
 }
 default: {
  ___assert_fail((24519|0),(9686|0),3952,(21400|0));
  // unreachable;
 }
 }
 $1 = $retval;
 STACKTOP = sp;return ($1|0);
}
function __ZL19_sg_gl_blend_factor15sg_blend_factor($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $f$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $f$addr = $f;
 $0 = $f$addr;
 do {
  switch ($0|0) {
  case 1:  {
   $retval = 0;
   break;
  }
  case 2:  {
   $retval = 1;
   break;
  }
  case 3:  {
   $retval = 768;
   break;
  }
  case 4:  {
   $retval = 769;
   break;
  }
  case 5:  {
   $retval = 770;
   break;
  }
  case 6:  {
   $retval = 771;
   break;
  }
  case 7:  {
   $retval = 774;
   break;
  }
  case 8:  {
   $retval = 775;
   break;
  }
  case 9:  {
   $retval = 772;
   break;
  }
  case 10:  {
   $retval = 773;
   break;
  }
  case 11:  {
   $retval = 776;
   break;
  }
  case 12:  {
   $retval = 32769;
   break;
  }
  case 13:  {
   $retval = 32770;
   break;
  }
  case 14:  {
   $retval = 32771;
   break;
  }
  case 15:  {
   $retval = 32772;
   break;
  }
  default: {
   ___assert_fail((24519|0),(9686|0),3973,(21380|0));
   // unreachable;
  }
  }
 } while(0);
 $1 = $retval;
 STACKTOP = sp;return ($1|0);
}
function __ZL15_sg_gl_blend_op11sg_blend_op($op) {
 $op = $op|0;
 var $0 = 0, $1 = 0, $op$addr = 0, $retval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $op$addr = $op;
 $0 = $op$addr;
 switch ($0|0) {
 case 1:  {
  $retval = 32774;
  break;
 }
 case 2:  {
  $retval = 32778;
  break;
 }
 case 3:  {
  $retval = 32779;
  break;
 }
 default: {
  ___assert_fail((24519|0),(9686|0),3982,(21364|0));
  // unreachable;
 }
 }
 $1 = $retval;
 STACKTOP = sp;return ($1|0);
}
function _sg_apply_bindings($bindings) {
 $bindings = $bindings|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $9 = 0, $_end_canary = 0, $and = 0, $and123 = 0, $and33 = 0, $and53 = 0, $and62 = 0, $and90 = 0, $append_overflow = 0, $append_overflow56 = 0, $arrayidx = 0, $arrayidx103 = 0, $arrayidx108 = 0, $arrayidx111 = 0, $arrayidx112 = 0, $arrayidx116 = 0, $arrayidx15 = 0, $arrayidx18 = 0;
 var $arrayidx19 = 0, $arrayidx23 = 0, $arrayidx28 = 0, $arrayidx70 = 0, $arrayidx75 = 0, $arrayidx78 = 0, $arrayidx79 = 0, $arrayidx83 = 0, $bindings$addr = 0, $call = 0, $call110 = 0, $call17 = 0, $call43 = 0, $call7 = 0, $call77 = 0, $cmp = 0, $cmp101 = 0, $cmp11 = 0, $cmp119 = 0, $cmp24 = 0;
 var $cmp4 = 0, $cmp49 = 0, $cmp68 = 0, $cmp86 = 0, $conv = 0, $conv120 = 0, $conv122 = 0, $conv26 = 0, $conv30 = 0, $conv32 = 0, $conv50 = 0, $conv52 = 0, $conv59 = 0, $conv61 = 0, $conv87 = 0, $conv89 = 0, $frombool = 0, $frombool125 = 0, $frombool35 = 0, $frombool55 = 0;
 var $frombool64 = 0, $frombool92 = 0, $fs_images = 0, $fs_images107 = 0, $fs_imgs = 0, $i = 0, $i66 = 0, $i99 = 0, $ib = 0, $ib_offset = 0, $inc = 0, $inc129 = 0, $inc130 = 0, $inc37 = 0, $inc96 = 0, $inc97 = 0, $index_buffer = 0, $index_buffer41 = 0, $index_buffer_offset = 0, $lnot = 0;
 var $lnot58 = 0, $num_fs_imgs = 0, $num_vbs = 0, $num_vs_imgs = 0, $pip = 0, $state = 0, $state118 = 0, $state48 = 0, $state85 = 0, $tobool = 0, $tobool1 = 0, $tobool105 = 0, $tobool113 = 0, $tobool12 = 0, $tobool121 = 0, $tobool124 = 0, $tobool132 = 0, $tobool20 = 0, $tobool25 = 0, $tobool27 = 0;
 var $tobool29 = 0, $tobool31 = 0, $tobool34 = 0, $tobool39 = 0, $tobool44 = 0, $tobool51 = 0, $tobool54 = 0, $tobool57 = 0, $tobool60 = 0, $tobool63 = 0, $tobool72 = 0, $tobool8 = 0, $tobool80 = 0, $tobool88 = 0, $tobool91 = 0, $vb_offsets = 0, $vbs = 0, $vertex_buffer_offsets = 0, $vertex_buffers = 0, $vertex_buffers14 = 0;
 var $vs_images = 0, $vs_images74 = 0, $vs_imgs = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $vbs = sp + 96|0;
 $vs_imgs = sp + 48|0;
 $fs_imgs = sp;
 $bindings$addr = $bindings;
 $0 = HEAP8[33468]|0;
 $tobool = $0&1;
 if (!($tobool)) {
  ___assert_fail((9780|0),(9686|0),11326,(21506|0));
  // unreachable;
 }
 $1 = $bindings$addr;
 $tobool1 = ($1|0)!=(0|0);
 if (!($tobool1)) {
  ___assert_fail((21524|0),(9686|0),11327,(21506|0));
  // unreachable;
 }
 $2 = $bindings$addr;
 $3 = HEAP32[$2>>2]|0;
 $cmp = ($3|0)==(0);
 if (!($cmp)) {
  ___assert_fail((21533|0),(9686|0),11328,(21506|0));
  // unreachable;
 }
 $4 = $bindings$addr;
 $_end_canary = ((($4)) + 172|0);
 $5 = HEAP32[$_end_canary>>2]|0;
 $cmp4 = ($5|0)==(0);
 if (!($cmp4)) {
  ___assert_fail((21533|0),(9686|0),11328,(21506|0));
  // unreachable;
 }
 $6 = $bindings$addr;
 $call = (__ZL27_sg_validate_apply_bindingsPK11sg_bindings($6)|0);
 if (!($call)) {
  HEAP8[(33562)>>0] = 0;
  STACKTOP = sp;return;
 }
 HEAP8[(33561)>>0] = 1;
 $7 = HEAP32[(33556)>>2]|0;
 $call7 = (__ZL19_sg_lookup_pipelinePK11_sg_pools_tj((33568),$7)|0);
 $pip = $call7;
 $8 = $pip;
 $tobool8 = ($8|0)!=(0|0);
 if (!($tobool8)) {
  ___assert_fail((11450|0),(9686|0),11337,(21506|0));
  // unreachable;
 }
 ;HEAP32[$vbs>>2]=0|0;HEAP32[$vbs+4>>2]=0|0;HEAP32[$vbs+8>>2]=0|0;HEAP32[$vbs+12>>2]=0|0;HEAP32[$vbs+16>>2]=0|0;HEAP32[$vbs+20>>2]=0|0;HEAP32[$vbs+24>>2]=0|0;HEAP32[$vbs+28>>2]=0|0;
 $num_vbs = 0;
 $i = 0;
 while(1) {
  $9 = $i;
  $cmp11 = ($9|0)<(8);
  if (!($cmp11)) {
   break;
  }
  $10 = $bindings$addr;
  $vertex_buffers = ((($10)) + 4|0);
  $11 = $i;
  $arrayidx = (($vertex_buffers) + ($11<<2)|0);
  $12 = HEAP32[$arrayidx>>2]|0;
  $tobool12 = ($12|0)!=(0);
  if (!($tobool12)) {
   break;
  }
  $13 = $bindings$addr;
  $vertex_buffers14 = ((($13)) + 4|0);
  $14 = $i;
  $arrayidx15 = (($vertex_buffers14) + ($14<<2)|0);
  $15 = HEAP32[$arrayidx15>>2]|0;
  $call17 = (__ZL17_sg_lookup_bufferPK11_sg_pools_tj((33568),$15)|0);
  $16 = $i;
  $arrayidx18 = (($vbs) + ($16<<2)|0);
  HEAP32[$arrayidx18>>2] = $call17;
  $17 = $i;
  $arrayidx19 = (($vbs) + ($17<<2)|0);
  $18 = HEAP32[$arrayidx19>>2]|0;
  $tobool20 = ($18|0)!=(0|0);
  if (!($tobool20)) {
   label = 16;
   break;
  }
  $19 = $i;
  $arrayidx23 = (($vbs) + ($19<<2)|0);
  $20 = HEAP32[$arrayidx23>>2]|0;
  $state = ((($20)) + 8|0);
  $21 = HEAP32[$state>>2]|0;
  $cmp24 = (2)==($21|0);
  $conv = $cmp24&1;
  $22 = HEAP8[(33562)>>0]|0;
  $tobool25 = $22&1;
  $conv26 = $tobool25&1;
  $and = $conv26 & $conv;
  $tobool27 = ($and|0)!=(0);
  $frombool = $tobool27&1;
  HEAP8[(33562)>>0] = $frombool;
  $23 = $i;
  $arrayidx28 = (($vbs) + ($23<<2)|0);
  $24 = HEAP32[$arrayidx28>>2]|0;
  $append_overflow = ((($24)) + 20|0);
  $25 = HEAP8[$append_overflow>>0]|0;
  $tobool29 = $25&1;
  $lnot = $tobool29 ^ 1;
  $conv30 = $lnot&1;
  $26 = HEAP8[(33562)>>0]|0;
  $tobool31 = $26&1;
  $conv32 = $tobool31&1;
  $and33 = $conv32 & $conv30;
  $tobool34 = ($and33|0)!=(0);
  $frombool35 = $tobool34&1;
  HEAP8[(33562)>>0] = $frombool35;
  $27 = $i;
  $inc = (($27) + 1)|0;
  $i = $inc;
  $28 = $num_vbs;
  $inc37 = (($28) + 1)|0;
  $num_vbs = $inc37;
 }
 if ((label|0) == 16) {
  ___assert_fail((21594|0),(9686|0),11344,(21506|0));
  // unreachable;
 }
 $ib = 0;
 $29 = $bindings$addr;
 $index_buffer = ((($29)) + 68|0);
 $30 = HEAP32[$index_buffer>>2]|0;
 $tobool39 = ($30|0)!=(0);
 do {
  if ($tobool39) {
   $31 = $bindings$addr;
   $index_buffer41 = ((($31)) + 68|0);
   $32 = HEAP32[$index_buffer41>>2]|0;
   $call43 = (__ZL17_sg_lookup_bufferPK11_sg_pools_tj((33568),$32)|0);
   $ib = $call43;
   $33 = $ib;
   $tobool44 = ($33|0)!=(0|0);
   if ($tobool44) {
    $34 = $ib;
    $state48 = ((($34)) + 8|0);
    $35 = HEAP32[$state48>>2]|0;
    $cmp49 = (2)==($35|0);
    $conv50 = $cmp49&1;
    $36 = HEAP8[(33562)>>0]|0;
    $tobool51 = $36&1;
    $conv52 = $tobool51&1;
    $and53 = $conv52 & $conv50;
    $tobool54 = ($and53|0)!=(0);
    $frombool55 = $tobool54&1;
    HEAP8[(33562)>>0] = $frombool55;
    $37 = $ib;
    $append_overflow56 = ((($37)) + 20|0);
    $38 = HEAP8[$append_overflow56>>0]|0;
    $tobool57 = $38&1;
    $lnot58 = $tobool57 ^ 1;
    $conv59 = $lnot58&1;
    $39 = HEAP8[(33562)>>0]|0;
    $tobool60 = $39&1;
    $conv61 = $tobool60&1;
    $and62 = $conv61 & $conv59;
    $tobool63 = ($and62|0)!=(0);
    $frombool64 = $tobool63&1;
    HEAP8[(33562)>>0] = $frombool64;
    break;
   } else {
    ___assert_fail((21601|0),(9686|0),11356,(21506|0));
    // unreachable;
   }
  }
 } while(0);
 dest=$vs_imgs; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $num_vs_imgs = 0;
 $i66 = 0;
 while(1) {
  $40 = $i66;
  $cmp68 = ($40|0)<(12);
  if (!($cmp68)) {
   break;
  }
  $41 = $bindings$addr;
  $vs_images = ((($41)) + 76|0);
  $42 = $i66;
  $arrayidx70 = (($vs_images) + ($42<<2)|0);
  $43 = HEAP32[$arrayidx70>>2]|0;
  $tobool72 = ($43|0)!=(0);
  if (!($tobool72)) {
   break;
  }
  $44 = $bindings$addr;
  $vs_images74 = ((($44)) + 76|0);
  $45 = $i66;
  $arrayidx75 = (($vs_images74) + ($45<<2)|0);
  $46 = HEAP32[$arrayidx75>>2]|0;
  $call77 = (__ZL16_sg_lookup_imagePK11_sg_pools_tj((33568),$46)|0);
  $47 = $i66;
  $arrayidx78 = (($vs_imgs) + ($47<<2)|0);
  HEAP32[$arrayidx78>>2] = $call77;
  $48 = $i66;
  $arrayidx79 = (($vs_imgs) + ($48<<2)|0);
  $49 = HEAP32[$arrayidx79>>2]|0;
  $tobool80 = ($49|0)!=(0|0);
  if (!($tobool80)) {
   label = 26;
   break;
  }
  $50 = $i66;
  $arrayidx83 = (($vs_imgs) + ($50<<2)|0);
  $51 = HEAP32[$arrayidx83>>2]|0;
  $state85 = ((($51)) + 8|0);
  $52 = HEAP32[$state85>>2]|0;
  $cmp86 = (2)==($52|0);
  $conv87 = $cmp86&1;
  $53 = HEAP8[(33562)>>0]|0;
  $tobool88 = $53&1;
  $conv89 = $tobool88&1;
  $and90 = $conv89 & $conv87;
  $tobool91 = ($and90|0)!=(0);
  $frombool92 = $tobool91&1;
  HEAP8[(33562)>>0] = $frombool92;
  $54 = $i66;
  $inc96 = (($54) + 1)|0;
  $i66 = $inc96;
  $55 = $num_vs_imgs;
  $inc97 = (($55) + 1)|0;
  $num_vs_imgs = $inc97;
 }
 if ((label|0) == 26) {
  ___assert_fail((21604|0),(9686|0),11366,(21506|0));
  // unreachable;
 }
 dest=$fs_imgs; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $num_fs_imgs = 0;
 $i99 = 0;
 while(1) {
  $56 = $i99;
  $cmp101 = ($56|0)<(12);
  if (!($cmp101)) {
   break;
  }
  $57 = $bindings$addr;
  $fs_images = ((($57)) + 124|0);
  $58 = $i99;
  $arrayidx103 = (($fs_images) + ($58<<2)|0);
  $59 = HEAP32[$arrayidx103>>2]|0;
  $tobool105 = ($59|0)!=(0);
  if (!($tobool105)) {
   break;
  }
  $60 = $bindings$addr;
  $fs_images107 = ((($60)) + 124|0);
  $61 = $i99;
  $arrayidx108 = (($fs_images107) + ($61<<2)|0);
  $62 = HEAP32[$arrayidx108>>2]|0;
  $call110 = (__ZL16_sg_lookup_imagePK11_sg_pools_tj((33568),$62)|0);
  $63 = $i99;
  $arrayidx111 = (($fs_imgs) + ($63<<2)|0);
  HEAP32[$arrayidx111>>2] = $call110;
  $64 = $i99;
  $arrayidx112 = (($fs_imgs) + ($64<<2)|0);
  $65 = HEAP32[$arrayidx112>>2]|0;
  $tobool113 = ($65|0)!=(0|0);
  if (!($tobool113)) {
   label = 32;
   break;
  }
  $66 = $i99;
  $arrayidx116 = (($fs_imgs) + ($66<<2)|0);
  $67 = HEAP32[$arrayidx116>>2]|0;
  $state118 = ((($67)) + 8|0);
  $68 = HEAP32[$state118>>2]|0;
  $cmp119 = (2)==($68|0);
  $conv120 = $cmp119&1;
  $69 = HEAP8[(33562)>>0]|0;
  $tobool121 = $69&1;
  $conv122 = $tobool121&1;
  $and123 = $conv122 & $conv120;
  $tobool124 = ($and123|0)!=(0);
  $frombool125 = $tobool124&1;
  HEAP8[(33562)>>0] = $frombool125;
  $70 = $i99;
  $inc129 = (($70) + 1)|0;
  $i99 = $inc129;
  $71 = $num_fs_imgs;
  $inc130 = (($71) + 1)|0;
  $num_fs_imgs = $inc130;
 }
 if ((label|0) == 32) {
  ___assert_fail((21615|0),(9686|0),11379,(21506|0));
  // unreachable;
 }
 $72 = HEAP8[(33562)>>0]|0;
 $tobool132 = $72&1;
 if (!($tobool132)) {
  STACKTOP = sp;return;
 }
 $73 = $bindings$addr;
 $vertex_buffer_offsets = ((($73)) + 36|0);
 $vb_offsets = $vertex_buffer_offsets;
 $74 = $bindings$addr;
 $index_buffer_offset = ((($74)) + 72|0);
 $75 = HEAP32[$index_buffer_offset>>2]|0;
 $ib_offset = $75;
 $76 = $pip;
 $77 = $vb_offsets;
 $78 = $num_vbs;
 $79 = $ib;
 $80 = $ib_offset;
 $81 = $num_vs_imgs;
 $82 = $num_fs_imgs;
 __ZL18_sg_apply_bindingsP14_sg_pipeline_tPP12_sg_buffer_tPKiiS2_iPP11_sg_image_tiS8_i($76,$vbs,$77,$78,$79,$80,$vs_imgs,$81,$fs_imgs,$82);
 STACKTOP = sp;return;
}
function __ZL27_sg_validate_apply_bindingsPK11sg_bindings($bindings) {
 $bindings = $bindings|0;
 var $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $append_overflow = 0, $append_overflow54 = 0, $arrayidx = 0, $arrayidx101 = 0, $arrayidx102 = 0, $arrayidx11 = 0, $arrayidx110 = 0, $arrayidx122 = 0, $arrayidx66 = 0, $arrayidx72 = 0, $arrayidx8 = 0;
 var $arrayidx83 = 0, $bindings$addr = 0, $buf = 0, $buf41 = 0, $call = 0, $call112 = 0, $call13 = 0, $call133 = 0, $call133$expand_i1_val = 0, $call2 = 0, $call2$expand_i1_val = 0, $call44 = 0, $call74 = 0, $cmp = 0, $cmp1 = 0, $cmp104 = 0, $cmp107 = 0, $cmp113 = 0, $cmp118 = 0, $cmp124 = 0;
 var $cmp128 = 0, $cmp14 = 0, $cmp18 = 0, $cmp20 = 0, $cmp28 = 0, $cmp3 = 0, $cmp31 = 0, $cmp35 = 0, $cmp39 = 0, $cmp45 = 0, $cmp5 = 0, $cmp50 = 0, $cmp53 = 0, $cmp6 = 0, $cmp61 = 0, $cmp68 = 0, $cmp70 = 0, $cmp75 = 0, $cmp80 = 0, $cmp85 = 0;
 var $cmp89 = 0, $cmp96 = 0, $fs_images = 0, $fs_images109 = 0, $i = 0, $i59 = 0, $i94 = 0, $images = 0, $images121 = 0, $img = 0, $img108 = 0, $inc = 0, $inc131 = 0, $inc92 = 0, $index_buffer = 0, $index_buffer37 = 0, $index_buffer42 = 0, $index_type = 0, $lnot = 0, $lnot26 = 0;
 var $lnot56 = 0, $num_images = 0, $num_images106 = 0, $pip = 0, $retval = 0, $shader = 0, $shader63 = 0, $shader99 = 0, $stage = 0, $stage100 = 0, $stage64 = 0, $stage98 = 0, $state = 0, $state117 = 0, $state17 = 0, $state49 = 0, $state79 = 0, $tobool = 0, $tobool114 = 0, $tobool15 = 0;
 var $tobool21 = 0, $tobool4 = 0, $tobool46 = 0, $tobool55 = 0, $tobool76 = 0, $tobool9 = 0, $type = 0, $type120 = 0, $type52 = 0, $type82 = 0, $vertex_buffers = 0, $vertex_buffers10 = 0, $vertex_layout_valid = 0, $vs_images = 0, $vs_images71 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $retval = sp + 44|0;
 $bindings$addr = $bindings;
 __ZL18_sg_validate_beginv();
 $0 = HEAP32[(33556)>>2]|0;
 $cmp = ($0|0)!=(0);
 __ZL12_sg_validateb20_sg_validate_error_t($cmp,62);
 $1 = HEAP32[(33556)>>2]|0;
 $call = (__ZL19_sg_lookup_pipelinePK11_sg_pools_tj((33568),$1)|0);
 $pip = $call;
 $2 = $pip;
 $cmp1 = ($2|0)!=(0|0);
 __ZL12_sg_validateb20_sg_validate_error_t($cmp1,63);
 $3 = $pip;
 $tobool = ($3|0)!=(0|0);
 if (!($tobool)) {
  $call2 = (__ZL16_sg_validate_endv()|0);
  $call2$expand_i1_val = $call2&1;
  HEAP8[$retval>>0] = $call2$expand_i1_val;
  $$pre_trunc = HEAP8[$retval>>0]|0;
  $87 = $$pre_trunc&1;
  STACKTOP = sp;return ($87|0);
 }
 $4 = $pip;
 $state = ((($4)) + 8|0);
 $5 = HEAP32[$state>>2]|0;
 $cmp3 = ($5|0)==(2);
 __ZL12_sg_validateb20_sg_validate_error_t($cmp3,64);
 $6 = $pip;
 $shader = ((($6)) + 12|0);
 $7 = HEAP32[$shader>>2]|0;
 $tobool4 = ($7|0)!=(0|0);
 if (!($tobool4)) {
  ___assert_fail((21352|0),(9686|0),10339,(21819|0));
  // unreachable;
 }
 $i = 0;
 while(1) {
  $8 = $i;
  $cmp5 = ($8|0)<(8);
  if (!($cmp5)) {
   break;
  }
  $9 = $bindings$addr;
  $vertex_buffers = ((($9)) + 4|0);
  $10 = $i;
  $arrayidx = (($vertex_buffers) + ($10<<2)|0);
  $11 = HEAP32[$arrayidx>>2]|0;
  $cmp6 = ($11|0)!=(0);
  $12 = $pip;
  $vertex_layout_valid = ((($12)) + 28|0);
  $13 = $i;
  $arrayidx8 = (($vertex_layout_valid) + ($13)|0);
  $14 = HEAP8[$arrayidx8>>0]|0;
  $tobool9 = $14&1;
  if ($cmp6) {
   __ZL12_sg_validateb20_sg_validate_error_t($tobool9,65);
   $15 = $bindings$addr;
   $vertex_buffers10 = ((($15)) + 4|0);
   $16 = $i;
   $arrayidx11 = (($vertex_buffers10) + ($16<<2)|0);
   $17 = HEAP32[$arrayidx11>>2]|0;
   $call13 = (__ZL17_sg_lookup_bufferPK11_sg_pools_tj((33568),$17)|0);
   $buf = $call13;
   $18 = $buf;
   $cmp14 = ($18|0)!=(0|0);
   __ZL12_sg_validateb20_sg_validate_error_t($cmp14,66);
   $19 = $buf;
   $tobool15 = ($19|0)!=(0|0);
   if ($tobool15) {
    $20 = $buf;
    $state17 = ((($20)) + 8|0);
    $21 = HEAP32[$state17>>2]|0;
    $cmp18 = ($21|0)==(2);
    if ($cmp18) {
     $22 = $buf;
     $type = ((($22)) + 24|0);
     $23 = HEAP32[$type>>2]|0;
     $cmp20 = (1)==($23|0);
     __ZL12_sg_validateb20_sg_validate_error_t($cmp20,67);
     $24 = $buf;
     $append_overflow = ((($24)) + 20|0);
     $25 = HEAP8[$append_overflow>>0]|0;
     $tobool21 = $25&1;
     $lnot = $tobool21 ^ 1;
     __ZL12_sg_validateb20_sg_validate_error_t($lnot,68);
    }
   }
  } else {
   $lnot26 = $tobool9 ^ 1;
   __ZL12_sg_validateb20_sg_validate_error_t($lnot26,65);
  }
  $26 = $i;
  $inc = (($26) + 1)|0;
  $i = $inc;
 }
 $27 = $pip;
 $index_type = ((($27)) + 24|0);
 $28 = HEAP32[$index_type>>2]|0;
 $cmp28 = ($28|0)==(1);
 $29 = $bindings$addr;
 $index_buffer = ((($29)) + 68|0);
 $30 = HEAP32[$index_buffer>>2]|0;
 if ($cmp28) {
  $cmp31 = ($30|0)==(0);
  __ZL12_sg_validateb20_sg_validate_error_t($cmp31,70);
 } else {
  $cmp35 = ($30|0)!=(0);
  __ZL12_sg_validateb20_sg_validate_error_t($cmp35,69);
 }
 $31 = $bindings$addr;
 $index_buffer37 = ((($31)) + 68|0);
 $32 = HEAP32[$index_buffer37>>2]|0;
 $cmp39 = ($32|0)!=(0);
 if ($cmp39) {
  $33 = $bindings$addr;
  $index_buffer42 = ((($33)) + 68|0);
  $34 = HEAP32[$index_buffer42>>2]|0;
  $call44 = (__ZL17_sg_lookup_bufferPK11_sg_pools_tj((33568),$34)|0);
  $buf41 = $call44;
  $35 = $buf41;
  $cmp45 = ($35|0)!=(0|0);
  __ZL12_sg_validateb20_sg_validate_error_t($cmp45,71);
  $36 = $buf41;
  $tobool46 = ($36|0)!=(0|0);
  if ($tobool46) {
   $37 = $buf41;
   $state49 = ((($37)) + 8|0);
   $38 = HEAP32[$state49>>2]|0;
   $cmp50 = ($38|0)==(2);
   if ($cmp50) {
    $39 = $buf41;
    $type52 = ((($39)) + 24|0);
    $40 = HEAP32[$type52>>2]|0;
    $cmp53 = (2)==($40|0);
    __ZL12_sg_validateb20_sg_validate_error_t($cmp53,72);
    $41 = $buf41;
    $append_overflow54 = ((($41)) + 20|0);
    $42 = HEAP8[$append_overflow54>>0]|0;
    $tobool55 = $42&1;
    $lnot56 = $tobool55 ^ 1;
    __ZL12_sg_validateb20_sg_validate_error_t($lnot56,73);
   }
  }
 }
 $i59 = 0;
 while(1) {
  $43 = $i59;
  $cmp61 = ($43|0)<(12);
  if (!($cmp61)) {
   break;
  }
  $44 = $pip;
  $shader63 = ((($44)) + 12|0);
  $45 = HEAP32[$shader63>>2]|0;
  $stage64 = ((($45)) + 272|0);
  $stage = $stage64;
  $46 = $bindings$addr;
  $vs_images = ((($46)) + 76|0);
  $47 = $i59;
  $arrayidx66 = (($vs_images) + ($47<<2)|0);
  $48 = HEAP32[$arrayidx66>>2]|0;
  $cmp68 = ($48|0)!=(0);
  $49 = $i59;
  $50 = $stage;
  $num_images = ((($50)) + 4|0);
  $51 = HEAP32[$num_images>>2]|0;
  if ($cmp68) {
   $cmp70 = ($49|0)<($51|0);
   __ZL12_sg_validateb20_sg_validate_error_t($cmp70,74);
   $52 = $bindings$addr;
   $vs_images71 = ((($52)) + 76|0);
   $53 = $i59;
   $arrayidx72 = (($vs_images71) + ($53<<2)|0);
   $54 = HEAP32[$arrayidx72>>2]|0;
   $call74 = (__ZL16_sg_lookup_imagePK11_sg_pools_tj((33568),$54)|0);
   $img = $call74;
   $55 = $img;
   $cmp75 = ($55|0)!=(0|0);
   __ZL12_sg_validateb20_sg_validate_error_t($cmp75,75);
   $56 = $img;
   $tobool76 = ($56|0)!=(0|0);
   if ($tobool76) {
    $57 = $img;
    $state79 = ((($57)) + 8|0);
    $58 = HEAP32[$state79>>2]|0;
    $cmp80 = ($58|0)==(2);
    if ($cmp80) {
     $59 = $img;
     $type82 = ((($59)) + 12|0);
     $60 = HEAP32[$type82>>2]|0;
     $61 = $stage;
     $images = ((($61)) + 808|0);
     $62 = $i59;
     $arrayidx83 = (($images) + (($62*12)|0)|0);
     $63 = HEAP32[$arrayidx83>>2]|0;
     $cmp85 = ($60|0)==($63|0);
     __ZL12_sg_validateb20_sg_validate_error_t($cmp85,76);
    }
   }
  } else {
   $cmp89 = ($49|0)>=($51|0);
   __ZL12_sg_validateb20_sg_validate_error_t($cmp89,74);
  }
  $64 = $i59;
  $inc92 = (($64) + 1)|0;
  $i59 = $inc92;
 }
 $i94 = 0;
 while(1) {
  $65 = $i94;
  $cmp96 = ($65|0)<(12);
  if (!($cmp96)) {
   break;
  }
  $66 = $pip;
  $shader99 = ((($66)) + 12|0);
  $67 = HEAP32[$shader99>>2]|0;
  $stage100 = ((($67)) + 272|0);
  $arrayidx101 = ((($stage100)) + 952|0);
  $stage98 = $arrayidx101;
  $68 = $bindings$addr;
  $fs_images = ((($68)) + 124|0);
  $69 = $i94;
  $arrayidx102 = (($fs_images) + ($69<<2)|0);
  $70 = HEAP32[$arrayidx102>>2]|0;
  $cmp104 = ($70|0)!=(0);
  $71 = $i94;
  $72 = $stage98;
  $num_images106 = ((($72)) + 4|0);
  $73 = HEAP32[$num_images106>>2]|0;
  if ($cmp104) {
   $cmp107 = ($71|0)<($73|0);
   __ZL12_sg_validateb20_sg_validate_error_t($cmp107,77);
   $74 = $bindings$addr;
   $fs_images109 = ((($74)) + 124|0);
   $75 = $i94;
   $arrayidx110 = (($fs_images109) + ($75<<2)|0);
   $76 = HEAP32[$arrayidx110>>2]|0;
   $call112 = (__ZL16_sg_lookup_imagePK11_sg_pools_tj((33568),$76)|0);
   $img108 = $call112;
   $77 = $img108;
   $cmp113 = ($77|0)!=(0|0);
   __ZL12_sg_validateb20_sg_validate_error_t($cmp113,78);
   $78 = $img108;
   $tobool114 = ($78|0)!=(0|0);
   if ($tobool114) {
    $79 = $img108;
    $state117 = ((($79)) + 8|0);
    $80 = HEAP32[$state117>>2]|0;
    $cmp118 = ($80|0)==(2);
    if ($cmp118) {
     $81 = $img108;
     $type120 = ((($81)) + 12|0);
     $82 = HEAP32[$type120>>2]|0;
     $83 = $stage98;
     $images121 = ((($83)) + 808|0);
     $84 = $i94;
     $arrayidx122 = (($images121) + (($84*12)|0)|0);
     $85 = HEAP32[$arrayidx122>>2]|0;
     $cmp124 = ($82|0)==($85|0);
     __ZL12_sg_validateb20_sg_validate_error_t($cmp124,79);
    }
   }
  } else {
   $cmp128 = ($71|0)>=($73|0);
   __ZL12_sg_validateb20_sg_validate_error_t($cmp128,77);
  }
  $86 = $i94;
  $inc131 = (($86) + 1)|0;
  $i94 = $inc131;
 }
 $call133 = (__ZL16_sg_validate_endv()|0);
 $call133$expand_i1_val = $call133&1;
 HEAP8[$retval>>0] = $call133$expand_i1_val;
 $$pre_trunc = HEAP8[$retval>>0]|0;
 $87 = $$pre_trunc&1;
 STACKTOP = sp;return ($87|0);
}
function __ZL18_sg_apply_bindingsP14_sg_pipeline_tPP12_sg_buffer_tPKiiS2_iPP11_sg_image_tiS8_i($pip,$vbs,$vb_offsets,$num_vbs,$ib,$ib_offset,$vs_imgs,$num_vs_imgs,$fs_imgs,$num_fs_imgs) {
 $pip = $pip|0;
 $vbs = $vbs|0;
 $vb_offsets = $vb_offsets|0;
 $num_vbs = $num_vbs|0;
 $ib = $ib|0;
 $ib_offset = $ib_offset|0;
 $vs_imgs = $vs_imgs|0;
 $num_vs_imgs = $num_vs_imgs|0;
 $fs_imgs = $fs_imgs|0;
 $num_fs_imgs = $num_fs_imgs|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $active_slot = 0, $active_slot49 = 0, $active_slot72 = 0, $add = 0, $arrayidx = 0, $arrayidx22 = 0, $arrayidx24 = 0, $arrayidx26 = 0;
 var $arrayidx50 = 0, $arrayidx57 = 0, $arrayidx58 = 0, $arrayidx67 = 0, $arrayidx73 = 0, $arrayidx76 = 0, $attr = 0, $attr_index = 0, $cache_attr = 0, $cache_attr_dirty = 0, $call = 0, $call144 = 0, $call3 = 0, $call43 = 0, $cmp = 0, $cmp10 = 0, $cmp101 = 0, $cmp107 = 0, $cmp124 = 0, $cmp130 = 0;
 var $cmp145 = 0, $cmp15 = 0, $cmp20 = 0, $cmp23 = 0, $cmp31 = 0, $cmp4 = 0, $cmp44 = 0, $cmp55 = 0, $cmp59 = 0, $cmp63 = 0, $cmp7 = 0, $cmp77 = 0, $cmp81 = 0, $cmp85 = 0, $cmp9 = 0, $cmp91 = 0, $cmp97 = 0, $cond = 0, $cond14 = 0, $cond53 = 0;
 var $conv = 0, $conv104 = 0, $conv106 = 0, $conv110 = 0, $conv114 = 0, $conv118 = 0, $conv123 = 0, $conv129 = 0, $conv62 = 0, $conv78 = 0, $conv80 = 0, $conv87 = 0, $conv90 = 0, $conv93 = 0, $conv96 = 0, $divisor = 0, $divisor105 = 0, $divisor117 = 0, $fs_imgs$addr = 0, $gl_attrs = 0;
 var $gl_buf = 0, $gl_buf71 = 0, $gl_ib = 0, $gl_loc = 0, $gl_loc36 = 0, $gl_target = 0, $gl_target39 = 0, $gl_tex = 0, $gl_tex25 = 0, $gl_tex_slot = 0, $gl_tex_slot37 = 0, $gl_tex_slot38 = 0, $gl_vb = 0, $gl_vbuf = 0, $gl_vbuf139 = 0, $ib$addr = 0, $ib_offset$addr = 0, $idxprom = 0, $idxprom75 = 0, $images = 0;
 var $img = 0, $img_index = 0, $imgs = 0, $inc = 0, $inc142 = 0, $inc41 = 0, $normalized = 0, $normalized112 = 0, $normalized89 = 0, $num_fs_imgs$addr = 0, $num_images = 0, $num_images19 = 0, $num_vbs$addr = 0, $num_vs_imgs$addr = 0, $offset = 0, $offset100 = 0, $offset138 = 0, $or$cond = 0, $pip$addr = 0, $shader = 0;
 var $shd_img = 0, $size = 0, $size109 = 0, $size79 = 0, $stage = 0, $stage8 = 0, $stage_index = 0, $stride = 0, $stride113 = 0, $stride95 = 0, $tobool = 0, $tobool115 = 0, $tobool134 = 0, $tobool27 = 0, $tobool28 = 0, $tobool33 = 0, $tobool47 = 0, $tobool68 = 0, $type = 0, $type111 = 0;
 var $type84 = 0, $vb = 0, $vb_offset = 0, $vb_offsets$addr = 0, $vbs$addr = 0, $vs_imgs$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $pip$addr = $pip;
 $vbs$addr = $vbs;
 $vb_offsets$addr = $vb_offsets;
 $num_vbs$addr = $num_vbs;
 $ib$addr = $ib;
 $ib_offset$addr = $ib_offset;
 $vs_imgs$addr = $vs_imgs;
 $num_vs_imgs$addr = $num_vs_imgs;
 $fs_imgs$addr = $fs_imgs;
 $num_fs_imgs$addr = $num_fs_imgs;
 $0 = $pip$addr;
 $tobool = ($0|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((11450|0),(9686|0),6074,(21626|0));
  // unreachable;
 }
 $call = (_glGetError()|0);
 $cmp = ($call|0)==(0);
 if (!($cmp)) {
  ___assert_fail((9883|0),(9686|0),6078,(21626|0));
  // unreachable;
 }
 $call3 = (_glGetError()|0);
 $cmp4 = ($call3|0)==(0);
 if (!($cmp4)) {
  ___assert_fail((9883|0),(9686|0),6081,(21626|0));
  // unreachable;
 }
 $stage_index = 0;
 L10: while(1) {
  $1 = $stage_index;
  $cmp7 = ($1|0)<(2);
  if (!($cmp7)) {
   label = 22;
   break;
  }
  $2 = $pip$addr;
  $shader = ((($2)) + 12|0);
  $3 = HEAP32[$shader>>2]|0;
  $stage8 = ((($3)) + 272|0);
  $4 = $stage_index;
  $arrayidx = (($stage8) + (($4*952)|0)|0);
  $stage = $arrayidx;
  $5 = $stage_index;
  $cmp9 = ($5|0)==(0);
  $6 = $vs_imgs$addr;
  $7 = $fs_imgs$addr;
  $cond = $cmp9 ? $6 : $7;
  $imgs = $cond;
  $8 = $stage_index;
  $cmp10 = ($8|0)==(0);
  $9 = $num_vs_imgs$addr;
  $10 = $num_fs_imgs$addr;
  $cond14 = $cmp10 ? $9 : $10;
  $11 = $stage;
  $num_images = ((($11)) + 4|0);
  $12 = HEAP32[$num_images>>2]|0;
  $cmp15 = ($cond14|0)==($12|0);
  if (!($cmp15)) {
   label = 10;
   break;
  }
  $img_index = 0;
  while(1) {
   $13 = $img_index;
   $14 = $stage;
   $num_images19 = ((($14)) + 4|0);
   $15 = HEAP32[$num_images19>>2]|0;
   $cmp20 = ($13|0)<($15|0);
   if (!($cmp20)) {
    break;
   }
   $16 = $stage;
   $images = ((($16)) + 808|0);
   $17 = $img_index;
   $arrayidx22 = (($images) + (($17*12)|0)|0);
   $shd_img = $arrayidx22;
   $18 = $shd_img;
   $gl_loc = ((($18)) + 4|0);
   $19 = HEAP32[$gl_loc>>2]|0;
   $cmp23 = ($19|0)!=(-1);
   if ($cmp23) {
    $20 = $imgs;
    $21 = $img_index;
    $arrayidx24 = (($20) + ($21<<2)|0);
    $22 = HEAP32[$arrayidx24>>2]|0;
    $img = $22;
    $23 = $img;
    $gl_tex25 = ((($23)) + 100|0);
    $24 = $img;
    $active_slot = ((($24)) + 96|0);
    $25 = HEAP32[$active_slot>>2]|0;
    $arrayidx26 = (($gl_tex25) + ($25<<2)|0);
    $26 = HEAP32[$arrayidx26>>2]|0;
    $gl_tex = $26;
    $27 = $img;
    $tobool27 = ($27|0)!=(0|0);
    if (!($tobool27)) {
     label = 16;
     break L10;
    }
    $28 = $img;
    $gl_target = ((($28)) + 76|0);
    $29 = HEAP32[$gl_target>>2]|0;
    $tobool28 = ($29|0)!=(0);
    if (!($tobool28)) {
     label = 16;
     break L10;
    }
    $30 = $shd_img;
    $gl_tex_slot = ((($30)) + 8|0);
    $31 = HEAP32[$gl_tex_slot>>2]|0;
    $cmp31 = ($31|0)!=(-1);
    $32 = $gl_tex;
    $tobool33 = ($32|0)!=(0);
    $or$cond = $cmp31 & $tobool33;
    if (!($or$cond)) {
     label = 18;
     break L10;
    }
    $33 = $shd_img;
    $gl_loc36 = ((($33)) + 4|0);
    $34 = HEAP32[$gl_loc36>>2]|0;
    $35 = $shd_img;
    $gl_tex_slot37 = ((($35)) + 8|0);
    $36 = HEAP32[$gl_tex_slot37>>2]|0;
    _glUniform1i(($34|0),($36|0));
    $37 = $shd_img;
    $gl_tex_slot38 = ((($37)) + 8|0);
    $38 = HEAP32[$gl_tex_slot38>>2]|0;
    $39 = $img;
    $gl_target39 = ((($39)) + 76|0);
    $40 = HEAP32[$gl_target39>>2]|0;
    $41 = $gl_tex;
    __ZL19_sg_gl_bind_textureijj($38,$40,$41);
   }
   $42 = $img_index;
   $inc = (($42) + 1)|0;
   $img_index = $inc;
  }
  $43 = $stage_index;
  $inc41 = (($43) + 1)|0;
  $stage_index = $inc41;
 }
 if ((label|0) == 10) {
  ___assert_fail((21645|0),(9686|0),6085,(21626|0));
  // unreachable;
 }
 else if ((label|0) == 16) {
  ___assert_fail((21730|0),(9686|0),6091,(21626|0));
  // unreachable;
 }
 else if ((label|0) == 18) {
  ___assert_fail((21752|0),(9686|0),6092,(21626|0));
  // unreachable;
 }
 else if ((label|0) == 22) {
  $call43 = (_glGetError()|0);
  $cmp44 = ($call43|0)==(0);
  if (!($cmp44)) {
   ___assert_fail((9883|0),(9686|0),6098,(21626|0));
   // unreachable;
  }
  $44 = $ib$addr;
  $tobool47 = ($44|0)!=(0|0);
  if ($tobool47) {
   $45 = $ib$addr;
   $gl_buf = ((($45)) + 48|0);
   $46 = $ib$addr;
   $active_slot49 = ((($46)) + 44|0);
   $47 = HEAP32[$active_slot49>>2]|0;
   $arrayidx50 = (($gl_buf) + ($47<<2)|0);
   $48 = HEAP32[$arrayidx50>>2]|0;
   $cond53 = $48;
  } else {
   $cond53 = 0;
  }
  $gl_ib = $cond53;
  $49 = $gl_ib;
  __ZL18_sg_gl_bind_bufferjj(34963,$49);
  $50 = $ib_offset$addr;
  HEAP32[(34680)>>2] = $50;
  $attr_index = 0;
  while(1) {
   $51 = $attr_index;
   $52 = HEAP32[(33720)>>2]|0;
   $cmp55 = ($51>>>0)<($52>>>0);
   if (!($cmp55)) {
    label = 50;
    break;
   }
   $53 = $pip$addr;
   $gl_attrs = ((($53)) + 52|0);
   $54 = $attr_index;
   $arrayidx57 = (($gl_attrs) + ($54<<4)|0);
   $attr = $arrayidx57;
   $55 = $attr_index;
   $arrayidx58 = ((34240) + (($55*20)|0)|0);
   $cache_attr = $arrayidx58;
   $cache_attr_dirty = 0;
   $vb_offset = 0;
   $gl_vb = 0;
   $56 = $attr;
   $57 = HEAP8[$56>>0]|0;
   $conv = $57 << 24 >> 24;
   $cmp59 = ($conv|0)>=(0);
   if ($cmp59) {
    $58 = $attr;
    $59 = HEAP8[$58>>0]|0;
    $conv62 = $59 << 24 >> 24;
    $60 = $num_vbs$addr;
    $cmp63 = ($conv62|0)<($60|0);
    if (!($cmp63)) {
     label = 30;
     break;
    }
    $61 = $vbs$addr;
    $62 = $attr;
    $63 = HEAP8[$62>>0]|0;
    $idxprom = $63 << 24 >> 24;
    $arrayidx67 = (($61) + ($idxprom<<2)|0);
    $64 = HEAP32[$arrayidx67>>2]|0;
    $vb = $64;
    $65 = $vb;
    $tobool68 = ($65|0)!=(0|0);
    if (!($tobool68)) {
     label = 32;
     break;
    }
    $66 = $vb;
    $gl_buf71 = ((($66)) + 48|0);
    $67 = $vb;
    $active_slot72 = ((($67)) + 44|0);
    $68 = HEAP32[$active_slot72>>2]|0;
    $arrayidx73 = (($gl_buf71) + ($68<<2)|0);
    $69 = HEAP32[$arrayidx73>>2]|0;
    $gl_vb = $69;
    $70 = $vb_offsets$addr;
    $71 = $attr;
    $72 = HEAP8[$71>>0]|0;
    $idxprom75 = $72 << 24 >> 24;
    $arrayidx76 = (($70) + ($idxprom75<<2)|0);
    $73 = HEAP32[$arrayidx76>>2]|0;
    $74 = $attr;
    $offset = ((($74)) + 8|0);
    $75 = HEAP32[$offset>>2]|0;
    $add = (($73) + ($75))|0;
    $vb_offset = $add;
    $76 = $gl_vb;
    $77 = $cache_attr;
    $gl_vbuf = ((($77)) + 16|0);
    $78 = HEAP32[$gl_vbuf>>2]|0;
    $cmp77 = ($76|0)!=($78|0);
    if ($cmp77) {
     label = 40;
    } else {
     $79 = $attr;
     $size = ((($79)) + 3|0);
     $80 = HEAP8[$size>>0]|0;
     $conv78 = $80&255;
     $81 = $cache_attr;
     $size79 = ((($81)) + 3|0);
     $82 = HEAP8[$size79>>0]|0;
     $conv80 = $82&255;
     $cmp81 = ($conv78|0)!=($conv80|0);
     if ($cmp81) {
      label = 40;
     } else {
      $83 = $attr;
      $type = ((($83)) + 12|0);
      $84 = HEAP32[$type>>2]|0;
      $85 = $cache_attr;
      $type84 = ((($85)) + 12|0);
      $86 = HEAP32[$type84>>2]|0;
      $cmp85 = ($84|0)!=($86|0);
      if ($cmp85) {
       label = 40;
      } else {
       $87 = $attr;
       $normalized = ((($87)) + 4|0);
       $88 = HEAP8[$normalized>>0]|0;
       $conv87 = $88&255;
       $89 = $cache_attr;
       $normalized89 = ((($89)) + 4|0);
       $90 = HEAP8[$normalized89>>0]|0;
       $conv90 = $90&255;
       $cmp91 = ($conv87|0)!=($conv90|0);
       if ($cmp91) {
        label = 40;
       } else {
        $91 = $attr;
        $stride = ((($91)) + 2|0);
        $92 = HEAP8[$stride>>0]|0;
        $conv93 = $92&255;
        $93 = $cache_attr;
        $stride95 = ((($93)) + 2|0);
        $94 = HEAP8[$stride95>>0]|0;
        $conv96 = $94&255;
        $cmp97 = ($conv93|0)!=($conv96|0);
        if ($cmp97) {
         label = 40;
        } else {
         $95 = $vb_offset;
         $96 = $cache_attr;
         $offset100 = ((($96)) + 8|0);
         $97 = HEAP32[$offset100>>2]|0;
         $cmp101 = ($95|0)!=($97|0);
         if ($cmp101) {
          label = 40;
         } else {
          $98 = $cache_attr;
          $divisor = ((($98)) + 1|0);
          $99 = HEAP8[$divisor>>0]|0;
          $conv104 = $99 << 24 >> 24;
          $100 = $attr;
          $divisor105 = ((($100)) + 1|0);
          $101 = HEAP8[$divisor105>>0]|0;
          $conv106 = $101 << 24 >> 24;
          $cmp107 = ($conv104|0)!=($conv106|0);
          if ($cmp107) {
           label = 40;
          }
         }
        }
       }
      }
     }
    }
    if ((label|0) == 40) {
     label = 0;
     $102 = $gl_vb;
     __ZL18_sg_gl_bind_bufferjj(34962,$102);
     $103 = $attr_index;
     $104 = $attr;
     $size109 = ((($104)) + 3|0);
     $105 = HEAP8[$size109>>0]|0;
     $conv110 = $105&255;
     $106 = $attr;
     $type111 = ((($106)) + 12|0);
     $107 = HEAP32[$type111>>2]|0;
     $108 = $attr;
     $normalized112 = ((($108)) + 4|0);
     $109 = HEAP8[$normalized112>>0]|0;
     $110 = $attr;
     $stride113 = ((($110)) + 2|0);
     $111 = HEAP8[$stride113>>0]|0;
     $conv114 = $111&255;
     $112 = $vb_offset;
     $113 = $112;
     _glVertexAttribPointer(($103|0),($conv110|0),($107|0),($109|0),($conv114|0),($113|0));
     $114 = HEAP8[(33692)>>0]|0;
     $tobool115 = $114&1;
     if ($tobool115) {
      $115 = $attr_index;
      $116 = $attr;
      $divisor117 = ((($116)) + 1|0);
      $117 = HEAP8[$divisor117>>0]|0;
      $conv118 = $117 << 24 >> 24;
      _glVertexAttribDivisorANGLE($115,$conv118);
     }
     $cache_attr_dirty = 1;
    }
    $118 = $cache_attr;
    $119 = HEAP8[$118>>0]|0;
    $conv123 = $119 << 24 >> 24;
    $cmp124 = ($conv123|0)==(-1);
    if ($cmp124) {
     $120 = $attr_index;
     _glEnableVertexAttribArray(($120|0));
     $cache_attr_dirty = 1;
    }
   } else {
    $121 = $cache_attr;
    $122 = HEAP8[$121>>0]|0;
    $conv129 = $122 << 24 >> 24;
    $cmp130 = ($conv129|0)!=(-1);
    if ($cmp130) {
     $123 = $attr_index;
     _glDisableVertexAttribArray(($123|0));
     $cache_attr_dirty = 1;
    }
   }
   $124 = $cache_attr_dirty;
   $tobool134 = $124&1;
   if ($tobool134) {
    $125 = $attr;
    $126 = $cache_attr;
    ;HEAP32[$126>>2]=HEAP32[$125>>2]|0;HEAP32[$126+4>>2]=HEAP32[$125+4>>2]|0;HEAP32[$126+8>>2]=HEAP32[$125+8>>2]|0;HEAP32[$126+12>>2]=HEAP32[$125+12>>2]|0;
    $127 = $vb_offset;
    $128 = $cache_attr;
    $offset138 = ((($128)) + 8|0);
    HEAP32[$offset138>>2] = $127;
    $129 = $gl_vb;
    $130 = $cache_attr;
    $gl_vbuf139 = ((($130)) + 16|0);
    HEAP32[$gl_vbuf139>>2] = $129;
   }
   $131 = $attr_index;
   $inc142 = (($131) + 1)|0;
   $attr_index = $inc142;
  }
  if ((label|0) == 30) {
   ___assert_fail((21791|0),(9686|0),6114,(21626|0));
   // unreachable;
  }
  else if ((label|0) == 32) {
   ___assert_fail((21816|0),(9686|0),6116,(21626|0));
   // unreachable;
  }
  else if ((label|0) == 50) {
   $call144 = (_glGetError()|0);
   $cmp145 = ($call144|0)==(0);
   if ($cmp145) {
    STACKTOP = sp;return;
   } else {
    ___assert_fail((9883|0),(9686|0),6156,(21626|0));
    // unreachable;
   }
  }
 }
}
function _sg_apply_uniforms($stage,$ub_index,$data,$num_bytes) {
 $stage = $stage|0;
 $ub_index = $ub_index|0;
 $data = $data|0;
 $num_bytes = $num_bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call = 0, $cmp = 0, $cmp1 = 0, $cmp10 = 0;
 var $cmp4 = 0, $cmp5 = 0, $data$addr = 0, $num_bytes$addr = 0, $or$cond = 0, $or$cond1 = 0, $or$cond2 = 0, $stage$addr = 0, $tobool = 0, $tobool13 = 0, $tobool8 = 0, $ub_index$addr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $stage$addr = $stage;
 $ub_index$addr = $ub_index;
 $data$addr = $data;
 $num_bytes$addr = $num_bytes;
 $0 = HEAP8[33468]|0;
 $tobool = $0&1;
 if (!($tobool)) {
  ___assert_fail((9780|0),(9686|0),11398,(21847|0));
  // unreachable;
 }
 $1 = $stage$addr;
 $cmp = ($1|0)==(0);
 $2 = $stage$addr;
 $cmp1 = ($2|0)==(1);
 $or$cond = $cmp | $cmp1;
 if (!($or$cond)) {
  ___assert_fail((21865|0),(9686|0),11399,(21847|0));
  // unreachable;
 }
 $3 = $ub_index$addr;
 $cmp4 = ($3|0)>=(0);
 $4 = $ub_index$addr;
 $cmp5 = ($4|0)<(4);
 $or$cond1 = $cmp4 & $cmp5;
 if (!($or$cond1)) {
  ___assert_fail((21926|0),(9686|0),11400,(21847|0));
  // unreachable;
 }
 $5 = $data$addr;
 $tobool8 = ($5|0)!=(0|0);
 $6 = $num_bytes$addr;
 $cmp10 = ($6|0)>(0);
 $or$cond2 = $tobool8 & $cmp10;
 if (!($or$cond2)) {
  ___assert_fail((21981|0),(9686|0),11401,(21847|0));
  // unreachable;
 }
 $7 = $stage$addr;
 $8 = $ub_index$addr;
 $9 = $data$addr;
 $10 = $num_bytes$addr;
 $call = (__ZL27_sg_validate_apply_uniforms15sg_shader_stageiPKvi($7,$8,$9,$10)|0);
 if (!($call)) {
  HEAP8[(33562)>>0] = 0;
  STACKTOP = sp;return;
 }
 $11 = HEAP8[(33560)>>0]|0;
 $tobool13 = $11&1;
 if (!($tobool13)) {
  STACKTOP = sp;return;
 }
 $12 = $stage$addr;
 $13 = $ub_index$addr;
 $14 = $data$addr;
 $15 = $num_bytes$addr;
 __ZL18_sg_apply_uniforms15sg_shader_stageiPKvi($12,$13,$14,$15);
 STACKTOP = sp;return;
}
function __ZL27_sg_validate_apply_uniforms15sg_shader_stageiPKvi($stage_index,$ub_index,$data,$num_bytes) {
 $stage_index = $stage_index|0;
 $ub_index = $ub_index|0;
 $data = $data|0;
 $num_bytes = $num_bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $arrayidx23 = 0, $call = 0, $call25 = 0, $cmp = 0, $cmp1 = 0, $cmp17 = 0, $cmp2 = 0, $cmp22 = 0, $cmp24 = 0, $cmp3 = 0, $cmp6 = 0, $cmp8 = 0;
 var $data$addr = 0, $num_bytes$addr = 0, $or$cond = 0, $or$cond1 = 0, $pip = 0, $shader = 0, $shader13 = 0, $shader20 = 0, $shader_id = 0, $stage = 0, $stage21 = 0, $stage_index$addr = 0, $tobool = 0, $tobool11 = 0, $ub_index$addr = 0, $uniform_blocks = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $stage_index$addr = $stage_index;
 $ub_index$addr = $ub_index;
 $data$addr = $data;
 $num_bytes$addr = $num_bytes;
 $0 = $stage_index$addr;
 $cmp = ($0|0)==(0);
 $1 = $stage_index$addr;
 $cmp1 = ($1|0)==(1);
 $or$cond = $cmp | $cmp1;
 if (!($or$cond)) {
  ___assert_fail((22363|0),(9686|0),10421,(22436|0));
  // unreachable;
 }
 $2 = $ub_index$addr;
 $cmp2 = ($2|0)>=(0);
 $3 = $ub_index$addr;
 $cmp3 = ($3|0)<(4);
 $or$cond1 = $cmp2 & $cmp3;
 if (!($or$cond1)) {
  ___assert_fail((21926|0),(9686|0),10422,(22436|0));
  // unreachable;
 }
 __ZL18_sg_validate_beginv();
 $4 = HEAP32[(33556)>>2]|0;
 $cmp6 = ($4|0)!=(0);
 __ZL12_sg_validateb20_sg_validate_error_t($cmp6,80);
 $5 = HEAP32[(33556)>>2]|0;
 $call = (__ZL19_sg_lookup_pipelinePK11_sg_pools_tj((33568),$5)|0);
 $pip = $call;
 $6 = $pip;
 $tobool = ($6|0)!=(0|0);
 if (!($tobool)) {
  ___assert_fail((22464|0),(9686|0),10426,(22436|0));
  // unreachable;
 }
 $7 = $pip;
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[(33556)>>2]|0;
 $cmp8 = ($8|0)==($9|0);
 if (!($cmp8)) {
  ___assert_fail((22464|0),(9686|0),10426,(22436|0));
  // unreachable;
 }
 $10 = $pip;
 $shader = ((($10)) + 12|0);
 $11 = HEAP32[$shader>>2]|0;
 $tobool11 = ($11|0)!=(0|0);
 if (!($tobool11)) {
  ___assert_fail((21274|0),(9686|0),10427,(22436|0));
  // unreachable;
 }
 $12 = $pip;
 $shader13 = ((($12)) + 12|0);
 $13 = HEAP32[$shader13>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = $pip;
 $shader_id = ((($15)) + 16|0);
 $16 = HEAP32[$shader_id>>2]|0;
 $cmp17 = ($14|0)==($16|0);
 if ($cmp17) {
  $17 = $pip;
  $shader20 = ((($17)) + 12|0);
  $18 = HEAP32[$shader20>>2]|0;
  $stage21 = ((($18)) + 272|0);
  $19 = $stage_index$addr;
  $arrayidx = (($stage21) + (($19*952)|0)|0);
  $stage = $arrayidx;
  $20 = $ub_index$addr;
  $21 = $stage;
  $22 = HEAP32[$21>>2]|0;
  $cmp22 = ($20|0)<($22|0);
  __ZL12_sg_validateb20_sg_validate_error_t($cmp22,81);
  $23 = $num_bytes$addr;
  $24 = $stage;
  $uniform_blocks = ((($24)) + 8|0);
  $25 = $ub_index$addr;
  $arrayidx23 = (($uniform_blocks) + (($25*200)|0)|0);
  $26 = HEAP32[$arrayidx23>>2]|0;
  $cmp24 = ($23|0)<=($26|0);
  __ZL12_sg_validateb20_sg_validate_error_t($cmp24,82);
  $call25 = (__ZL16_sg_validate_endv()|0);
  STACKTOP = sp;return ($call25|0);
 } else {
  ___assert_fail((21274|0),(9686|0),10427,(22436|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZL18_sg_apply_uniforms15sg_shader_stageiPKvi($stage_index,$ub_index,$data,$num_bytes) {
 $stage_index = $stage_index|0;
 $ub_index = $ub_index|0;
 $data = $data|0;
 $num_bytes = $num_bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $arrayidx = 0, $arrayidx23 = 0, $arrayidx28 = 0, $cmp = 0, $cmp1 = 0, $cmp15 = 0, $cmp20 = 0, $cmp24 = 0, $cmp27 = 0, $cmp29 = 0, $cmp3 = 0, $cmp32 = 0, $cmp9 = 0, $conv = 0, $conv36 = 0;
 var $conv40 = 0, $conv44 = 0, $conv48 = 0, $conv52 = 0, $count = 0, $count39 = 0, $count43 = 0, $count47 = 0, $count51 = 0, $data$addr = 0, $inc = 0, $num_bytes$addr = 0, $num_uniforms = 0, $offset = 0, $or$cond = 0, $or$cond1 = 0, $ptr = 0, $shader = 0, $shader18 = 0, $shader_id = 0;
 var $stage = 0, $stage19 = 0, $stage_index$addr = 0, $tobool = 0, $tobool6 = 0, $type = 0, $type33 = 0, $u = 0, $u_index = 0, $ub = 0, $ub_index$addr = 0, $uniform_blocks = 0, $uniforms = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $stage_index$addr = $stage_index;
 $ub_index$addr = $ub_index;
 $data$addr = $data;
 $num_bytes$addr = $num_bytes;
 $0 = $data$addr;
 $tobool = ($0|0)!=(0|0);
 $1 = $num_bytes$addr;
 $cmp = ($1|0)>(0);
 $or$cond = $tobool & $cmp;
 if (!($or$cond)) {
  ___assert_fail((21981|0),(9686|0),6161,(22005|0));
  // unreachable;
 }
 $2 = $stage_index$addr;
 $cmp1 = ($2|0)>=(0);
 $3 = $stage_index$addr;
 $cmp3 = ($3|0)<(2);
 $or$cond1 = $cmp1 & $cmp3;
 if (!($or$cond1)) {
  ___assert_fail((22024|0),(9686|0),6162,(22005|0));
  // unreachable;
 }
 $4 = HEAP32[(34692)>>2]|0;
 $tobool6 = ($4|0)!=(0|0);
 if (!($tobool6)) {
  ___assert_fail((22088|0),(9686|0),6163,(22005|0));
  // unreachable;
 }
 $5 = HEAP32[(34692)>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[(34696)>>2]|0;
 $cmp9 = ($6|0)==($7|0);
 if (!($cmp9)) {
  ___assert_fail((22114|0),(9686|0),6164,(22005|0));
  // unreachable;
 }
 $8 = HEAP32[(34692)>>2]|0;
 $shader = ((($8)) + 12|0);
 $9 = HEAP32[$shader>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[(34692)>>2]|0;
 $shader_id = ((($11)) + 16|0);
 $12 = HEAP32[$shader_id>>2]|0;
 $cmp15 = ($10|0)==($12|0);
 if (!($cmp15)) {
  ___assert_fail((22184|0),(9686|0),6165,(22005|0));
  // unreachable;
 }
 $13 = HEAP32[(34692)>>2]|0;
 $shader18 = ((($13)) + 12|0);
 $14 = HEAP32[$shader18>>2]|0;
 $stage19 = ((($14)) + 272|0);
 $15 = $stage_index$addr;
 $arrayidx = (($stage19) + (($15*952)|0)|0);
 $stage = $arrayidx;
 $16 = $ub_index$addr;
 $17 = $stage;
 $18 = HEAP32[$17>>2]|0;
 $cmp20 = ($16|0)<($18|0);
 if (!($cmp20)) {
  ___assert_fail((22270|0),(9686|0),6167,(22005|0));
  // unreachable;
 }
 $19 = $stage;
 $uniform_blocks = ((($19)) + 8|0);
 $20 = $ub_index$addr;
 $arrayidx23 = (($uniform_blocks) + (($20*200)|0)|0);
 $ub = $arrayidx23;
 $21 = $ub;
 $22 = HEAP32[$21>>2]|0;
 $23 = $num_bytes$addr;
 $cmp24 = ($22|0)==($23|0);
 if (!($cmp24)) {
  ___assert_fail((22307|0),(9686|0),6169,(22005|0));
  // unreachable;
 }
 $u_index = 0;
 L22: while(1) {
  $24 = $u_index;
  $25 = $ub;
  $num_uniforms = ((($25)) + 4|0);
  $26 = HEAP32[$num_uniforms>>2]|0;
  $cmp27 = ($24|0)<($26|0);
  if (!($cmp27)) {
   label = 28;
   break;
  }
  $27 = $ub;
  $uniforms = ((($27)) + 8|0);
  $28 = $u_index;
  $arrayidx28 = (($uniforms) + (($28*12)|0)|0);
  $u = $arrayidx28;
  $29 = $u;
  $type = ((($29)) + 4|0);
  $30 = HEAP32[$type>>2]|0;
  $cmp29 = ($30|0)!=(0);
  if (!($cmp29)) {
   label = 18;
   break;
  }
  $31 = $u;
  $32 = HEAP32[$31>>2]|0;
  $cmp32 = ($32|0)==(-1);
  L26: do {
   if (!($cmp32)) {
    $33 = $data$addr;
    $34 = $u;
    $offset = ((($34)) + 10|0);
    $35 = HEAP16[$offset>>1]|0;
    $conv = $35&65535;
    $add$ptr = (($33) + ($conv)|0);
    $ptr = $add$ptr;
    $36 = $u;
    $type33 = ((($36)) + 4|0);
    $37 = HEAP32[$type33>>2]|0;
    switch ($37|0) {
    case 0:  {
     break L26;
     break;
    }
    case 1:  {
     $38 = $u;
     $39 = HEAP32[$38>>2]|0;
     $40 = $u;
     $count = ((($40)) + 8|0);
     $41 = HEAP8[$count>>0]|0;
     $conv36 = $41&255;
     $42 = $ptr;
     _glUniform1fv(($39|0),($conv36|0),($42|0));
     break L26;
     break;
    }
    case 2:  {
     $43 = $u;
     $44 = HEAP32[$43>>2]|0;
     $45 = $u;
     $count39 = ((($45)) + 8|0);
     $46 = HEAP8[$count39>>0]|0;
     $conv40 = $46&255;
     $47 = $ptr;
     _glUniform2fv(($44|0),($conv40|0),($47|0));
     break L26;
     break;
    }
    case 3:  {
     $48 = $u;
     $49 = HEAP32[$48>>2]|0;
     $50 = $u;
     $count43 = ((($50)) + 8|0);
     $51 = HEAP8[$count43>>0]|0;
     $conv44 = $51&255;
     $52 = $ptr;
     _glUniform3fv(($49|0),($conv44|0),($52|0));
     break L26;
     break;
    }
    case 4:  {
     $53 = $u;
     $54 = HEAP32[$53>>2]|0;
     $55 = $u;
     $count47 = ((($55)) + 8|0);
     $56 = HEAP8[$count47>>0]|0;
     $conv48 = $56&255;
     $57 = $ptr;
     _glUniform4fv(($54|0),($conv48|0),($57|0));
     break L26;
     break;
    }
    case 5:  {
     $58 = $u;
     $59 = HEAP32[$58>>2]|0;
     $60 = $u;
     $count51 = ((($60)) + 8|0);
     $61 = HEAP8[$count51>>0]|0;
     $conv52 = $61&255;
     $62 = $ptr;
     _glUniformMatrix4fv(($59|0),($conv52|0),0,($62|0));
     break L26;
     break;
    }
    default: {
     label = 26;
     break L22;
    }
    }
   }
  } while(0);
  $63 = $u_index;
  $inc = (($63) + 1)|0;
  $u_index = $inc;
 }
 if ((label|0) == 18) {
  ___assert_fail((22329|0),(9686|0),6172,(22005|0));
  // unreachable;
 }
 else if ((label|0) == 26) {
  ___assert_fail((24519|0),(9686|0),6196,(22005|0));
  // unreachable;
 }
 else if ((label|0) == 28) {
  STACKTOP = sp;return;
 }
}
function _sg_draw($base_element,$num_elements,$num_instances) {
 $base_element = $base_element|0;
 $num_elements = $num_elements|0;
 $num_instances = $num_instances|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $base_element$addr = 0, $num_elements$addr = 0, $num_instances$addr = 0, $tobool = 0, $tobool1 = 0, $tobool2 = 0, $tobool5 = 0, $tobool8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $base_element$addr = $base_element;
 $num_elements$addr = $num_elements;
 $num_instances$addr = $num_instances;
 $0 = HEAP8[33468]|0;
 $tobool = $0&1;
 if (!($tobool)) {
  ___assert_fail((9780|0),(9686|0),11419,(22509|0));
  // unreachable;
 }
 $1 = HEAP8[(33561)>>0]|0;
 $tobool1 = $1&1;
 if (!($tobool1)) {
  (_puts(22517)|0);
 }
 $2 = HEAP8[(33560)>>0]|0;
 $tobool2 = $2&1;
 if (!($tobool2)) {
  STACKTOP = sp;return;
 }
 $3 = HEAP8[(33562)>>0]|0;
 $tobool5 = $3&1;
 if (!($tobool5)) {
  STACKTOP = sp;return;
 }
 $4 = HEAP8[(33561)>>0]|0;
 $tobool8 = $4&1;
 if (!($tobool8)) {
  STACKTOP = sp;return;
 }
 $5 = $base_element$addr;
 $6 = $num_elements$addr;
 $7 = $num_instances$addr;
 __ZL8_sg_drawiii($5,$6,$7);
 STACKTOP = sp;return;
}
function __ZL8_sg_drawiii($base_element,$num_elements,$num_instances) {
 $base_element = $base_element|0;
 $num_elements = $num_elements|0;
 $num_instances = $num_instances|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $base_element$addr = 0, $cmp = 0, $cmp1 = 0, $cmp2 = 0, $cmp7 = 0, $cond = 0, $i_size = 0, $i_type = 0, $ib_offset = 0, $indices = 0;
 var $mul = 0, $num_elements$addr = 0, $num_instances$addr = 0, $p_type = 0, $tobool = 0, $tobool10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $base_element$addr = $base_element;
 $num_elements$addr = $num_elements;
 $num_instances$addr = $num_instances;
 $0 = HEAP32[(34688)>>2]|0;
 $i_type = $0;
 $1 = HEAP32[(34684)>>2]|0;
 $p_type = $1;
 $2 = $i_type;
 $cmp = (0)!=($2|0);
 if ($cmp) {
  $3 = $i_type;
  $cmp1 = ($3|0)==(5123);
  $cond = $cmp1 ? 2 : 4;
  $i_size = $cond;
  $4 = HEAP32[(34680)>>2]|0;
  $ib_offset = $4;
  $5 = $base_element$addr;
  $6 = $i_size;
  $mul = Math_imul($5, $6)|0;
  $7 = $ib_offset;
  $add = (($mul) + ($7))|0;
  $8 = $add;
  $indices = $8;
  $9 = $num_instances$addr;
  $cmp2 = ($9|0)==(1);
  if ($cmp2) {
   $10 = $p_type;
   $11 = $num_elements$addr;
   $12 = $i_type;
   $13 = $indices;
   _glDrawElements(($10|0),($11|0),($12|0),($13|0));
   STACKTOP = sp;return;
  }
  $14 = HEAP8[(33692)>>0]|0;
  $tobool = $14&1;
  if (!($tobool)) {
   STACKTOP = sp;return;
  }
  $15 = $p_type;
  $16 = $num_elements$addr;
  $17 = $i_type;
  $18 = $indices;
  $19 = $num_instances$addr;
  _glDrawElementsInstancedANGLE($15,$16,$17,$18,$19);
  STACKTOP = sp;return;
 } else {
  $20 = $num_instances$addr;
  $cmp7 = ($20|0)==(1);
  if ($cmp7) {
   $21 = $p_type;
   $22 = $base_element$addr;
   $23 = $num_elements$addr;
   _glDrawArrays(($21|0),($22|0),($23|0));
   STACKTOP = sp;return;
  }
  $24 = HEAP8[(33692)>>0]|0;
  $tobool10 = $24&1;
  if (!($tobool10)) {
   STACKTOP = sp;return;
  }
  $25 = $p_type;
  $26 = $base_element$addr;
  $27 = $num_elements$addr;
  $28 = $num_instances$addr;
  _glDrawArraysInstancedANGLE($25,$26,$27,$28);
  STACKTOP = sp;return;
 }
}
function _sg_end_pass() {
 var $0 = 0, $1 = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[33468]|0;
 $tobool = $0&1;
 if (!($tobool)) {
  ___assert_fail((9780|0),(9686|0),11442,(22562|0));
  // unreachable;
 }
 $1 = HEAP8[(33560)>>0]|0;
 $tobool1 = $1&1;
 if (!($tobool1)) {
  return;
 }
 __ZL12_sg_end_passv();
 HEAP32[(33552)>>2] = 0;
 HEAP32[(33556)>>2] = 0;
 HEAP8[(33560)>>0] = 0;
 return;
}
function __ZL12_sg_end_passv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $call = 0, $call6 = 0, $cmp = 0, $cmp7 = 0, $default_framebuffer = 0, $tobool = 0, $tobool3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[(34082)>>0]|0;
 $tobool = $0&1;
 if (!($tobool)) {
  ___assert_fail((21241|0),(9686|0),5844,(22574|0));
  // unreachable;
 }
 $call = (_glGetError()|0);
 $cmp = ($call|0)==(0);
 if (!($cmp)) {
  ___assert_fail((9883|0),(9686|0),5845,(22574|0));
  // unreachable;
 }
 HEAP32[(34096)>>2] = 0;
 HEAP32[(34100)>>2] = 0;
 HEAP32[(34084)>>2] = 0;
 HEAP32[(34088)>>2] = 0;
 $1 = HEAP32[(34092)>>2]|0;
 $tobool3 = ($1|0)!=(0|0);
 if (!($tobool3)) {
  ___assert_fail((21179|0),(9686|0),5883,(22574|0));
  // unreachable;
 }
 $2 = HEAP32[(34092)>>2]|0;
 $default_framebuffer = ((($2)) + 12|0);
 $3 = HEAP32[$default_framebuffer>>2]|0;
 _glBindFramebuffer(36160,($3|0));
 HEAP8[(34082)>>0] = 0;
 $call6 = (_glGetError()|0);
 $cmp7 = ($call6|0)==(0);
 if ($cmp7) {
  return;
 } else {
  ___assert_fail((9883|0),(9686|0),5886,(22574|0));
  // unreachable;
 }
}
function _sg_commit() {
 var $0 = 0, $1 = 0, $inc = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[33468]|0;
 $tobool = $0&1;
 if ($tobool) {
  __ZL10_sg_commitv();
  $1 = HEAP32[(33544)>>2]|0;
  $inc = (($1) + 1)|0;
  HEAP32[(33544)>>2] = $inc;
  return;
 } else {
  ___assert_fail((9780|0),(9686|0),11455,(22587|0));
  // unreachable;
 }
}
function __ZL10_sg_commitv() {
 var $0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[(34082)>>0]|0;
 $tobool = $0&1;
 if ($tobool) {
  ___assert_fail((21151|0),(9686|0),6233,(22597|0));
  // unreachable;
 } else {
  __ZL28_sg_gl_clear_buffer_bindingsb(0);
  __ZL29_sg_gl_clear_texture_bindingsb(0);
  return;
 }
}
function _sg_update_buffer($buf_id,$data,$num_bytes) {
 $buf_id = $buf_id|0;
 $data = $data|0;
 $num_bytes = $num_bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $append_frame_index = 0, $buf = 0, $call = 0, $call4 = 0, $cmp = 0, $cmp12 = 0, $cmp3 = 0, $cmp6 = 0, $cmp9 = 0, $data$addr = 0, $num_bytes$addr = 0, $or$cond = 0, $size = 0, $state = 0, $tobool = 0, $tobool1 = 0, $update_frame_index = 0;
 var $update_frame_index15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $data$addr = $data;
 $num_bytes$addr = $num_bytes;
 $0 = HEAP8[33468]|0;
 $tobool = $0&1;
 if (!($tobool)) {
  ___assert_fail((9780|0),(9686|0),11468,(22608|0));
  // unreachable;
 }
 $1 = HEAP32[$buf_id>>2]|0;
 $call = (__ZL17_sg_lookup_bufferPK11_sg_pools_tj((33568),$1)|0);
 $buf = $call;
 $2 = $num_bytes$addr;
 $cmp = ($2|0)>(0);
 $3 = $buf;
 $tobool1 = ($3|0)!=(0|0);
 $or$cond = $cmp & $tobool1;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $4 = $buf;
 $state = ((($4)) + 8|0);
 $5 = HEAP32[$state>>2]|0;
 $cmp3 = ($5|0)==(2);
 if (!($cmp3)) {
  STACKTOP = sp;return;
 }
 $6 = $buf;
 $7 = $data$addr;
 $8 = $num_bytes$addr;
 $call4 = (__ZL26_sg_validate_update_bufferPK12_sg_buffer_tPKvi($6,$7,$8)|0);
 if (!($call4)) {
  STACKTOP = sp;return;
 }
 $9 = $num_bytes$addr;
 $10 = $buf;
 $size = ((($10)) + 12|0);
 $11 = HEAP32[$size>>2]|0;
 $cmp6 = ($9|0)<=($11|0);
 if (!($cmp6)) {
  ___assert_fail((22625|0),(9686|0),11472,(22608|0));
  // unreachable;
 }
 $12 = $buf;
 $update_frame_index = ((($12)) + 32|0);
 $13 = HEAP32[$update_frame_index>>2]|0;
 $14 = HEAP32[(33544)>>2]|0;
 $cmp9 = ($13|0)!=($14|0);
 if (!($cmp9)) {
  ___assert_fail((22648|0),(9686|0),11474,(22608|0));
  // unreachable;
 }
 $15 = $buf;
 $append_frame_index = ((($15)) + 36|0);
 $16 = HEAP32[$append_frame_index>>2]|0;
 $17 = HEAP32[(33544)>>2]|0;
 $cmp12 = ($16|0)!=($17|0);
 if (!($cmp12)) {
  ___assert_fail((22691|0),(9686|0),11476,(22608|0));
  // unreachable;
 }
 $18 = $buf;
 $19 = $data$addr;
 $20 = $num_bytes$addr;
 __ZL17_sg_update_bufferP12_sg_buffer_tPKvi($18,$19,$20);
 $21 = HEAP32[(33544)>>2]|0;
 $22 = $buf;
 $update_frame_index15 = ((($22)) + 32|0);
 HEAP32[$update_frame_index15>>2] = $21;
 STACKTOP = sp;return;
}
function __ZL26_sg_validate_update_bufferPK12_sg_buffer_tPKvi($buf,$data,$size) {
 $buf = $buf|0;
 $data = $data|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $append_frame_index = 0, $buf$addr = 0, $call = 0, $cmp = 0, $cmp3 = 0, $cmp4 = 0, $cmp5 = 0;
 var $data$addr = 0, $or$cond = 0, $size$addr = 0, $size2 = 0, $tobool = 0, $tobool1 = 0, $update_frame_index = 0, $usage = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $buf$addr = $buf;
 $data$addr = $data;
 $size$addr = $size;
 $0 = $buf$addr;
 $tobool = ($0|0)!=(0|0);
 $1 = $data$addr;
 $tobool1 = ($1|0)!=(0|0);
 $or$cond = $tobool & $tobool1;
 if ($or$cond) {
  __ZL18_sg_validate_beginv();
  $2 = $buf$addr;
  $usage = ((($2)) + 28|0);
  $3 = HEAP32[$usage>>2]|0;
  $cmp = ($3|0)!=(1);
  __ZL12_sg_validateb20_sg_validate_error_t($cmp,83);
  $4 = $buf$addr;
  $size2 = ((($4)) + 12|0);
  $5 = HEAP32[$size2>>2]|0;
  $6 = $size$addr;
  $cmp3 = ($5|0)>=($6|0);
  __ZL12_sg_validateb20_sg_validate_error_t($cmp3,84);
  $7 = $buf$addr;
  $update_frame_index = ((($7)) + 32|0);
  $8 = HEAP32[$update_frame_index>>2]|0;
  $9 = HEAP32[(33544)>>2]|0;
  $cmp4 = ($8|0)!=($9|0);
  __ZL12_sg_validateb20_sg_validate_error_t($cmp4,85);
  $10 = $buf$addr;
  $append_frame_index = ((($10)) + 36|0);
  $11 = HEAP32[$append_frame_index>>2]|0;
  $12 = HEAP32[(33544)>>2]|0;
  $cmp5 = ($11|0)!=($12|0);
  __ZL12_sg_validateb20_sg_validate_error_t($cmp5,86);
  $call = (__ZL16_sg_validate_endv()|0);
  STACKTOP = sp;return ($call|0);
 } else {
  ___assert_fail((22836|0),(9686|0),10447,(22848|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZL17_sg_update_bufferP12_sg_buffer_tPKvi($buf,$data_ptr,$data_size) {
 $buf = $buf|0;
 $data_ptr = $data_ptr|0;
 $data_size = $data_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $active_slot = 0, $active_slot10 = 0, $active_slot4 = 0, $active_slot5 = 0, $arrayidx = 0, $buf$addr = 0, $call = 0, $call14 = 0, $call18 = 0, $cmp = 0, $cmp15 = 0, $cmp19 = 0, $cmp3 = 0, $cmp6 = 0, $data_ptr$addr = 0, $data_size$addr = 0;
 var $gl_buf = 0, $gl_buf9 = 0, $gl_tgt = 0, $inc = 0, $num_slots = 0, $or$cond = 0, $or$cond1 = 0, $tobool = 0, $tobool1 = 0, $tobool11 = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $buf$addr = $buf;
 $data_ptr$addr = $data_ptr;
 $data_size$addr = $data_size;
 $0 = $buf$addr;
 $tobool = ($0|0)!=(0|0);
 $1 = $data_ptr$addr;
 $tobool1 = ($1|0)!=(0|0);
 $or$cond = $tobool & $tobool1;
 $2 = $data_size$addr;
 $cmp = ($2|0)>(0);
 $or$cond1 = $or$cond & $cmp;
 if (!($or$cond1)) {
  ___assert_fail((22734|0),(9686|0),6240,(22769|0));
  // unreachable;
 }
 $3 = $buf$addr;
 $active_slot = ((($3)) + 44|0);
 $4 = HEAP32[$active_slot>>2]|0;
 $inc = (($4) + 1)|0;
 HEAP32[$active_slot>>2] = $inc;
 $5 = $buf$addr;
 $num_slots = ((($5)) + 40|0);
 $6 = HEAP32[$num_slots>>2]|0;
 $cmp3 = ($inc|0)>=($6|0);
 if ($cmp3) {
  $7 = $buf$addr;
  $active_slot4 = ((($7)) + 44|0);
  HEAP32[$active_slot4>>2] = 0;
 }
 $8 = $buf$addr;
 $type = ((($8)) + 24|0);
 $9 = HEAP32[$type>>2]|0;
 $call = (__ZL20_sg_gl_buffer_target14sg_buffer_type($9)|0);
 $gl_tgt = $call;
 $10 = $buf$addr;
 $active_slot5 = ((($10)) + 44|0);
 $11 = HEAP32[$active_slot5>>2]|0;
 $cmp6 = ($11|0)<(2);
 if (!($cmp6)) {
  ___assert_fail((22787|0),(9686|0),6246,(22769|0));
  // unreachable;
 }
 $12 = $buf$addr;
 $gl_buf9 = ((($12)) + 48|0);
 $13 = $buf$addr;
 $active_slot10 = ((($13)) + 44|0);
 $14 = HEAP32[$active_slot10>>2]|0;
 $arrayidx = (($gl_buf9) + ($14<<2)|0);
 $15 = HEAP32[$arrayidx>>2]|0;
 $gl_buf = $15;
 $16 = $gl_buf;
 $tobool11 = ($16|0)!=(0);
 if (!($tobool11)) {
  ___assert_fail((22829|0),(9686|0),6248,(22769|0));
  // unreachable;
 }
 $call14 = (_glGetError()|0);
 $cmp15 = ($call14|0)==(0);
 if (!($cmp15)) {
  ___assert_fail((9883|0),(9686|0),6249,(22769|0));
  // unreachable;
 }
 $17 = $gl_tgt;
 __ZL27_sg_gl_store_buffer_bindingj($17);
 $18 = $gl_tgt;
 $19 = $gl_buf;
 __ZL18_sg_gl_bind_bufferjj($18,$19);
 $20 = $gl_tgt;
 $21 = $data_size$addr;
 $22 = $data_ptr$addr;
 _glBufferSubData(($20|0),0,($21|0),($22|0));
 $23 = $gl_tgt;
 __ZL29_sg_gl_restore_buffer_bindingj($23);
 $call18 = (_glGetError()|0);
 $cmp19 = ($call18|0)==(0);
 if ($cmp19) {
  STACKTOP = sp;return;
 } else {
  ___assert_fail((9883|0),(9686|0),6254,(22769|0));
  // unreachable;
 }
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $call = 0, $call1 = 0, $conv = 0, $fd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $fd = ((($f)) + 60|0);
 $0 = HEAP32[$fd>>2]|0;
 $call = (_dummy_731($0)|0);
 $call1 = (___wasi_fd_close(($call|0))|0);
 $conv = $call1&65535;
 return ($conv|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr34 = 0, $buf9 = 0, $buf_size = 0, $call = 0, $call7 = 0;
 var $cmp = 0, $cmp14 = 0, $cmp19 = 0, $cmp26 = 0, $cnt$0 = 0, $dec = 0, $fd = 0, $incdec$ptr = 0, $iov$0 = 0, $iov$1 = 0, $iov_base2 = 0, $iov_len = 0, $iov_len21 = 0, $iov_len25 = 0, $iov_len3 = 0, $iov_len38 = 0, $iovcnt$0 = 0, $iovcnt$1 = 0, $iovs = 0, $num = 0;
 var $or = 0, $rem$0 = 0, $retval$1$ph = 0, $sub = 0, $sub$ptr$sub = 0, $sub23 = 0, $sub30 = 0, $sub39 = 0, $tobool = 0, $wbase = 0, $wend = 0, $wend16 = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $iovs = sp;
 $num = sp + 16|0;
 $wbase = ((($f)) + 28|0);
 $0 = HEAP32[$wbase>>2]|0;
 HEAP32[$iovs>>2] = $0;
 $iov_len = ((($iovs)) + 4|0);
 $wpos = ((($f)) + 20|0);
 $1 = HEAP32[$wpos>>2]|0;
 $sub$ptr$sub = (($1) - ($0))|0;
 HEAP32[$iov_len>>2] = $sub$ptr$sub;
 $iov_base2 = ((($iovs)) + 8|0);
 HEAP32[$iov_base2>>2] = $buf;
 $iov_len3 = ((($iovs)) + 12|0);
 HEAP32[$iov_len3>>2] = $len;
 $add = (($sub$ptr$sub) + ($len))|0;
 $fd = ((($f)) + 60|0);
 $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $add;
 while(1) {
  $2 = HEAP32[$fd>>2]|0;
  $call = (___wasi_fd_write(($2|0),($iov$0|0),($iovcnt$0|0),($num|0))|0);
  $call7 = (___wasi_syscall_ret($call)|0);
  $tobool = ($call7|0)==(0);
  if ($tobool) {
   $$pr = HEAP32[$num>>2]|0;
   $3 = $$pr;
  } else {
   HEAP32[$num>>2] = -1;
   $3 = -1;
  }
  $cmp = ($rem$0|0)==($3|0);
  if ($cmp) {
   label = 6;
   break;
  }
  $cmp14 = ($3|0)<(0);
  if ($cmp14) {
   label = 8;
   break;
  }
  $sub23 = (($rem$0) - ($3))|0;
  $iov_len25 = ((($iov$0)) + 4|0);
  $9 = HEAP32[$iov_len25>>2]|0;
  $cmp26 = ($3>>>0)>($9>>>0);
  $incdec$ptr = ((($iov$0)) + 8|0);
  $iov$1 = $cmp26 ? $incdec$ptr : $iov$0;
  $dec = $cmp26 << 31 >> 31;
  $iovcnt$1 = (($iovcnt$0) + ($dec))|0;
  $sub30 = $cmp26 ? $9 : 0;
  $cnt$0 = (($3) - ($sub30))|0;
  $10 = HEAP32[$iov$1>>2]|0;
  $add$ptr34 = (($10) + ($cnt$0)|0);
  HEAP32[$iov$1>>2] = $add$ptr34;
  $iov_len38 = ((($iov$1)) + 4|0);
  $11 = HEAP32[$iov_len38>>2]|0;
  $sub39 = (($11) - ($cnt$0))|0;
  HEAP32[$iov_len38>>2] = $sub39;
  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $sub23;
 }
 if ((label|0) == 6) {
  $buf9 = ((($f)) + 44|0);
  $4 = HEAP32[$buf9>>2]|0;
  $buf_size = ((($f)) + 48|0);
  $5 = HEAP32[$buf_size>>2]|0;
  $add$ptr = (($4) + ($5)|0);
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = $add$ptr;
  $6 = $4;
  HEAP32[$wbase>>2] = $6;
  HEAP32[$wpos>>2] = $6;
  $retval$1$ph = $len;
 }
 else if ((label|0) == 8) {
  $wend16 = ((($f)) + 16|0);
  HEAP32[$wend16>>2] = 0;
  HEAP32[$wbase>>2] = 0;
  HEAP32[$wpos>>2] = 0;
  $7 = HEAP32[$f>>2]|0;
  $or = $7 | 32;
  HEAP32[$f>>2] = $or;
  $cmp19 = ($iovcnt$0|0)==(2);
  if ($cmp19) {
   $retval$1$ph = 0;
  } else {
   $iov_len21 = ((($iov$0)) + 4|0);
   $8 = HEAP32[$iov_len21>>2]|0;
   $sub = (($len) - ($8))|0;
   $retval$1$ph = $sub;
  }
 }
 STACKTOP = sp;return ($retval$1$ph|0);
}
function ___stdio_seek($f,$0,$1,$whence) {
 $f = $f|0;
 $0 = $0|0;
 $1 = $1|0;
 $whence = $whence|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $call1 = 0, $conv = 0, $fd = 0, $ret = 0, $tobool = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ret = sp;
 $fd = ((($f)) + 60|0);
 $2 = HEAP32[$fd>>2]|0;
 $conv = $whence&255;
 $3 = (___wasi_fd_seek(($2|0),($0|0),($1|0),($conv|0),($ret|0))|0);
 $call1 = (___wasi_syscall_ret($3)|0);
 $tobool = ($call1|0)==(0);
 if ($tobool) {
  $4 = $ret;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($4) + 4)|0;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $14 = $9;$15 = $6;
 } else {
  $10 = $ret;
  $11 = $10;
  HEAP32[$11>>2] = -1;
  $12 = (($10) + 4)|0;
  $13 = $12;
  HEAP32[$13>>2] = -1;
  $14 = -1;$15 = -1;
 }
 setTempRet0(($14) | 0);
 STACKTOP = sp;return ($15|0);
}
function ___wasi_syscall_ret($code) {
 $code = $code|0;
 var $call = 0, $cmp = 0, $conv = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($code<<16>>16)==(0);
 if ($cmp) {
  $retval$0 = 0;
 } else {
  $conv = $code&65535;
  $call = (___errno_location()|0);
  HEAP32[$call>>2] = $conv;
  $retval$0 = -1;
 }
 return ($retval$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (34776|0);
}
function _dummy_731($fd) {
 $fd = $fd|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($fd|0);
}
function ___stdio_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$cast = 0, $$pr = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add$ptr = 0, $and = 0, $arrayidx24 = 0, $arrayinit$element = 0, $buf3 = 0, $buf_size = 0, $call = 0, $call6 = 0, $cmp = 0;
 var $cmp11 = 0, $fd = 0, $incdec$ptr = 0, $iov = 0, $iov_len = 0, $iov_len4 = 0, $lnot$ext = 0, $num = 0, $or = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $sub = 0, $sub16 = 0, $sub23 = 0, $tobool = 0, $tobool20 = 0, $tobool7 = 0, $xor = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $iov = sp;
 $num = sp + 16|0;
 HEAP32[$iov>>2] = $buf;
 $iov_len = ((($iov)) + 4|0);
 $buf_size = ((($f)) + 48|0);
 $0 = HEAP32[$buf_size>>2]|0;
 $tobool = ($0|0)!=(0);
 $lnot$ext = $tobool&1;
 $sub = (($len) - ($lnot$ext))|0;
 HEAP32[$iov_len>>2] = $sub;
 $arrayinit$element = ((($iov)) + 8|0);
 $buf3 = ((($f)) + 44|0);
 $1 = HEAP32[$buf3>>2]|0;
 HEAP32[$arrayinit$element>>2] = $1;
 $iov_len4 = ((($iov)) + 12|0);
 HEAP32[$iov_len4>>2] = $0;
 $fd = ((($f)) + 60|0);
 $2 = HEAP32[$fd>>2]|0;
 $call = (___wasi_fd_read(($2|0),($iov|0),2,($num|0))|0);
 $call6 = (___wasi_syscall_ret($call)|0);
 $tobool7 = ($call6|0)==(0);
 if ($tobool7) {
  $$pr = HEAP32[$num>>2]|0;
  $cmp = ($$pr|0)<(1);
  if ($cmp) {
   $3 = $$pr;
   label = 4;
  } else {
   $5 = HEAP32[$iov_len>>2]|0;
   $cmp11 = ($$pr>>>0)>($5>>>0);
   if ($cmp11) {
    $sub16 = (($$pr) - ($5))|0;
    $6 = HEAP32[$buf3>>2]|0;
    $rpos = ((($f)) + 4|0);
    HEAP32[$rpos>>2] = $6;
    $$cast = $6;
    $add$ptr = (($$cast) + ($sub16)|0);
    $rend = ((($f)) + 8|0);
    HEAP32[$rend>>2] = $add$ptr;
    $7 = HEAP32[$buf_size>>2]|0;
    $tobool20 = ($7|0)==(0);
    if ($tobool20) {
     $retval$0 = $len;
    } else {
     $incdec$ptr = ((($$cast)) + 1|0);
     HEAP32[$rpos>>2] = $incdec$ptr;
     $8 = HEAP8[$$cast>>0]|0;
     $sub23 = (($len) + -1)|0;
     $arrayidx24 = (($buf) + ($sub23)|0);
     HEAP8[$arrayidx24>>0] = $8;
     $retval$0 = $len;
    }
   } else {
    $retval$0 = $$pr;
   }
  }
 } else {
  HEAP32[$num>>2] = -1;
  $3 = -1;
  label = 4;
 }
 if ((label|0) == 4) {
  $and = $3 & 48;
  $xor = $and ^ 16;
  $4 = HEAP32[$f>>2]|0;
  $or = $xor | $4;
  HEAP32[$f>>2] = $or;
  $retval$0 = $3;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function ___emscripten_stdout_close($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___emscripten_stdout_seek($f,$0,$1,$whence) {
 $f = $f|0;
 $0 = $0|0;
 $1 = $1|0;
 $whence = $whence|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 setTempRet0((0) | 0);
 return 0;
}
function ___toread($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add$ptr = 0, $and = 0, $buf = 0, $buf_size = 0, $cmp = 0, $conv = 0, $conv3 = 0, $mode = 0, $or = 0, $or9 = 0, $rend = 0, $retval$0 = 0;
 var $rpos = 0, $sext = 0, $sub = 0, $tobool = 0, $wbase = 0, $wend = 0, $wpos = 0, $write = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mode = ((($f)) + 74|0);
 $0 = HEAP8[$mode>>0]|0;
 $conv = $0 << 24 >> 24;
 $sub = (($conv) + 255)|0;
 $or = $sub | $conv;
 $conv3 = $or&255;
 HEAP8[$mode>>0] = $conv3;
 $wpos = ((($f)) + 20|0);
 $1 = HEAP32[$wpos>>2]|0;
 $wbase = ((($f)) + 28|0);
 $2 = HEAP32[$wbase>>2]|0;
 $cmp = ($1>>>0)>($2>>>0);
 if ($cmp) {
  $write = ((($f)) + 36|0);
  $3 = HEAP32[$write>>2]|0;
  (FUNCTION_TABLE_iiii[$3 & 255]($f,0,0)|0);
 }
 $wend = ((($f)) + 16|0);
 HEAP32[$wend>>2] = 0;
 HEAP32[$wbase>>2] = 0;
 HEAP32[$wpos>>2] = 0;
 $4 = HEAP32[$f>>2]|0;
 $and = $4 & 4;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $buf = ((($f)) + 44|0);
  $5 = HEAP32[$buf>>2]|0;
  $buf_size = ((($f)) + 48|0);
  $6 = HEAP32[$buf_size>>2]|0;
  $add$ptr = (($5) + ($6)|0);
  $rend = ((($f)) + 8|0);
  HEAP32[$rend>>2] = $add$ptr;
  $rpos = ((($f)) + 4|0);
  HEAP32[$rpos>>2] = $add$ptr;
  $7 = $4 << 27;
  $sext = $7 >> 31;
  $retval$0 = $sext;
 } else {
  $or9 = $4 | 32;
  HEAP32[$f>>2] = $or9;
  $retval$0 = -1;
 }
 return ($retval$0|0);
}
function _islower($c) {
 $c = $c|0;
 var $cmp = 0, $conv = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub = (($c) + -97)|0;
 $cmp = ($sub>>>0)<(26);
 $conv = $cmp&1;
 return ($conv|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$lcssa = 0, $$lcssa6 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $cmp = 0, $cmp7 = 0, $conv5 = 0, $conv6 = 0, $incdec$ptr = 0, $incdec$ptr4 = 0, $l$addr$010 = 0, $or$cond = 0, $or$cond9 = 0, $r$addr$011 = 0, $sub = 0, $tobool = 0, $tobool8 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $cmp7 = ($0<<24>>24)!=($1<<24>>24);
 $tobool8 = ($0<<24>>24)==(0);
 $or$cond9 = $tobool8 | $cmp7;
 if ($or$cond9) {
  $$lcssa = $1;$$lcssa6 = $0;
 } else {
  $l$addr$010 = $l;$r$addr$011 = $r;
  while(1) {
   $incdec$ptr = ((($l$addr$010)) + 1|0);
   $incdec$ptr4 = ((($r$addr$011)) + 1|0);
   $2 = HEAP8[$incdec$ptr>>0]|0;
   $3 = HEAP8[$incdec$ptr4>>0]|0;
   $cmp = ($2<<24>>24)!=($3<<24>>24);
   $tobool = ($2<<24>>24)==(0);
   $or$cond = $tobool | $cmp;
   if ($or$cond) {
    $$lcssa = $3;$$lcssa6 = $2;
    break;
   } else {
    $l$addr$010 = $incdec$ptr;$r$addr$011 = $incdec$ptr4;
   }
  }
 }
 $conv5 = $$lcssa6&255;
 $conv6 = $$lcssa&255;
 $sub = (($conv5) - ($conv6))|0;
 return ($sub|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $cmp = 0, $cond = 0, $conv5 = 0, $conv6 = 0, $dec = 0, $incdec$ptr = 0, $incdec$ptr3 = 0, $l$012 = 0, $n$addr$011 = 0, $r$013 = 0, $sub = 0, $tobool = 0, $tobool10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool10 = ($n|0)==(0);
 L1: do {
  if ($tobool10) {
   $cond = 0;
  } else {
   $l$012 = $vl;$n$addr$011 = $n;$r$013 = $vr;
   while(1) {
    $0 = HEAP8[$l$012>>0]|0;
    $1 = HEAP8[$r$013>>0]|0;
    $cmp = ($0<<24>>24)==($1<<24>>24);
    if (!($cmp)) {
     break;
    }
    $dec = (($n$addr$011) + -1)|0;
    $incdec$ptr = ((($l$012)) + 1|0);
    $incdec$ptr3 = ((($r$013)) + 1|0);
    $tobool = ($dec|0)==(0);
    if ($tobool) {
     $cond = 0;
     break L1;
    } else {
     $l$012 = $incdec$ptr;$n$addr$011 = $dec;$r$013 = $incdec$ptr3;
    }
   }
   $conv5 = $0&255;
   $conv6 = $1&255;
   $sub = (($conv5) - ($conv6))|0;
   $cond = $sub;
  }
 } while(0);
 return ($cond|0);
}
function _isdigit($c) {
 $c = $c|0;
 var $cmp = 0, $conv = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub = (($c) + -48)|0;
 $cmp = ($sub>>>0)<(10);
 $conv = $cmp&1;
 return ($conv|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $add$ptr = 0, $arrayidx = 0, $b = 0, $buf = 0, $buf_size = 0, $call = 0, $call10 = 0, $cmp = 0, $cmp16 = 0, $cmp4 = 0, $f = 0, $n$addr$0 = 0, $retval$0 = 0, $s$addr$0 = 0, $spec$select = 0, $sub = 0, $sub$ptr$rhs$cast = 0, $sub17 = 0;
 var $sub3 = 0, $tobool = 0, $tobool11 = 0, $wbase = 0, $wend = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $b = sp + 144|0;
 $f = sp;
 _memcpy(($f|0),(2128|0),144)|0;
 $sub = (($n) + -1)|0;
 $cmp = ($sub>>>0)>(2147483646);
 if ($cmp) {
  $tobool = ($n|0)==(0);
  if ($tobool) {
   $n$addr$0 = 1;$s$addr$0 = $b;
   label = 4;
  } else {
   $call = (___errno_location()|0);
   HEAP32[$call>>2] = 61;
   $retval$0 = -1;
  }
 } else {
  $n$addr$0 = $n;$s$addr$0 = $s;
  label = 4;
 }
 if ((label|0) == 4) {
  $sub$ptr$rhs$cast = $s$addr$0;
  $sub3 = (-2 - ($sub$ptr$rhs$cast))|0;
  $cmp4 = ($n$addr$0>>>0)>($sub3>>>0);
  $spec$select = $cmp4 ? $sub3 : $n$addr$0;
  $buf_size = ((($f)) + 48|0);
  HEAP32[$buf_size>>2] = $spec$select;
  $wpos = ((($f)) + 20|0);
  HEAP32[$wpos>>2] = $s$addr$0;
  $buf = ((($f)) + 44|0);
  HEAP32[$buf>>2] = $s$addr$0;
  $add$ptr = (($s$addr$0) + ($spec$select)|0);
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = $add$ptr;
  $wbase = ((($f)) + 28|0);
  HEAP32[$wbase>>2] = $add$ptr;
  $call10 = (_vfprintf($f,$fmt,$ap)|0);
  $tobool11 = ($spec$select|0)==(0);
  if ($tobool11) {
   $retval$0 = $call10;
  } else {
   $0 = HEAP32[$wpos>>2]|0;
   $1 = HEAP32[$wend>>2]|0;
   $cmp16 = ($0|0)==($1|0);
   $sub17 = $cmp16 << 31 >> 31;
   $arrayidx = (($0) + ($sub17)|0);
   HEAP8[$arrayidx>>0] = 0;
   $retval$0 = $call10;
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___vfprintf_internal($f,$fmt,$ap,235,236)|0);
 return ($call|0);
}
function _fmt_fp($f,$y,$w,$p,$fl,$t) {
 $f = $f|0;
 $y = +$y;
 $w = $w|0;
 $p = $p|0;
 $fl = $fl|0;
 $t = $t|0;
 var $$ = 0, $$pr = 0, $$pr415 = 0, $$pre = 0, $$pre517 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $a$1$lcssa = 0, $a$1502 = 0, $a$2 = 0, $a$3$lcssa = 0, $a$3488 = 0, $a$5$lcssa = 0, $a$5471 = 0, $a$6 = 0, $a$8 = 0;
 var $a$9 = 0, $add = 0, $add$ptr213 = 0, $add$ptr311 = 0, $add$ptr354 = 0, $add$ptr358 = 0, $add$ptr373 = 0, $add$ptr442 = 0, $add$ptr65 = 0, $add$ptr671 = 0, $add$ptr742 = 0, $add$ptr756 = 0, $add113 = 0, $add150 = 0, $add154 = 0, $add163 = 0, $add165 = 0, $add273 = 0, $add275 = 0, $add284 = 0;
 var $add313 = 0, $add355 = 0, $add410 = 0.0, $add414 = 0, $add477$neg = 0, $add561 = 0, $add608 = 0, $add612 = 0, $add620 = 0, $add653 = 0, $add653$sink524 = 0, $add67 = 0, $add737 = 0, $add810 = 0, $add87 = 0.0, $add90 = 0.0, $and = 0, $and12 = 0, $and134 = 0, $and282 = 0;
 var $and36 = 0, $and379 = 0, $and45 = 0, $and483 = 0, $and610 = 0, $and610$lobit = 0, $and62 = 0, $and702 = 0, $and780 = 0, $arrayidx = 0, $arrayidx117 = 0, $arrayidx251 = 0, $arrayidx453 = 0, $arrayidx489 = 0, $big = 0, $buf = 0, $call55 = 0.0, $carry$0493 = 0, $carry262$0484 = 0, $cmp103 = 0;
 var $cmp127 = 0, $cmp131 = 0, $cmp147 = 0, $cmp196 = 0, $cmp205 = 0, $cmp225 = 0, $cmp225500 = 0, $cmp235 = 0, $cmp235492 = 0, $cmp249 = 0, $cmp249496 = 0, $cmp259 = 0, $cmp259486 = 0, $cmp277 = 0, $cmp277482 = 0, $cmp299 = 0, $cmp308 = 0, $cmp315 = 0, $cmp324 = 0, $cmp324478 = 0;
 var $cmp333 = 0, $cmp338 = 0, $cmp350 = 0, $cmp363 = 0, $cmp363474 = 0, $cmp374 = 0, $cmp38 = 0, $cmp385 = 0, $cmp390 = 0, $cmp403 = 0, $cmp411 = 0, $cmp416 = 0, $cmp416469 = 0, $cmp420 = 0, $cmp433 = 0, $cmp433465 = 0, $cmp443 = 0, $cmp450 = 0, $cmp450$lcssa = 0, $cmp450458 = 0;
 var $cmp470 = 0, $cmp473 = 0, $cmp495 = 0, $cmp495454 = 0, $cmp505 = 0, $cmp528 = 0, $cmp577 = 0, $cmp59 = 0, $cmp614 = 0, $cmp617 = 0, $cmp623 = 0, $cmp636 = 0, $cmp636449 = 0, $cmp660 = 0, $cmp665 = 0, $cmp673 = 0, $cmp678 = 0, $cmp678435 = 0, $cmp686 = 0, $cmp707 = 0;
 var $cmp707430 = 0, $cmp710 = 0, $cmp710431 = 0, $cmp722 = 0, $cmp722427 = 0, $cmp745 = 0, $cmp745442 = 0, $cmp748 = 0, $cmp748443 = 0, $cmp760 = 0, $cmp765 = 0, $cmp770 = 0, $cmp770439 = 0, $cmp777 = 0, $cmp790 = 0, $cmp818 = 0, $cmp82 = 0, $cmp94 = 0, $cond = 0, $cond100 = 0;
 var $cond233 = 0, $cond271 = 0, $cond304 = 0, $cond43 = 0, $cond629 = 0, $cond732 = 0, $cond800 = 0, $conv111 = 0, $conv114 = 0, $conv116 = 0, $conv118393 = 0, $conv121 = 0, $conv123 = 0.0, $conv216 = 0, $conv218 = 0.0, $conv644 = 0, $conv646 = 0, $d$0 = 0, $d$0491 = 0, $d$0494 = 0;
 var $d$1483 = 0, $d$2$lcssa = 0, $d$2470 = 0, $d$4 = 0, $d$5438 = 0, $d$6432 = 0, $d$7444 = 0, $dec = 0, $dec476 = 0, $dec481 = 0, $dec78 = 0, $div274 = 0, $div356 = 0, $div378 = 0, $div384 = 0, $e$0480 = 0, $e$1 = 0, $e$2467 = 0, $e$4 = 0, $e$5 = 0;
 var $e2 = 0, $ebuf0 = 0, $estr$0 = 0, $estr$1$lcssa = 0, $estr$1450 = 0, $estr$2 = 0, $i$0479 = 0, $i$1$lcssa = 0, $i$1475 = 0, $i$2466 = 0, $i$3455 = 0, $inc = 0, $inc425 = 0, $inc438 = 0, $inc468 = 0, $inc500 = 0, $incdec$ptr106 = 0, $incdec$ptr112 = 0, $incdec$ptr115 = 0, $incdec$ptr122 = 0;
 var $incdec$ptr137 = 0, $incdec$ptr217 = 0, $incdec$ptr246 = 0, $incdec$ptr288 = 0, $incdec$ptr292 = 0, $incdec$ptr292520 = 0, $incdec$ptr296 = 0, $incdec$ptr419 = 0, $incdec$ptr423 = 0, $incdec$ptr639 = 0, $incdec$ptr645 = 0, $incdec$ptr647 = 0, $incdec$ptr681 = 0, $incdec$ptr689 = 0, $incdec$ptr698 = 0, $incdec$ptr725 = 0, $incdec$ptr734 = 0, $incdec$ptr763 = 0, $incdec$ptr773 = 0, $incdec$ptr776 = 0;
 var $incdec$ptr808 = 0, $j$0 = 0, $j$0$in476 = 0, $j$1456 = 0, $j$2 = 0, $l$0 = 0, $l$1 = 0, $land$ext$neg = 0, $mul = 0.0, $mul125 = 0.0, $mul202 = 0.0, $mul220 = 0.0, $mul286 = 0, $mul322 = 0, $mul328 = 0, $mul335 = 0, $mul349 = 0, $mul367 = 0, $mul406 = 0.0, $mul407 = 0.0;
 var $mul431 = 0, $mul437 = 0, $mul499 = 0, $mul513 = 0, $mul80 = 0.0, $not$tobool341 = 0, $or = 0, $or$cond = 0, $or$cond1$not = 0, $or$cond2 = 0, $or$cond398 = 0, $or$cond400 = 0, $or$cond409 = 0, $or$cond411 = 0, $or120 = 0, $or504 = 0, $or613 = 0, $p$addr$2 = 0, $p$addr$3 = 0, $p$addr$4$lcssa = 0;
 var $p$addr$4433 = 0, $p$addr$5$lcssa = 0, $p$addr$5445 = 0, $pl$0 = 0, $prefix$0 = 0, $re$1426 = 0, $rem494 = 0, $rem494453 = 0, $round$0425 = 0.0, $round377$1 = 0.0, $s$0 = 0, $s$1 = 0, $s35$0 = 0, $s668$0436 = 0, $s668$1 = 0, $s715$0$lcssa = 0, $s715$0428 = 0, $s753$0 = 0, $s753$1440 = 0, $s753$2 = 0;
 var $scevgep513 = 0, $scevgep513514 = 0, $shl280 = 0, $shr283 = 0, $shr285 = 0, $small$1 = 0.0, $spec$select = 0, $spec$select395 = 0, $spec$select396 = 0, $spec$select396521 = 0, $spec$select396523 = 0, $spec$select397 = 0, $spec$select399 = 0.0, $spec$select401 = 0, $spec$select402 = 0, $spec$select403 = 0, $spec$select405 = 0, $spec$select408 = 0, $spec$select410 = 0, $spec$select412 = 0.0;
 var $spec$select413 = 0, $spec$select414 = 0, $spec$select416 = 0, $spec$select417 = 0, $spec$select418 = 0.0, $spec$select419 = 0.0, $spec$select420 = 0.0, $sub = 0.0, $sub$ptr$div = 0, $sub$ptr$div321 = 0, $sub$ptr$div347 = 0, $sub$ptr$div430 = 0, $sub$ptr$div511 = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast151 = 0, $sub$ptr$lhs$cast160 = 0, $sub$ptr$lhs$cast173$pre$phiZZZZ2D = 0, $sub$ptr$lhs$cast305 = 0, $sub$ptr$lhs$cast344 = 0, $sub$ptr$lhs$cast508 = 0;
 var $sub$ptr$lhs$cast633 = 0, $sub$ptr$lhs$cast694 = 0, $sub$ptr$lhs$cast787 = 0, $sub$ptr$lhs$cast811 = 0, $sub$ptr$rhs$cast$le = 0, $sub$ptr$rhs$cast152 = 0, $sub$ptr$rhs$cast161 = 0, $sub$ptr$rhs$cast174$pre$phiZZZZ2D = 0, $sub$ptr$rhs$cast306 = 0, $sub$ptr$rhs$cast319 = 0, $sub$ptr$rhs$cast345 = 0, $sub$ptr$rhs$cast428 = 0, $sub$ptr$rhs$cast634 = 0, $sub$ptr$rhs$cast634447 = 0, $sub$ptr$rhs$cast649 = 0, $sub$ptr$rhs$cast695 = 0, $sub$ptr$rhs$cast788 = 0, $sub$ptr$rhs$cast812 = 0, $sub$ptr$sub = 0, $sub$ptr$sub145 = 0;
 var $sub$ptr$sub153 = 0, $sub$ptr$sub159 = 0, $sub$ptr$sub162 = 0, $sub$ptr$sub172 = 0, $sub$ptr$sub175 = 0, $sub$ptr$sub307 = 0, $sub$ptr$sub320 = 0, $sub$ptr$sub346 = 0, $sub$ptr$sub429 = 0, $sub$ptr$sub510 = 0, $sub$ptr$sub635 = 0, $sub$ptr$sub635448 = 0, $sub$ptr$sub650 = 0, $sub$ptr$sub650$pn = 0, $sub$ptr$sub696 = 0, $sub$ptr$sub789 = 0, $sub$ptr$sub813 = 0, $sub124 = 0.0, $sub146 = 0, $sub181 = 0;
 var $sub203 = 0, $sub219 = 0.0, $sub256 = 0, $sub264 = 0, $sub281 = 0, $sub336 = 0, $sub343 = 0, $sub357 = 0, $sub409 = 0, $sub478 = 0, $sub480 = 0, $sub514 = 0, $sub562 = 0, $sub626 = 0, $sub735 = 0, $sub74 = 0, $sub806 = 0, $sub85 = 0.0, $sub86 = 0.0, $sub88 = 0.0;
 var $sub91 = 0.0, $sub97 = 0, $t$addr$0 = 0, $t$addr$1 = 0, $tobool129 = 0, $tobool13 = 0, $tobool135 = 0, $tobool139 = 0, $tobool140 = 0, $tobool222 = 0, $tobool244 = 0, $tobool252 = 0, $tobool290 = 0, $tobool290519 = 0, $tobool294 = 0, $tobool341 = 0, $tobool37 = 0, $tobool371 = 0, $tobool380 = 0, $tobool400 = 0;
 var $tobool454 = 0, $tobool484 = 0, $tobool490 = 0, $tobool56 = 0, $tobool609 = 0, $tobool609$not = 0, $tobool63 = 0, $tobool703 = 0, $tobool76 = 0, $tobool76421 = 0, $tobool781 = 0, $tobool79 = 0, $tobool9 = 0, $w$add653 = 0, $xor = 0, $xor167 = 0, $xor186 = 0, $xor655 = 0, $xor816 = 0, $y$addr$0 = 0.0;
 var $y$addr$1 = 0.0, $y$addr$2 = 0.0, $y$addr$3 = 0.0, $y$addr$4 = 0.0, $z$0 = 0, $z$1 = 0, $z$2$lcssa = 0, $z$2501 = 0, $z$3$lcssa = 0, $z$3497 = 0, $z$4$lcssa = 0, $z$4487 = 0, $z$5 = 0, $z$8 = 0, $z$9$lcssa = 0, $z$9459 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $big = sp + 32|0;
 $e2 = sp + 536|0;
 $buf = sp;
 $sub$ptr$rhs$cast$le = $buf;
 $ebuf0 = sp + 540|0;
 HEAP32[$e2>>2] = 0;
 $arrayidx = ((($ebuf0)) + 12|0);
 $0 = (___DOUBLE_BITS_662($y)|0);
 $1 = (getTempRet0() | 0);
 $2 = ($1|0)<(0);
 if ($2) {
  $sub = - $y;
  $3 = (___DOUBLE_BITS_662($sub)|0);
  $4 = (getTempRet0() | 0);
  $8 = $4;$85 = $3;$pl$0 = 1;$prefix$0 = 22892;$y$addr$0 = $sub;
 } else {
  $and = $fl & 2048;
  $tobool9 = ($and|0)==(0);
  $and12 = $fl & 1;
  $tobool13 = ($and12|0)==(0);
  $$ = $tobool13 ? (22893) : (22898);
  $spec$select416 = $tobool9 ? $$ : (22895);
  $5 = $fl & 2049;
  $6 = ($5|0)!=(0);
  $spec$select417 = $6&1;
  $8 = $1;$85 = $0;$pl$0 = $spec$select417;$prefix$0 = $spec$select416;$y$addr$0 = $y;
 }
 $7 = $8 & 2146435072;
 $9 = (0)==(0);
 $10 = ($7|0)==(2146435072);
 $11 = $9 & $10;
 do {
  if ($11) {
   $and36 = $t & 32;
   $tobool37 = ($and36|0)!=(0);
   $cond = $tobool37 ? 22911 : 22915;
   $cmp38 = ($y$addr$0 != $y$addr$0) | (0.0 != 0.0);
   $cond43 = $tobool37 ? 22919 : 22923;
   $s35$0 = $cmp38 ? $cond43 : $cond;
   $add = (($pl$0) + 3)|0;
   $and45 = $fl & -65537;
   _pad_659($f,32,$w,$add,$and45);
   _out($f,$prefix$0,$pl$0);
   _out($f,$s35$0,3);
   $xor = $fl ^ 8192;
   _pad_659($f,32,$w,$add,$xor);
   $add653$sink524 = $add;
  } else {
   $call55 = (+_frexp($y$addr$0,$e2));
   $mul = $call55 * 2.0;
   $tobool56 = $mul != 0.0;
   if ($tobool56) {
    $12 = HEAP32[$e2>>2]|0;
    $dec = (($12) + -1)|0;
    HEAP32[$e2>>2] = $dec;
   }
   $or = $t | 32;
   $cmp59 = ($or|0)==(97);
   if ($cmp59) {
    $and62 = $t & 32;
    $tobool63 = ($and62|0)==(0);
    $add$ptr65 = ((($prefix$0)) + 9|0);
    $spec$select = $tobool63 ? $prefix$0 : $add$ptr65;
    $add67 = $pl$0 | 2;
    $13 = ($p>>>0)>(11);
    $sub74 = (12 - ($p))|0;
    $tobool76421 = ($sub74|0)==(0);
    $tobool76 = $13 | $tobool76421;
    do {
     if ($tobool76) {
      $y$addr$1 = $mul;
     } else {
      $re$1426 = $sub74;$round$0425 = 8.0;
      while(1) {
       $dec78 = (($re$1426) + -1)|0;
       $mul80 = $round$0425 * 16.0;
       $tobool79 = ($dec78|0)==(0);
       if ($tobool79) {
        break;
       } else {
        $re$1426 = $dec78;$round$0425 = $mul80;
       }
      }
      $14 = HEAP8[$spec$select>>0]|0;
      $cmp82 = ($14<<24>>24)==(45);
      if ($cmp82) {
       $sub85 = - $mul;
       $sub86 = $sub85 - $mul80;
       $add87 = $mul80 + $sub86;
       $sub88 = - $add87;
       $y$addr$1 = $sub88;
       break;
      } else {
       $add90 = $mul + $mul80;
       $sub91 = $add90 - $mul80;
       $y$addr$1 = $sub91;
       break;
      }
     }
    } while(0);
    $15 = HEAP32[$e2>>2]|0;
    $cmp94 = ($15|0)<(0);
    $sub97 = (0 - ($15))|0;
    $cond100 = $cmp94 ? $sub97 : $15;
    $16 = ($cond100|0)<(0);
    $17 = $16 << 31 >> 31;
    $18 = (_fmt_u($cond100,$17,$arrayidx)|0);
    $cmp103 = ($18|0)==($arrayidx|0);
    if ($cmp103) {
     $incdec$ptr106 = ((($ebuf0)) + 11|0);
     HEAP8[$incdec$ptr106>>0] = 48;
     $estr$0 = $incdec$ptr106;
    } else {
     $estr$0 = $18;
    }
    $19 = $15 >> 31;
    $20 = $19 & 2;
    $21 = (($20) + 43)|0;
    $conv111 = $21&255;
    $incdec$ptr112 = ((($estr$0)) + -1|0);
    HEAP8[$incdec$ptr112>>0] = $conv111;
    $add113 = (($t) + 15)|0;
    $conv114 = $add113&255;
    $incdec$ptr115 = ((($estr$0)) + -2|0);
    HEAP8[$incdec$ptr115>>0] = $conv114;
    $cmp131 = ($p|0)<(1);
    $and134 = $fl & 8;
    $tobool135 = ($and134|0)==(0);
    $s$0 = $buf;$y$addr$2 = $y$addr$1;
    while(1) {
     $conv116 = (~~(($y$addr$2)));
     $arrayidx117 = (1680 + ($conv116)|0);
     $22 = HEAP8[$arrayidx117>>0]|0;
     $conv118393 = $22&255;
     $or120 = $and62 | $conv118393;
     $conv121 = $or120&255;
     $incdec$ptr122 = ((($s$0)) + 1|0);
     HEAP8[$s$0>>0] = $conv121;
     $conv123 = (+($conv116|0));
     $sub124 = $y$addr$2 - $conv123;
     $mul125 = $sub124 * 16.0;
     $sub$ptr$lhs$cast = $incdec$ptr122;
     $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast$le))|0;
     $cmp127 = ($sub$ptr$sub|0)==(1);
     if ($cmp127) {
      $tobool129 = $mul125 == 0.0;
      $or$cond1$not = $cmp131 & $tobool129;
      $or$cond = $tobool135 & $or$cond1$not;
      if ($or$cond) {
       $s$1 = $incdec$ptr122;
      } else {
       $incdec$ptr137 = ((($s$0)) + 2|0);
       HEAP8[$incdec$ptr122>>0] = 46;
       $s$1 = $incdec$ptr137;
      }
     } else {
      $s$1 = $incdec$ptr122;
     }
     $tobool139 = $mul125 != 0.0;
     if ($tobool139) {
      $s$0 = $s$1;$y$addr$2 = $mul125;
     } else {
      break;
     }
    }
    $tobool140 = ($p|0)==(0);
    $$pre517 = $s$1;
    if ($tobool140) {
     label = 25;
    } else {
     $sub$ptr$sub145 = (-2 - ($sub$ptr$rhs$cast$le))|0;
     $sub146 = (($sub$ptr$sub145) + ($$pre517))|0;
     $cmp147 = ($sub146|0)<($p|0);
     if ($cmp147) {
      $sub$ptr$lhs$cast151 = $arrayidx;
      $sub$ptr$rhs$cast152 = $incdec$ptr115;
      $sub$ptr$sub153 = (($p) + 2)|0;
      $add150 = (($sub$ptr$sub153) + ($sub$ptr$lhs$cast151))|0;
      $add154 = (($add150) - ($sub$ptr$rhs$cast152))|0;
      $l$0 = $add154;$sub$ptr$lhs$cast173$pre$phiZZZZ2D = $sub$ptr$lhs$cast151;$sub$ptr$rhs$cast174$pre$phiZZZZ2D = $sub$ptr$rhs$cast152;
     } else {
      label = 25;
     }
    }
    if ((label|0) == 25) {
     $sub$ptr$lhs$cast160 = $arrayidx;
     $sub$ptr$rhs$cast161 = $incdec$ptr115;
     $sub$ptr$sub159 = (($sub$ptr$lhs$cast160) - ($sub$ptr$rhs$cast$le))|0;
     $sub$ptr$sub162 = (($sub$ptr$sub159) - ($sub$ptr$rhs$cast161))|0;
     $add163 = (($sub$ptr$sub162) + ($$pre517))|0;
     $l$0 = $add163;$sub$ptr$lhs$cast173$pre$phiZZZZ2D = $sub$ptr$lhs$cast160;$sub$ptr$rhs$cast174$pre$phiZZZZ2D = $sub$ptr$rhs$cast161;
    }
    $add165 = (($l$0) + ($add67))|0;
    _pad_659($f,32,$w,$add165,$fl);
    _out($f,$spec$select,$add67);
    $xor167 = $fl ^ 65536;
    _pad_659($f,48,$w,$add165,$xor167);
    $sub$ptr$sub172 = (($$pre517) - ($sub$ptr$rhs$cast$le))|0;
    _out($f,$buf,$sub$ptr$sub172);
    $sub$ptr$sub175 = (($sub$ptr$lhs$cast173$pre$phiZZZZ2D) - ($sub$ptr$rhs$cast174$pre$phiZZZZ2D))|0;
    $23 = (($sub$ptr$sub172) + ($sub$ptr$sub175))|0;
    $sub181 = (($l$0) - ($23))|0;
    _pad_659($f,48,$sub181,0,0);
    _out($f,$incdec$ptr115,$sub$ptr$sub175);
    $xor186 = $fl ^ 8192;
    _pad_659($f,32,$w,$add165,$xor186);
    $add653$sink524 = $add165;
    break;
   }
   $cmp196 = ($p|0)<(0);
   $spec$select395 = $cmp196 ? 6 : $p;
   if ($tobool56) {
    $mul202 = $mul * 268435456.0;
    $24 = HEAP32[$e2>>2]|0;
    $sub203 = (($24) + -28)|0;
    HEAP32[$e2>>2] = $sub203;
    $$pr = $sub203;$y$addr$3 = $mul202;
   } else {
    $$pre = HEAP32[$e2>>2]|0;
    $$pr = $$pre;$y$addr$3 = $mul;
   }
   $cmp205 = ($$pr|0)<(0);
   $add$ptr213 = ((($big)) + 288|0);
   $z$0 = $cmp205 ? $big : $add$ptr213;
   $y$addr$4 = $y$addr$3;$z$1 = $z$0;
   while(1) {
    $conv216 = (~~(($y$addr$4))>>>0);
    HEAP32[$z$1>>2] = $conv216;
    $incdec$ptr217 = ((($z$1)) + 4|0);
    $conv218 = (+($conv216>>>0));
    $sub219 = $y$addr$4 - $conv218;
    $mul220 = $sub219 * 1.0E+9;
    $tobool222 = $mul220 != 0.0;
    if ($tobool222) {
     $y$addr$4 = $mul220;$z$1 = $incdec$ptr217;
    } else {
     break;
    }
   }
   $sub$ptr$rhs$cast345 = $z$0;
   $cmp225500 = ($$pr|0)>(0);
   if ($cmp225500) {
    $26 = $$pr;$a$1502 = $z$0;$z$2501 = $incdec$ptr217;
    while(1) {
     $25 = ($26|0)<(29);
     $cond233 = $25 ? $26 : 29;
     $d$0491 = ((($z$2501)) + -4|0);
     $cmp235492 = ($d$0491>>>0)<($a$1502>>>0);
     if ($cmp235492) {
      $a$2 = $a$1502;
     } else {
      $carry$0493 = 0;$d$0494 = $d$0491;
      while(1) {
       $27 = HEAP32[$d$0494>>2]|0;
       $28 = (_bitshift64Shl(($27|0),0,($cond233|0))|0);
       $29 = (getTempRet0() | 0);
       $30 = (_i64Add(($28|0),($29|0),($carry$0493|0),0)|0);
       $31 = (getTempRet0() | 0);
       $32 = (___udivdi3(($30|0),($31|0),1000000000,0)|0);
       $33 = (getTempRet0() | 0);
       $34 = (___muldi3(($32|0),($33|0),1000000000,0)|0);
       $35 = (getTempRet0() | 0);
       $36 = (_i64Subtract(($30|0),($31|0),($34|0),($35|0))|0);
       $37 = (getTempRet0() | 0);
       HEAP32[$d$0494>>2] = $36;
       $d$0 = ((($d$0494)) + -4|0);
       $cmp235 = ($d$0>>>0)<($a$1502>>>0);
       if ($cmp235) {
        break;
       } else {
        $carry$0493 = $32;$d$0494 = $d$0;
       }
      }
      $tobool244 = ($32|0)==(0);
      if ($tobool244) {
       $a$2 = $a$1502;
      } else {
       $incdec$ptr246 = ((($a$1502)) + -4|0);
       HEAP32[$incdec$ptr246>>2] = $32;
       $a$2 = $incdec$ptr246;
      }
     }
     $cmp249496 = ($z$2501>>>0)>($a$2>>>0);
     L57: do {
      if ($cmp249496) {
       $z$3497 = $z$2501;
       while(1) {
        $arrayidx251 = ((($z$3497)) + -4|0);
        $38 = HEAP32[$arrayidx251>>2]|0;
        $tobool252 = ($38|0)==(0);
        if (!($tobool252)) {
         $z$3$lcssa = $z$3497;
         break L57;
        }
        $cmp249 = ($arrayidx251>>>0)>($a$2>>>0);
        if ($cmp249) {
         $z$3497 = $arrayidx251;
        } else {
         $z$3$lcssa = $arrayidx251;
         break;
        }
       }
      } else {
       $z$3$lcssa = $z$2501;
      }
     } while(0);
     $39 = HEAP32[$e2>>2]|0;
     $sub256 = (($39) - ($cond233))|0;
     HEAP32[$e2>>2] = $sub256;
     $cmp225 = ($sub256|0)>(0);
     if ($cmp225) {
      $26 = $sub256;$a$1502 = $a$2;$z$2501 = $z$3$lcssa;
     } else {
      $$pr415 = $sub256;$a$1$lcssa = $a$2;$z$2$lcssa = $z$3$lcssa;
      break;
     }
    }
   } else {
    $$pr415 = $$pr;$a$1$lcssa = $z$0;$z$2$lcssa = $incdec$ptr217;
   }
   $cmp259486 = ($$pr415|0)<(0);
   if ($cmp259486) {
    $add273 = (($spec$select395) + 25)|0;
    $div274 = (($add273|0) / 9)&-1;
    $add275 = (($div274) + 1)|0;
    $cmp299 = ($or|0)==(102);
    $40 = $$pr415;$a$3488 = $a$1$lcssa;$z$4487 = $z$2$lcssa;
    while(1) {
     $sub264 = (0 - ($40))|0;
     $41 = ($sub264|0)<(9);
     $cond271 = $41 ? $sub264 : 9;
     $cmp277482 = ($a$3488>>>0)<($z$4487>>>0);
     if ($cmp277482) {
      $shl280 = 1 << $cond271;
      $sub281 = (($shl280) + -1)|0;
      $shr285 = 1000000000 >>> $cond271;
      $carry262$0484 = 0;$d$1483 = $a$3488;
      while(1) {
       $43 = HEAP32[$d$1483>>2]|0;
       $and282 = $43 & $sub281;
       $shr283 = $43 >>> $cond271;
       $add284 = (($shr283) + ($carry262$0484))|0;
       HEAP32[$d$1483>>2] = $add284;
       $mul286 = Math_imul($and282, $shr285)|0;
       $incdec$ptr288 = ((($d$1483)) + 4|0);
       $cmp277 = ($incdec$ptr288>>>0)<($z$4487>>>0);
       if ($cmp277) {
        $carry262$0484 = $mul286;$d$1483 = $incdec$ptr288;
       } else {
        break;
       }
      }
      $44 = HEAP32[$a$3488>>2]|0;
      $tobool290 = ($44|0)==(0);
      $incdec$ptr292 = ((($a$3488)) + 4|0);
      $spec$select396 = $tobool290 ? $incdec$ptr292 : $a$3488;
      $tobool294 = ($mul286|0)==(0);
      if ($tobool294) {
       $spec$select396523 = $spec$select396;$z$5 = $z$4487;
      } else {
       $incdec$ptr296 = ((($z$4487)) + 4|0);
       HEAP32[$z$4487>>2] = $mul286;
       $spec$select396523 = $spec$select396;$z$5 = $incdec$ptr296;
      }
     } else {
      $42 = HEAP32[$a$3488>>2]|0;
      $tobool290519 = ($42|0)==(0);
      $incdec$ptr292520 = ((($a$3488)) + 4|0);
      $spec$select396521 = $tobool290519 ? $incdec$ptr292520 : $a$3488;
      $spec$select396523 = $spec$select396521;$z$5 = $z$4487;
     }
     $cond304 = $cmp299 ? $z$0 : $spec$select396523;
     $sub$ptr$lhs$cast305 = $z$5;
     $sub$ptr$rhs$cast306 = $cond304;
     $sub$ptr$sub307 = (($sub$ptr$lhs$cast305) - ($sub$ptr$rhs$cast306))|0;
     $sub$ptr$div = $sub$ptr$sub307 >> 2;
     $cmp308 = ($sub$ptr$div|0)>($add275|0);
     $add$ptr311 = (($cond304) + ($add275<<2)|0);
     $spec$select397 = $cmp308 ? $add$ptr311 : $z$5;
     $45 = HEAP32[$e2>>2]|0;
     $add313 = (($45) + ($cond271))|0;
     HEAP32[$e2>>2] = $add313;
     $cmp259 = ($add313|0)<(0);
     if ($cmp259) {
      $40 = $add313;$a$3488 = $spec$select396523;$z$4487 = $spec$select397;
     } else {
      $a$3$lcssa = $spec$select396523;$z$4$lcssa = $spec$select397;
      break;
     }
    }
   } else {
    $a$3$lcssa = $a$1$lcssa;$z$4$lcssa = $z$2$lcssa;
   }
   $cmp315 = ($a$3$lcssa>>>0)<($z$4$lcssa>>>0);
   if ($cmp315) {
    $sub$ptr$rhs$cast319 = $a$3$lcssa;
    $sub$ptr$sub320 = (($sub$ptr$rhs$cast345) - ($sub$ptr$rhs$cast319))|0;
    $sub$ptr$div321 = $sub$ptr$sub320 >> 2;
    $mul322 = ($sub$ptr$div321*9)|0;
    $46 = HEAP32[$a$3$lcssa>>2]|0;
    $cmp324478 = ($46>>>0)<(10);
    if ($cmp324478) {
     $e$1 = $mul322;
    } else {
     $e$0480 = $mul322;$i$0479 = 10;
     while(1) {
      $mul328 = ($i$0479*10)|0;
      $inc = (($e$0480) + 1)|0;
      $cmp324 = ($46>>>0)<($mul328>>>0);
      if ($cmp324) {
       $e$1 = $inc;
       break;
      } else {
       $e$0480 = $inc;$i$0479 = $mul328;
      }
     }
    }
   } else {
    $e$1 = 0;
   }
   $cmp333 = ($or|0)==(102);
   $mul335 = $cmp333 ? 0 : $e$1;
   $sub336 = (($spec$select395) - ($mul335))|0;
   $cmp338 = ($or|0)==(103);
   $tobool341 = ($spec$select395|0)!=(0);
   $47 = $tobool341 & $cmp338;
   $land$ext$neg = $47 << 31 >> 31;
   $sub343 = (($sub336) + ($land$ext$neg))|0;
   $sub$ptr$lhs$cast344 = $z$4$lcssa;
   $sub$ptr$sub346 = (($sub$ptr$lhs$cast344) - ($sub$ptr$rhs$cast345))|0;
   $sub$ptr$div347 = $sub$ptr$sub346 >> 2;
   $48 = ($sub$ptr$div347*9)|0;
   $mul349 = (($48) + -9)|0;
   $cmp350 = ($sub343|0)<($mul349|0);
   if ($cmp350) {
    $add$ptr354 = ((($z$0)) + 4|0);
    $add355 = (($sub343) + 9216)|0;
    $div356 = (($add355|0) / 9)&-1;
    $sub357 = (($div356) + -1024)|0;
    $add$ptr358 = (($add$ptr354) + ($sub357<<2)|0);
    $49 = ($div356*9)|0;
    $50 = (($add355) - ($49))|0;
    $cmp363474 = ($50|0)<(8);
    if ($cmp363474) {
     $i$1475 = 10;$j$0$in476 = $50;
     while(1) {
      $j$0 = (($j$0$in476) + 1)|0;
      $mul367 = ($i$1475*10)|0;
      $cmp363 = ($j$0$in476|0)<(7);
      if ($cmp363) {
       $i$1475 = $mul367;$j$0$in476 = $j$0;
      } else {
       $i$1$lcssa = $mul367;
       break;
      }
     }
    } else {
     $i$1$lcssa = 10;
    }
    $51 = HEAP32[$add$ptr358>>2]|0;
    $div378 = (($51>>>0) / ($i$1$lcssa>>>0))&-1;
    $52 = Math_imul($div378, $i$1$lcssa)|0;
    $53 = (($51) - ($52))|0;
    $tobool371 = ($53|0)==(0);
    $add$ptr373 = ((($add$ptr358)) + 4|0);
    $cmp374 = ($add$ptr373|0)==($z$4$lcssa|0);
    $or$cond398 = $cmp374 & $tobool371;
    if ($or$cond398) {
     $a$8 = $a$3$lcssa;$d$4 = $add$ptr358;$e$4 = $e$1;
    } else {
     $and379 = $div378 & 1;
     $tobool380 = ($and379|0)==(0);
     $spec$select399 = $tobool380 ? 9007199254740992.0 : 9007199254740994.0;
     $div384 = $i$1$lcssa >>> 1;
     $cmp385 = ($53>>>0)<($div384>>>0);
     $cmp390 = ($53|0)==($div384|0);
     $or$cond400 = $cmp374 & $cmp390;
     $spec$select412 = $or$cond400 ? 1.0 : 1.5;
     $spec$select418 = $cmp385 ? 0.5 : $spec$select412;
     $tobool400 = ($pl$0|0)==(0);
     if ($tobool400) {
      $round377$1 = $spec$select399;$small$1 = $spec$select418;
     } else {
      $54 = HEAP8[$prefix$0>>0]|0;
      $cmp403 = ($54<<24>>24)==(45);
      $mul406 = - $spec$select399;
      $mul407 = - $spec$select418;
      $spec$select419 = $cmp403 ? $mul406 : $spec$select399;
      $spec$select420 = $cmp403 ? $mul407 : $spec$select418;
      $round377$1 = $spec$select419;$small$1 = $spec$select420;
     }
     $sub409 = (($51) - ($53))|0;
     HEAP32[$add$ptr358>>2] = $sub409;
     $add410 = $round377$1 + $small$1;
     $cmp411 = $add410 != $round377$1;
     if ($cmp411) {
      $add414 = (($sub409) + ($i$1$lcssa))|0;
      HEAP32[$add$ptr358>>2] = $add414;
      $cmp416469 = ($add414>>>0)>(999999999);
      if ($cmp416469) {
       $a$5471 = $a$3$lcssa;$d$2470 = $add$ptr358;
       while(1) {
        $incdec$ptr419 = ((($d$2470)) + -4|0);
        HEAP32[$d$2470>>2] = 0;
        $cmp420 = ($incdec$ptr419>>>0)<($a$5471>>>0);
        if ($cmp420) {
         $incdec$ptr423 = ((($a$5471)) + -4|0);
         HEAP32[$incdec$ptr423>>2] = 0;
         $a$6 = $incdec$ptr423;
        } else {
         $a$6 = $a$5471;
        }
        $55 = HEAP32[$incdec$ptr419>>2]|0;
        $inc425 = (($55) + 1)|0;
        HEAP32[$incdec$ptr419>>2] = $inc425;
        $cmp416 = ($inc425>>>0)>(999999999);
        if ($cmp416) {
         $a$5471 = $a$6;$d$2470 = $incdec$ptr419;
        } else {
         $a$5$lcssa = $a$6;$d$2$lcssa = $incdec$ptr419;
         break;
        }
       }
      } else {
       $a$5$lcssa = $a$3$lcssa;$d$2$lcssa = $add$ptr358;
      }
      $sub$ptr$rhs$cast428 = $a$5$lcssa;
      $sub$ptr$sub429 = (($sub$ptr$rhs$cast345) - ($sub$ptr$rhs$cast428))|0;
      $sub$ptr$div430 = $sub$ptr$sub429 >> 2;
      $mul431 = ($sub$ptr$div430*9)|0;
      $56 = HEAP32[$a$5$lcssa>>2]|0;
      $cmp433465 = ($56>>>0)<(10);
      if ($cmp433465) {
       $a$8 = $a$5$lcssa;$d$4 = $d$2$lcssa;$e$4 = $mul431;
      } else {
       $e$2467 = $mul431;$i$2466 = 10;
       while(1) {
        $mul437 = ($i$2466*10)|0;
        $inc438 = (($e$2467) + 1)|0;
        $cmp433 = ($56>>>0)<($mul437>>>0);
        if ($cmp433) {
         $a$8 = $a$5$lcssa;$d$4 = $d$2$lcssa;$e$4 = $inc438;
         break;
        } else {
         $e$2467 = $inc438;$i$2466 = $mul437;
        }
       }
      }
     } else {
      $a$8 = $a$3$lcssa;$d$4 = $add$ptr358;$e$4 = $e$1;
     }
    }
    $add$ptr442 = ((($d$4)) + 4|0);
    $cmp443 = ($z$4$lcssa>>>0)>($add$ptr442>>>0);
    $spec$select401 = $cmp443 ? $add$ptr442 : $z$4$lcssa;
    $a$9 = $a$8;$e$5 = $e$4;$z$8 = $spec$select401;
   } else {
    $a$9 = $a$3$lcssa;$e$5 = $e$1;$z$8 = $z$4$lcssa;
   }
   $sub626 = (0 - ($e$5))|0;
   $cmp450458 = ($z$8>>>0)>($a$9>>>0);
   L109: do {
    if ($cmp450458) {
     $z$9459 = $z$8;
     while(1) {
      $arrayidx453 = ((($z$9459)) + -4|0);
      $57 = HEAP32[$arrayidx453>>2]|0;
      $tobool454 = ($57|0)==(0);
      if (!($tobool454)) {
       $cmp450$lcssa = 1;$z$9$lcssa = $z$9459;
       break L109;
      }
      $cmp450 = ($arrayidx453>>>0)>($a$9>>>0);
      if ($cmp450) {
       $z$9459 = $arrayidx453;
      } else {
       $cmp450$lcssa = 0;$z$9$lcssa = $arrayidx453;
       break;
      }
     }
    } else {
     $cmp450$lcssa = 0;$z$9$lcssa = $z$8;
    }
   } while(0);
   do {
    if ($cmp338) {
     $not$tobool341 = $tobool341 ^ 1;
     $inc468 = $not$tobool341&1;
     $spec$select402 = (($spec$select395) + ($inc468))|0;
     $cmp470 = ($spec$select402|0)>($e$5|0);
     $cmp473 = ($e$5|0)>(-5);
     $or$cond2 = $cmp470 & $cmp473;
     if ($or$cond2) {
      $dec476 = (($t) + -1)|0;
      $add477$neg = (($spec$select402) + -1)|0;
      $sub478 = (($add477$neg) - ($e$5))|0;
      $p$addr$2 = $sub478;$t$addr$0 = $dec476;
     } else {
      $sub480 = (($t) + -2)|0;
      $dec481 = (($spec$select402) + -1)|0;
      $p$addr$2 = $dec481;$t$addr$0 = $sub480;
     }
     $and483 = $fl & 8;
     $tobool484 = ($and483|0)==(0);
     if ($tobool484) {
      if ($cmp450$lcssa) {
       $arrayidx489 = ((($z$9$lcssa)) + -4|0);
       $58 = HEAP32[$arrayidx489>>2]|0;
       $tobool490 = ($58|0)==(0);
       if ($tobool490) {
        $j$2 = 9;
       } else {
        $rem494453 = (($58>>>0) % 10)&-1;
        $cmp495454 = ($rem494453|0)==(0);
        if ($cmp495454) {
         $i$3455 = 10;$j$1456 = 0;
         while(1) {
          $mul499 = ($i$3455*10)|0;
          $inc500 = (($j$1456) + 1)|0;
          $rem494 = (($58>>>0) % ($mul499>>>0))&-1;
          $cmp495 = ($rem494|0)==(0);
          if ($cmp495) {
           $i$3455 = $mul499;$j$1456 = $inc500;
          } else {
           $j$2 = $inc500;
           break;
          }
         }
        } else {
         $j$2 = 0;
        }
       }
      } else {
       $j$2 = 9;
      }
      $or504 = $t$addr$0 | 32;
      $cmp505 = ($or504|0)==(102);
      $sub$ptr$lhs$cast508 = $z$9$lcssa;
      $sub$ptr$sub510 = (($sub$ptr$lhs$cast508) - ($sub$ptr$rhs$cast345))|0;
      $sub$ptr$div511 = $sub$ptr$sub510 >> 2;
      $59 = ($sub$ptr$div511*9)|0;
      $mul513 = (($59) + -9)|0;
      if ($cmp505) {
       $sub514 = (($mul513) - ($j$2))|0;
       $60 = ($sub514|0)>(0);
       $spec$select403 = $60 ? $sub514 : 0;
       $cmp528 = ($p$addr$2|0)<($spec$select403|0);
       $spec$select413 = $cmp528 ? $p$addr$2 : $spec$select403;
       $p$addr$3 = $spec$select413;$t$addr$1 = $t$addr$0;
       break;
      } else {
       $add561 = (($mul513) + ($e$5))|0;
       $sub562 = (($add561) - ($j$2))|0;
       $61 = ($sub562|0)>(0);
       $spec$select405 = $61 ? $sub562 : 0;
       $cmp577 = ($p$addr$2|0)<($spec$select405|0);
       $spec$select414 = $cmp577 ? $p$addr$2 : $spec$select405;
       $p$addr$3 = $spec$select414;$t$addr$1 = $t$addr$0;
       break;
      }
     } else {
      $p$addr$3 = $p$addr$2;$t$addr$1 = $t$addr$0;
     }
    } else {
     $p$addr$3 = $spec$select395;$t$addr$1 = $t;
    }
   } while(0);
   $tobool609 = ($p$addr$3|0)!=(0);
   $and610 = $fl >>> 3;
   $and610$lobit = $and610 & 1;
   $62 = $tobool609 ? 1 : $and610$lobit;
   $or613 = $t$addr$1 | 32;
   $cmp614 = ($or613|0)==(102);
   if ($cmp614) {
    $cmp617 = ($e$5|0)>(0);
    $add620 = $cmp617 ? $e$5 : 0;
    $estr$2 = 0;$sub$ptr$sub650$pn = $add620;
   } else {
    $cmp623 = ($e$5|0)<(0);
    $cond629 = $cmp623 ? $sub626 : $e$5;
    $63 = ($cond629|0)<(0);
    $64 = $63 << 31 >> 31;
    $65 = (_fmt_u($cond629,$64,$arrayidx)|0);
    $sub$ptr$lhs$cast633 = $arrayidx;
    $sub$ptr$rhs$cast634447 = $65;
    $sub$ptr$sub635448 = (($sub$ptr$lhs$cast633) - ($sub$ptr$rhs$cast634447))|0;
    $cmp636449 = ($sub$ptr$sub635448|0)<(2);
    if ($cmp636449) {
     $estr$1450 = $65;
     while(1) {
      $incdec$ptr639 = ((($estr$1450)) + -1|0);
      HEAP8[$incdec$ptr639>>0] = 48;
      $sub$ptr$rhs$cast634 = $incdec$ptr639;
      $sub$ptr$sub635 = (($sub$ptr$lhs$cast633) - ($sub$ptr$rhs$cast634))|0;
      $cmp636 = ($sub$ptr$sub635|0)<(2);
      if ($cmp636) {
       $estr$1450 = $incdec$ptr639;
      } else {
       $estr$1$lcssa = $incdec$ptr639;
       break;
      }
     }
    } else {
     $estr$1$lcssa = $65;
    }
    $66 = $e$5 >> 31;
    $67 = $66 & 2;
    $68 = (($67) + 43)|0;
    $conv644 = $68&255;
    $incdec$ptr645 = ((($estr$1$lcssa)) + -1|0);
    HEAP8[$incdec$ptr645>>0] = $conv644;
    $conv646 = $t$addr$1&255;
    $incdec$ptr647 = ((($estr$1$lcssa)) + -2|0);
    HEAP8[$incdec$ptr647>>0] = $conv646;
    $sub$ptr$rhs$cast649 = $incdec$ptr647;
    $sub$ptr$sub650 = (($sub$ptr$lhs$cast633) - ($sub$ptr$rhs$cast649))|0;
    $estr$2 = $incdec$ptr647;$sub$ptr$sub650$pn = $sub$ptr$sub650;
   }
   $add608 = (($pl$0) + 1)|0;
   $add612 = (($add608) + ($p$addr$3))|0;
   $l$1 = (($add612) + ($62))|0;
   $add653 = (($l$1) + ($sub$ptr$sub650$pn))|0;
   _pad_659($f,32,$w,$add653,$fl);
   _out($f,$prefix$0,$pl$0);
   $xor655 = $fl ^ 65536;
   _pad_659($f,48,$w,$add653,$xor655);
   if ($cmp614) {
    $cmp660 = ($a$9>>>0)>($z$0>>>0);
    $spec$select408 = $cmp660 ? $z$0 : $a$9;
    $add$ptr671 = ((($buf)) + 9|0);
    $sub$ptr$lhs$cast694 = $add$ptr671;
    $incdec$ptr689 = ((($buf)) + 8|0);
    $d$5438 = $spec$select408;
    while(1) {
     $69 = HEAP32[$d$5438>>2]|0;
     $70 = (_fmt_u($69,0,$add$ptr671)|0);
     $cmp673 = ($d$5438|0)==($spec$select408|0);
     if ($cmp673) {
      $cmp686 = ($70|0)==($add$ptr671|0);
      if ($cmp686) {
       HEAP8[$incdec$ptr689>>0] = 48;
       $s668$1 = $incdec$ptr689;
      } else {
       $s668$1 = $70;
      }
     } else {
      $cmp678435 = ($70>>>0)>($buf>>>0);
      if ($cmp678435) {
       $71 = $70;
       $72 = (($71) - ($sub$ptr$rhs$cast$le))|0;
       _memset(($buf|0),48,($72|0))|0;
       $s668$0436 = $70;
       while(1) {
        $incdec$ptr681 = ((($s668$0436)) + -1|0);
        $cmp678 = ($incdec$ptr681>>>0)>($buf>>>0);
        if ($cmp678) {
         $s668$0436 = $incdec$ptr681;
        } else {
         $s668$1 = $incdec$ptr681;
         break;
        }
       }
      } else {
       $s668$1 = $70;
      }
     }
     $sub$ptr$rhs$cast695 = $s668$1;
     $sub$ptr$sub696 = (($sub$ptr$lhs$cast694) - ($sub$ptr$rhs$cast695))|0;
     _out($f,$s668$1,$sub$ptr$sub696);
     $incdec$ptr698 = ((($d$5438)) + 4|0);
     $cmp665 = ($incdec$ptr698>>>0)>($z$0>>>0);
     if ($cmp665) {
      break;
     } else {
      $d$5438 = $incdec$ptr698;
     }
    }
    $tobool609$not = $tobool609 ^ 1;
    $and702 = $fl & 8;
    $tobool703 = ($and702|0)==(0);
    $or$cond409 = $tobool703 & $tobool609$not;
    if (!($or$cond409)) {
     _out($f,25656,1);
    }
    $cmp707430 = ($incdec$ptr698>>>0)<($z$9$lcssa>>>0);
    $cmp710431 = ($p$addr$3|0)>(0);
    $73 = $cmp707430 & $cmp710431;
    if ($73) {
     $d$6432 = $incdec$ptr698;$p$addr$4433 = $p$addr$3;
     while(1) {
      $74 = HEAP32[$d$6432>>2]|0;
      $75 = (_fmt_u($74,0,$add$ptr671)|0);
      $cmp722427 = ($75>>>0)>($buf>>>0);
      if ($cmp722427) {
       $76 = $75;
       $77 = (($76) - ($sub$ptr$rhs$cast$le))|0;
       _memset(($buf|0),48,($77|0))|0;
       $s715$0428 = $75;
       while(1) {
        $incdec$ptr725 = ((($s715$0428)) + -1|0);
        $cmp722 = ($incdec$ptr725>>>0)>($buf>>>0);
        if ($cmp722) {
         $s715$0428 = $incdec$ptr725;
        } else {
         $s715$0$lcssa = $incdec$ptr725;
         break;
        }
       }
      } else {
       $s715$0$lcssa = $75;
      }
      $78 = ($p$addr$4433|0)<(9);
      $cond732 = $78 ? $p$addr$4433 : 9;
      _out($f,$s715$0$lcssa,$cond732);
      $incdec$ptr734 = ((($d$6432)) + 4|0);
      $sub735 = (($p$addr$4433) + -9)|0;
      $cmp707 = ($incdec$ptr734>>>0)<($z$9$lcssa>>>0);
      $cmp710 = ($p$addr$4433|0)>(9);
      $79 = $cmp707 & $cmp710;
      if ($79) {
       $d$6432 = $incdec$ptr734;$p$addr$4433 = $sub735;
      } else {
       $p$addr$4$lcssa = $sub735;
       break;
      }
     }
    } else {
     $p$addr$4$lcssa = $p$addr$3;
    }
    $add737 = (($p$addr$4$lcssa) + 9)|0;
    _pad_659($f,48,$add737,9,0);
   } else {
    $add$ptr742 = ((($a$9)) + 4|0);
    $spec$select410 = $cmp450$lcssa ? $z$9$lcssa : $add$ptr742;
    $cmp745442 = ($a$9>>>0)<($spec$select410>>>0);
    $cmp748443 = ($p$addr$3|0)>(-1);
    $80 = $cmp745442 & $cmp748443;
    if ($80) {
     $add$ptr756 = ((($buf)) + 9|0);
     $and780 = $fl & 8;
     $tobool781 = ($and780|0)==(0);
     $sub$ptr$lhs$cast787 = $add$ptr756;
     $81 = (0 - ($sub$ptr$rhs$cast$le))|0;
     $incdec$ptr763 = ((($buf)) + 8|0);
     $d$7444 = $a$9;$p$addr$5445 = $p$addr$3;
     while(1) {
      $82 = HEAP32[$d$7444>>2]|0;
      $83 = (_fmt_u($82,0,$add$ptr756)|0);
      $cmp760 = ($83|0)==($add$ptr756|0);
      if ($cmp760) {
       HEAP8[$incdec$ptr763>>0] = 48;
       $s753$0 = $incdec$ptr763;
      } else {
       $s753$0 = $83;
      }
      $cmp765 = ($d$7444|0)==($a$9|0);
      do {
       if ($cmp765) {
        $incdec$ptr776 = ((($s753$0)) + 1|0);
        _out($f,$s753$0,1);
        $cmp777 = ($p$addr$5445|0)<(1);
        $or$cond411 = $tobool781 & $cmp777;
        if ($or$cond411) {
         $s753$2 = $incdec$ptr776;
         break;
        }
        _out($f,25656,1);
        $s753$2 = $incdec$ptr776;
       } else {
        $cmp770439 = ($s753$0>>>0)>($buf>>>0);
        if (!($cmp770439)) {
         $s753$2 = $s753$0;
         break;
        }
        $scevgep513 = (($s753$0) + ($81)|0);
        $scevgep513514 = $scevgep513;
        _memset(($buf|0),48,($scevgep513514|0))|0;
        $s753$1440 = $s753$0;
        while(1) {
         $incdec$ptr773 = ((($s753$1440)) + -1|0);
         $cmp770 = ($incdec$ptr773>>>0)>($buf>>>0);
         if ($cmp770) {
          $s753$1440 = $incdec$ptr773;
         } else {
          $s753$2 = $incdec$ptr773;
          break;
         }
        }
       }
      } while(0);
      $sub$ptr$rhs$cast788 = $s753$2;
      $sub$ptr$sub789 = (($sub$ptr$lhs$cast787) - ($sub$ptr$rhs$cast788))|0;
      $cmp790 = ($p$addr$5445|0)>($sub$ptr$sub789|0);
      $cond800 = $cmp790 ? $sub$ptr$sub789 : $p$addr$5445;
      _out($f,$s753$2,$cond800);
      $sub806 = (($p$addr$5445) - ($sub$ptr$sub789))|0;
      $incdec$ptr808 = ((($d$7444)) + 4|0);
      $cmp745 = ($incdec$ptr808>>>0)<($spec$select410>>>0);
      $cmp748 = ($sub806|0)>(-1);
      $84 = $cmp745 & $cmp748;
      if ($84) {
       $d$7444 = $incdec$ptr808;$p$addr$5445 = $sub806;
      } else {
       $p$addr$5$lcssa = $sub806;
       break;
      }
     }
    } else {
     $p$addr$5$lcssa = $p$addr$3;
    }
    $add810 = (($p$addr$5$lcssa) + 18)|0;
    _pad_659($f,48,$add810,18,0);
    $sub$ptr$lhs$cast811 = $arrayidx;
    $sub$ptr$rhs$cast812 = $estr$2;
    $sub$ptr$sub813 = (($sub$ptr$lhs$cast811) - ($sub$ptr$rhs$cast812))|0;
    _out($f,$estr$2,$sub$ptr$sub813);
   }
   $xor816 = $fl ^ 8192;
   _pad_659($f,32,$w,$add653,$xor816);
   $add653$sink524 = $add653;
  }
 } while(0);
 $cmp818 = ($add653$sink524|0)<($w|0);
 $w$add653 = $cmp818 ? $w : $add653$sink524;
 STACKTOP = sp;return ($w$add653|0);
}
function _pop_arg_long_double($arg,$ap) {
 $arg = $arg|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded1 = 0, $expanded3 = 0, $expanded4 = 0, $expanded5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arglist_current = HEAP32[$ap>>2]|0;
 $0 = $arglist_current;
 $1 = ((0) + 8|0);
 $expanded1 = $1;
 $expanded = (($expanded1) - 1)|0;
 $2 = (($0) + ($expanded))|0;
 $3 = ((0) + 8|0);
 $expanded5 = $3;
 $expanded4 = (($expanded5) - 1)|0;
 $expanded3 = $expanded4 ^ -1;
 $4 = $2 & $expanded3;
 $5 = $4;
 $6 = +HEAPF64[$5>>3];
 $arglist_next = ((($5)) + 8|0);
 HEAP32[$ap>>2] = $arglist_next;
 HEAPF64[$arg>>3] = $6;
 return;
}
function ___vfprintf_internal($f,$fmt,$ap,$fmt_fp,$pop_arg_long_double) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $fmt_fp = $fmt_fp|0;
 $pop_arg_long_double = $pop_arg_long_double|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $add$ptr = 0, $and = 0, $and11 = 0, $and36 = 0, $ap2 = 0, $buf = 0, $buf_size = 0, $call = 0, $call21 = 0, $call2133 = 0, $call6 = 0, $cmp = 0;
 var $cmp5 = 0, $cmp7 = 0, $cond = 0, $internal_buf = 0, $lock = 0, $mode = 0, $nl_arg = 0, $nl_type = 0, $or = 0, $ret$1 = 0, $retval$0 = 0, $spec$select = 0, $spec$select32 = 0, $tobool = 0, $tobool22 = 0, $tobool26 = 0, $tobool37 = 0, $tobool41 = 0, $vacopy_currentptr = 0, $wbase = 0;
 var $wend = 0, $wpos = 0, $write = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $ap2 = sp + 208|0;
 $nl_type = sp + 160|0;
 $nl_arg = sp + 80|0;
 $internal_buf = sp;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $call = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type,$fmt_fp,$pop_arg_long_double)|0);
 $cmp = ($call|0)<(0);
 if ($cmp) {
  $retval$0 = -1;
 } else {
  $lock = ((($f)) + 76|0);
  $0 = HEAP32[$lock>>2]|0;
  $cmp5 = ($0|0)>(-1);
  if ($cmp5) {
   $call6 = (___lockfile($f)|0);
   $cond = $call6;
  } else {
   $cond = 0;
  }
  $1 = HEAP32[$f>>2]|0;
  $and = $1 & 32;
  $mode = ((($f)) + 74|0);
  $2 = HEAP8[$mode>>0]|0;
  $cmp7 = ($2<<24>>24)<(1);
  if ($cmp7) {
   $and11 = $1 & -33;
   HEAP32[$f>>2] = $and11;
  }
  $buf_size = ((($f)) + 48|0);
  $3 = HEAP32[$buf_size>>2]|0;
  $tobool = ($3|0)==(0);
  if ($tobool) {
   $buf = ((($f)) + 44|0);
   $4 = HEAP32[$buf>>2]|0;
   HEAP32[$buf>>2] = $internal_buf;
   $wbase = ((($f)) + 28|0);
   HEAP32[$wbase>>2] = $internal_buf;
   $wpos = ((($f)) + 20|0);
   HEAP32[$wpos>>2] = $internal_buf;
   HEAP32[$buf_size>>2] = 80;
   $add$ptr = ((($internal_buf)) + 80|0);
   $wend = ((($f)) + 16|0);
   HEAP32[$wend>>2] = $add$ptr;
   $call21 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type,$fmt_fp,$pop_arg_long_double)|0);
   $tobool22 = ($4|0)==(0|0);
   if ($tobool22) {
    $ret$1 = $call21;
   } else {
    $write = ((($f)) + 36|0);
    $5 = HEAP32[$write>>2]|0;
    (FUNCTION_TABLE_iiii[$5 & 255]($f,0,0)|0);
    $6 = HEAP32[$wpos>>2]|0;
    $tobool26 = ($6|0)==(0|0);
    $spec$select = $tobool26 ? -1 : $call21;
    HEAP32[$buf>>2] = $4;
    HEAP32[$buf_size>>2] = 0;
    HEAP32[$wend>>2] = 0;
    HEAP32[$wbase>>2] = 0;
    HEAP32[$wpos>>2] = 0;
    $ret$1 = $spec$select;
   }
  } else {
   $call2133 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type,$fmt_fp,$pop_arg_long_double)|0);
   $ret$1 = $call2133;
  }
  $7 = HEAP32[$f>>2]|0;
  $and36 = $7 & 32;
  $tobool37 = ($and36|0)==(0);
  $spec$select32 = $tobool37 ? $ret$1 : -1;
  $or = $7 | $and;
  HEAP32[$f>>2] = $or;
  $tobool41 = ($cond|0)==(0);
  if (!($tobool41)) {
   ___unlockfile($f);
  }
  $retval$0 = $spec$select32;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type,$fmt_fp,$pop_arg_long_double) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 $fmt_fp = $fmt_fp|0;
 $pop_arg_long_double = $pop_arg_long_double|0;
 var $$ = 0, $$lcssa213 = 0, $$pre = 0, $$pre261 = 0, $$pre262 = 0, $$pre263 = 0, $$pre263$pre = 0, $$pre264 = 0, $$pre267 = 0, $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0;
 var $add = 0, $add$ptr = 0, $add$ptr139 = 0, $add$ptr150 = 0, $add$ptr206 = 0, $add$ptr258 = 0, $add$ptr341 = 0, $add$ptr354 = 0, $add$ptr468 = 0, $add$ptr88 = 0, $add270 = 0, $add323 = 0, $add390 = 0, $add407 = 0, $add436 = 0, $and = 0, $and211 = 0, $and215 = 0, $and217 = 0, $and220 = 0;
 var $and233 = 0, $and250 = 0, $and255 = 0, $and264 = 0, $and290 = 0, $and295 = 0, $and310 = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $argpos$0 = 0, $arrayidx114 = 0, $arrayidx119 = 0, $arrayidx124 = 0, $arrayidx129 = 0, $arrayidx132 = 0, $arrayidx16 = 0, $arrayidx174 = 0;
 var $arrayidx193 = 0, $arrayidx207 = 0, $arrayidx31 = 0, $arrayidx35 = 0, $arrayidx365 = 0, $arrayidx40 = 0, $arrayidx464 = 0, $arrayidx476 = 0, $arrayidx68 = 0, $arrayidx73 = 0, $arrayidx78 = 0, $arrayidx81 = 0, $brmerge = 0, $brmerge235 = 0, $buf = 0, $call = 0, $call104 = 0, $call121 = 0, $call160 = 0, $call33 = 0;
 var $call351 = 0, $call379 = 0, $call406 = 0, $call424 = 0, $call70 = 0, $cmp = 0, $cmp1 = 0, $cmp105 = 0, $cmp111 = 0, $cmp116 = 0, $cmp126 = 0, $cmp13 = 0, $cmp166 = 0, $cmp177 = 0, $cmp18 = 0, $cmp182 = 0, $cmp185 = 0, $cmp212 = 0, $cmp241 = 0, $cmp271 = 0;
 var $cmp307 = 0, $cmp324 = 0, $cmp37 = 0, $cmp372 = 0, $cmp372242 = 0, $cmp380 = 0, $cmp385 = 0, $cmp399 = 0, $cmp399247 = 0, $cmp408 = 0, $cmp416 = 0, $cmp429 = 0, $cmp437 = 0, $cmp461 = 0, $cmp473 = 0, $cmp50 = 0, $cmp50231 = 0, $cmp65 = 0, $cmp75 = 0, $cmp97 = 0;
 var $cnt$0 = 0, $cnt$0$ph = 0, $cnt$1 = 0, $cond = 0, $cond149 = 0, $cond246 = 0, $cond350 = 0, $cond421 = 0, $conv120 = 0, $conv130 = 0, $conv134 = 0, $conv164 = 0, $conv172 = 0, $conv175 = 0, $conv208 = 0, $conv230 = 0, $conv233 = 0, $conv32 = 0, $conv41 = 0, $conv48 = 0;
 var $conv48229 = 0, $conv69 = 0, $conv79 = 0, $conv83 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $fl$0$lcssa = 0, $fl$0237 = 0, $fl$1 = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0;
 var $i$0217 = 0, $i$0217271 = 0, $i$0243 = 0, $i$1248 = 0, $i$2224 = 0, $i$3221 = 0, $i137 = 0, $i86 = 0, $inc = 0, $inc483 = 0, $incdec$ptr = 0, $incdec$ptr171 = 0, $incdec$ptr23 = 0, $incdec$ptr378 = 0, $incdec$ptr405 = 0, $incdec$ptr45 = 0, $incdec$ptr62 = 0, $incdec$ptr93 = 0, $l$0 = 0, $l$0$ph = 0;
 var $l$0$ph$be = 0, $l10n$0$ph = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $lnot = 0, $lnot$ext = 0, $mb = 0, $or = 0, $or$cond = 0, $or$cond189 = 0, $or$cond190 = 0, $or$cond194 = 0, $or100 = 0, $or247 = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$add323 = 0, $p$3 = 0;
 var $p$4269 = 0, $p$5 = 0, $pl$0 = 0, $pl$1 = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$1 = 0, $prefix$2 = 0, $retval$0 = 0, $s = 0, $shl = 0, $shl232 = 0, $shl60 = 0, $shr199 = 0, $spec$select = 0, $spec$select193 = 0, $spec$select195 = 0, $spec$select200 = 0, $spec$select201 = 0, $spec$select202 = 0;
 var $spec$select203 = 0, $spec$select204 = 0, $spec$select205 = 0, $spec$select206 = 0, $spec$select207 = 0, $spec$select208 = 0, $st$0 = 0, $storemerge187$lcssa = 0, $storemerge187236 = 0, $storemerge188 = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast318 = 0, $sub$ptr$lhs$cast356 = 0, $sub$ptr$lhs$cast426$pre$phiZZZZ2D = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$rhs$cast268 = 0, $sub$ptr$rhs$cast319 = 0, $sub$ptr$rhs$cast357 = 0, $sub$ptr$rhs$cast427 = 0;
 var $sub$ptr$sub = 0, $sub$ptr$sub269 = 0, $sub$ptr$sub320 = 0, $sub$ptr$sub358 = 0, $sub$ptr$sub428 = 0, $sub101 = 0, $sub131 = 0, $sub135 = 0, $sub165 = 0, $sub173 = 0, $sub176 = 0, $sub384 = 0, $sub42 = 0, $sub49 = 0, $sub49230 = 0, $sub49238 = 0, $sub80 = 0, $sub84 = 0, $t$0 = 0, $t$1 = 0;
 var $tobool = 0, $tobool122 = 0, $tobool141 = 0, $tobool179 = 0, $tobool209 = 0, $tobool218 = 0, $tobool25 = 0, $tobool256 = 0, $tobool265 = 0, $tobool28 = 0, $tobool291 = 0, $tobool296 = 0, $tobool315 = 0, $tobool34 = 0, $tobool345 = 0, $tobool352 = 0, $tobool375 = 0, $tobool402 = 0, $tobool454 = 0, $tobool457 = 0;
 var $tobool465 = 0, $tobool477 = 0, $tobool55 = 0, $tobool55234 = 0, $tobool71 = 0, $tobool90 = 0, $trunc = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $wc = 0, $ws$0244 = 0, $ws$1249 = 0, $xor = 0, $xor444 = 0, $xor452 = 0, $z$0$lcssa = 0, $z$0226 = 0, $z$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $s = sp + 56|0;
 $arg = sp + 40|0;
 $buf = sp;
 $wc = sp + 48|0;
 $mb = sp + 60|0;
 HEAP32[$s>>2] = $fmt;
 $tobool25 = ($f|0)!=(0|0);
 $add$ptr206 = ((($buf)) + 40|0);
 $sub$ptr$lhs$cast318 = $add$ptr206;
 $add$ptr341 = ((($buf)) + 39|0);
 $arrayidx365 = ((($wc)) + 4|0);
 $cnt$0$ph = 0;$l$0$ph = 0;$l10n$0$ph = 0;
 L1: while(1) {
  $cnt$0 = $cnt$0$ph;$l$0 = $l$0$ph;
  while(1) {
   $cmp = ($cnt$0|0)>(-1);
   do {
    if ($cmp) {
     $sub = (2147483647 - ($cnt$0))|0;
     $cmp1 = ($l$0|0)>($sub|0);
     if ($cmp1) {
      $call = (___errno_location()|0);
      HEAP32[$call>>2] = 61;
      $cnt$1 = -1;
      break;
     } else {
      $add = (($l$0) + ($cnt$0))|0;
      $cnt$1 = $add;
      break;
     }
    } else {
     $cnt$1 = $cnt$0;
    }
   } while(0);
   $0 = HEAP32[$s>>2]|0;
   $1 = HEAP8[$0>>0]|0;
   $tobool = ($1<<24>>24)==(0);
   if ($tobool) {
    label = 92;
    break L1;
   }
   $2 = $1;$3 = $0;
   L12: while(1) {
    switch ($2<<24>>24) {
    case 37:  {
     label = 10;
     break L12;
     break;
    }
    case 0:  {
     $z$0$lcssa = $3;
     break L12;
     break;
    }
    default: {
    }
    }
    $incdec$ptr = ((($3)) + 1|0);
    HEAP32[$s>>2] = $incdec$ptr;
    $$pre = HEAP8[$incdec$ptr>>0]|0;
    $2 = $$pre;$3 = $incdec$ptr;
   }
   L15: do {
    if ((label|0) == 10) {
     label = 0;
     $4 = $3;$z$0226 = $3;
     while(1) {
      $arrayidx16 = ((($4)) + 1|0);
      $5 = HEAP8[$arrayidx16>>0]|0;
      $cmp18 = ($5<<24>>24)==(37);
      if (!($cmp18)) {
       $z$0$lcssa = $z$0226;
       break L15;
      }
      $incdec$ptr23 = ((($z$0226)) + 1|0);
      $add$ptr = ((($4)) + 2|0);
      HEAP32[$s>>2] = $add$ptr;
      $6 = HEAP8[$add$ptr>>0]|0;
      $cmp13 = ($6<<24>>24)==(37);
      if ($cmp13) {
       $4 = $add$ptr;$z$0226 = $incdec$ptr23;
      } else {
       $z$0$lcssa = $incdec$ptr23;
       break;
      }
     }
    }
   } while(0);
   $sub$ptr$lhs$cast = $z$0$lcssa;
   $sub$ptr$rhs$cast = $0;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
   if ($tobool25) {
    _out($f,$0,$sub$ptr$sub);
   }
   $tobool28 = ($sub$ptr$sub|0)==(0);
   if ($tobool28) {
    break;
   } else {
    $cnt$0 = $cnt$1;$l$0 = $sub$ptr$sub;
   }
  }
  $7 = HEAP32[$s>>2]|0;
  $arrayidx31 = ((($7)) + 1|0);
  $8 = HEAP8[$arrayidx31>>0]|0;
  $conv32 = $8 << 24 >> 24;
  $call33 = (_isdigit($conv32)|0);
  $tobool34 = ($call33|0)==(0);
  $$pre261 = HEAP32[$s>>2]|0;
  if ($tobool34) {
   $$sink = 1;$argpos$0 = -1;$l10n$1 = $l10n$0$ph;
  } else {
   $arrayidx35 = ((($$pre261)) + 2|0);
   $9 = HEAP8[$arrayidx35>>0]|0;
   $cmp37 = ($9<<24>>24)==(36);
   if ($cmp37) {
    $arrayidx40 = ((($$pre261)) + 1|0);
    $10 = HEAP8[$arrayidx40>>0]|0;
    $conv41 = $10 << 24 >> 24;
    $sub42 = (($conv41) + -48)|0;
    $$sink = 3;$argpos$0 = $sub42;$l10n$1 = 1;
   } else {
    $$sink = 1;$argpos$0 = -1;$l10n$1 = $l10n$0$ph;
   }
  }
  $incdec$ptr45 = (($$pre261) + ($$sink)|0);
  HEAP32[$s>>2] = $incdec$ptr45;
  $11 = HEAP8[$incdec$ptr45>>0]|0;
  $conv48229 = $11 << 24 >> 24;
  $sub49230 = (($conv48229) + -32)|0;
  $cmp50231 = ($sub49230>>>0)>(31);
  $shl232 = 1 << $sub49230;
  $and233 = $shl232 & 75913;
  $tobool55234 = ($and233|0)==(0);
  $brmerge235 = $cmp50231 | $tobool55234;
  if ($brmerge235) {
   $$lcssa213 = $11;$fl$0$lcssa = 0;$storemerge187$lcssa = $incdec$ptr45;
  } else {
   $fl$0237 = 0;$storemerge187236 = $incdec$ptr45;$sub49238 = $sub49230;
   while(1) {
    $shl60 = 1 << $sub49238;
    $or = $shl60 | $fl$0237;
    $incdec$ptr62 = ((($storemerge187236)) + 1|0);
    HEAP32[$s>>2] = $incdec$ptr62;
    $12 = HEAP8[$incdec$ptr62>>0]|0;
    $conv48 = $12 << 24 >> 24;
    $sub49 = (($conv48) + -32)|0;
    $cmp50 = ($sub49>>>0)>(31);
    $shl = 1 << $sub49;
    $and = $shl & 75913;
    $tobool55 = ($and|0)==(0);
    $brmerge = $cmp50 | $tobool55;
    if ($brmerge) {
     $$lcssa213 = $12;$fl$0$lcssa = $or;$storemerge187$lcssa = $incdec$ptr62;
     break;
    } else {
     $fl$0237 = $or;$storemerge187236 = $incdec$ptr62;$sub49238 = $sub49;
    }
   }
  }
  $cmp65 = ($$lcssa213<<24>>24)==(42);
  if ($cmp65) {
   $arrayidx68 = ((($storemerge187$lcssa)) + 1|0);
   $13 = HEAP8[$arrayidx68>>0]|0;
   $conv69 = $13 << 24 >> 24;
   $call70 = (_isdigit($conv69)|0);
   $tobool71 = ($call70|0)==(0);
   if ($tobool71) {
    label = 27;
   } else {
    $14 = HEAP32[$s>>2]|0;
    $arrayidx73 = ((($14)) + 2|0);
    $15 = HEAP8[$arrayidx73>>0]|0;
    $cmp75 = ($15<<24>>24)==(36);
    if ($cmp75) {
     $arrayidx78 = ((($14)) + 1|0);
     $16 = HEAP8[$arrayidx78>>0]|0;
     $conv79 = $16 << 24 >> 24;
     $sub80 = (($conv79) + -48)|0;
     $arrayidx81 = (($nl_type) + ($sub80<<2)|0);
     HEAP32[$arrayidx81>>2] = 10;
     $17 = HEAP8[$arrayidx78>>0]|0;
     $conv83 = $17 << 24 >> 24;
     $sub84 = (($conv83) + -48)|0;
     $i86 = (($nl_arg) + ($sub84<<3)|0);
     $18 = $i86;
     $19 = $18;
     $20 = HEAP32[$19>>2]|0;
     $21 = (($18) + 4)|0;
     $22 = $21;
     $23 = HEAP32[$22>>2]|0;
     $add$ptr88 = ((($14)) + 3|0);
     $l10n$2 = 1;$storemerge188 = $add$ptr88;$w$0 = $20;
    } else {
     label = 27;
    }
   }
   if ((label|0) == 27) {
    label = 0;
    $tobool90 = ($l10n$1|0)==(0);
    if (!($tobool90)) {
     $retval$0 = -1;
     break;
    }
    if ($tobool25) {
     $arglist_current = HEAP32[$ap>>2]|0;
     $24 = $arglist_current;
     $25 = ((0) + 4|0);
     $expanded4 = $25;
     $expanded = (($expanded4) - 1)|0;
     $26 = (($24) + ($expanded))|0;
     $27 = ((0) + 4|0);
     $expanded8 = $27;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $28 = $26 & $expanded6;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next = ((($29)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $cond = $30;
    } else {
     $cond = 0;
    }
    $31 = HEAP32[$s>>2]|0;
    $incdec$ptr93 = ((($31)) + 1|0);
    $l10n$2 = 0;$storemerge188 = $incdec$ptr93;$w$0 = $cond;
   }
   HEAP32[$s>>2] = $storemerge188;
   $cmp97 = ($w$0|0)<(0);
   $or100 = $fl$0$lcssa | 8192;
   $sub101 = (0 - ($w$0))|0;
   $spec$select200 = $cmp97 ? $or100 : $fl$0$lcssa;
   $spec$select201 = $cmp97 ? $sub101 : $w$0;
   $33 = $storemerge188;$fl$1 = $spec$select200;$l10n$3 = $l10n$2;$w$1 = $spec$select201;
  } else {
   $call104 = (_getint($s)|0);
   $cmp105 = ($call104|0)<(0);
   if ($cmp105) {
    $retval$0 = -1;
    break;
   }
   $$pre262 = HEAP32[$s>>2]|0;
   $33 = $$pre262;$fl$1 = $fl$0$lcssa;$l10n$3 = $l10n$1;$w$1 = $call104;
  }
  $32 = HEAP8[$33>>0]|0;
  $cmp111 = ($32<<24>>24)==(46);
  do {
   if ($cmp111) {
    $arrayidx114 = ((($33)) + 1|0);
    $34 = HEAP8[$arrayidx114>>0]|0;
    $cmp116 = ($34<<24>>24)==(42);
    if (!($cmp116)) {
     HEAP32[$s>>2] = $arrayidx114;
     $call160 = (_getint($s)|0);
     $$pre263$pre = HEAP32[$s>>2]|0;
     $$pre263 = $$pre263$pre;$p$0 = $call160;
     break;
    }
    $arrayidx119 = ((($33)) + 2|0);
    $35 = HEAP8[$arrayidx119>>0]|0;
    $conv120 = $35 << 24 >> 24;
    $call121 = (_isdigit($conv120)|0);
    $tobool122 = ($call121|0)==(0);
    if (!($tobool122)) {
     $36 = HEAP32[$s>>2]|0;
     $arrayidx124 = ((($36)) + 3|0);
     $37 = HEAP8[$arrayidx124>>0]|0;
     $cmp126 = ($37<<24>>24)==(36);
     if ($cmp126) {
      $arrayidx129 = ((($36)) + 2|0);
      $38 = HEAP8[$arrayidx129>>0]|0;
      $conv130 = $38 << 24 >> 24;
      $sub131 = (($conv130) + -48)|0;
      $arrayidx132 = (($nl_type) + ($sub131<<2)|0);
      HEAP32[$arrayidx132>>2] = 10;
      $39 = HEAP8[$arrayidx129>>0]|0;
      $conv134 = $39 << 24 >> 24;
      $sub135 = (($conv134) + -48)|0;
      $i137 = (($nl_arg) + ($sub135<<3)|0);
      $40 = $i137;
      $41 = $40;
      $42 = HEAP32[$41>>2]|0;
      $43 = (($40) + 4)|0;
      $44 = $43;
      $45 = HEAP32[$44>>2]|0;
      $add$ptr139 = ((($36)) + 4|0);
      HEAP32[$s>>2] = $add$ptr139;
      $$pre263 = $add$ptr139;$p$0 = $42;
      break;
     }
    }
    $tobool141 = ($l10n$3|0)==(0);
    if (!($tobool141)) {
     $retval$0 = -1;
     break L1;
    }
    if ($tobool25) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $46 = $arglist_current2;
     $47 = ((0) + 4|0);
     $expanded11 = $47;
     $expanded10 = (($expanded11) - 1)|0;
     $48 = (($46) + ($expanded10))|0;
     $49 = ((0) + 4|0);
     $expanded15 = $49;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $50 = $48 & $expanded13;
     $51 = $50;
     $52 = HEAP32[$51>>2]|0;
     $arglist_next3 = ((($51)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $cond149 = $52;
    } else {
     $cond149 = 0;
    }
    $53 = HEAP32[$s>>2]|0;
    $add$ptr150 = ((($53)) + 2|0);
    HEAP32[$s>>2] = $add$ptr150;
    $$pre263 = $add$ptr150;$p$0 = $cond149;
   } else {
    $$pre263 = $33;$p$0 = -1;
   }
  } while(0);
  $55 = $$pre263;$st$0 = 0;
  while(1) {
   $54 = HEAP8[$55>>0]|0;
   $conv164 = $54 << 24 >> 24;
   $sub165 = (($conv164) + -65)|0;
   $cmp166 = ($sub165>>>0)>(57);
   if ($cmp166) {
    $retval$0 = -1;
    break L1;
   }
   $incdec$ptr171 = ((($55)) + 1|0);
   HEAP32[$s>>2] = $incdec$ptr171;
   $56 = HEAP8[$55>>0]|0;
   $conv172 = $56 << 24 >> 24;
   $sub173 = (($conv172) + -65)|0;
   $arrayidx174 = ((1216 + (($st$0*58)|0)|0) + ($sub173)|0);
   $57 = HEAP8[$arrayidx174>>0]|0;
   $conv175 = $57&255;
   $sub176 = (($conv175) + -1)|0;
   $cmp177 = ($sub176>>>0)<(8);
   if ($cmp177) {
    $55 = $incdec$ptr171;$st$0 = $conv175;
   } else {
    break;
   }
  }
  $tobool179 = ($57<<24>>24)==(0);
  if ($tobool179) {
   $retval$0 = -1;
   break;
  }
  $cmp182 = ($57<<24>>24)==(19);
  $cmp185 = ($argpos$0|0)>(-1);
  do {
   if ($cmp182) {
    if ($cmp185) {
     $retval$0 = -1;
     break L1;
    } else {
     label = 54;
    }
   } else {
    if ($cmp185) {
     $arrayidx193 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$arrayidx193>>2] = $conv175;
     $58 = (($nl_arg) + ($argpos$0<<3)|0);
     $59 = $58;
     $60 = $59;
     $61 = HEAP32[$60>>2]|0;
     $62 = (($59) + 4)|0;
     $63 = $62;
     $64 = HEAP32[$63>>2]|0;
     $65 = $arg;
     $66 = $65;
     HEAP32[$66>>2] = $61;
     $67 = (($65) + 4)|0;
     $68 = $67;
     HEAP32[$68>>2] = $64;
     label = 54;
     break;
    }
    if (!($tobool25)) {
     $retval$0 = 0;
     break L1;
    }
    _pop_arg($arg,$conv175,$ap,$pop_arg_long_double);
    $$pre264 = HEAP32[$s>>2]|0;
    $69 = $$pre264;
    label = 55;
   }
  } while(0);
  if ((label|0) == 54) {
   label = 0;
   if ($tobool25) {
    $69 = $incdec$ptr171;
    label = 55;
   } else {
    $l$0$ph$be = 0;
   }
  }
  L77: do {
   if ((label|0) == 55) {
    label = 0;
    $arrayidx207 = ((($69)) + -1|0);
    $70 = HEAP8[$arrayidx207>>0]|0;
    $conv208 = $70 << 24 >> 24;
    $tobool209 = ($st$0|0)!=(0);
    $and211 = $conv208 & 15;
    $cmp212 = ($and211|0)==(3);
    $or$cond189 = $tobool209 & $cmp212;
    $and215 = $conv208 & -33;
    $t$0 = $or$cond189 ? $and215 : $conv208;
    $and217 = $fl$1 & 8192;
    $tobool218 = ($and217|0)==(0);
    $and220 = $fl$1 & -65537;
    $spec$select = $tobool218 ? $fl$1 : $and220;
    L79: do {
     switch ($t$0|0) {
     case 110:  {
      $trunc = $st$0&255;
      switch ($trunc<<24>>24) {
      case 0:  {
       $77 = HEAP32[$arg>>2]|0;
       HEAP32[$77>>2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 1:  {
       $78 = HEAP32[$arg>>2]|0;
       HEAP32[$78>>2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 2:  {
       $79 = ($cnt$1|0)<(0);
       $80 = $79 << 31 >> 31;
       $81 = HEAP32[$arg>>2]|0;
       $82 = $81;
       $83 = $82;
       HEAP32[$83>>2] = $cnt$1;
       $84 = (($82) + 4)|0;
       $85 = $84;
       HEAP32[$85>>2] = $80;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 3:  {
       $conv230 = $cnt$1&65535;
       $86 = HEAP32[$arg>>2]|0;
       HEAP16[$86>>1] = $conv230;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 4:  {
       $conv233 = $cnt$1&255;
       $87 = HEAP32[$arg>>2]|0;
       HEAP8[$87>>0] = $conv233;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 6:  {
       $88 = HEAP32[$arg>>2]|0;
       HEAP32[$88>>2] = $cnt$1;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      case 7:  {
       $89 = ($cnt$1|0)<(0);
       $90 = $89 << 31 >> 31;
       $91 = HEAP32[$arg>>2]|0;
       $92 = $91;
       $93 = $92;
       HEAP32[$93>>2] = $cnt$1;
       $94 = (($92) + 4)|0;
       $95 = $94;
       HEAP32[$95>>2] = $90;
       $l$0$ph$be = 0;
       break L77;
       break;
      }
      default: {
       $l$0$ph$be = 0;
       break L77;
      }
      }
      break;
     }
     case 112:  {
      $cmp241 = ($p$0>>>0)>(8);
      $cond246 = $cmp241 ? $p$0 : 8;
      $or247 = $spec$select | 8;
      $fl$3 = $or247;$p$1 = $cond246;$t$1 = 120;
      label = 67;
      break;
     }
     case 88: case 120:  {
      $fl$3 = $spec$select;$p$1 = $p$0;$t$1 = $t$0;
      label = 67;
      break;
     }
     case 111:  {
      $112 = $arg;
      $113 = $112;
      $114 = HEAP32[$113>>2]|0;
      $115 = (($112) + 4)|0;
      $116 = $115;
      $117 = HEAP32[$116>>2]|0;
      $118 = (_fmt_o($114,$117,$add$ptr206)|0);
      $and264 = $spec$select & 8;
      $tobool265 = ($and264|0)==(0);
      $sub$ptr$rhs$cast268 = $118;
      $sub$ptr$sub269 = (($sub$ptr$lhs$cast318) - ($sub$ptr$rhs$cast268))|0;
      $cmp271 = ($p$0|0)>($sub$ptr$sub269|0);
      $add270 = (($sub$ptr$sub269) + 1)|0;
      $119 = $tobool265 | $cmp271;
      $spec$select204 = $119 ? $p$0 : $add270;
      $a$0 = $118;$fl$4 = $spec$select;$p$2 = $spec$select204;$pl$1 = 0;$prefix$1 = 22875;
      label = 73;
      break;
     }
     case 105: case 100:  {
      $120 = $arg;
      $121 = $120;
      $122 = HEAP32[$121>>2]|0;
      $123 = (($120) + 4)|0;
      $124 = $123;
      $125 = HEAP32[$124>>2]|0;
      $126 = ($125|0)<(0);
      if ($126) {
       $127 = (_i64Subtract(0,0,($122|0),($125|0))|0);
       $128 = (getTempRet0() | 0);
       $129 = $arg;
       $130 = $129;
       HEAP32[$130>>2] = $127;
       $131 = (($129) + 4)|0;
       $132 = $131;
       HEAP32[$132>>2] = $128;
       $135 = $127;$136 = $128;$pl$0 = 1;$prefix$0 = 22875;
       label = 72;
       break L79;
      } else {
       $and290 = $spec$select & 2048;
       $tobool291 = ($and290|0)==(0);
       $and295 = $spec$select & 1;
       $tobool296 = ($and295|0)==(0);
       $$ = $tobool296 ? 22875 : (22877);
       $spec$select205 = $tobool291 ? $$ : (22876);
       $133 = $spec$select & 2049;
       $134 = ($133|0)!=(0);
       $spec$select206 = $134&1;
       $135 = $122;$136 = $125;$pl$0 = $spec$select206;$prefix$0 = $spec$select205;
       label = 72;
       break L79;
      }
      break;
     }
     case 117:  {
      $71 = $arg;
      $72 = $71;
      $73 = HEAP32[$72>>2]|0;
      $74 = (($71) + 4)|0;
      $75 = $74;
      $76 = HEAP32[$75>>2]|0;
      $135 = $73;$136 = $76;$pl$0 = 0;$prefix$0 = 22875;
      label = 72;
      break;
     }
     case 99:  {
      $147 = $arg;
      $148 = $147;
      $149 = HEAP32[$148>>2]|0;
      $150 = (($147) + 4)|0;
      $151 = $150;
      $152 = HEAP32[$151>>2]|0;
      $153 = $149&255;
      HEAP8[$add$ptr341>>0] = $153;
      $a$1 = $add$ptr341;$fl$6 = $and220;$p$5 = 1;$pl$2 = 0;$prefix$2 = 22875;$sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
      break;
     }
     case 115:  {
      $154 = HEAP32[$arg>>2]|0;
      $tobool345 = ($154|0)==(0|0);
      $cond350 = $tobool345 ? 22885 : $154;
      $call351 = (_memchr($cond350,0,$p$0)|0);
      $tobool352 = ($call351|0)==(0|0);
      $sub$ptr$lhs$cast356 = $call351;
      $sub$ptr$rhs$cast357 = $cond350;
      $sub$ptr$sub358 = (($sub$ptr$lhs$cast356) - ($sub$ptr$rhs$cast357))|0;
      $add$ptr354 = (($cond350) + ($p$0)|0);
      $p$3 = $tobool352 ? $p$0 : $sub$ptr$sub358;
      $z$1 = $tobool352 ? $add$ptr354 : $call351;
      $$pre267 = $z$1;
      $a$1 = $cond350;$fl$6 = $and220;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 22875;$sub$ptr$lhs$cast426$pre$phiZZZZ2D = $$pre267;
      break;
     }
     case 67:  {
      $155 = $arg;
      $156 = $155;
      $157 = HEAP32[$156>>2]|0;
      $158 = (($155) + 4)|0;
      $159 = $158;
      $160 = HEAP32[$159>>2]|0;
      HEAP32[$wc>>2] = $157;
      HEAP32[$arrayidx365>>2] = 0;
      HEAP32[$arg>>2] = $wc;
      $p$4269 = -1;
      label = 79;
      break;
     }
     case 83:  {
      $cmp372242 = ($p$0|0)==(0);
      if ($cmp372242) {
       _pad_659($f,32,$w$1,0,$spec$select);
       $i$0217271 = 0;
       label = 89;
      } else {
       $p$4269 = $p$0;
       label = 79;
      }
      break;
     }
     case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
      $165 = +HEAPF64[$arg>>3];
      $call424 = (FUNCTION_TABLE_iidiiii[$fmt_fp & 255]($f,$165,$w$1,$p$0,$spec$select,$t$0)|0);
      $l$0$ph$be = $call424;
      break L77;
      break;
     }
     default: {
      $a$1 = $0;$fl$6 = $spec$select;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 22875;$sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
     }
     }
    } while(0);
    L102: do {
     if ((label|0) == 67) {
      label = 0;
      $96 = $arg;
      $97 = $96;
      $98 = HEAP32[$97>>2]|0;
      $99 = (($96) + 4)|0;
      $100 = $99;
      $101 = HEAP32[$100>>2]|0;
      $and250 = $t$1 & 32;
      $102 = (_fmt_x($98,$101,$add$ptr206,$and250)|0);
      $103 = $arg;
      $104 = $103;
      $105 = HEAP32[$104>>2]|0;
      $106 = (($103) + 4)|0;
      $107 = $106;
      $108 = HEAP32[$107>>2]|0;
      $109 = ($105|0)==(0);
      $110 = ($108|0)==(0);
      $111 = $109 & $110;
      $and255 = $fl$3 & 8;
      $tobool256 = ($and255|0)==(0);
      $or$cond190 = $tobool256 | $111;
      $shr199 = $t$1 >>> 4;
      $add$ptr258 = (22875 + ($shr199)|0);
      $spec$select202 = $or$cond190 ? 22875 : $add$ptr258;
      $spec$select203 = $or$cond190 ? 0 : 2;
      $a$0 = $102;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = $spec$select203;$prefix$1 = $spec$select202;
      label = 73;
     }
     else if ((label|0) == 72) {
      label = 0;
      $137 = (_fmt_u($135,$136,$add$ptr206)|0);
      $a$0 = $137;$fl$4 = $spec$select;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
      label = 73;
     }
     else if ((label|0) == 79) {
      label = 0;
      $161 = HEAP32[$arg>>2]|0;
      $i$0243 = 0;$ws$0244 = $161;
      while(1) {
       $162 = HEAP32[$ws$0244>>2]|0;
       $tobool375 = ($162|0)==(0);
       if ($tobool375) {
        $i$0217 = $i$0243;
        break;
       }
       $call379 = (_wctomb($mb,$162)|0);
       $cmp380 = ($call379|0)<(0);
       $sub384 = (($p$4269) - ($i$0243))|0;
       $cmp385 = ($call379>>>0)>($sub384>>>0);
       $or$cond194 = $cmp380 | $cmp385;
       if ($or$cond194) {
        label = 83;
        break;
       }
       $incdec$ptr378 = ((($ws$0244)) + 4|0);
       $add390 = (($call379) + ($i$0243))|0;
       $cmp372 = ($p$4269>>>0)>($add390>>>0);
       if ($cmp372) {
        $i$0243 = $add390;$ws$0244 = $incdec$ptr378;
       } else {
        $i$0217 = $add390;
        break;
       }
      }
      if ((label|0) == 83) {
       label = 0;
       if ($cmp380) {
        $retval$0 = -1;
        break L1;
       } else {
        $i$0217 = $i$0243;
       }
      }
      _pad_659($f,32,$w$1,$i$0217,$spec$select);
      $cmp399247 = ($i$0217|0)==(0);
      if ($cmp399247) {
       $i$0217271 = 0;
       label = 89;
      } else {
       $163 = HEAP32[$arg>>2]|0;
       $i$1248 = 0;$ws$1249 = $163;
       while(1) {
        $164 = HEAP32[$ws$1249>>2]|0;
        $tobool402 = ($164|0)==(0);
        if ($tobool402) {
         $i$0217271 = $i$0217;
         label = 89;
         break L102;
        }
        $call406 = (_wctomb($mb,$164)|0);
        $add407 = (($call406) + ($i$1248))|0;
        $cmp408 = ($add407|0)>($i$0217|0);
        if ($cmp408) {
         $i$0217271 = $i$0217;
         label = 89;
         break L102;
        }
        $incdec$ptr405 = ((($ws$1249)) + 4|0);
        _out($f,$mb,$call406);
        $cmp399 = ($add407>>>0)<($i$0217>>>0);
        if ($cmp399) {
         $i$1248 = $add407;$ws$1249 = $incdec$ptr405;
        } else {
         $i$0217271 = $i$0217;
         label = 89;
         break;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 73) {
     label = 0;
     $cmp307 = ($p$2|0)>(-1);
     $and310 = $fl$4 & -65537;
     $spec$select193 = $cmp307 ? $and310 : $fl$4;
     $138 = $arg;
     $139 = $138;
     $140 = HEAP32[$139>>2]|0;
     $141 = (($138) + 4)|0;
     $142 = $141;
     $143 = HEAP32[$142>>2]|0;
     $144 = ($140|0)!=(0);
     $145 = ($143|0)!=(0);
     $146 = $144 | $145;
     $tobool315 = ($p$2|0)!=(0);
     $or$cond = $tobool315 | $146;
     $sub$ptr$rhs$cast319 = $a$0;
     $sub$ptr$sub320 = (($sub$ptr$lhs$cast318) - ($sub$ptr$rhs$cast319))|0;
     $lnot = $146 ^ 1;
     $lnot$ext = $lnot&1;
     $add323 = (($sub$ptr$sub320) + ($lnot$ext))|0;
     $cmp324 = ($p$2|0)>($add323|0);
     $p$2$add323 = $cmp324 ? $p$2 : $add323;
     $spec$select207 = $or$cond ? $p$2$add323 : 0;
     $spec$select208 = $or$cond ? $a$0 : $add$ptr206;
     $a$1 = $spec$select208;$fl$6 = $spec$select193;$p$5 = $spec$select207;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$sub$ptr$lhs$cast426$pre$phiZZZZ2D = $sub$ptr$lhs$cast318;
    }
    else if ((label|0) == 89) {
     label = 0;
     $xor = $spec$select ^ 8192;
     _pad_659($f,32,$w$1,$i$0217271,$xor);
     $cmp416 = ($w$1|0)>($i$0217271|0);
     $cond421 = $cmp416 ? $w$1 : $i$0217271;
     $l$0$ph$be = $cond421;
     break;
    }
    $sub$ptr$rhs$cast427 = $a$1;
    $sub$ptr$sub428 = (($sub$ptr$lhs$cast426$pre$phiZZZZ2D) - ($sub$ptr$rhs$cast427))|0;
    $cmp429 = ($p$5|0)<($sub$ptr$sub428|0);
    $spec$select195 = $cmp429 ? $sub$ptr$sub428 : $p$5;
    $add436 = (($spec$select195) + ($pl$2))|0;
    $cmp437 = ($w$1|0)<($add436|0);
    $w$2 = $cmp437 ? $add436 : $w$1;
    _pad_659($f,32,$w$2,$add436,$fl$6);
    _out($f,$prefix$2,$pl$2);
    $xor444 = $fl$6 ^ 65536;
    _pad_659($f,48,$w$2,$add436,$xor444);
    _pad_659($f,48,$spec$select195,$sub$ptr$sub428,0);
    _out($f,$a$1,$sub$ptr$sub428);
    $xor452 = $fl$6 ^ 8192;
    _pad_659($f,32,$w$2,$add436,$xor452);
    $l$0$ph$be = $w$2;
   }
  } while(0);
  $cnt$0$ph = $cnt$1;$l$0$ph = $l$0$ph$be;$l10n$0$ph = $l10n$3;
 }
 L123: do {
  if ((label|0) == 92) {
   $tobool454 = ($f|0)==(0|0);
   if ($tobool454) {
    $tobool457 = ($l10n$0$ph|0)==(0);
    if ($tobool457) {
     $retval$0 = 0;
    } else {
     $i$2224 = 1;
     while(1) {
      $arrayidx464 = (($nl_type) + ($i$2224<<2)|0);
      $166 = HEAP32[$arrayidx464>>2]|0;
      $tobool465 = ($166|0)==(0);
      if ($tobool465) {
       break;
      }
      $add$ptr468 = (($nl_arg) + ($i$2224<<3)|0);
      _pop_arg($add$ptr468,$166,$ap,$pop_arg_long_double);
      $inc = (($i$2224) + 1)|0;
      $cmp461 = ($inc>>>0)<(10);
      if ($cmp461) {
       $i$2224 = $inc;
      } else {
       $retval$0 = 1;
       break L123;
      }
     }
     $i$3221 = $i$2224;
     while(1) {
      $arrayidx476 = (($nl_type) + ($i$3221<<2)|0);
      $167 = HEAP32[$arrayidx476>>2]|0;
      $tobool477 = ($167|0)==(0);
      $inc483 = (($i$3221) + 1)|0;
      if (!($tobool477)) {
       $retval$0 = -1;
       break L123;
      }
      $cmp473 = ($inc483>>>0)<(10);
      if ($cmp473) {
       $i$3221 = $inc483;
      } else {
       $retval$0 = 1;
       break;
      }
     }
    }
   } else {
    $retval$0 = $cnt$1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($retval$0|0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $and = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$f>>2]|0;
 $and = $0 & 32;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  (___fwritex($s,$l,$f)|0);
 }
 return;
}
function _getint($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add = 0, $call = 0, $call5 = 0, $conv = 0, $conv1 = 0, $conv4 = 0, $i$0$lcssa = 0, $i$07 = 0, $incdec$ptr = 0, $mul = 0, $sub = 0, $tobool = 0, $tobool6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$s>>2]|0;
 $1 = HEAP8[$0>>0]|0;
 $conv4 = $1 << 24 >> 24;
 $call5 = (_isdigit($conv4)|0);
 $tobool6 = ($call5|0)==(0);
 if ($tobool6) {
  $i$0$lcssa = 0;
 } else {
  $i$07 = 0;
  while(1) {
   $mul = ($i$07*10)|0;
   $2 = HEAP32[$s>>2]|0;
   $3 = HEAP8[$2>>0]|0;
   $conv1 = $3 << 24 >> 24;
   $sub = (($mul) + -48)|0;
   $add = (($sub) + ($conv1))|0;
   $incdec$ptr = ((($2)) + 1|0);
   HEAP32[$s>>2] = $incdec$ptr;
   $4 = HEAP8[$incdec$ptr>>0]|0;
   $conv = $4 << 24 >> 24;
   $call = (_isdigit($conv)|0);
   $tobool = ($call|0)==(0);
   if ($tobool) {
    $i$0$lcssa = $add;
    break;
   } else {
    $i$07 = $add;
   }
  }
 }
 return ($i$0$lcssa|0);
}
function _pop_arg($arg,$type,$ap,$pop_arg_long_double) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 $pop_arg_long_double = $pop_arg_long_double|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next3 = 0;
 var $arglist_next6 = 0, $arglist_next9 = 0, $cmp = 0, $conv16 = 0, $conv22$mask = 0, $conv28 = 0, $conv34$mask = 0, $expanded = 0, $expanded25 = 0, $expanded27 = 0, $expanded28 = 0, $expanded29 = 0, $expanded31 = 0, $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded36 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0;
 var $expanded42 = 0, $expanded43 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded50 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded57 = 0, $expanded59 = 0, $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded64 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0;
 var $expanded70 = 0, $expanded71 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded78 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded85 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($type>>>0)>(20);
 L1: do {
  if (!($cmp)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $0 = $arglist_current;
     $1 = ((0) + 4|0);
     $expanded25 = $1;
     $expanded = (($expanded25) - 1)|0;
     $2 = (($0) + ($expanded))|0;
     $3 = ((0) + 4|0);
     $expanded29 = $3;
     $expanded28 = (($expanded29) - 1)|0;
     $expanded27 = $expanded28 ^ -1;
     $4 = $2 & $expanded27;
     $5 = $4;
     $6 = HEAP32[$5>>2]|0;
     $arglist_next = ((($5)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $6;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $7 = $arglist_current2;
     $8 = ((0) + 4|0);
     $expanded32 = $8;
     $expanded31 = (($expanded32) - 1)|0;
     $9 = (($7) + ($expanded31))|0;
     $10 = ((0) + 4|0);
     $expanded36 = $10;
     $expanded35 = (($expanded36) - 1)|0;
     $expanded34 = $expanded35 ^ -1;
     $11 = $9 & $expanded34;
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $arglist_next3 = ((($12)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $14 = ($13|0)<(0);
     $15 = $14 << 31 >> 31;
     $16 = $arg;
     $17 = $16;
     HEAP32[$17>>2] = $13;
     $18 = (($16) + 4)|0;
     $19 = $18;
     HEAP32[$19>>2] = $15;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $20 = $arglist_current5;
     $21 = ((0) + 4|0);
     $expanded39 = $21;
     $expanded38 = (($expanded39) - 1)|0;
     $22 = (($20) + ($expanded38))|0;
     $23 = ((0) + 4|0);
     $expanded43 = $23;
     $expanded42 = (($expanded43) - 1)|0;
     $expanded41 = $expanded42 ^ -1;
     $24 = $22 & $expanded41;
     $25 = $24;
     $26 = HEAP32[$25>>2]|0;
     $arglist_next6 = ((($25)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $27 = $arg;
     $28 = $27;
     HEAP32[$28>>2] = $26;
     $29 = (($27) + 4)|0;
     $30 = $29;
     HEAP32[$30>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $31 = $arglist_current8;
     $32 = ((0) + 8|0);
     $expanded46 = $32;
     $expanded45 = (($expanded46) - 1)|0;
     $33 = (($31) + ($expanded45))|0;
     $34 = ((0) + 8|0);
     $expanded50 = $34;
     $expanded49 = (($expanded50) - 1)|0;
     $expanded48 = $expanded49 ^ -1;
     $35 = $33 & $expanded48;
     $36 = $35;
     $37 = $36;
     $38 = $37;
     $39 = HEAP32[$38>>2]|0;
     $40 = (($37) + 4)|0;
     $41 = $40;
     $42 = HEAP32[$41>>2]|0;
     $arglist_next9 = ((($36)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $43 = $arg;
     $44 = $43;
     HEAP32[$44>>2] = $39;
     $45 = (($43) + 4)|0;
     $46 = $45;
     HEAP32[$46>>2] = $42;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $47 = $arglist_current11;
     $48 = ((0) + 4|0);
     $expanded53 = $48;
     $expanded52 = (($expanded53) - 1)|0;
     $49 = (($47) + ($expanded52))|0;
     $50 = ((0) + 4|0);
     $expanded57 = $50;
     $expanded56 = (($expanded57) - 1)|0;
     $expanded55 = $expanded56 ^ -1;
     $51 = $49 & $expanded55;
     $52 = $51;
     $53 = HEAP32[$52>>2]|0;
     $arglist_next12 = ((($52)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $conv16 = $53&65535;
     $54 = $conv16 << 16 >> 16;
     $55 = ($54|0)<(0);
     $56 = $55 << 31 >> 31;
     $57 = $arg;
     $58 = $57;
     HEAP32[$58>>2] = $54;
     $59 = (($57) + 4)|0;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $61 = $arglist_current14;
     $62 = ((0) + 4|0);
     $expanded60 = $62;
     $expanded59 = (($expanded60) - 1)|0;
     $63 = (($61) + ($expanded59))|0;
     $64 = ((0) + 4|0);
     $expanded64 = $64;
     $expanded63 = (($expanded64) - 1)|0;
     $expanded62 = $expanded63 ^ -1;
     $65 = $63 & $expanded62;
     $66 = $65;
     $67 = HEAP32[$66>>2]|0;
     $arglist_next15 = ((($66)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $conv22$mask = $67 & 65535;
     $68 = $arg;
     $69 = $68;
     HEAP32[$69>>2] = $conv22$mask;
     $70 = (($68) + 4)|0;
     $71 = $70;
     HEAP32[$71>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $72 = $arglist_current17;
     $73 = ((0) + 4|0);
     $expanded67 = $73;
     $expanded66 = (($expanded67) - 1)|0;
     $74 = (($72) + ($expanded66))|0;
     $75 = ((0) + 4|0);
     $expanded71 = $75;
     $expanded70 = (($expanded71) - 1)|0;
     $expanded69 = $expanded70 ^ -1;
     $76 = $74 & $expanded69;
     $77 = $76;
     $78 = HEAP32[$77>>2]|0;
     $arglist_next18 = ((($77)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $conv28 = $78&255;
     $79 = $conv28 << 24 >> 24;
     $80 = ($79|0)<(0);
     $81 = $80 << 31 >> 31;
     $82 = $arg;
     $83 = $82;
     HEAP32[$83>>2] = $79;
     $84 = (($82) + 4)|0;
     $85 = $84;
     HEAP32[$85>>2] = $81;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $86 = $arglist_current20;
     $87 = ((0) + 4|0);
     $expanded74 = $87;
     $expanded73 = (($expanded74) - 1)|0;
     $88 = (($86) + ($expanded73))|0;
     $89 = ((0) + 4|0);
     $expanded78 = $89;
     $expanded77 = (($expanded78) - 1)|0;
     $expanded76 = $expanded77 ^ -1;
     $90 = $88 & $expanded76;
     $91 = $90;
     $92 = HEAP32[$91>>2]|0;
     $arglist_next21 = ((($91)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $conv34$mask = $92 & 255;
     $93 = $arg;
     $94 = $93;
     HEAP32[$94>>2] = $conv34$mask;
     $95 = (($93) + 4)|0;
     $96 = $95;
     HEAP32[$96>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $97 = $arglist_current23;
     $98 = ((0) + 8|0);
     $expanded81 = $98;
     $expanded80 = (($expanded81) - 1)|0;
     $99 = (($97) + ($expanded80))|0;
     $100 = ((0) + 8|0);
     $expanded85 = $100;
     $expanded84 = (($expanded85) - 1)|0;
     $expanded83 = $expanded84 ^ -1;
     $101 = $99 & $expanded83;
     $102 = $101;
     $103 = +HEAPF64[$102>>3];
     $arglist_next24 = ((($102)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $103;
     break L1;
     break;
    }
    case 18:  {
     FUNCTION_TABLE_vii[$pop_arg_long_double & 255]($arg,$ap);
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$s,$lower) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 $lower = $lower|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arrayidx = 0, $conv1 = 0, $conv4 = 0, $idxprom = 0, $incdec$ptr = 0, $or = 0, $s$addr$0$lcssa = 0, $s$addr$06 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 $3 = ($1|0)==(0);
 $4 = $2 & $3;
 if ($4) {
  $s$addr$0$lcssa = $s;
 } else {
  $5 = $0;$7 = $1;$s$addr$06 = $s;
  while(1) {
   $idxprom = $5 & 15;
   $arrayidx = (1680 + ($idxprom)|0);
   $6 = HEAP8[$arrayidx>>0]|0;
   $conv4 = $6&255;
   $or = $conv4 | $lower;
   $conv1 = $or&255;
   $incdec$ptr = ((($s$addr$06)) + -1|0);
   HEAP8[$incdec$ptr>>0] = $conv1;
   $8 = (_bitshift64Lshr(($5|0),($7|0),4)|0);
   $9 = (getTempRet0() | 0);
   $10 = ($8|0)==(0);
   $11 = ($9|0)==(0);
   $12 = $10 & $11;
   if ($12) {
    $s$addr$0$lcssa = $incdec$ptr;
    break;
   } else {
    $5 = $8;$7 = $9;$s$addr$06 = $incdec$ptr;
   }
  }
 }
 return ($s$addr$0$lcssa|0);
}
function _fmt_o($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $conv = 0, $incdec$ptr = 0, $s$addr$0$lcssa = 0, $s$addr$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 $3 = ($1|0)==(0);
 $4 = $2 & $3;
 if ($4) {
  $s$addr$0$lcssa = $s;
 } else {
  $6 = $0;$8 = $1;$s$addr$06 = $s;
  while(1) {
   $5 = $6&255;
   $7 = $5 & 7;
   $conv = $7 | 48;
   $incdec$ptr = ((($s$addr$06)) + -1|0);
   HEAP8[$incdec$ptr>>0] = $conv;
   $9 = (_bitshift64Lshr(($6|0),($8|0),3)|0);
   $10 = (getTempRet0() | 0);
   $11 = ($9|0)==(0);
   $12 = ($10|0)==(0);
   $13 = $11 & $12;
   if ($13) {
    $s$addr$0$lcssa = $incdec$ptr;
    break;
   } else {
    $6 = $9;$8 = $10;$s$addr$06 = $incdec$ptr;
   }
  }
 }
 return ($s$addr$0$lcssa|0);
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $add5 = 0, $conv = 0, $conv6 = 0, $div9 = 0, $incdec$ptr = 0, $incdec$ptr7 = 0, $s$addr$0$lcssa = 0, $s$addr$013 = 0, $s$addr$1$lcssa = 0, $s$addr$19 = 0, $tobool8 = 0, $x$addr$0$lcssa$off0 = 0, $y$010 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $7 = $0;$8 = $1;$s$addr$013 = $s;
  while(1) {
   $9 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $10 = (getTempRet0() | 0);
   $11 = (___muldi3(($9|0),($10|0),10,0)|0);
   $12 = (getTempRet0() | 0);
   $13 = (_i64Subtract(($7|0),($8|0),($11|0),($12|0))|0);
   $14 = (getTempRet0() | 0);
   $15 = $13&255;
   $conv = $15 | 48;
   $incdec$ptr = ((($s$addr$013)) + -1|0);
   HEAP8[$incdec$ptr>>0] = $conv;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $7 = $9;$8 = $10;$s$addr$013 = $incdec$ptr;
   } else {
    break;
   }
  }
  $s$addr$0$lcssa = $incdec$ptr;$x$addr$0$lcssa$off0 = $9;
 } else {
  $s$addr$0$lcssa = $s;$x$addr$0$lcssa$off0 = $0;
 }
 $tobool8 = ($x$addr$0$lcssa$off0|0)==(0);
 if ($tobool8) {
  $s$addr$1$lcssa = $s$addr$0$lcssa;
 } else {
  $s$addr$19 = $s$addr$0$lcssa;$y$010 = $x$addr$0$lcssa$off0;
  while(1) {
   $div9 = (($y$010>>>0) / 10)&-1;
   $21 = ($div9*10)|0;
   $22 = (($y$010) - ($21))|0;
   $add5 = $22 | 48;
   $conv6 = $add5&255;
   $incdec$ptr7 = ((($s$addr$19)) + -1|0);
   HEAP8[$incdec$ptr7>>0] = $conv6;
   $23 = ($y$010>>>0)<(10);
   if ($23) {
    $s$addr$1$lcssa = $incdec$ptr7;
    break;
   } else {
    $s$addr$19 = $incdec$ptr7;$y$010 = $div9;
   }
  }
 }
 return ($s$addr$1$lcssa|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$in = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $and = 0, $and15 = 0, $and16 = 0, $and39 = 0, $cmp = 0, $cmp11 = 0, $cmp1132 = 0, $cmp28 = 0, $cmp8 = 0, $conv1 = 0;
 var $dec = 0, $dec34 = 0, $incdec$ptr = 0, $incdec$ptr21 = 0, $incdec$ptr33 = 0, $mul = 0, $n$addr$0$lcssa = 0, $n$addr$0$lcssa52 = 0, $n$addr$043 = 0, $n$addr$1$lcssa = 0, $n$addr$1$lcssa55 = 0, $n$addr$133 = 0, $n$addr$227 = 0, $neg = 0, $or$cond = 0, $or$cond42 = 0, $s$0$lcssa = 0, $s$0$lcssa53 = 0, $s$044 = 0, $s$128 = 0;
 var $sub = 0, $sub22 = 0, $tobool = 0, $tobool17 = 0, $tobool2 = 0, $tobool2$lcssa = 0, $tobool241 = 0, $tobool25 = 0, $tobool2526 = 0, $tobool36 = 0, $tobool40 = 0, $w$0$lcssa = 0, $w$034 = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $conv1 = $c & 255;
 $0 = $src;
 $and39 = $0 & 3;
 $tobool40 = ($and39|0)!=(0);
 $tobool241 = ($n|0)!=(0);
 $or$cond42 = $tobool241 & $tobool40;
 L1: do {
  if ($or$cond42) {
   $1 = $c&255;
   $n$addr$043 = $n;$s$044 = $src;
   while(1) {
    $2 = HEAP8[$s$044>>0]|0;
    $cmp = ($2<<24>>24)==($1<<24>>24);
    if ($cmp) {
     $n$addr$0$lcssa52 = $n$addr$043;$s$0$lcssa53 = $s$044;
     label = 6;
     break L1;
    }
    $incdec$ptr = ((($s$044)) + 1|0);
    $dec = (($n$addr$043) + -1)|0;
    $3 = $incdec$ptr;
    $and = $3 & 3;
    $tobool = ($and|0)!=(0);
    $tobool2 = ($dec|0)!=(0);
    $or$cond = $tobool2 & $tobool;
    if ($or$cond) {
     $n$addr$043 = $dec;$s$044 = $incdec$ptr;
    } else {
     $n$addr$0$lcssa = $dec;$s$0$lcssa = $incdec$ptr;$tobool2$lcssa = $tobool2;
     label = 5;
     break;
    }
   }
  } else {
   $n$addr$0$lcssa = $n;$s$0$lcssa = $src;$tobool2$lcssa = $tobool241;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($tobool2$lcssa) {
   $n$addr$0$lcssa52 = $n$addr$0$lcssa;$s$0$lcssa53 = $s$0$lcssa;
   label = 6;
  } else {
   label = 16;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $4 = HEAP8[$s$0$lcssa53>>0]|0;
   $5 = $c&255;
   $cmp8 = ($4<<24>>24)==($5<<24>>24);
   if ($cmp8) {
    $tobool36 = ($n$addr$0$lcssa52|0)==(0);
    if ($tobool36) {
     label = 16;
     break;
    } else {
     $8 = $s$0$lcssa53;
     break;
    }
   }
   $mul = Math_imul($conv1, 16843009)|0;
   $cmp1132 = ($n$addr$0$lcssa52>>>0)>(3);
   L13: do {
    if ($cmp1132) {
     $n$addr$133 = $n$addr$0$lcssa52;$w$034 = $s$0$lcssa53;
     while(1) {
      $6 = HEAP32[$w$034>>2]|0;
      $xor = $6 ^ $mul;
      $sub = (($xor) + -16843009)|0;
      $neg = $xor & -2139062144;
      $and15 = $neg ^ -2139062144;
      $and16 = $and15 & $sub;
      $tobool17 = ($and16|0)==(0);
      if (!($tobool17)) {
       $$in = $w$034;$n$addr$1$lcssa55 = $n$addr$133;
       break L13;
      }
      $incdec$ptr21 = ((($w$034)) + 4|0);
      $sub22 = (($n$addr$133) + -4)|0;
      $cmp11 = ($sub22>>>0)>(3);
      if ($cmp11) {
       $n$addr$133 = $sub22;$w$034 = $incdec$ptr21;
      } else {
       $n$addr$1$lcssa = $sub22;$w$0$lcssa = $incdec$ptr21;
       label = 11;
       break;
      }
     }
    } else {
     $n$addr$1$lcssa = $n$addr$0$lcssa52;$w$0$lcssa = $s$0$lcssa53;
     label = 11;
    }
   } while(0);
   if ((label|0) == 11) {
    $tobool2526 = ($n$addr$1$lcssa|0)==(0);
    if ($tobool2526) {
     label = 16;
     break;
    } else {
     $$in = $w$0$lcssa;$n$addr$1$lcssa55 = $n$addr$1$lcssa;
    }
   }
   $n$addr$227 = $n$addr$1$lcssa55;$s$128 = $$in;
   while(1) {
    $7 = HEAP8[$s$128>>0]|0;
    $cmp28 = ($7<<24>>24)==($5<<24>>24);
    if ($cmp28) {
     $8 = $s$128;
     break L8;
    }
    $incdec$ptr33 = ((($s$128)) + 1|0);
    $dec34 = (($n$addr$227) + -1)|0;
    $tobool25 = ($dec34|0)==(0);
    if ($tobool25) {
     label = 16;
     break;
    } else {
     $n$addr$227 = $dec34;$s$128 = $incdec$ptr33;
    }
   }
  }
 } while(0);
 if ((label|0) == 16) {
  $8 = 0;
 }
 return ($8|0);
}
function _pad_659($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $0 = 0, $1 = 0, $2 = 0, $and = 0, $cmp = 0, $cmp3 = 0, $cmp38 = 0, $cond = 0, $conv = 0, $l$addr$0$lcssa = 0, $l$addr$09 = 0, $or$cond = 0, $pad = 0, $sub = 0, $sub6 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $pad = sp;
 $and = $fl & 73728;
 $tobool = ($and|0)==(0);
 $cmp = ($w|0)>($l|0);
 $or$cond = $cmp & $tobool;
 if ($or$cond) {
  $sub = (($w) - ($l))|0;
  $conv = $c << 24 >> 24;
  $0 = ($sub>>>0)<(256);
  $cond = $0 ? $sub : 256;
  (_memset(($pad|0),($conv|0),($cond|0))|0);
  $cmp38 = ($sub>>>0)>(255);
  if ($cmp38) {
   $1 = (($w) - ($l))|0;
   $l$addr$09 = $sub;
   while(1) {
    _out($f,$pad,256);
    $sub6 = (($l$addr$09) + -256)|0;
    $cmp3 = ($sub6>>>0)>(255);
    if ($cmp3) {
     $l$addr$09 = $sub6;
    } else {
     break;
    }
   }
   $2 = $1 & 255;
   $l$addr$0$lcssa = $2;
  } else {
   $l$addr$0$lcssa = $sub;
  }
  _out($f,$pad,$l$addr$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $call = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($s|0)==(0|0);
 if ($tobool) {
  $retval$0 = 0;
 } else {
  $call = (_wcrtomb($s,$wc,0)|0);
  $retval$0 = $call;
 }
 return ($retval$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $and32 = 0, $and36 = 0, $and49 = 0, $and54 = 0, $and58 = 0, $call = 0, $call10 = 0, $call66 = 0, $cmp = 0;
 var $cmp14 = 0, $cmp21 = 0, $cmp24 = 0, $cmp41 = 0, $cmp7 = 0, $conv = 0, $conv12 = 0, $conv17 = 0, $conv19 = 0, $conv29 = 0, $conv34 = 0, $conv38 = 0, $conv46 = 0, $conv51 = 0, $conv56 = 0, $conv60 = 0, $incdec$ptr = 0, $incdec$ptr30 = 0, $incdec$ptr35 = 0, $incdec$ptr47 = 0;
 var $incdec$ptr52 = 0, $incdec$ptr57 = 0, $locale = 0, $or = 0, $or$cond = 0, $or18 = 0, $or28 = 0, $or33 = 0, $or37 = 0, $or45 = 0, $or50 = 0, $or55 = 0, $or59 = 0, $retval$0 = 0, $sub40 = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($s|0)==(0|0);
 do {
  if ($tobool) {
   $retval$0 = 1;
  } else {
   $cmp = ($wc>>>0)<(128);
   if ($cmp) {
    $conv = $wc&255;
    HEAP8[$s>>0] = $conv;
    $retval$0 = 1;
    break;
   }
   $call = (___pthread_self_440()|0);
   $locale = ((($call)) + 188|0);
   $0 = HEAP32[$locale>>2]|0;
   $1 = HEAP32[$0>>2]|0;
   $tobool2 = ($1|0)==(0|0);
   if ($tobool2) {
    $2 = $wc & -128;
    $cmp7 = ($2|0)==(57216);
    if ($cmp7) {
     $conv12 = $wc&255;
     HEAP8[$s>>0] = $conv12;
     $retval$0 = 1;
     break;
    } else {
     $call10 = (___errno_location()|0);
     HEAP32[$call10>>2] = 25;
     $retval$0 = -1;
     break;
    }
   }
   $cmp14 = ($wc>>>0)<(2048);
   if ($cmp14) {
    $3 = $wc >>> 6;
    $or = $3 | 192;
    $conv17 = $or&255;
    $incdec$ptr = ((($s)) + 1|0);
    HEAP8[$s>>0] = $conv17;
    $and = $wc & 63;
    $or18 = $and | 128;
    $conv19 = $or18&255;
    HEAP8[$incdec$ptr>>0] = $conv19;
    $retval$0 = 2;
    break;
   }
   $cmp21 = ($wc>>>0)<(55296);
   $4 = $wc & -8192;
   $cmp24 = ($4|0)==(57344);
   $or$cond = $cmp21 | $cmp24;
   if ($or$cond) {
    $5 = $wc >>> 12;
    $or28 = $5 | 224;
    $conv29 = $or28&255;
    $incdec$ptr30 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $conv29;
    $6 = $wc >>> 6;
    $and32 = $6 & 63;
    $or33 = $and32 | 128;
    $conv34 = $or33&255;
    $incdec$ptr35 = ((($s)) + 2|0);
    HEAP8[$incdec$ptr30>>0] = $conv34;
    $and36 = $wc & 63;
    $or37 = $and36 | 128;
    $conv38 = $or37&255;
    HEAP8[$incdec$ptr35>>0] = $conv38;
    $retval$0 = 3;
    break;
   }
   $sub40 = (($wc) + -65536)|0;
   $cmp41 = ($sub40>>>0)<(1048576);
   if ($cmp41) {
    $7 = $wc >>> 18;
    $or45 = $7 | 240;
    $conv46 = $or45&255;
    $incdec$ptr47 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $conv46;
    $8 = $wc >>> 12;
    $and49 = $8 & 63;
    $or50 = $and49 | 128;
    $conv51 = $or50&255;
    $incdec$ptr52 = ((($s)) + 2|0);
    HEAP8[$incdec$ptr47>>0] = $conv51;
    $9 = $wc >>> 6;
    $and54 = $9 & 63;
    $or55 = $and54 | 128;
    $conv56 = $or55&255;
    $incdec$ptr57 = ((($s)) + 3|0);
    HEAP8[$incdec$ptr52>>0] = $conv56;
    $and58 = $wc & 63;
    $or59 = $and58 | 128;
    $conv60 = $or59&255;
    HEAP8[$incdec$ptr57>>0] = $conv60;
    $retval$0 = 4;
    break;
   } else {
    $call66 = (___errno_location()|0);
    HEAP32[$call66>>2] = 25;
    $retval$0 = -1;
    break;
   }
  }
 } while(0);
 return ($retval$0|0);
}
function ___pthread_self_440() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_pthread_self()|0);
 return ($call|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (3792|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$pre = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0, $add$ptr = 0, $add$ptr27 = 0, $arrayidx = 0, $call = 0, $call16 = 0, $call4 = 0;
 var $cmp = 0, $cmp11 = 0, $cmp17 = 0, $cmp6 = 0, $i$033 = 0, $i$1 = 0, $l$addr$0 = 0, $l$addr$1 = 0, $lbf = 0, $or$cond = 0, $retval$1 = 0, $s$addr$1 = 0, $sub = 0, $sub$ptr$sub = 0, $tobool = 0, $tobool1 = 0, $tobool9 = 0, $tobool932 = 0, $wend = 0, $wpos = 0;
 var $write = 0, $write15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $wend = ((($f)) + 16|0);
 $0 = HEAP32[$wend>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  $call = (___towrite($f)|0);
  $tobool1 = ($call|0)==(0);
  if ($tobool1) {
   $$pre = HEAP32[$wend>>2]|0;
   $3 = $$pre;
   label = 5;
  } else {
   $retval$1 = 0;
  }
 } else {
  $1 = $0;
  $3 = $1;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $wpos = ((($f)) + 20|0);
   $2 = HEAP32[$wpos>>2]|0;
   $sub$ptr$sub = (($3) - ($2))|0;
   $cmp = ($sub$ptr$sub>>>0)<($l>>>0);
   $4 = $2;
   if ($cmp) {
    $write = ((($f)) + 36|0);
    $5 = HEAP32[$write>>2]|0;
    $call4 = (FUNCTION_TABLE_iiii[$5 & 255]($f,$s,$l)|0);
    $retval$1 = $call4;
    break;
   }
   $lbf = ((($f)) + 75|0);
   $6 = HEAP8[$lbf>>0]|0;
   $cmp6 = ($6<<24>>24)<(0);
   $tobool932 = ($l|0)==(0);
   $or$cond = $cmp6 | $tobool932;
   L10: do {
    if ($or$cond) {
     $9 = $4;$i$1 = 0;$l$addr$1 = $l;$s$addr$1 = $s;
    } else {
     $i$033 = $l;
     while(1) {
      $sub = (($i$033) + -1)|0;
      $arrayidx = (($s) + ($sub)|0);
      $7 = HEAP8[$arrayidx>>0]|0;
      $cmp11 = ($7<<24>>24)==(10);
      if ($cmp11) {
       break;
      }
      $tobool9 = ($sub|0)==(0);
      if ($tobool9) {
       $9 = $4;$i$1 = 0;$l$addr$1 = $l;$s$addr$1 = $s;
       break L10;
      } else {
       $i$033 = $sub;
      }
     }
     $write15 = ((($f)) + 36|0);
     $8 = HEAP32[$write15>>2]|0;
     $call16 = (FUNCTION_TABLE_iiii[$8 & 255]($f,$s,$i$033)|0);
     $cmp17 = ($call16>>>0)<($i$033>>>0);
     if ($cmp17) {
      $retval$1 = $call16;
      break L5;
     }
     $add$ptr = (($s) + ($i$033)|0);
     $l$addr$0 = (($l) - ($i$033))|0;
     $$pre35 = HEAP32[$wpos>>2]|0;
     $9 = $$pre35;$i$1 = $i$033;$l$addr$1 = $l$addr$0;$s$addr$1 = $add$ptr;
    }
   } while(0);
   (_memcpy(($9|0),($s$addr$1|0),($l$addr$1|0))|0);
   $10 = HEAP32[$wpos>>2]|0;
   $add$ptr27 = (($10) + ($l$addr$1)|0);
   HEAP32[$wpos>>2] = $add$ptr27;
   $add = (($i$1) + ($l$addr$1))|0;
   $retval$1 = $add;
  }
 } while(0);
 return ($retval$1|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $add$ptr = 0, $and = 0, $buf = 0, $buf_size = 0, $conv = 0, $conv3 = 0, $mode = 0, $or = 0, $or5 = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $sub = 0, $tobool = 0, $wbase = 0;
 var $wend = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mode = ((($f)) + 74|0);
 $0 = HEAP8[$mode>>0]|0;
 $conv = $0 << 24 >> 24;
 $sub = (($conv) + 255)|0;
 $or = $sub | $conv;
 $conv3 = $or&255;
 HEAP8[$mode>>0] = $conv3;
 $1 = HEAP32[$f>>2]|0;
 $and = $1 & 8;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $rend = ((($f)) + 8|0);
  HEAP32[$rend>>2] = 0;
  $rpos = ((($f)) + 4|0);
  HEAP32[$rpos>>2] = 0;
  $buf = ((($f)) + 44|0);
  $2 = HEAP32[$buf>>2]|0;
  $wbase = ((($f)) + 28|0);
  HEAP32[$wbase>>2] = $2;
  $wpos = ((($f)) + 20|0);
  HEAP32[$wpos>>2] = $2;
  $3 = $2;
  $buf_size = ((($f)) + 48|0);
  $4 = HEAP32[$buf_size>>2]|0;
  $add$ptr = (($3) + ($4)|0);
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = $add$ptr;
  $retval$0 = 0;
 } else {
  $or5 = $1 | 32;
  HEAP32[$f>>2] = $or5;
  $retval$0 = -1;
 }
 return ($retval$0|0);
}
function ___DOUBLE_BITS_662($__f) {
 $__f = +$__f;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $__f;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 setTempRet0(($1) | 0);
 return ($0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $call = 0.0, $conv = 0, $mul = 0.0, $retval$0 = 0.0, $storemerge = 0, $sub = 0, $sub8 = 0, $tobool1 = 0, $trunc$clear = 0, $x$addr$0 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = (getTempRet0() | 0);
 $4 = $2&65535;
 $trunc$clear = $4 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $tobool1 = $x != 0.0;
  if ($tobool1) {
   $mul = $x * 1.8446744073709552E+19;
   $call = (+_frexp($mul,$e));
   $5 = HEAP32[$e>>2]|0;
   $sub = (($5) + -64)|0;
   $storemerge = $sub;$x$addr$0 = $call;
  } else {
   $storemerge = 0;$x$addr$0 = $x;
  }
  HEAP32[$e>>2] = $storemerge;
  $retval$0 = $x$addr$0;
  break;
 }
 case 2047:  {
  $retval$0 = $x;
  break;
 }
 default: {
  $conv = $2 & 2047;
  $sub8 = (($conv) + -1022)|0;
  HEAP32[$e>>2] = $sub8;
  $6 = $1 & -2146435073;
  $7 = $6 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $7;$8 = +HEAPF64[tempDoublePtr>>3];
  $retval$0 = $8;
 }
 }
 return (+$retval$0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $$cast = 0, $0 = 0, $1 = 0, $2 = 0, $add$ptr = 0, $cmp = 0, $spec$select = 0, $sub$ptr$sub = 0, $wend = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $wend = ((($f)) + 16|0);
 $0 = HEAP32[$wend>>2]|0;
 $wpos = ((($f)) + 20|0);
 $1 = HEAP32[$wpos>>2]|0;
 $sub$ptr$sub = (($0) - ($1))|0;
 $cmp = ($sub$ptr$sub>>>0)>($l>>>0);
 $spec$select = $cmp ? $l : $sub$ptr$sub;
 $$cast = $1;
 (_memcpy(($$cast|0),($s|0),($spec$select|0))|0);
 $2 = HEAP32[$wpos>>2]|0;
 $add$ptr = (($2) + ($spec$select)|0);
 HEAP32[$wpos>>2] = $add$ptr;
 return ($l|0);
}
function _isxdigit($c) {
 $c = $c|0;
 var $call = 0, $cmp = 0, $narrow = 0, $or = 0, $spec$select = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_isdigit($c)|0);
 $tobool = ($call|0)!=(0);
 $or = $c | 32;
 $sub = (($or) + -97)|0;
 $cmp = ($sub>>>0)<(6);
 $narrow = $cmp | $tobool;
 $spec$select = $narrow&1;
 return ($spec$select|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $call = 0, $cmp = 0, $retval$0 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($r>>>0)>(4294963200);
 if ($cmp) {
  $sub = (0 - ($r))|0;
  $call = (___errno_location()|0);
  HEAP32[$call>>2] = $sub;
  $retval$0 = -1;
 } else {
  $retval$0 = $r;
 }
 return ($retval$0|0);
}
function _strlen($s) {
 $s = $s|0;
 var $$pn = 0, $$pn24 = 0, $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $and = 0, $and3 = 0, $incdec$ptr = 0, $incdec$ptr1323 = 0, $incdec$ptr7 = 0, $neg = 0, $rem = 0, $rem13 = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$015 = 0;
 var $s$addr$1$lcssa = 0, $sub = 0, $sub$ptr$lhs$cast15 = 0, $tobool = 0, $tobool1 = 0, $tobool10 = 0, $tobool1021 = 0, $tobool14 = 0, $tobool4 = 0, $w$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $rem13 = $0 & 3;
 $tobool14 = ($rem13|0)==(0);
 L1: do {
  if ($tobool14) {
   $s$addr$0$lcssa = $s;
   label = 5;
  } else {
   $5 = $0;$s$addr$015 = $s;
   while(1) {
    $1 = HEAP8[$s$addr$015>>0]|0;
    $tobool1 = ($1<<24>>24)==(0);
    if ($tobool1) {
     $$pn = $5;
     break L1;
    }
    $incdec$ptr = ((($s$addr$015)) + 1|0);
    $2 = $incdec$ptr;
    $rem = $2 & 3;
    $tobool = ($rem|0)==(0);
    if ($tobool) {
     $s$addr$0$lcssa = $incdec$ptr;
     label = 5;
     break;
    } else {
     $5 = $2;$s$addr$015 = $incdec$ptr;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $w$0 = $s$addr$0$lcssa;
  while(1) {
   $3 = HEAP32[$w$0>>2]|0;
   $sub = (($3) + -16843009)|0;
   $neg = $3 & -2139062144;
   $and = $neg ^ -2139062144;
   $and3 = $and & $sub;
   $tobool4 = ($and3|0)==(0);
   $incdec$ptr7 = ((($w$0)) + 4|0);
   if ($tobool4) {
    $w$0 = $incdec$ptr7;
   } else {
    break;
   }
  }
  $4 = $3&255;
  $tobool1021 = ($4<<24>>24)==(0);
  if ($tobool1021) {
   $s$addr$1$lcssa = $w$0;
  } else {
   $$pn24 = $w$0;
   while(1) {
    $incdec$ptr1323 = ((($$pn24)) + 1|0);
    $$pre = HEAP8[$incdec$ptr1323>>0]|0;
    $tobool10 = ($$pre<<24>>24)==(0);
    if ($tobool10) {
     $s$addr$1$lcssa = $incdec$ptr1323;
     break;
    } else {
     $$pn24 = $incdec$ptr1323;
    }
   }
  }
  $sub$ptr$lhs$cast15 = $s$addr$1$lcssa;
  $$pn = $sub$ptr$lhs$cast15;
 }
 $retval$0 = (($$pn) - ($0))|0;
 return ($retval$0|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $call = 0, $cmp = 0, $cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___strchrnul($s,$c)|0);
 $0 = HEAP8[$call>>0]|0;
 $1 = $c&255;
 $cmp = ($0<<24>>24)==($1<<24>>24);
 $cond = $cmp ? $call : 0;
 return ($cond|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add$ptr = 0, $and = 0, $and14 = 0, $and15 = 0, $and29 = 0, $and9 = 0, $and930 = 0, $call = 0, $cmp = 0, $cmp26 = 0, $conv1 = 0;
 var $incdec$ptr = 0, $incdec$ptr19 = 0, $incdec$ptr31 = 0, $mul = 0, $neg = 0, $neg13 = 0, $neg28 = 0, $or$cond = 0, $or$cond24 = 0, $rem = 0, $rem34 = 0, $retval$0 = 0, $s$addr$0$lcssa = 0, $s$addr$036 = 0, $s$addr$1 = 0, $sub = 0, $sub11 = 0, $sub27 = 0, $tobool = 0, $tobool10 = 0;
 var $tobool1031 = 0, $tobool16 = 0, $tobool2 = 0, $tobool23 = 0, $tobool235 = 0, $tobool3 = 0, $w$0$lcssa = 0, $w$032 = 0, $xor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $conv1 = $c & 255;
 $tobool = ($conv1|0)==(0);
 L1: do {
  if ($tobool) {
   $call = (_strlen($s)|0);
   $add$ptr = (($s) + ($call)|0);
   $retval$0 = $add$ptr;
  } else {
   $0 = $s;
   $rem34 = $0 & 3;
   $tobool235 = ($rem34|0)==(0);
   if ($tobool235) {
    $s$addr$0$lcssa = $s;
   } else {
    $1 = $c&255;
    $s$addr$036 = $s;
    while(1) {
     $2 = HEAP8[$s$addr$036>>0]|0;
     $tobool3 = ($2<<24>>24)==(0);
     $cmp = ($2<<24>>24)==($1<<24>>24);
     $or$cond = $tobool3 | $cmp;
     if ($or$cond) {
      $retval$0 = $s$addr$036;
      break L1;
     }
     $incdec$ptr = ((($s$addr$036)) + 1|0);
     $3 = $incdec$ptr;
     $rem = $3 & 3;
     $tobool2 = ($rem|0)==(0);
     if ($tobool2) {
      $s$addr$0$lcssa = $incdec$ptr;
      break;
     } else {
      $s$addr$036 = $incdec$ptr;
     }
    }
   }
   $mul = Math_imul($conv1, 16843009)|0;
   $4 = HEAP32[$s$addr$0$lcssa>>2]|0;
   $sub27 = (($4) + -16843009)|0;
   $neg28 = $4 & -2139062144;
   $and29 = $neg28 ^ -2139062144;
   $and930 = $and29 & $sub27;
   $tobool1031 = ($and930|0)==(0);
   L10: do {
    if ($tobool1031) {
     $5 = $4;$w$032 = $s$addr$0$lcssa;
     while(1) {
      $xor = $5 ^ $mul;
      $sub11 = (($xor) + -16843009)|0;
      $neg13 = $xor & -2139062144;
      $and14 = $neg13 ^ -2139062144;
      $and15 = $and14 & $sub11;
      $tobool16 = ($and15|0)==(0);
      if (!($tobool16)) {
       $w$0$lcssa = $w$032;
       break L10;
      }
      $incdec$ptr19 = ((($w$032)) + 4|0);
      $6 = HEAP32[$incdec$ptr19>>2]|0;
      $sub = (($6) + -16843009)|0;
      $neg = $6 & -2139062144;
      $and = $neg ^ -2139062144;
      $and9 = $and & $sub;
      $tobool10 = ($and9|0)==(0);
      if ($tobool10) {
       $5 = $6;$w$032 = $incdec$ptr19;
      } else {
       $w$0$lcssa = $incdec$ptr19;
       break;
      }
     }
    } else {
     $w$0$lcssa = $s$addr$0$lcssa;
    }
   } while(0);
   $7 = $c&255;
   $s$addr$1 = $w$0$lcssa;
   while(1) {
    $8 = HEAP8[$s$addr$1>>0]|0;
    $tobool23 = ($8<<24>>24)==(0);
    $cmp26 = ($8<<24>>24)==($7<<24>>24);
    $or$cond24 = $tobool23 | $cmp26;
    $incdec$ptr31 = ((($s$addr$1)) + 1|0);
    if ($or$cond24) {
     $retval$0 = $s$addr$1;
     break;
    } else {
     $s$addr$1 = $incdec$ptr31;
    }
   }
  }
 } while(0);
 return ($retval$0|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $ap = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $call = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($call|0);
}
function _fputs($s,$f) {
 $s = $s|0;
 $f = $f|0;
 var $call = 0, $call1 = 0, $cmp = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_strlen($s)|0);
 $call1 = (_fwrite($s,1,$call,$f)|0);
 $cmp = ($call1|0)!=($call|0);
 $sub = $cmp << 31 >> 31;
 return ($sub|0);
}
function _fwrite($src,$size,$nmemb,$f) {
 $src = $src|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $0 = 0, $call = 0, $call1 = 0, $call112 = 0, $call113 = 0, $cmp = 0, $cmp5 = 0, $cond9 = 0, $div = 0, $lock = 0, $mul = 0, $phitmp = 0, $spec$select = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mul = Math_imul($nmemb, $size)|0;
 $tobool = ($size|0)==(0);
 $spec$select = $tobool ? 0 : $nmemb;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($f)|0);
  $phitmp = ($call|0)==(0);
  $call1 = (___fwritex($src,$mul,$f)|0);
  if ($phitmp) {
   $call113 = $call1;
  } else {
   ___unlockfile($f);
   $call113 = $call1;
  }
 } else {
  $call112 = (___fwritex($src,$mul,$f)|0);
  $call113 = $call112;
 }
 $cmp5 = ($call113|0)==($mul|0);
 if ($cmp5) {
  $cond9 = $spec$select;
 } else {
  $div = (($call113>>>0) / ($size>>>0))&-1;
  $cond9 = $div;
 }
 return ($cond9|0);
}
function ___unlist_locked_file($f) {
 $f = $f|0;
 var $$pre = 0, $$sink = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call = 0, $lockcount = 0, $next_locked = 0, $next_locked10 = 0, $prev_locked4 = 0, $stdio_locks = 0, $tobool = 0, $tobool1 = 0, $tobool6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lockcount = ((($f)) + 68|0);
 $0 = HEAP32[$lockcount>>2]|0;
 $tobool = ($0|0)==(0);
 if (!($tobool)) {
  $next_locked = ((($f)) + 132|0);
  $1 = HEAP32[$next_locked>>2]|0;
  $tobool1 = ($1|0)==(0|0);
  $2 = $1;
  $$pre = ((($f)) + 128|0);
  if (!($tobool1)) {
   $3 = HEAP32[$$pre>>2]|0;
   $prev_locked4 = ((($1)) + 128|0);
   HEAP32[$prev_locked4>>2] = $3;
  }
  $4 = HEAP32[$$pre>>2]|0;
  $tobool6 = ($4|0)==(0|0);
  if ($tobool6) {
   $call = (___pthread_self_599()|0);
   $stdio_locks = ((($call)) + 232|0);
   $$sink = $stdio_locks;
  } else {
   $next_locked10 = ((($4)) + 132|0);
   $$sink = $next_locked10;
  }
  HEAP32[$$sink>>2] = $2;
 }
 return;
}
function ___pthread_self_599() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_pthread_self()|0);
 return ($call|0);
}
function ___overflow($f,$_c) {
 $f = $f|0;
 $_c = $_c|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $c = 0, $call = 0, $call13 = 0, $cmp = 0, $cmp14 = 0, $cmp7 = 0, $conv = 0, $conv18 = 0, $conv5 = 0, $conv6 = 0, $incdec$ptr = 0, $lbf = 0, $retval$0 = 0;
 var $tobool = 0, $tobool1 = 0, $wend = 0, $wpos = 0, $write = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $c = sp;
 $conv = $_c&255;
 HEAP8[$c>>0] = $conv;
 $wend = ((($f)) + 16|0);
 $0 = HEAP32[$wend>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  $call = (___towrite($f)|0);
  $tobool1 = ($call|0)==(0);
  if ($tobool1) {
   $$pre = HEAP32[$wend>>2]|0;
   $2 = $$pre;
   label = 4;
  } else {
   $retval$0 = -1;
  }
 } else {
  $2 = $0;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $wpos = ((($f)) + 20|0);
   $1 = HEAP32[$wpos>>2]|0;
   $cmp = ($1>>>0)<($2>>>0);
   if ($cmp) {
    $conv5 = $_c & 255;
    $lbf = ((($f)) + 75|0);
    $3 = HEAP8[$lbf>>0]|0;
    $conv6 = $3 << 24 >> 24;
    $cmp7 = ($conv5|0)==($conv6|0);
    if (!($cmp7)) {
     $incdec$ptr = ((($1)) + 1|0);
     HEAP32[$wpos>>2] = $incdec$ptr;
     HEAP8[$1>>0] = $conv;
     $retval$0 = $conv5;
     break;
    }
   }
   $write = ((($f)) + 36|0);
   $4 = HEAP32[$write>>2]|0;
   $call13 = (FUNCTION_TABLE_iiii[$4 & 255]($f,$c,1)|0);
   $cmp14 = ($call13|0)==(1);
   if ($cmp14) {
    $5 = HEAP8[$c>>0]|0;
    $conv18 = $5&255;
    $retval$0 = $conv18;
   } else {
    $retval$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($retval$0|0);
}
function _fopen($filename,$mode) {
 $filename = $filename|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $call = 0, $call1 = 0, $call2 = 0, $call3 = 0, $call4 = 0, $call8 = 0, $cmp = 0, $conv = 0, $or = 0, $retval$0 = 0, $tobool = 0, $tobool9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP8[$mode>>0]|0;
 $conv = $0 << 24 >> 24;
 $call = (_strchr(22927,$conv)|0);
 $tobool = ($call|0)==(0|0);
 if ($tobool) {
  $call1 = (___errno_location()|0);
  HEAP32[$call1>>2] = 28;
  $retval$0 = 0;
 } else {
  $call2 = (___fmodeflags($mode)|0);
  $1 = $filename;
  $or = $call2 | 32768;
  HEAP32[$vararg_buffer>>2] = $1;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $or;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $call3 = (___syscall5(5,($vararg_buffer|0))|0);
  $call4 = (___syscall_ret($call3)|0);
  $cmp = ($call4|0)<(0);
  if ($cmp) {
   $retval$0 = 0;
  } else {
   $call8 = (___fdopen($call4,$mode)|0);
   $tobool9 = ($call8|0)==(0|0);
   if ($tobool9) {
    (___wasi_fd_close(($call4|0))|0);
    $retval$0 = 0;
   } else {
    $retval$0 = $call8;
   }
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function ___fmodeflags($mode) {
 $mode = $mode|0;
 var $$ = 0, $0 = 0, $call = 0, $call5 = 0, $call9 = 0, $cmp = 0, $cmp15 = 0, $cmp21 = 0, $cmp27 = 0, $flags$0 = 0, $flags$2 = 0, $flags$4 = 0, $or = 0, $or12 = 0, $or18 = 0, $or24 = 0, $or30 = 0, $spec$select = 0, $spec$select13 = 0, $spec$select14 = 0;
 var $tobool = 0, $tobool10 = 0, $tobool6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_strchr($mode,43)|0);
 $tobool = ($call|0)==(0|0);
 $0 = HEAP8[$mode>>0]|0;
 $cmp = ($0<<24>>24)!=(114);
 $$ = $cmp&1;
 $flags$0 = $tobool ? $$ : 2;
 $call5 = (_strchr($mode,120)|0);
 $tobool6 = ($call5|0)==(0|0);
 $or = $flags$0 | 128;
 $spec$select = $tobool6 ? $flags$0 : $or;
 $call9 = (_strchr($mode,101)|0);
 $tobool10 = ($call9|0)==(0|0);
 $or12 = $spec$select | 524288;
 $flags$2 = $tobool10 ? $spec$select : $or12;
 $cmp15 = ($0<<24>>24)==(114);
 $or18 = $flags$2 | 64;
 $spec$select13 = $cmp15 ? $flags$2 : $or18;
 $cmp21 = ($0<<24>>24)==(119);
 $or24 = $spec$select13 | 512;
 $flags$4 = $cmp21 ? $or24 : $spec$select13;
 $cmp27 = ($0<<24>>24)==(97);
 $or30 = $flags$4 | 1024;
 $spec$select14 = $cmp27 ? $or30 : $flags$4;
 return ($spec$select14|0);
}
function ___fdopen($fd,$mode) {
 $fd = $fd|0;
 $mode = $mode|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add$ptr27 = 0, $and = 0, $and29 = 0, $buf = 0, $buf_size = 0, $call = 0, $call1 = 0, $call18 = 0, $call2 = 0, $call31 = 0, $call39 = 0, $call7 = 0;
 var $close = 0, $cmp = 0, $cmp14 = 0, $cond = 0, $conv = 0, $fd26 = 0, $lock = 0, $or = 0, $or24 = 0, $read = 0, $retval$0 = 0, $seek = 0, $tobool = 0, $tobool19 = 0, $tobool3 = 0, $tobool30 = 0, $tobool32 = 0, $tobool36 = 0, $tobool8 = 0, $vararg_buffer = 0;
 var $vararg_buffer2 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $write = 0, $wsz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $wsz = sp + 40|0;
 $0 = HEAP8[$mode>>0]|0;
 $conv = $0 << 24 >> 24;
 $call = (_strchr(22927,$conv)|0);
 $tobool = ($call|0)==(0|0);
 if ($tobool) {
  $call1 = (___errno_location()|0);
  HEAP32[$call1>>2] = 28;
  $retval$0 = 0;
 } else {
  $call2 = (_malloc(1176)|0);
  $tobool3 = ($call2|0)==(0|0);
  if ($tobool3) {
   $retval$0 = 0;
  } else {
   (_memset(($call2|0),0,144)|0);
   $call7 = (_strchr($mode,43)|0);
   $tobool8 = ($call7|0)==(0|0);
   $1 = HEAP8[$mode>>0]|0;
   if ($tobool8) {
    $cmp = ($1<<24>>24)==(114);
    $cond = $cmp ? 8 : 4;
    HEAP32[$call2>>2] = $cond;
   }
   $cmp14 = ($1<<24>>24)==(97);
   if ($cmp14) {
    HEAP32[$vararg_buffer>>2] = $fd;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 3;
    $call18 = (___syscall221(221,($vararg_buffer|0))|0);
    $and = $call18 & 1024;
    $tobool19 = ($and|0)==(0);
    if ($tobool19) {
     $or = $call18 | 1024;
     HEAP32[$vararg_buffer2>>2] = $fd;
     $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
     HEAP32[$vararg_ptr5>>2] = 4;
     $vararg_ptr6 = ((($vararg_buffer2)) + 8|0);
     HEAP32[$vararg_ptr6>>2] = $or;
     (___syscall221(221,($vararg_buffer2|0))|0);
    }
    $2 = HEAP32[$call2>>2]|0;
    $or24 = $2 | 128;
    HEAP32[$call2>>2] = $or24;
    $4 = $or24;
   } else {
    $$pre = HEAP32[$call2>>2]|0;
    $4 = $$pre;
   }
   $fd26 = ((($call2)) + 60|0);
   HEAP32[$fd26>>2] = $fd;
   $add$ptr27 = ((($call2)) + 152|0);
   $buf = ((($call2)) + 44|0);
   HEAP32[$buf>>2] = $add$ptr27;
   $buf_size = ((($call2)) + 48|0);
   HEAP32[$buf_size>>2] = 1024;
   $3 = ((($call2)) + 75|0);
   HEAP8[$3>>0] = -1;
   $and29 = $4 & 8;
   $tobool30 = ($and29|0)==(0);
   if ($tobool30) {
    $5 = $wsz;
    HEAP32[$vararg_buffer7>>2] = $fd;
    $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
    HEAP32[$vararg_ptr10>>2] = 21523;
    $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
    HEAP32[$vararg_ptr11>>2] = $5;
    $call31 = (___syscall54(54,($vararg_buffer7|0))|0);
    $tobool32 = ($call31|0)==(0);
    if ($tobool32) {
     HEAP8[$3>>0] = 10;
    }
   }
   $read = ((($call2)) + 32|0);
   HEAP32[$read>>2] = 237;
   $write = ((($call2)) + 36|0);
   HEAP32[$write>>2] = 23;
   $seek = ((($call2)) + 40|0);
   HEAP32[$seek>>2] = 24;
   $close = ((($call2)) + 12|0);
   HEAP32[$close>>2] = 22;
   $6 = HEAP32[(34716)>>2]|0;
   $tobool36 = ($6|0)==(0);
   if ($tobool36) {
    $lock = ((($call2)) + 76|0);
    HEAP32[$lock>>2] = -1;
   }
   $call39 = (___ofl_add($call2)|0);
   $retval$0 = $call2;
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function ___ofl_add($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $call = 0, $next = 0, $prev = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___ofl_lock()|0);
 $0 = HEAP32[$call>>2]|0;
 $next = ((($f)) + 56|0);
 HEAP32[$next>>2] = $0;
 $1 = HEAP32[$call>>2]|0;
 $tobool = ($1|0)==(0|0);
 if (!($tobool)) {
  $prev = ((($1)) + 52|0);
  HEAP32[$prev>>2] = $f;
 }
 HEAP32[$call>>2] = $f;
 ___ofl_unlock();
 return ($f|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((34780|0));
 return (34788|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((34780|0));
 return;
}
function _fclose($f) {
 $f = $f|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $call = 0, $call1 = 0, $call18 = 0, $call19 = 0, $close = 0, $cmp = 0, $cmp13 = 0, $cond = 0;
 var $getln_buf = 0, $lock = 0, $next5 = 0, $or = 0, $prev = 0, $prev11 = 0, $tobool = 0, $tobool2 = 0, $tobool20 = 0, $tobool26 = 0, $tobool7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($f)|0);
  $cond = $call;
 } else {
  $cond = 0;
 }
 ___unlist_locked_file($f);
 $1 = HEAP32[$f>>2]|0;
 $and = $1 & 1;
 $tobool = ($and|0)!=(0);
 if (!($tobool)) {
  $call1 = (___ofl_lock()|0);
  $prev = ((($f)) + 52|0);
  $2 = HEAP32[$prev>>2]|0;
  $tobool2 = ($2|0)==(0|0);
  $3 = $2;
  $$pre = ((($f)) + 56|0);
  if (!($tobool2)) {
   $4 = HEAP32[$$pre>>2]|0;
   $next5 = ((($2)) + 56|0);
   HEAP32[$next5>>2] = $4;
  }
  $5 = HEAP32[$$pre>>2]|0;
  $tobool7 = ($5|0)==(0|0);
  $6 = $5;
  if (!($tobool7)) {
   $prev11 = ((($5)) + 52|0);
   HEAP32[$prev11>>2] = $3;
  }
  $7 = HEAP32[$call1>>2]|0;
  $cmp13 = ($7|0)==($f|0);
  if ($cmp13) {
   HEAP32[$call1>>2] = $6;
  }
  ___ofl_unlock();
 }
 $call18 = (_fflush($f)|0);
 $close = ((($f)) + 12|0);
 $8 = HEAP32[$close>>2]|0;
 $call19 = (FUNCTION_TABLE_ii[$8 & 255]($f)|0);
 $or = $call19 | $call18;
 $getln_buf = ((($f)) + 96|0);
 $9 = HEAP32[$getln_buf>>2]|0;
 $tobool20 = ($9|0)==(0|0);
 if (!($tobool20)) {
  _free($9);
 }
 if ($tobool) {
  $tobool26 = ($cond|0)==(0);
  if (!($tobool26)) {
   ___unlockfile($f);
  }
 } else {
  _free($f);
 }
 return ($or|0);
}
function _fflush($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call1 = 0, $call11 = 0, $call118 = 0, $call17 = 0, $call23 = 0, $call7 = 0, $cmp = 0, $cmp15 = 0, $cmp21 = 0, $cond10 = 0, $cond20 = 0, $f$addr$0 = 0, $f$addr$019 = 0;
 var $f$addr$022 = 0, $lock = 0, $lock14 = 0, $next = 0, $or = 0, $phitmp = 0, $r$0$lcssa = 0, $r$021 = 0, $r$1 = 0, $retval$0 = 0, $tobool = 0, $tobool12 = 0, $tobool1220 = 0, $tobool25 = 0, $tobool5 = 0, $wbase = 0, $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $tobool = ($f|0)==(0|0);
 do {
  if ($tobool) {
   $1 = HEAP32[947]|0;
   $tobool5 = ($1|0)==(0|0);
   if ($tobool5) {
    $cond10 = 0;
   } else {
    $2 = HEAP32[947]|0;
    $call7 = (_fflush($2)|0);
    $cond10 = $call7;
   }
   $call11 = (___ofl_lock()|0);
   $f$addr$019 = HEAP32[$call11>>2]|0;
   $tobool1220 = ($f$addr$019|0)==(0|0);
   if ($tobool1220) {
    $r$0$lcssa = $cond10;
   } else {
    $f$addr$022 = $f$addr$019;$r$021 = $cond10;
    while(1) {
     $lock14 = ((($f$addr$022)) + 76|0);
     $3 = HEAP32[$lock14>>2]|0;
     $cmp15 = ($3|0)>(-1);
     if ($cmp15) {
      $call17 = (___lockfile($f$addr$022)|0);
      $cond20 = $call17;
     } else {
      $cond20 = 0;
     }
     $wpos = ((($f$addr$022)) + 20|0);
     $4 = HEAP32[$wpos>>2]|0;
     $wbase = ((($f$addr$022)) + 28|0);
     $5 = HEAP32[$wbase>>2]|0;
     $cmp21 = ($4>>>0)>($5>>>0);
     if ($cmp21) {
      $call23 = (___fflush_unlocked($f$addr$022)|0);
      $or = $call23 | $r$021;
      $r$1 = $or;
     } else {
      $r$1 = $r$021;
     }
     $tobool25 = ($cond20|0)==(0);
     if (!($tobool25)) {
      ___unlockfile($f$addr$022);
     }
     $next = ((($f$addr$022)) + 56|0);
     $f$addr$0 = HEAP32[$next>>2]|0;
     $tobool12 = ($f$addr$0|0)==(0|0);
     if ($tobool12) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $f$addr$022 = $f$addr$0;$r$021 = $r$1;
     }
    }
   }
   ___ofl_unlock();
   $retval$0 = $r$0$lcssa;
  } else {
   $lock = ((($f)) + 76|0);
   $0 = HEAP32[$lock>>2]|0;
   $cmp = ($0|0)>(-1);
   if (!($cmp)) {
    $call118 = (___fflush_unlocked($f)|0);
    $retval$0 = $call118;
    break;
   }
   $call = (___lockfile($f)|0);
   $phitmp = ($call|0)==(0);
   $call1 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $retval$0 = $call1;
   } else {
    ___unlockfile($f);
    $retval$0 = $call1;
   }
  }
 } while(0);
 return ($retval$0|0);
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmp = 0, $cmp4 = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $seek = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $tobool = 0;
 var $wbase = 0, $wend = 0, $wpos = 0, $write = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $wpos = ((($f)) + 20|0);
 $0 = HEAP32[$wpos>>2]|0;
 $wbase = ((($f)) + 28|0);
 $1 = HEAP32[$wbase>>2]|0;
 $cmp = ($0>>>0)>($1>>>0);
 if ($cmp) {
  $write = ((($f)) + 36|0);
  $2 = HEAP32[$write>>2]|0;
  (FUNCTION_TABLE_iiii[$2 & 255]($f,0,0)|0);
  $3 = HEAP32[$wpos>>2]|0;
  $tobool = ($3|0)==(0|0);
  if ($tobool) {
   $retval$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $rpos = ((($f)) + 4|0);
  $4 = HEAP32[$rpos>>2]|0;
  $rend = ((($f)) + 8|0);
  $5 = HEAP32[$rend>>2]|0;
  $cmp4 = ($4>>>0)<($5>>>0);
  if ($cmp4) {
   $sub$ptr$lhs$cast = $4;
   $sub$ptr$rhs$cast = $5;
   $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
   $6 = ($sub$ptr$sub|0)<(0);
   $7 = $6 << 31 >> 31;
   $seek = ((($f)) + 40|0);
   $8 = HEAP32[$seek>>2]|0;
   (FUNCTION_TABLE_iiiii[$8 & 31]($f,$sub$ptr$sub,$7,1)|0);
   $9 = (getTempRet0() | 0);
  }
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = 0;
  HEAP32[$wbase>>2] = 0;
  HEAP32[$wpos>>2] = 0;
  HEAP32[$rend>>2] = 0;
  HEAP32[$rpos>>2] = 0;
  $retval$0 = 0;
 }
 return ($retval$0|0);
}
function _feof($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $and = 0, $and$lobit = 0, $and$lobit8 = 0, $and$lobit9 = 0, $and7 = 0, $call = 0, $cmp = 0, $lock = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($f)|0);
  $phitmp = ($call|0)==(0);
  $2 = HEAP32[$f>>2]|0;
  $and = $2 >>> 4;
  $and$lobit = $and & 1;
  if ($phitmp) {
   $and$lobit9 = $and$lobit;
  } else {
   ___unlockfile($f);
   $and$lobit9 = $and$lobit;
  }
 } else {
  $1 = HEAP32[$f>>2]|0;
  $and7 = $1 >>> 4;
  $and$lobit8 = $and7 & 1;
  $and$lobit9 = $and$lobit8;
 }
 return ($and$lobit9|0);
}
function _fseek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($off|0)<(0);
 $1 = $0 << 31 >> 31;
 $2 = (___fseeko($f,$off,$1,$whence)|0);
 return ($2|0);
}
function ___fseeko($f,$0,$1,$whence) {
 $f = $f|0;
 $0 = $0|0;
 $1 = $1|0;
 $whence = $whence|0;
 var $2 = 0, $3 = 0, $4 = 0, $call = 0, $call17 = 0, $cmp = 0, $lock = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lock = ((($f)) + 76|0);
 $2 = HEAP32[$lock>>2]|0;
 $cmp = ($2|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($f)|0);
  $phitmp = ($call|0)==(0);
  $4 = (___fseeko_unlocked($f,$0,$1,$whence)|0);
  if ($phitmp) {
   $call17 = $4;
  } else {
   ___unlockfile($f);
   $call17 = $4;
  }
 } else {
  $3 = (___fseeko_unlocked($f,$0,$1,$whence)|0);
  $call17 = $3;
 }
 return ($call17|0);
}
function ___fseeko_unlocked($f,$0,$1,$whence) {
 $f = $f|0;
 $0 = $0|0;
 $1 = $1|0;
 $whence = $whence|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $and = 0, $cmp = 0, $cmp1 = 0, $rend = 0;
 var $rend15 = 0, $retval$0 = 0, $rpos = 0, $rpos16 = 0, $seek = 0, $sub$ptr$sub = 0, $tobool = 0, $wbase = 0, $wend = 0, $wpos = 0, $write = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($whence|0)==(1);
 if ($cmp) {
  $rend = ((($f)) + 8|0);
  $2 = HEAP32[$rend>>2]|0;
  $rpos = ((($f)) + 4|0);
  $3 = HEAP32[$rpos>>2]|0;
  $sub$ptr$sub = (($2) - ($3))|0;
  $4 = ($sub$ptr$sub|0)<(0);
  $5 = $4 << 31 >> 31;
  $6 = (_i64Subtract(($0|0),($1|0),($sub$ptr$sub|0),($5|0))|0);
  $7 = (getTempRet0() | 0);
  $13 = $6;$14 = $7;
 } else {
  $13 = $0;$14 = $1;
 }
 $wpos = ((($f)) + 20|0);
 $8 = HEAP32[$wpos>>2]|0;
 $wbase = ((($f)) + 28|0);
 $9 = HEAP32[$wbase>>2]|0;
 $cmp1 = ($8>>>0)>($9>>>0);
 if ($cmp1) {
  $write = ((($f)) + 36|0);
  $10 = HEAP32[$write>>2]|0;
  (FUNCTION_TABLE_iiii[$10 & 255]($f,0,0)|0);
  $11 = HEAP32[$wpos>>2]|0;
  $tobool = ($11|0)==(0|0);
  if ($tobool) {
   $retval$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $wend = ((($f)) + 16|0);
  HEAP32[$wend>>2] = 0;
  HEAP32[$wbase>>2] = 0;
  HEAP32[$wpos>>2] = 0;
  $seek = ((($f)) + 40|0);
  $12 = HEAP32[$seek>>2]|0;
  (FUNCTION_TABLE_iiiii[$12 & 31]($f,$13,$14,$whence)|0);
  $15 = (getTempRet0() | 0);
  $16 = ($15|0)<(0);
  if ($16) {
   $retval$0 = -1;
  } else {
   $rend15 = ((($f)) + 8|0);
   HEAP32[$rend15>>2] = 0;
   $rpos16 = ((($f)) + 4|0);
   HEAP32[$rpos16>>2] = 0;
   $17 = HEAP32[$f>>2]|0;
   $and = $17 & -17;
   HEAP32[$f>>2] = $and;
   $retval$0 = 0;
  }
 }
 return ($retval$0|0);
}
function _strstr($h,$n) {
 $h = $h|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $arrayidx10 = 0, $arrayidx15 = 0, $arrayidx19 = 0, $arrayidx2 = 0, $arrayidx24 = 0, $arrayidx28 = 0, $arrayidx6 = 0, $call = 0, $call13 = 0, $call22 = 0, $call31 = 0, $call33 = 0;
 var $conv = 0, $retval$0 = 0, $tobool = 0, $tobool1 = 0, $tobool11 = 0, $tobool16 = 0, $tobool20 = 0, $tobool25 = 0, $tobool29 = 0, $tobool3 = 0, $tobool7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$n>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 do {
  if ($tobool) {
   $retval$0 = $h;
  } else {
   $conv = $0 << 24 >> 24;
   $call = (_strchr($h,$conv)|0);
   $tobool1 = ($call|0)==(0|0);
   if ($tobool1) {
    $retval$0 = 0;
   } else {
    $arrayidx2 = ((($n)) + 1|0);
    $1 = HEAP8[$arrayidx2>>0]|0;
    $tobool3 = ($1<<24>>24)==(0);
    if ($tobool3) {
     $retval$0 = $call;
    } else {
     $arrayidx6 = ((($call)) + 1|0);
     $2 = HEAP8[$arrayidx6>>0]|0;
     $tobool7 = ($2<<24>>24)==(0);
     if ($tobool7) {
      $retval$0 = 0;
     } else {
      $arrayidx10 = ((($n)) + 2|0);
      $3 = HEAP8[$arrayidx10>>0]|0;
      $tobool11 = ($3<<24>>24)==(0);
      if ($tobool11) {
       $call13 = (_twobyte_strstr($call,$n)|0);
       $retval$0 = $call13;
       break;
      }
      $arrayidx15 = ((($call)) + 2|0);
      $4 = HEAP8[$arrayidx15>>0]|0;
      $tobool16 = ($4<<24>>24)==(0);
      if ($tobool16) {
       $retval$0 = 0;
      } else {
       $arrayidx19 = ((($n)) + 3|0);
       $5 = HEAP8[$arrayidx19>>0]|0;
       $tobool20 = ($5<<24>>24)==(0);
       if ($tobool20) {
        $call22 = (_threebyte_strstr($call,$n)|0);
        $retval$0 = $call22;
        break;
       }
       $arrayidx24 = ((($call)) + 3|0);
       $6 = HEAP8[$arrayidx24>>0]|0;
       $tobool25 = ($6<<24>>24)==(0);
       if ($tobool25) {
        $retval$0 = 0;
       } else {
        $arrayidx28 = ((($n)) + 4|0);
        $7 = HEAP8[$arrayidx28>>0]|0;
        $tobool29 = ($7<<24>>24)==(0);
        if ($tobool29) {
         $call31 = (_fourbyte_strstr($call,$n)|0);
         $retval$0 = $call31;
         break;
        } else {
         $call33 = (_twoway_strstr($call,$n)|0);
         $retval$0 = $call33;
         break;
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 return ($retval$0|0);
}
function _twobyte_strstr($h,$n) {
 $h = $h|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $add$ptr = 0, $arrayidx1 = 0, $arrayidx7 = 0, $cmp = 0, $conv = 0, $conv12 = 0, $conv18 = 0, $conv2 = 0, $conv5 = 0, $conv8 = 0, $h$addr$012 = 0, $hw$0$in13 = 0, $incdec$ptr17 = 0, $or = 0;
 var $or19 = 0, $or9 = 0, $shl = 0, $shl16 = 0, $shl6 = 0, $tobool = 0, $tobool11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$n>>0]|0;
 $conv = $0&255;
 $shl = $conv << 8;
 $arrayidx1 = ((($n)) + 1|0);
 $1 = HEAP8[$arrayidx1>>0]|0;
 $conv2 = $1&255;
 $or = $shl | $conv2;
 $arrayidx7 = ((($h)) + 1|0);
 $2 = HEAP8[$arrayidx7>>0]|0;
 $tobool11 = ($2<<24>>24)==(0);
 L1: do {
  if ($tobool11) {
   $5 = 0;
  } else {
   $3 = HEAP8[$h>>0]|0;
   $conv5 = $3&255;
   $shl6 = $conv5 << 8;
   $conv8 = $2&255;
   $or9 = $shl6 | $conv8;
   $h$addr$012 = $arrayidx7;$hw$0$in13 = $or9;
   while(1) {
    $conv12 = $hw$0$in13 & 65535;
    $cmp = ($conv12|0)==($or|0);
    if ($cmp) {
     break;
    }
    $shl16 = $conv12 << 8;
    $incdec$ptr17 = ((($h$addr$012)) + 1|0);
    $4 = HEAP8[$incdec$ptr17>>0]|0;
    $conv18 = $4&255;
    $or19 = $shl16 | $conv18;
    $tobool = ($4<<24>>24)==(0);
    if ($tobool) {
     $5 = 0;
     break L1;
    } else {
     $h$addr$012 = $incdec$ptr17;$hw$0$in13 = $or19;
    }
   }
   $add$ptr = ((($h$addr$012)) + -1|0);
   $5 = $add$ptr;
  }
 } while(0);
 return ($5|0);
}
function _threebyte_strstr($h,$n) {
 $h = $h|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add$ptr26 = 0, $arrayidx1 = 0, $arrayidx11 = 0, $arrayidx15 = 0, $arrayidx4 = 0, $cmp = 0, $cmp14 = 0, $cond = 0, $conv = 0, $conv12 = 0, $conv16 = 0, $conv2 = 0, $conv21 = 0;
 var $conv5 = 0, $conv9 = 0, $h$addr$0$lcssa = 0, $h$addr$016 = 0, $hw$017 = 0, $incdec$ptr = 0, $or = 0, $or$cond = 0, $or$cond15 = 0, $or14 = 0, $or18 = 0, $or22 = 0, $or7 = 0, $shl = 0, $shl10 = 0, $shl13 = 0, $shl17 = 0, $shl23 = 0, $shl3 = 0, $shl6 = 0;
 var $tobool = 0, $tobool$lcssa = 0, $tobool13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$n>>0]|0;
 $conv = $0&255;
 $shl = $conv << 24;
 $arrayidx1 = ((($n)) + 1|0);
 $1 = HEAP8[$arrayidx1>>0]|0;
 $conv2 = $1&255;
 $shl3 = $conv2 << 16;
 $or = $shl3 | $shl;
 $arrayidx4 = ((($n)) + 2|0);
 $2 = HEAP8[$arrayidx4>>0]|0;
 $conv5 = $2&255;
 $shl6 = $conv5 << 8;
 $or7 = $or | $shl6;
 $3 = HEAP8[$h>>0]|0;
 $conv9 = $3&255;
 $shl10 = $conv9 << 24;
 $arrayidx11 = ((($h)) + 1|0);
 $4 = HEAP8[$arrayidx11>>0]|0;
 $conv12 = $4&255;
 $shl13 = $conv12 << 16;
 $or14 = $shl13 | $shl10;
 $arrayidx15 = ((($h)) + 2|0);
 $5 = HEAP8[$arrayidx15>>0]|0;
 $conv16 = $5&255;
 $shl17 = $conv16 << 8;
 $or18 = $or14 | $shl17;
 $tobool13 = ($5<<24>>24)==(0);
 $cmp14 = ($or18|0)==($or7|0);
 $or$cond15 = $cmp14 | $tobool13;
 if ($or$cond15) {
  $h$addr$0$lcssa = $arrayidx15;$tobool$lcssa = $tobool13;
 } else {
  $h$addr$016 = $arrayidx15;$hw$017 = $or18;
  while(1) {
   $incdec$ptr = ((($h$addr$016)) + 1|0);
   $6 = HEAP8[$incdec$ptr>>0]|0;
   $conv21 = $6&255;
   $or22 = $hw$017 | $conv21;
   $shl23 = $or22 << 8;
   $tobool = ($6<<24>>24)==(0);
   $cmp = ($shl23|0)==($or7|0);
   $or$cond = $cmp | $tobool;
   if ($or$cond) {
    $h$addr$0$lcssa = $incdec$ptr;$tobool$lcssa = $tobool;
    break;
   } else {
    $h$addr$016 = $incdec$ptr;$hw$017 = $shl23;
   }
  }
 }
 $add$ptr26 = ((($h$addr$0$lcssa)) + -2|0);
 $cond = $tobool$lcssa ? 0 : $add$ptr26;
 return ($cond|0);
}
function _fourbyte_strstr($h,$n) {
 $h = $h|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $add$ptr32 = 0, $arrayidx1 = 0, $arrayidx14 = 0, $arrayidx18 = 0, $arrayidx22 = 0, $arrayidx4 = 0, $arrayidx8 = 0, $cmp = 0, $cmp16 = 0, $cond = 0, $conv = 0;
 var $conv12 = 0, $conv15 = 0, $conv19 = 0, $conv2 = 0, $conv23 = 0, $conv28 = 0, $conv5 = 0, $conv9 = 0, $h$addr$0$lcssa = 0, $h$addr$018 = 0, $hw$019 = 0, $incdec$ptr = 0, $or = 0, $or$cond = 0, $or$cond17 = 0, $or10 = 0, $or17 = 0, $or21 = 0, $or24 = 0, $or29 = 0;
 var $or7 = 0, $shl = 0, $shl13 = 0, $shl16 = 0, $shl20 = 0, $shl27 = 0, $shl3 = 0, $shl6 = 0, $tobool = 0, $tobool$lcssa = 0, $tobool15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$n>>0]|0;
 $conv = $0&255;
 $shl = $conv << 24;
 $arrayidx1 = ((($n)) + 1|0);
 $1 = HEAP8[$arrayidx1>>0]|0;
 $conv2 = $1&255;
 $shl3 = $conv2 << 16;
 $or = $shl3 | $shl;
 $arrayidx4 = ((($n)) + 2|0);
 $2 = HEAP8[$arrayidx4>>0]|0;
 $conv5 = $2&255;
 $shl6 = $conv5 << 8;
 $or7 = $or | $shl6;
 $arrayidx8 = ((($n)) + 3|0);
 $3 = HEAP8[$arrayidx8>>0]|0;
 $conv9 = $3&255;
 $or10 = $or7 | $conv9;
 $4 = HEAP8[$h>>0]|0;
 $conv12 = $4&255;
 $shl13 = $conv12 << 24;
 $arrayidx14 = ((($h)) + 1|0);
 $5 = HEAP8[$arrayidx14>>0]|0;
 $conv15 = $5&255;
 $shl16 = $conv15 << 16;
 $or17 = $shl16 | $shl13;
 $arrayidx18 = ((($h)) + 2|0);
 $6 = HEAP8[$arrayidx18>>0]|0;
 $conv19 = $6&255;
 $shl20 = $conv19 << 8;
 $or21 = $or17 | $shl20;
 $arrayidx22 = ((($h)) + 3|0);
 $7 = HEAP8[$arrayidx22>>0]|0;
 $conv23 = $7&255;
 $or24 = $or21 | $conv23;
 $tobool15 = ($7<<24>>24)==(0);
 $cmp16 = ($or24|0)==($or10|0);
 $or$cond17 = $cmp16 | $tobool15;
 if ($or$cond17) {
  $h$addr$0$lcssa = $arrayidx22;$tobool$lcssa = $tobool15;
 } else {
  $h$addr$018 = $arrayidx22;$hw$019 = $or24;
  while(1) {
   $shl27 = $hw$019 << 8;
   $incdec$ptr = ((($h$addr$018)) + 1|0);
   $8 = HEAP8[$incdec$ptr>>0]|0;
   $conv28 = $8&255;
   $or29 = $shl27 | $conv28;
   $tobool = ($8<<24>>24)==(0);
   $cmp = ($or29|0)==($or10|0);
   $or$cond = $cmp | $tobool;
   if ($or$cond) {
    $h$addr$0$lcssa = $incdec$ptr;$tobool$lcssa = $tobool;
    break;
   } else {
    $h$addr$018 = $incdec$ptr;$hw$019 = $or29;
   }
  }
 }
 $add$ptr32 = ((($h$addr$0$lcssa)) + -3|0);
 $cond = $tobool$lcssa ? 0 : $add$ptr32;
 return ($cond|0);
}
function _twoway_strstr($h,$n) {
 $h = $h|0;
 $n = $n|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add = 0;
 var $add$ptr = 0, $add$ptr119 = 0, $add$ptr150 = 0, $add13 = 0, $add13165 = 0, $add15 = 0, $add27 = 0, $add46 = 0, $add46157 = 0, $add50 = 0, $add62 = 0, $add83 = 0, $add84 = 0, $add90 = 0, $add99 = 0, $and = 0, $arrayidx = 0, $arrayidx1 = 0, $arrayidx10 = 0, $arrayidx124 = 0;
 var $arrayidx127 = 0, $arrayidx138 = 0, $arrayidx16 = 0, $arrayidx164 = 0, $arrayidx164146 = 0, $arrayidx170 = 0, $arrayidx19 = 0, $arrayidx191 = 0, $arrayidx194 = 0, $arrayidx51 = 0, $arrayidx54 = 0, $arrayidx8 = 0, $byteset = 0, $call = 0, $call108 = 0, $cmp = 0, $cmp104 = 0, $cmp114 = 0, $cmp145 = 0, $cmp156 = 0;
 var $cmp160 = 0, $cmp172 = 0, $cmp187 = 0, $cmp196 = 0, $cmp21 = 0, $cmp24 = 0, $cmp37 = 0, $cmp47 = 0, $cmp56 = 0, $cmp59 = 0, $cmp73 = 0, $cmp85 = 0, $cmp95 = 0, $cond162 = 0, $conv125 = 0, $conv5 = 0, $div = 0, $div126 = 0, $h$addr$0 = 0, $inc177 = 0;
 var $inc28 = 0, $inc42 = 0, $inc64 = 0, $inc79 = 0, $ip$0$lcssa179 = 0, $ip$0161 = 0, $ip$1 = 0, $ip$2$ip$0 = 0, $ip$2$ip$0$sub94 = 0, $ip$2$lcssa = 0, $ip$2153 = 0, $ip$3 = 0, $jp$0162 = 0, $jp$1 = 0, $jp$2154 = 0, $jp$3 = 0, $k$0163 = 0, $k$1 = 0, $k$2155 = 0, $k$3 = 0;
 var $k$4 = 0, $k$4$sink = 0, $k$5148 = 0, $k$6150 = 0, $l$0$lcssa176178 = 0, $l$0169 = 0, $mem$0 = 0, $mem$0$be = 0, $mem0$0 = 0, $or = 0, $or$cond = 0, $or$cond140 = 0, $or107 = 0, $p$0$lcssa180 = 0, $p$0164 = 0, $p$1 = 0, $p$2$lcssa = 0, $p$2$p$0 = 0, $p$2156 = 0, $p$3 = 0;
 var $p$5 = 0, $rem = 0, $rem131 = 0, $retval$3 = 0, $shift = 0, $shl = 0, $shl132 = 0, $sub = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$lhs$cast111 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $sub$ptr$sub113 = 0, $sub101 = 0, $sub123 = 0, $sub139 = 0, $sub148$pre$phiZ2D = 0, $sub182 = 0, $sub190 = 0, $sub77 = 0;
 var $sub93 = 0, $sub94 = 0, $tobool = 0, $tobool109 = 0, $tobool133 = 0, $tobool140 = 0, $tobool142 = 0, $tobool143 = 0, $tobool166 = 0, $tobool166147 = 0, $tobool168 = 0, $tobool3 = 0, $tobool91 = 0, $z$0 = 0, $z$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1056|0);
 $byteset = sp + 1024|0;
 $shift = sp;
 ;HEAP32[$byteset>>2]=0|0;HEAP32[$byteset+4>>2]=0|0;HEAP32[$byteset+8>>2]=0|0;HEAP32[$byteset+12>>2]=0|0;HEAP32[$byteset+16>>2]=0|0;HEAP32[$byteset+20>>2]=0|0;HEAP32[$byteset+24>>2]=0|0;HEAP32[$byteset+28>>2]=0|0;
 $0 = HEAP8[$n>>0]|0;
 $tobool168 = ($0<<24>>24)==(0);
 L1: do {
  if ($tobool168) {
   $ip$0$lcssa179 = -1;$ip$2$lcssa = -1;$l$0$lcssa176178 = 0;$p$0$lcssa180 = 1;$p$2$lcssa = 1;
   label = 25;
  } else {
   $2 = $0;$l$0169 = 0;
   while(1) {
    $arrayidx1 = (($h) + ($l$0169)|0);
    $1 = HEAP8[$arrayidx1>>0]|0;
    $tobool3 = ($1<<24>>24)==(0);
    if ($tobool3) {
     $retval$3 = 0;
     break L1;
    }
    $conv5 = $2&255;
    $rem = $conv5 & 31;
    $shl = 1 << $rem;
    $div = $conv5 >>> 5;
    $arrayidx8 = (($byteset) + ($div<<2)|0);
    $3 = HEAP32[$arrayidx8>>2]|0;
    $or = $3 | $shl;
    HEAP32[$arrayidx8>>2] = $or;
    $add = (($l$0169) + 1)|0;
    $arrayidx10 = (($shift) + ($conv5<<2)|0);
    HEAP32[$arrayidx10>>2] = $add;
    $arrayidx = (($n) + ($add)|0);
    $4 = HEAP8[$arrayidx>>0]|0;
    $tobool = ($4<<24>>24)==(0);
    if ($tobool) {
     break;
    } else {
     $2 = $4;$l$0169 = $add;
    }
   }
   $cmp160 = ($add>>>0)>(1);
   if ($cmp160) {
    $add13165 = 1;$ip$0161 = -1;$jp$0162 = 0;$k$0163 = 1;$p$0164 = 1;
    while(1) {
     $add15 = (($k$0163) + ($ip$0161))|0;
     $arrayidx16 = (($n) + ($add15)|0);
     $5 = HEAP8[$arrayidx16>>0]|0;
     $arrayidx19 = (($n) + ($add13165)|0);
     $6 = HEAP8[$arrayidx19>>0]|0;
     $cmp21 = ($5<<24>>24)==($6<<24>>24);
     do {
      if ($cmp21) {
       $cmp24 = ($k$0163|0)==($p$0164|0);
       if ($cmp24) {
        $add27 = (($p$0164) + ($jp$0162))|0;
        $ip$1 = $ip$0161;$jp$1 = $add27;$k$1 = 1;$p$1 = $p$0164;
        break;
       } else {
        $inc28 = (($k$0163) + 1)|0;
        $ip$1 = $ip$0161;$jp$1 = $jp$0162;$k$1 = $inc28;$p$1 = $p$0164;
        break;
       }
      } else {
       $cmp37 = ($5&255)>($6&255);
       if ($cmp37) {
        $sub = (($add13165) - ($ip$0161))|0;
        $ip$1 = $ip$0161;$jp$1 = $add13165;$k$1 = 1;$p$1 = $sub;
        break;
       } else {
        $inc42 = (($jp$0162) + 1)|0;
        $ip$1 = $jp$0162;$jp$1 = $inc42;$k$1 = 1;$p$1 = 1;
        break;
       }
      }
     } while(0);
     $add13 = (($k$1) + ($jp$1))|0;
     $cmp = ($add13>>>0)<($add>>>0);
     if ($cmp) {
      $add13165 = $add13;$ip$0161 = $ip$1;$jp$0162 = $jp$1;$k$0163 = $k$1;$p$0164 = $p$1;
     } else {
      break;
     }
    }
    if ($cmp160) {
     $add46157 = 1;$ip$2153 = -1;$jp$2154 = 0;$k$2155 = 1;$p$2156 = 1;
     while(1) {
      $add50 = (($k$2155) + ($ip$2153))|0;
      $arrayidx51 = (($n) + ($add50)|0);
      $7 = HEAP8[$arrayidx51>>0]|0;
      $arrayidx54 = (($n) + ($add46157)|0);
      $8 = HEAP8[$arrayidx54>>0]|0;
      $cmp56 = ($7<<24>>24)==($8<<24>>24);
      do {
       if ($cmp56) {
        $cmp59 = ($k$2155|0)==($p$2156|0);
        if ($cmp59) {
         $add62 = (($p$2156) + ($jp$2154))|0;
         $ip$3 = $ip$2153;$jp$3 = $add62;$k$3 = 1;$p$3 = $p$2156;
         break;
        } else {
         $inc64 = (($k$2155) + 1)|0;
         $ip$3 = $ip$2153;$jp$3 = $jp$2154;$k$3 = $inc64;$p$3 = $p$2156;
         break;
        }
       } else {
        $cmp73 = ($7&255)<($8&255);
        if ($cmp73) {
         $sub77 = (($add46157) - ($ip$2153))|0;
         $ip$3 = $ip$2153;$jp$3 = $add46157;$k$3 = 1;$p$3 = $sub77;
         break;
        } else {
         $inc79 = (($jp$2154) + 1)|0;
         $ip$3 = $jp$2154;$jp$3 = $inc79;$k$3 = 1;$p$3 = 1;
         break;
        }
       }
      } while(0);
      $add46 = (($k$3) + ($jp$3))|0;
      $cmp47 = ($add46>>>0)<($add>>>0);
      if ($cmp47) {
       $add46157 = $add46;$ip$2153 = $ip$3;$jp$2154 = $jp$3;$k$2155 = $k$3;$p$2156 = $p$3;
      } else {
       $ip$0$lcssa179 = $ip$1;$ip$2$lcssa = $ip$3;$l$0$lcssa176178 = $add;$p$0$lcssa180 = $p$1;$p$2$lcssa = $p$3;
       label = 25;
       break;
      }
     }
    } else {
     $ip$0$lcssa179 = $ip$1;$ip$2$lcssa = -1;$l$0$lcssa176178 = $add;$p$0$lcssa180 = $p$1;$p$2$lcssa = 1;
     label = 25;
    }
   } else {
    $ip$0$lcssa179 = -1;$ip$2$lcssa = -1;$l$0$lcssa176178 = $add;$p$0$lcssa180 = 1;$p$2$lcssa = 1;
    label = 25;
   }
  }
 } while(0);
 L34: do {
  if ((label|0) == 25) {
   $add83 = (($ip$2$lcssa) + 1)|0;
   $add84 = (($ip$0$lcssa179) + 1)|0;
   $cmp85 = ($add83>>>0)>($add84>>>0);
   $p$2$p$0 = $cmp85 ? $p$2$lcssa : $p$0$lcssa180;
   $ip$2$ip$0 = $cmp85 ? $ip$2$lcssa : $ip$0$lcssa179;
   $add$ptr = (($n) + ($p$2$p$0)|0);
   $add90 = (($ip$2$ip$0) + 1)|0;
   $call = (_memcmp($n,$add$ptr,$add90)|0);
   $tobool91 = ($call|0)==(0);
   if ($tobool91) {
    $sub101 = (($l$0$lcssa176178) - ($p$2$p$0))|0;
    $mem0$0 = $sub101;$p$5 = $p$2$p$0;$sub148$pre$phiZ2D = $sub101;
   } else {
    $sub93 = (($l$0$lcssa176178) - ($ip$2$ip$0))|0;
    $sub94 = (($sub93) + -1)|0;
    $cmp95 = ($ip$2$ip$0>>>0)>($sub94>>>0);
    $ip$2$ip$0$sub94 = $cmp95 ? $ip$2$ip$0 : $sub94;
    $add99 = (($ip$2$ip$0$sub94) + 1)|0;
    $$pre = (($l$0$lcssa176178) - ($add99))|0;
    $mem0$0 = 0;$p$5 = $add99;$sub148$pre$phiZ2D = $$pre;
   }
   $or107 = $l$0$lcssa176178 | 63;
   $sub123 = (($l$0$lcssa176178) + -1)|0;
   $tobool142 = ($mem0$0|0)!=(0);
   $h$addr$0 = $h;$mem$0 = 0;$z$0 = $h;
   while(1) {
    $sub$ptr$lhs$cast = $z$0;
    $sub$ptr$rhs$cast = $h$addr$0;
    $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
    $cmp104 = ($sub$ptr$sub>>>0)<($l$0$lcssa176178>>>0);
    do {
     if ($cmp104) {
      $call108 = (_memchr($z$0,0,$or107)|0);
      $tobool109 = ($call108|0)==(0|0);
      if ($tobool109) {
       $add$ptr119 = (($z$0) + ($or107)|0);
       $z$3 = $add$ptr119;
       break;
      } else {
       $sub$ptr$lhs$cast111 = $call108;
       $sub$ptr$sub113 = (($sub$ptr$lhs$cast111) - ($sub$ptr$rhs$cast))|0;
       $cmp114 = ($sub$ptr$sub113>>>0)<($l$0$lcssa176178>>>0);
       if ($cmp114) {
        $retval$3 = 0;
        break L34;
       } else {
        $z$3 = $call108;
        break;
       }
      }
     } else {
      $z$3 = $z$0;
     }
    } while(0);
    $arrayidx124 = (($h$addr$0) + ($sub123)|0);
    $9 = HEAP8[$arrayidx124>>0]|0;
    $conv125 = $9&255;
    $div126 = $conv125 >>> 5;
    $arrayidx127 = (($byteset) + ($div126<<2)|0);
    $10 = HEAP32[$arrayidx127>>2]|0;
    $rem131 = $conv125 & 31;
    $shl132 = 1 << $rem131;
    $and = $shl132 & $10;
    $tobool133 = ($and|0)==(0);
    L48: do {
     if ($tobool133) {
      $k$4$sink = $l$0$lcssa176178;$mem$0$be = 0;
     } else {
      $arrayidx138 = (($shift) + ($conv125<<2)|0);
      $11 = HEAP32[$arrayidx138>>2]|0;
      $sub139 = (($l$0$lcssa176178) - ($11))|0;
      $tobool140 = ($sub139|0)==(0);
      if (!($tobool140)) {
       $tobool143 = ($mem$0|0)!=(0);
       $or$cond = $tobool142 & $tobool143;
       $cmp145 = ($sub139>>>0)<($p$5>>>0);
       $or$cond140 = $or$cond & $cmp145;
       $k$4 = $or$cond140 ? $sub148$pre$phiZ2D : $sub139;
       $k$4$sink = $k$4;$mem$0$be = 0;
       break;
      }
      $cmp156 = ($add90>>>0)>($mem$0>>>0);
      $cond162 = $cmp156 ? $add90 : $mem$0;
      $arrayidx164146 = (($n) + ($cond162)|0);
      $12 = HEAP8[$arrayidx164146>>0]|0;
      $tobool166147 = ($12<<24>>24)==(0);
      L53: do {
       if (!($tobool166147)) {
        $14 = $12;$k$5148 = $cond162;
        while(1) {
         $arrayidx170 = (($h$addr$0) + ($k$5148)|0);
         $13 = HEAP8[$arrayidx170>>0]|0;
         $cmp172 = ($14<<24>>24)==($13<<24>>24);
         if (!($cmp172)) {
          break;
         }
         $inc177 = (($k$5148) + 1)|0;
         $arrayidx164 = (($n) + ($inc177)|0);
         $15 = HEAP8[$arrayidx164>>0]|0;
         $tobool166 = ($15<<24>>24)==(0);
         if ($tobool166) {
          break L53;
         } else {
          $14 = $15;$k$5148 = $inc177;
         }
        }
        $sub182 = (($k$5148) - ($ip$2$ip$0))|0;
        $k$4$sink = $sub182;$mem$0$be = 0;
        break L48;
       }
      } while(0);
      if (!($cmp156)) {
       $retval$3 = $h$addr$0;
       break L34;
      }
      $k$6150 = $add90;
      while(1) {
       $sub190 = (($k$6150) + -1)|0;
       $arrayidx191 = (($n) + ($sub190)|0);
       $16 = HEAP8[$arrayidx191>>0]|0;
       $arrayidx194 = (($h$addr$0) + ($sub190)|0);
       $17 = HEAP8[$arrayidx194>>0]|0;
       $cmp196 = ($16<<24>>24)==($17<<24>>24);
       if (!($cmp196)) {
        $k$4$sink = $p$5;$mem$0$be = $mem0$0;
        break L48;
       }
       $cmp187 = ($sub190>>>0)>($mem$0>>>0);
       if ($cmp187) {
        $k$6150 = $sub190;
       } else {
        $retval$3 = $h$addr$0;
        break L34;
       }
      }
     }
    } while(0);
    $add$ptr150 = (($h$addr$0) + ($k$4$sink)|0);
    $h$addr$0 = $add$ptr150;$mem$0 = $mem$0$be;$z$0 = $z$3;
   }
  }
 } while(0);
 STACKTOP = sp;return ($retval$3|0);
}
function _strncpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpncpy($d,$s,$n)|0);
 return ($d|0);
}
function ___stpncpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$pr = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $and13 = 0, $and14 = 0, $and2 = 0, $and247 = 0, $cmp = 0, $cmp10 = 0, $cmp1037 = 0, $d$addr$0$lcssa = 0, $d$addr$051 = 0, $d$addr$1 = 0, $d$addr$231 = 0;
 var $d$addr$3 = 0, $dec = 0, $dec32 = 0, $incdec$ptr = 0, $incdec$ptr20 = 0, $incdec$ptr21 = 0, $incdec$ptr33 = 0, $incdec$ptr34 = 0, $incdec$ptr5 = 0, $n$addr$0$lcssa = 0, $n$addr$053 = 0, $n$addr$1$lcssa = 0, $n$addr$138 = 0, $n$addr$2 = 0, $n$addr$333 = 0, $n$addr$4 = 0, $neg = 0, $or$cond = 0, $or$cond50 = 0, $s$addr$0$lcssa = 0;
 var $s$addr$052 = 0, $s$addr$1 = 0, $s$addr$232 = 0, $sub = 0, $sub19 = 0, $tobool = 0, $tobool15 = 0, $tobool25 = 0, $tobool2530 = 0, $tobool28 = 0, $tobool3 = 0, $tobool3$lcssa = 0, $tobool349 = 0, $tobool4 = 0, $tobool48 = 0, $tobool7 = 0, $wd$0$lcssa = 0, $wd$039 = 0, $ws$0$lcssa = 0, $ws$040 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $d;
 $2 = $0 ^ $1;
 $3 = $2 & 3;
 $cmp = ($3|0)==(0);
 L1: do {
  if ($cmp) {
   $and247 = $0 & 3;
   $tobool48 = ($and247|0)!=(0);
   $tobool349 = ($n|0)!=(0);
   $or$cond50 = $tobool349 & $tobool48;
   if ($or$cond50) {
    $d$addr$051 = $d;$n$addr$053 = $n;$s$addr$052 = $s;
    while(1) {
     $4 = HEAP8[$s$addr$052>>0]|0;
     HEAP8[$d$addr$051>>0] = $4;
     $tobool4 = ($4<<24>>24)==(0);
     if ($tobool4) {
      $d$addr$3 = $d$addr$051;$n$addr$4 = $n$addr$053;
      break L1;
     }
     $dec = (($n$addr$053) + -1)|0;
     $incdec$ptr = ((($s$addr$052)) + 1|0);
     $incdec$ptr5 = ((($d$addr$051)) + 1|0);
     $5 = $incdec$ptr;
     $and2 = $5 & 3;
     $tobool = ($and2|0)!=(0);
     $tobool3 = ($dec|0)!=(0);
     $or$cond = $tobool3 & $tobool;
     if ($or$cond) {
      $d$addr$051 = $incdec$ptr5;$n$addr$053 = $dec;$s$addr$052 = $incdec$ptr;
     } else {
      $d$addr$0$lcssa = $incdec$ptr5;$n$addr$0$lcssa = $dec;$s$addr$0$lcssa = $incdec$ptr;$tobool3$lcssa = $tobool3;
      break;
     }
    }
   } else {
    $d$addr$0$lcssa = $d;$n$addr$0$lcssa = $n;$s$addr$0$lcssa = $s;$tobool3$lcssa = $tobool349;
   }
   if ($tobool3$lcssa) {
    $$pr = HEAP8[$s$addr$0$lcssa>>0]|0;
    $tobool7 = ($$pr<<24>>24)==(0);
    if ($tobool7) {
     $d$addr$3 = $d$addr$0$lcssa;$n$addr$4 = $n$addr$0$lcssa;
    } else {
     $cmp1037 = ($n$addr$0$lcssa>>>0)>(3);
     L11: do {
      if ($cmp1037) {
       $n$addr$138 = $n$addr$0$lcssa;$wd$039 = $d$addr$0$lcssa;$ws$040 = $s$addr$0$lcssa;
       while(1) {
        $6 = HEAP32[$ws$040>>2]|0;
        $sub = (($6) + -16843009)|0;
        $neg = $6 & -2139062144;
        $and13 = $neg ^ -2139062144;
        $and14 = $and13 & $sub;
        $tobool15 = ($and14|0)==(0);
        if (!($tobool15)) {
         $n$addr$1$lcssa = $n$addr$138;$wd$0$lcssa = $wd$039;$ws$0$lcssa = $ws$040;
         break L11;
        }
        HEAP32[$wd$039>>2] = $6;
        $sub19 = (($n$addr$138) + -4)|0;
        $incdec$ptr20 = ((($ws$040)) + 4|0);
        $incdec$ptr21 = ((($wd$039)) + 4|0);
        $cmp10 = ($sub19>>>0)>(3);
        if ($cmp10) {
         $n$addr$138 = $sub19;$wd$039 = $incdec$ptr21;$ws$040 = $incdec$ptr20;
        } else {
         $n$addr$1$lcssa = $sub19;$wd$0$lcssa = $incdec$ptr21;$ws$0$lcssa = $incdec$ptr20;
         break;
        }
       }
      } else {
       $n$addr$1$lcssa = $n$addr$0$lcssa;$wd$0$lcssa = $d$addr$0$lcssa;$ws$0$lcssa = $s$addr$0$lcssa;
      }
     } while(0);
     $d$addr$1 = $wd$0$lcssa;$n$addr$2 = $n$addr$1$lcssa;$s$addr$1 = $ws$0$lcssa;
     label = 13;
    }
   } else {
    $d$addr$3 = $d$addr$0$lcssa;$n$addr$4 = 0;
   }
  } else {
   $d$addr$1 = $d;$n$addr$2 = $n;$s$addr$1 = $s;
   label = 13;
  }
 } while(0);
 L17: do {
  if ((label|0) == 13) {
   $tobool2530 = ($n$addr$2|0)==(0);
   if ($tobool2530) {
    $d$addr$3 = $d$addr$1;$n$addr$4 = 0;
   } else {
    $d$addr$231 = $d$addr$1;$n$addr$333 = $n$addr$2;$s$addr$232 = $s$addr$1;
    while(1) {
     $7 = HEAP8[$s$addr$232>>0]|0;
     HEAP8[$d$addr$231>>0] = $7;
     $tobool28 = ($7<<24>>24)==(0);
     if ($tobool28) {
      $d$addr$3 = $d$addr$231;$n$addr$4 = $n$addr$333;
      break L17;
     }
     $dec32 = (($n$addr$333) + -1)|0;
     $incdec$ptr33 = ((($s$addr$232)) + 1|0);
     $incdec$ptr34 = ((($d$addr$231)) + 1|0);
     $tobool25 = ($dec32|0)==(0);
     if ($tobool25) {
      $d$addr$3 = $incdec$ptr34;$n$addr$4 = 0;
      break;
     } else {
      $d$addr$231 = $incdec$ptr34;$n$addr$333 = $dec32;$s$addr$232 = $incdec$ptr33;
     }
    }
   }
  }
 } while(0);
 (_memset(($d$addr$3|0),0,($n$addr$4|0))|0);
 return ($d$addr$3|0);
}
function ___ftello($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $cmp = 0, $lock = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($f)|0);
  $phitmp = ($call|0)==(0);
  $3 = (___ftello_unlocked($f)|0);
  $4 = (getTempRet0() | 0);
  if ($phitmp) {
   $5 = $4;$6 = $3;
  } else {
   ___unlockfile($f);
   $5 = $4;$6 = $3;
  }
 } else {
  $1 = (___ftello_unlocked($f)|0);
  $2 = (getTempRet0() | 0);
  $5 = $2;$6 = $1;
 }
 setTempRet0(($5) | 0);
 return ($6|0);
}
function ___ftello_unlocked($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $and = 0, $cmp = 0, $phitmp = 0, $rend = 0, $rpos = 0, $seek = 0, $sub$ptr$sub = 0, $sub$ptr$sub6 = 0, $tobool = 0, $wbase = 0, $wbase3 = 0, $wpos = 0, $wpos2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $seek = ((($f)) + 40|0);
 $0 = HEAP32[$seek>>2]|0;
 $1 = HEAP32[$f>>2]|0;
 $and = $1 & 128;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $4 = 1;
 } else {
  $wpos = ((($f)) + 20|0);
  $2 = HEAP32[$wpos>>2]|0;
  $wbase = ((($f)) + 28|0);
  $3 = HEAP32[$wbase>>2]|0;
  $cmp = ($2>>>0)>($3>>>0);
  $phitmp = $cmp ? 2 : 1;
  $4 = $phitmp;
 }
 $5 = (FUNCTION_TABLE_iiiii[$0 & 31]($f,0,0,$4)|0);
 $6 = (getTempRet0() | 0);
 $7 = ($6|0)<(0);
 if ($7) {
  $20 = $6;$21 = $5;
 } else {
  $rend = ((($f)) + 8|0);
  $8 = HEAP32[$rend>>2]|0;
  $rpos = ((($f)) + 4|0);
  $9 = HEAP32[$rpos>>2]|0;
  $sub$ptr$sub = (($8) - ($9))|0;
  $10 = ($sub$ptr$sub|0)<(0);
  $11 = $10 << 31 >> 31;
  $12 = (_i64Subtract(($5|0),($6|0),($sub$ptr$sub|0),($11|0))|0);
  $13 = (getTempRet0() | 0);
  $wpos2 = ((($f)) + 20|0);
  $14 = HEAP32[$wpos2>>2]|0;
  $wbase3 = ((($f)) + 28|0);
  $15 = HEAP32[$wbase3>>2]|0;
  $sub$ptr$sub6 = (($14) - ($15))|0;
  $16 = ($sub$ptr$sub6|0)<(0);
  $17 = $16 << 31 >> 31;
  $18 = (_i64Add(($12|0),($13|0),($sub$ptr$sub6|0),($17|0))|0);
  $19 = (getTempRet0() | 0);
  $20 = $19;$21 = $18;
 }
 setTempRet0(($20) | 0);
 return ($21|0);
}
function _fputc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call = 0, $call10 = 0, $call28 = 0, $cmp = 0, $cmp15 = 0, $cmp20 = 0, $cmp3 = 0, $cmp5 = 0, $cond30 = 0, $conv = 0, $conv1 = 0, $conv11 = 0, $conv12 = 0;
 var $conv14 = 0, $conv2 = 0, $incdec$ptr = 0, $incdec$ptr25 = 0, $lbf = 0, $lbf13 = 0, $lock = 0, $retval$0 = 0, $tobool = 0, $wend = 0, $wend19 = 0, $wpos = 0, $wpos18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)<(0);
 if ($cmp) {
  label = 3;
 } else {
  $call = (___lockfile($f)|0);
  $tobool = ($call|0)==(0);
  if ($tobool) {
   label = 3;
  } else {
   $conv11 = $c&255;
   $conv12 = $c & 255;
   $lbf13 = ((($f)) + 75|0);
   $4 = HEAP8[$lbf13>>0]|0;
   $conv14 = $4 << 24 >> 24;
   $cmp15 = ($conv12|0)==($conv14|0);
   if ($cmp15) {
    label = 10;
   } else {
    $wpos18 = ((($f)) + 20|0);
    $5 = HEAP32[$wpos18>>2]|0;
    $wend19 = ((($f)) + 16|0);
    $6 = HEAP32[$wend19>>2]|0;
    $cmp20 = ($5>>>0)<($6>>>0);
    if ($cmp20) {
     $incdec$ptr25 = ((($5)) + 1|0);
     HEAP32[$wpos18>>2] = $incdec$ptr25;
     HEAP8[$5>>0] = $conv11;
     $cond30 = $conv12;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $call28 = (___overflow($f,$c)|0);
    $cond30 = $call28;
   }
   ___unlockfile($f);
   $retval$0 = $cond30;
  }
 }
 do {
  if ((label|0) == 3) {
   $conv = $c&255;
   $conv1 = $c & 255;
   $lbf = ((($f)) + 75|0);
   $1 = HEAP8[$lbf>>0]|0;
   $conv2 = $1 << 24 >> 24;
   $cmp3 = ($conv1|0)==($conv2|0);
   if (!($cmp3)) {
    $wpos = ((($f)) + 20|0);
    $2 = HEAP32[$wpos>>2]|0;
    $wend = ((($f)) + 16|0);
    $3 = HEAP32[$wend>>2]|0;
    $cmp5 = ($2>>>0)<($3>>>0);
    if ($cmp5) {
     $incdec$ptr = ((($2)) + 1|0);
     HEAP32[$wpos>>2] = $incdec$ptr;
     HEAP8[$2>>0] = $conv;
     $retval$0 = $conv1;
     break;
    }
   }
   $call10 = (___overflow($f,$c)|0);
   $retval$0 = $call10;
  }
 } while(0);
 return ($retval$0|0);
}
function _fread($destv,$size,$nmemb,$f) {
 $destv = $destv|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $add$ptr = 0, $add$ptr26 = 0, $add$ptr46 = 0, $call = 0, $call30 = 0, $call34 = 0, $cmp = 0, $cmp12 = 0, $cmp37 = 0, $cmp4 = 0, $cond = 0, $conv = 0;
 var $conv3 = 0, $dest$0 = 0, $dest$146 = 0, $div = 0, $l$0 = 0, $l$147 = 0, $lock = 0, $mode = 0, $mul = 0, $or = 0, $read = 0, $rend = 0, $retval$0 = 0, $rpos = 0, $spec$select = 0, $sub = 0, $sub$ptr$sub = 0, $sub$ptr$sub$mul = 0, $sub27 = 0, $sub43 = 0;
 var $sub45 = 0, $tobool = 0, $tobool29 = 0, $tobool2945 = 0, $tobool31 = 0, $tobool40 = 0, $tobool47 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mul = Math_imul($nmemb, $size)|0;
 $tobool = ($size|0)==(0);
 $spec$select = $tobool ? 0 : $nmemb;
 $lock = ((($f)) + 76|0);
 $0 = HEAP32[$lock>>2]|0;
 $cmp = ($0|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($f)|0);
  $cond = $call;
 } else {
  $cond = 0;
 }
 $mode = ((($f)) + 74|0);
 $1 = HEAP8[$mode>>0]|0;
 $conv = $1 << 24 >> 24;
 $sub = (($conv) + 255)|0;
 $or = $sub | $conv;
 $conv3 = $or&255;
 HEAP8[$mode>>0] = $conv3;
 $rend = ((($f)) + 8|0);
 $2 = HEAP32[$rend>>2]|0;
 $rpos = ((($f)) + 4|0);
 $3 = HEAP32[$rpos>>2]|0;
 $sub$ptr$sub = (($2) - ($3))|0;
 $cmp4 = ($sub$ptr$sub|0)>(0);
 if ($cmp4) {
  $4 = $3;
  $cmp12 = ($sub$ptr$sub>>>0)<($mul>>>0);
  $sub$ptr$sub$mul = $cmp12 ? $sub$ptr$sub : $mul;
  (_memcpy(($destv|0),($4|0),($sub$ptr$sub$mul|0))|0);
  $5 = HEAP32[$rpos>>2]|0;
  $add$ptr = (($5) + ($sub$ptr$sub$mul)|0);
  HEAP32[$rpos>>2] = $add$ptr;
  $add$ptr26 = (($destv) + ($sub$ptr$sub$mul)|0);
  $sub27 = (($mul) - ($sub$ptr$sub$mul))|0;
  $dest$0 = $add$ptr26;$l$0 = $sub27;
 } else {
  $dest$0 = $destv;$l$0 = $mul;
 }
 $tobool2945 = ($l$0|0)==(0);
 L7: do {
  if ($tobool2945) {
   label = 13;
  } else {
   $read = ((($f)) + 32|0);
   $dest$146 = $dest$0;$l$147 = $l$0;
   while(1) {
    $call30 = (___toread($f)|0);
    $tobool31 = ($call30|0)==(0);
    if (!($tobool31)) {
     break;
    }
    $6 = HEAP32[$read>>2]|0;
    $call34 = (FUNCTION_TABLE_iiii[$6 & 255]($f,$dest$146,$l$147)|0);
    $add = (($call34) + 1)|0;
    $cmp37 = ($add>>>0)<(2);
    if ($cmp37) {
     break;
    }
    $sub45 = (($l$147) - ($call34))|0;
    $add$ptr46 = (($dest$146) + ($call34)|0);
    $tobool29 = ($sub45|0)==(0);
    if ($tobool29) {
     label = 13;
     break L7;
    } else {
     $dest$146 = $add$ptr46;$l$147 = $sub45;
    }
   }
   $tobool40 = ($cond|0)==(0);
   if (!($tobool40)) {
    ___unlockfile($f);
   }
   $sub43 = (($mul) - ($l$147))|0;
   $div = (($sub43>>>0) / ($size>>>0))&-1;
   $retval$0 = $div;
  }
 } while(0);
 if ((label|0) == 13) {
  $tobool47 = ($cond|0)==(0);
  if ($tobool47) {
   $retval$0 = $spec$select;
  } else {
   ___unlockfile($f);
   $retval$0 = $spec$select;
  }
 }
 return ($retval$0|0);
}
function _ftell($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $call1 = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___ftello($f)|0);
 $1 = (getTempRet0() | 0);
 $2 = ($1|0)>(0);
 $3 = ($0>>>0)>(2147483647);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $call1 = (___errno_location()|0);
  HEAP32[$call1>>2] = 61;
  $retval$0 = -1;
 } else {
  $retval$0 = $0;
 }
 return ($retval$0|0);
}
function _puts($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $call1 = 0, $call10 = 0, $call10$lobit = 0, $cmp = 0, $cmp2 = 0, $cmp3 = 0, $cmp5 = 0, $cond = 0, $incdec$ptr = 0, $lbf = 0, $lock = 0, $tobool = 0, $wend = 0;
 var $wpos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[946]|0;
 $lock = ((($0)) + 76|0);
 $1 = HEAP32[$lock>>2]|0;
 $cmp = ($1|0)>(-1);
 if ($cmp) {
  $call = (___lockfile($0)|0);
  $cond = $call;
 } else {
  $cond = 0;
 }
 $call1 = (_fputs($s,$0)|0);
 $cmp2 = ($call1|0)<(0);
 do {
  if ($cmp2) {
   $5 = -1;
  } else {
   $lbf = ((($0)) + 75|0);
   $2 = HEAP8[$lbf>>0]|0;
   $cmp3 = ($2<<24>>24)==(10);
   if (!($cmp3)) {
    $wpos = ((($0)) + 20|0);
    $3 = HEAP32[$wpos>>2]|0;
    $wend = ((($0)) + 16|0);
    $4 = HEAP32[$wend>>2]|0;
    $cmp5 = ($3>>>0)<($4>>>0);
    if ($cmp5) {
     $incdec$ptr = ((($3)) + 1|0);
     HEAP32[$wpos>>2] = $incdec$ptr;
     HEAP8[$3>>0] = 10;
     $5 = 0;
     break;
    }
   }
   $call10 = (___overflow($0,10)|0);
   $call10$lobit = $call10 >> 31;
   $5 = $call10$lobit;
  }
 } while(0);
 $tobool = ($cond|0)==(0);
 if (!($tobool)) {
  ___unlockfile($0);
 }
 return ($5|0);
}
function __ZL28demangling_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__type_name$i = 0, $add$ptr = 0, $buf = 0, $call = 0, $call13 = 0;
 var $call17 = 0, $call4 = 0, $call9 = 0, $cmp10 = 0, $cond = 0, $len = 0, $name$0 = 0, $primaryException = 0, $status = 0, $thrown_object = 0, $tobool = 0, $tobool1 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vfn = 0;
 var $vfn16 = 0, $vtable = 0, $vtable15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1072|0);
 $vararg_buffer10 = sp + 1056|0;
 $vararg_buffer7 = sp + 1048|0;
 $vararg_buffer3 = sp + 1040|0;
 $vararg_buffer = sp + 1024|0;
 $thrown_object = sp + 1068|0;
 $status = sp + 1064|0;
 $buf = sp;
 $len = sp + 1060|0;
 $call = (___cxa_get_globals_fast()|0);
 $tobool = ($call|0)==(0|0);
 if (!($tobool)) {
  $0 = HEAP32[$call>>2]|0;
  $tobool1 = ($0|0)==(0|0);
  if (!($tobool1)) {
   $add$ptr = ((($0)) + 80|0);
   $1 = ((($0)) + 48|0);
   $call4 = (__ZN10__cxxabiv121__isOurExceptionClassEPK17_Unwind_Exception($1)|0);
   if (!($call4)) {
    HEAP32[$vararg_buffer7>>2] = 23067;
    _abort_message(23017,$vararg_buffer7);
    // unreachable;
   }
   $2 = (__ZN10__cxxabiv119__getExceptionClassEPK17_Unwind_Exception($1)|0);
   $3 = (getTempRet0() | 0);
   $4 = ($2|0)==(1126902529);
   $5 = ($3|0)==(1129074247);
   $6 = $4 & $5;
   if ($6) {
    $primaryException = ((($0)) + 44|0);
    $7 = HEAP32[$primaryException>>2]|0;
    $cond = $7;
   } else {
    $cond = $add$ptr;
   }
   HEAP32[$thrown_object>>2] = $cond;
   $8 = HEAP32[$0>>2]|0;
   HEAP32[$len>>2] = 1024;
   $__type_name$i = ((($8)) + 4|0);
   $9 = HEAP32[$__type_name$i>>2]|0;
   $call9 = (___cxa_demangle($9,$buf,$len,$status)|0);
   $10 = HEAP32[$status>>2]|0;
   $cmp10 = ($10|0)==(0);
   if ($cmp10) {
    $name$0 = $call9;
   } else {
    $11 = HEAP32[$__type_name$i>>2]|0;
    $name$0 = $11;
   }
   $vtable = HEAP32[568]|0;
   $vfn = ((($vtable)) + 16|0);
   $12 = HEAP32[$vfn>>2]|0;
   $call13 = (FUNCTION_TABLE_iiii[$12 & 255](2272,$8,$thrown_object)|0);
   if ($call13) {
    $13 = HEAP32[$thrown_object>>2]|0;
    $vtable15 = HEAP32[$13>>2]|0;
    $vfn16 = ((($vtable15)) + 8|0);
    $14 = HEAP32[$vfn16>>2]|0;
    $call17 = (FUNCTION_TABLE_ii[$14 & 255]($13)|0);
    HEAP32[$vararg_buffer>>2] = 23067;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $name$0;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $call17;
    _abort_message(22931,$vararg_buffer);
    // unreachable;
   } else {
    HEAP32[$vararg_buffer3>>2] = 23067;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $name$0;
    _abort_message(22976,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(23055,$vararg_buffer10);
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (34792|0);
}
function __ZN10__cxxabiv121__isOurExceptionClassEPK17_Unwind_Exception($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZN10__cxxabiv119__getExceptionClassEPK17_Unwind_Exception($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 setTempRet0((0) | 0);
 return 0;
}
function ___cxa_demangle($MangledName,$Buf,$N,$Status) {
 $MangledName = $MangledName|0;
 $Buf = $Buf|0;
 $N = $N|0;
 $Status = $Status|0;
 var $Buf$addr$0 = 0, $InternalStatus$0 = 0, $Parser = 0, $S = 0, $add$ptr = 0, $call = 0, $call14 = 0, $call16 = 0, $call5 = 0, $call8 = 0, $cmp = 0, $cmp1 = 0, $cmp2 = 0, $cmp22 = 0, $cmp6 = 0, $cond = 0, $or$cond = 0, $retval$0 = 0, $tobool = 0, $tobool19 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4496|0);
 $Parser = sp;
 $S = sp + 4472|0;
 $cmp = ($MangledName|0)==(0|0);
 if ($cmp) {
  label = 3;
 } else {
  $cmp1 = ($Buf|0)!=(0|0);
  $cmp2 = ($N|0)==(0|0);
  $or$cond = $cmp1 & $cmp2;
  if ($or$cond) {
   label = 3;
  } else {
   $call = (_strlen($MangledName)|0);
   $add$ptr = (($MangledName) + ($call)|0);
   __ZN12_GLOBAL__N_116itanium_demangle14ManglingParserINS_16DefaultAllocatorEECI2NS0_22AbstractManglingParserIS3_S2_EEEPKcS6_($Parser,$MangledName,$add$ptr);
   __ZN12_GLOBAL__N_112OutputStreamC2Ev($S);
   $call5 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E5parseEv($Parser)|0);
   $cmp6 = ($call5|0)==(0|0);
   if ($cmp6) {
    $Buf$addr$0 = $Buf;$InternalStatus$0 = -2;
   } else {
    $call8 = (__ZN12_GLOBAL__N_122initializeOutputStreamEPcPmRNS_12OutputStreamEm($Buf,$N,$S)|0);
    if ($call8) {
     __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($call5,$S);
     __ZN12_GLOBAL__N_112OutputStreampLEc($S,0);
     if (!($cmp2)) {
      $call14 = (__ZNK12_GLOBAL__N_112OutputStream18getCurrentPositionEv($S)|0);
      HEAP32[$N>>2] = $call14;
     }
     $call16 = (__ZN12_GLOBAL__N_112OutputStream9getBufferEv($S)|0);
     $Buf$addr$0 = $call16;$InternalStatus$0 = 0;
    } else {
     $Buf$addr$0 = $Buf;$InternalStatus$0 = -1;
    }
   }
   $tobool19 = ($Status|0)==(0|0);
   if (!($tobool19)) {
    HEAP32[$Status>>2] = $InternalStatus$0;
   }
   $cmp22 = ($InternalStatus$0|0)==(0);
   $cond = $cmp22 ? $Buf$addr$0 : 0;
   __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_ED2Ev($Parser);
   $retval$0 = $cond;
  }
 }
 if ((label|0) == 3) {
  $tobool = ($Status|0)==(0|0);
  if ($tobool) {
   $retval$0 = 0;
  } else {
   HEAP32[$Status>>2] = -3;
   $retval$0 = 0;
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function _abort_message($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $list = sp;
 HEAP32[$list>>2] = $varargs;
 $0 = HEAP32[945]|0;
 (_vfprintf($0,$format,$list)|0);
 (_fputc(10,$0)|0);
 _abort();
 // unreachable;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $call = 0, $cmp = 0, $cmp6 = 0, $dst_ptr_leading_to_static_ptr = 0, $info = 0, $number_of_dst_type = 0, $path_dst_ptr_to_static_ptr = 0, $retval$0 = 0, $retval$2 = 0, $src2dst_offset = 0, $static_ptr = 0, $static_type = 0, $vfn = 0, $vtable = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $info = sp;
 $call = (__ZL8is_equalPKSt9type_infoS1_b($this,$thrown_type,0)|0);
 if ($call) {
  $retval$2 = 1;
 } else {
  $0 = ($thrown_type|0)==(0|0);
  if ($0) {
   $retval$2 = 0;
  } else {
   $1 = (___dynamic_cast($thrown_type,2296,2280,0)|0);
   $cmp = ($1|0)==(0|0);
   if ($cmp) {
    $retval$2 = 0;
   } else {
    HEAP32[$info>>2] = $1;
    $static_ptr = ((($info)) + 4|0);
    HEAP32[$static_ptr>>2] = 0;
    $static_type = ((($info)) + 8|0);
    HEAP32[$static_type>>2] = $this;
    $src2dst_offset = ((($info)) + 12|0);
    HEAP32[$src2dst_offset>>2] = -1;
    $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
    $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
    $number_of_dst_type = ((($info)) + 48|0);
    dest=$dst_ptr_leading_to_static_ptr; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$dst_ptr_leading_to_static_ptr+36>>1]=0|0;HEAP8[$dst_ptr_leading_to_static_ptr+38>>0]=0|0;
    HEAP32[$number_of_dst_type>>2] = 1;
    $vtable = HEAP32[$1>>2]|0;
    $vfn = ((($vtable)) + 28|0);
    $2 = HEAP32[$vfn>>2]|0;
    $3 = HEAP32[$adjustedPtr>>2]|0;
    FUNCTION_TABLE_viiii[$2 & 63]($1,$info,$3,1);
    $4 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
    $cmp6 = ($4|0)==(1);
    if ($cmp6) {
     $5 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
     HEAP32[$adjustedPtr>>2] = $5;
     $retval$0 = 1;
    } else {
     $retval$0 = 0;
    }
    $retval$2 = $retval$0;
   }
  }
 }
 STACKTOP = sp;return ($retval$2|0);
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $call = 0, $static_type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZL8is_equalPKSt9type_infoS1_b($this,$0,$use_strcmp)|0);
 if ($call) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $call = 0, $call3 = 0, $cmp = 0, $cmp12 = 0, $cmp13 = 0, $cmp5 = 0, $cmp7 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0, $is_dst_type_derived_from_static_type = 0, $number_to_dst_ptr = 0, $number_to_static_ptr = 0;
 var $path_dst_ptr_to_static_ptr = 0, $path_dynamic_ptr_to_dst_ptr = 0, $path_dynamic_ptr_to_dst_ptr10 = 0, $search_done = 0, $static_type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZL8is_equalPKSt9type_infoS1_b($this,$0,$use_strcmp)|0);
 do {
  if ($call) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$info,$current_ptr,$path_below);
  } else {
   $1 = HEAP32[$info>>2]|0;
   $call3 = (__ZL8is_equalPKSt9type_infoS1_b($this,$1,$use_strcmp)|0);
   if ($call3) {
    $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
    $2 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
    $cmp = ($2|0)==($current_ptr|0);
    if (!($cmp)) {
     $dst_ptr_not_leading_to_static_ptr = ((($info)) + 20|0);
     $3 = HEAP32[$dst_ptr_not_leading_to_static_ptr>>2]|0;
     $cmp5 = ($3|0)==($current_ptr|0);
     if (!($cmp5)) {
      $path_dynamic_ptr_to_dst_ptr10 = ((($info)) + 32|0);
      HEAP32[$path_dynamic_ptr_to_dst_ptr10>>2] = $path_below;
      HEAP32[$dst_ptr_not_leading_to_static_ptr>>2] = $current_ptr;
      $number_to_dst_ptr = ((($info)) + 40|0);
      $4 = HEAP32[$number_to_dst_ptr>>2]|0;
      $add = (($4) + 1)|0;
      HEAP32[$number_to_dst_ptr>>2] = $add;
      $number_to_static_ptr = ((($info)) + 36|0);
      $5 = HEAP32[$number_to_static_ptr>>2]|0;
      $cmp12 = ($5|0)==(1);
      if ($cmp12) {
       $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
       $6 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
       $cmp13 = ($6|0)==(2);
       if ($cmp13) {
        $search_done = ((($info)) + 54|0);
        HEAP8[$search_done>>0] = 1;
       }
      }
      $is_dst_type_derived_from_static_type = ((($info)) + 44|0);
      HEAP32[$is_dst_type_derived_from_static_type>>2] = 4;
      break;
     }
    }
    $cmp7 = ($path_below|0)==(1);
    if ($cmp7) {
     $path_dynamic_ptr_to_dst_ptr = ((($info)) + 32|0);
     HEAP32[$path_dynamic_ptr_to_dst_ptr>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $call = 0, $static_type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZL8is_equalPKSt9type_infoS1_b($this,$0,0)|0);
 if ($call) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZL8is_equalPKSt9type_infoS1_b($x,$y,$use_strcmp) {
 $x = $x|0;
 $y = $y|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $__type_name$i = 0, $__type_name$i2 = 0, $call2 = 0, $cmp = 0, $cmp3 = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if ($use_strcmp) {
  $__type_name$i = ((($x)) + 4|0);
  $0 = HEAP32[$__type_name$i>>2]|0;
  $__type_name$i2 = ((($y)) + 4|0);
  $1 = HEAP32[$__type_name$i2>>2]|0;
  $call2 = (_strcmp($0,$1)|0);
  $cmp3 = ($call2|0)==(0);
  $retval$0 = $cmp3;
 } else {
  $cmp = ($x|0)==($y|0);
  $retval$0 = $cmp;
 }
 return ($retval$0|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $add = 0, $cmp = 0, $cmp4 = 0, $cmp7 = 0, $dst_ptr_leading_to_static_ptr = 0, $number_to_static_ptr = 0, $number_to_static_ptr11 = 0, $path_dst_ptr_to_static_ptr = 0, $path_dst_ptr_to_static_ptr12 = 0, $path_dst_ptr_to_static_ptr6 = 0, $search_done = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
 $0 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
 $cmp = ($0|0)==(0|0);
 do {
  if ($cmp) {
   HEAP32[$dst_ptr_leading_to_static_ptr>>2] = $adjustedPtr;
   $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
   HEAP32[$path_dst_ptr_to_static_ptr>>2] = $path_below;
   $number_to_static_ptr = ((($info)) + 36|0);
   HEAP32[$number_to_static_ptr>>2] = 1;
  } else {
   $cmp4 = ($0|0)==($adjustedPtr|0);
   if (!($cmp4)) {
    $number_to_static_ptr11 = ((($info)) + 36|0);
    $2 = HEAP32[$number_to_static_ptr11>>2]|0;
    $add = (($2) + 1)|0;
    HEAP32[$number_to_static_ptr11>>2] = $add;
    $path_dst_ptr_to_static_ptr12 = ((($info)) + 24|0);
    HEAP32[$path_dst_ptr_to_static_ptr12>>2] = 2;
    $search_done = ((($info)) + 54|0);
    HEAP8[$search_done>>0] = 1;
    break;
   }
   $path_dst_ptr_to_static_ptr6 = ((($info)) + 24|0);
   $1 = HEAP32[$path_dst_ptr_to_static_ptr6>>2]|0;
   $cmp7 = ($1|0)==(2);
   if ($cmp7) {
    HEAP32[$path_dst_ptr_to_static_ptr6>>2] = $path_below;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($this,$info,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $cmp = 0, $cmp2 = 0, $path_dynamic_ptr_to_static_ptr = 0, $static_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_ptr = ((($info)) + 4|0);
 $0 = HEAP32[$static_ptr>>2]|0;
 $cmp = ($0|0)==($current_ptr|0);
 if ($cmp) {
  $path_dynamic_ptr_to_static_ptr = ((($info)) + 28|0);
  $1 = HEAP32[$path_dynamic_ptr_to_static_ptr>>2]|0;
  $cmp2 = ($1|0)==(1);
  if (!($cmp2)) {
   HEAP32[$path_dynamic_ptr_to_static_ptr>>2] = $path_below;
  }
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $add = 0, $cmp = 0, $cmp10 = 0, $cmp13 = 0, $cmp18 = 0, $cmp2 = 0, $cmp21 = 0, $cmp5 = 0, $cmp7 = 0, $dst_ptr_leading_to_static_ptr = 0, $found_any_static_type = 0, $found_our_static_ptr = 0, $number_of_dst_type = 0;
 var $number_of_dst_type17 = 0, $number_to_static_ptr = 0, $number_to_static_ptr26 = 0, $or$cond = 0, $or$cond19 = 0, $path_dst_ptr_to_static_ptr = 0, $path_dst_ptr_to_static_ptr12 = 0, $search_done = 0, $search_done23 = 0, $search_done27 = 0, $static_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $found_any_static_type = ((($info)) + 53|0);
 HEAP8[$found_any_static_type>>0] = 1;
 $static_ptr = ((($info)) + 4|0);
 $0 = HEAP32[$static_ptr>>2]|0;
 $cmp = ($0|0)==($current_ptr|0);
 do {
  if ($cmp) {
   $found_our_static_ptr = ((($info)) + 52|0);
   HEAP8[$found_our_static_ptr>>0] = 1;
   $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
   $1 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
   $cmp2 = ($1|0)==(0|0);
   if ($cmp2) {
    HEAP32[$dst_ptr_leading_to_static_ptr>>2] = $dst_ptr;
    $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
    HEAP32[$path_dst_ptr_to_static_ptr>>2] = $path_below;
    $number_to_static_ptr = ((($info)) + 36|0);
    HEAP32[$number_to_static_ptr>>2] = 1;
    $number_of_dst_type = ((($info)) + 48|0);
    $2 = HEAP32[$number_of_dst_type>>2]|0;
    $cmp5 = ($2|0)==(1);
    $cmp7 = ($path_below|0)==(1);
    $or$cond = $cmp7 & $cmp5;
    if (!($or$cond)) {
     break;
    }
    $search_done = ((($info)) + 54|0);
    HEAP8[$search_done>>0] = 1;
    break;
   }
   $cmp10 = ($1|0)==($dst_ptr|0);
   if (!($cmp10)) {
    $number_to_static_ptr26 = ((($info)) + 36|0);
    $6 = HEAP32[$number_to_static_ptr26>>2]|0;
    $add = (($6) + 1)|0;
    HEAP32[$number_to_static_ptr26>>2] = $add;
    $search_done27 = ((($info)) + 54|0);
    HEAP8[$search_done27>>0] = 1;
    break;
   }
   $path_dst_ptr_to_static_ptr12 = ((($info)) + 24|0);
   $3 = HEAP32[$path_dst_ptr_to_static_ptr12>>2]|0;
   $cmp13 = ($3|0)==(2);
   if ($cmp13) {
    HEAP32[$path_dst_ptr_to_static_ptr12>>2] = $path_below;
    $5 = $path_below;
   } else {
    $5 = $3;
   }
   $number_of_dst_type17 = ((($info)) + 48|0);
   $4 = HEAP32[$number_of_dst_type17>>2]|0;
   $cmp18 = ($4|0)==(1);
   $cmp21 = ($5|0)==(1);
   $or$cond19 = $cmp18 & $cmp21;
   if ($or$cond19) {
    $search_done23 = ((($info)) + 54|0);
    HEAP8[$search_done23>>0] = 1;
   }
  }
 } while(0);
 return;
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $add$ptr = 0, $arrayidx = 0, $arrayidx1 = 0, $call = 0;
 var $cmp = 0, $cmp14 = 0, $cmp16 = 0, $cmp19 = 0, $cmp25 = 0, $cmp27 = 0, $cmp30 = 0, $cmp33 = 0, $dst_ptr$0 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0, $info = 0, $number_of_dst_type = 0, $number_to_dst_ptr = 0, $number_to_static_ptr = 0, $or$cond = 0, $or$cond15 = 0, $or$cond16 = 0, $or$cond17 = 0, $path_dst_ptr_to_static_ptr = 0;
 var $path_dynamic_ptr_to_dst_ptr = 0, $path_dynamic_ptr_to_static_ptr = 0, $spec$select = 0, $spec$select18 = 0, $src2dst_offset5 = 0, $static_ptr3 = 0, $static_type4 = 0, $vfn = 0, $vfn11 = 0, $vtable10 = 0, $vtable7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $arrayidx = ((($0)) + -8|0);
 $1 = HEAP32[$arrayidx>>2]|0;
 $add$ptr = (($static_ptr) + ($1)|0);
 $arrayidx1 = ((($0)) + -4|0);
 $2 = HEAP32[$arrayidx1>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $static_ptr3 = ((($info)) + 4|0);
 HEAP32[$static_ptr3>>2] = $static_ptr;
 $static_type4 = ((($info)) + 8|0);
 HEAP32[$static_type4>>2] = $static_type;
 $src2dst_offset5 = ((($info)) + 12|0);
 HEAP32[$src2dst_offset5>>2] = $src2dst_offset;
 $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
 $dst_ptr_not_leading_to_static_ptr = ((($info)) + 20|0);
 $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
 $path_dynamic_ptr_to_static_ptr = ((($info)) + 28|0);
 $path_dynamic_ptr_to_dst_ptr = ((($info)) + 32|0);
 $number_to_dst_ptr = ((($info)) + 40|0);
 dest=$dst_ptr_leading_to_static_ptr; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$dst_ptr_leading_to_static_ptr+36>>1]=0|0;HEAP8[$dst_ptr_leading_to_static_ptr+38>>0]=0|0;
 $call = (__ZL8is_equalPKSt9type_infoS1_b($2,$dst_type,0)|0);
 L1: do {
  if ($call) {
   $number_of_dst_type = ((($info)) + 48|0);
   HEAP32[$number_of_dst_type>>2] = 1;
   $vtable7 = HEAP32[$2>>2]|0;
   $vfn = ((($vtable7)) + 20|0);
   $3 = HEAP32[$vfn>>2]|0;
   FUNCTION_TABLE_viiiiii[$3 & 63]($2,$info,$add$ptr,$add$ptr,1,0);
   $4 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
   $cmp = ($4|0)==(1);
   $spec$select = $cmp ? $add$ptr : 0;
   $dst_ptr$0 = $spec$select;
  } else {
   $number_to_static_ptr = ((($info)) + 36|0);
   $vtable10 = HEAP32[$2>>2]|0;
   $vfn11 = ((($vtable10)) + 24|0);
   $5 = HEAP32[$vfn11>>2]|0;
   FUNCTION_TABLE_viiiii[$5 & 63]($2,$info,$add$ptr,1,0);
   $6 = HEAP32[$number_to_static_ptr>>2]|0;
   switch ($6|0) {
   case 0:  {
    $7 = HEAP32[$number_to_dst_ptr>>2]|0;
    $cmp14 = ($7|0)==(1);
    $8 = HEAP32[$path_dynamic_ptr_to_static_ptr>>2]|0;
    $cmp16 = ($8|0)==(1);
    $or$cond = $cmp14 & $cmp16;
    $9 = HEAP32[$path_dynamic_ptr_to_dst_ptr>>2]|0;
    $cmp19 = ($9|0)==(1);
    $or$cond15 = $or$cond & $cmp19;
    $10 = HEAP32[$dst_ptr_not_leading_to_static_ptr>>2]|0;
    $spec$select18 = $or$cond15 ? $10 : 0;
    $dst_ptr$0 = $spec$select18;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $dst_ptr$0 = 0;
    break L1;
   }
   }
   $11 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
   $cmp25 = ($11|0)==(1);
   if (!($cmp25)) {
    $12 = HEAP32[$number_to_dst_ptr>>2]|0;
    $cmp27 = ($12|0)==(0);
    $13 = HEAP32[$path_dynamic_ptr_to_static_ptr>>2]|0;
    $cmp30 = ($13|0)==(1);
    $or$cond16 = $cmp27 & $cmp30;
    $14 = HEAP32[$path_dynamic_ptr_to_dst_ptr>>2]|0;
    $cmp33 = ($14|0)==(1);
    $or$cond17 = $or$cond16 & $cmp33;
    if (!($or$cond17)) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $15 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
   $dst_ptr$0 = $15;
  }
 } while(0);
 STACKTOP = sp;return ($dst_ptr$0|0);
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $__base_type = 0, $call = 0, $static_type = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZL8is_equalPKSt9type_infoS1_b($this,$0,$use_strcmp)|0);
 if ($call) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $__base_type = ((($this)) + 8|0);
  $1 = HEAP32[$__base_type>>2]|0;
  $vtable = HEAP32[$1>>2]|0;
  $vfn = ((($vtable)) + 20|0);
  $2 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_viiiiii[$2 & 63]($1,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 }
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__base_type = 0, $__base_type40 = 0, $add = 0, $call = 0, $call3 = 0, $cmp = 0;
 var $cmp11 = 0, $cmp33 = 0, $cmp34 = 0, $cmp5 = 0, $cmp7 = 0, $dst_ptr_leading_to_static_ptr = 0, $dst_ptr_not_leading_to_static_ptr = 0, $found_any_static_type = 0, $found_our_static_ptr = 0, $is_dst_type_derived_from_static_type = 0, $number_to_dst_ptr = 0, $number_to_static_ptr = 0, $path_dst_ptr_to_static_ptr = 0, $path_dynamic_ptr_to_dst_ptr = 0, $path_dynamic_ptr_to_dst_ptr10 = 0, $search_done = 0, $static_type = 0, $tobool16 = 0, $tobool19 = 0, $vfn = 0;
 var $vfn42 = 0, $vtable = 0, $vtable41 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZL8is_equalPKSt9type_infoS1_b($this,$0,$use_strcmp)|0);
 L1: do {
  if ($call) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0,$info,$current_ptr,$path_below);
  } else {
   $1 = HEAP32[$info>>2]|0;
   $call3 = (__ZL8is_equalPKSt9type_infoS1_b($this,$1,$use_strcmp)|0);
   if (!($call3)) {
    $__base_type40 = ((($this)) + 8|0);
    $12 = HEAP32[$__base_type40>>2]|0;
    $vtable41 = HEAP32[$12>>2]|0;
    $vfn42 = ((($vtable41)) + 24|0);
    $13 = HEAP32[$vfn42>>2]|0;
    FUNCTION_TABLE_viiiii[$13 & 63]($12,$info,$current_ptr,$path_below,$use_strcmp);
    break;
   }
   $dst_ptr_leading_to_static_ptr = ((($info)) + 16|0);
   $2 = HEAP32[$dst_ptr_leading_to_static_ptr>>2]|0;
   $cmp = ($2|0)==($current_ptr|0);
   if (!($cmp)) {
    $dst_ptr_not_leading_to_static_ptr = ((($info)) + 20|0);
    $3 = HEAP32[$dst_ptr_not_leading_to_static_ptr>>2]|0;
    $cmp5 = ($3|0)==($current_ptr|0);
    if (!($cmp5)) {
     $path_dynamic_ptr_to_dst_ptr10 = ((($info)) + 32|0);
     HEAP32[$path_dynamic_ptr_to_dst_ptr10>>2] = $path_below;
     $is_dst_type_derived_from_static_type = ((($info)) + 44|0);
     $4 = HEAP32[$is_dst_type_derived_from_static_type>>2]|0;
     $cmp11 = ($4|0)==(4);
     do {
      if (!($cmp11)) {
       $found_our_static_ptr = ((($info)) + 52|0);
       HEAP8[$found_our_static_ptr>>0] = 0;
       $found_any_static_type = ((($info)) + 53|0);
       HEAP8[$found_any_static_type>>0] = 0;
       $__base_type = ((($this)) + 8|0);
       $5 = HEAP32[$__base_type>>2]|0;
       $vtable = HEAP32[$5>>2]|0;
       $vfn = ((($vtable)) + 20|0);
       $6 = HEAP32[$vfn>>2]|0;
       FUNCTION_TABLE_viiiiii[$6 & 63]($5,$info,$current_ptr,$current_ptr,1,$use_strcmp);
       $7 = HEAP8[$found_any_static_type>>0]|0;
       $tobool16 = ($7<<24>>24)==(0);
       if ($tobool16) {
        HEAP32[$is_dst_type_derived_from_static_type>>2] = 4;
        break;
       } else {
        $8 = HEAP8[$found_our_static_ptr>>0]|0;
        $tobool19 = ($8<<24>>24)==(0);
        HEAP32[$is_dst_type_derived_from_static_type>>2] = 3;
        if ($tobool19) {
         break;
        } else {
         break L1;
        }
       }
      }
     } while(0);
     HEAP32[$dst_ptr_not_leading_to_static_ptr>>2] = $current_ptr;
     $number_to_dst_ptr = ((($info)) + 40|0);
     $9 = HEAP32[$number_to_dst_ptr>>2]|0;
     $add = (($9) + 1)|0;
     HEAP32[$number_to_dst_ptr>>2] = $add;
     $number_to_static_ptr = ((($info)) + 36|0);
     $10 = HEAP32[$number_to_static_ptr>>2]|0;
     $cmp33 = ($10|0)==(1);
     if (!($cmp33)) {
      break;
     }
     $path_dst_ptr_to_static_ptr = ((($info)) + 24|0);
     $11 = HEAP32[$path_dst_ptr_to_static_ptr>>2]|0;
     $cmp34 = ($11|0)==(2);
     if (!($cmp34)) {
      break;
     }
     $search_done = ((($info)) + 54|0);
     HEAP8[$search_done>>0] = 1;
     break;
    }
   }
   $cmp7 = ($path_below|0)==(1);
   if ($cmp7) {
    $path_dynamic_ptr_to_dst_ptr = ((($info)) + 32|0);
    HEAP32[$path_dynamic_ptr_to_dst_ptr>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $__base_type = 0, $call = 0, $static_type = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $static_type = ((($info)) + 8|0);
 $0 = HEAP32[$static_type>>2]|0;
 $call = (__ZL8is_equalPKSt9type_infoS1_b($this,$0,0)|0);
 if ($call) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 } else {
  $__base_type = ((($this)) + 8|0);
  $1 = HEAP32[$__base_type>>2]|0;
  $vtable = HEAP32[$1>>2]|0;
  $vfn = ((($vtable)) + 28|0);
  $2 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_viiii[$2 & 63]($1,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle14ManglingParserINS_16DefaultAllocatorEECI2NS0_22AbstractManglingParserIS3_S2_EEEPKcS6_($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_EC2EPKcS7_($this,$0,$1);
 return;
}
function __ZN12_GLOBAL__N_112OutputStreamC2Ev($this) {
 $this = $this|0;
 var $CurrentPackIndex = 0, $CurrentPackMax = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $CurrentPackIndex = ((($this)) + 12|0);
 HEAP32[$CurrentPackIndex>>2] = -1;
 $CurrentPackMax = ((($this)) + 16|0);
 HEAP32[$CurrentPackMax>>2] = -1;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E5parseEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $Encoding = 0, $Encoding20 = 0, $Last = 0, $Last37 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp17 = 0, $agg$tmp17$byval_copy = 0, $agg$tmp24 = 0, $agg$tmp24$byval_copy = 0, $call = 0, $call12 = 0, $call18 = 0, $call2 = 0;
 var $call21 = 0, $call22 = 0, $call25 = 0, $call28 = 0, $call3 = 0, $call30 = 0, $call33 = 0, $call40 = 0, $call44 = 0, $call48 = 0, $call49 = 0, $call49$ = 0, $call5 = 0, $call50 = 0, $call8 = 0, $cmp = 0, $cmp13 = 0, $cmp23 = 0, $cmp35 = 0, $cmp41 = 0;
 var $cmp51 = 0, $cmp6 = 0, $ref$tmp = 0, $ref$tmp29 = 0, $retval$0 = 0, $retval$2 = 0, $retval$4 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $agg$tmp24$byval_copy = sp + 72|0;
 $agg$tmp17$byval_copy = sp + 64|0;
 $agg$tmp$byval_copy = sp + 56|0;
 $agg$tmp = sp + 48|0;
 $Encoding = sp + 40|0;
 $ref$tmp = sp + 32|0;
 $agg$tmp17 = sp + 24|0;
 $Encoding20 = sp + 16|0;
 $agg$tmp24 = sp + 8|0;
 $ref$tmp29 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,23246);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp$byval_copy)|0);
 do {
  if ($call) {
   $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv($call2)|0);
   HEAP32[$Encoding>>2] = $call3;
   $cmp = ($call3|0)==(0|0);
   if ($cmp) {
    $retval$0 = 0;
   } else {
    $call5 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
    $cmp6 = ($call5<<24>>24)==(46);
    if ($cmp6) {
     $0 = HEAP32[$this>>2]|0;
     $Last = ((($this)) + 4|0);
     $1 = HEAP32[$Last>>2]|0;
     __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($ref$tmp,$0,$1);
     $call8 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9DotSuffixEJRPNS0_4NodeENS_10StringViewEEEES9_DpOT0_($this,$Encoding,$ref$tmp)|0);
     HEAP32[$Encoding>>2] = $call8;
     $2 = HEAP32[$Last>>2]|0;
     HEAP32[$this>>2] = $2;
     $3 = $call8;
    } else {
     $3 = $call3;
    }
    $call12 = (__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this)|0);
    $cmp13 = ($call12|0)==(0);
    $spec$select = $cmp13 ? $3 : 0;
    $retval$0 = $spec$select;
   }
   $retval$4 = $retval$0;
  } else {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp17,23249);
   ;HEAP32[$agg$tmp17$byval_copy>>2]=HEAP32[$agg$tmp17>>2]|0;HEAP32[$agg$tmp17$byval_copy+4>>2]=HEAP32[$agg$tmp17+4>>2]|0;
   $call18 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp17$byval_copy)|0);
   if (!($call18)) {
    $call48 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call49 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call48)|0);
    $call50 = (__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this)|0);
    $cmp51 = ($call50|0)==(0);
    $call49$ = $cmp51 ? $call49 : 0;
    $retval$4 = $call49$;
    break;
   }
   $call21 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call22 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv($call21)|0);
   HEAP32[$Encoding20>>2] = $call22;
   $cmp23 = ($call22|0)==(0|0);
   if ($cmp23) {
    $retval$2 = 0;
   } else {
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp24,23254);
    ;HEAP32[$agg$tmp24$byval_copy>>2]=HEAP32[$agg$tmp24>>2]|0;HEAP32[$agg$tmp24$byval_copy+4>>2]=HEAP32[$agg$tmp24+4>>2]|0;
    $call25 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp24$byval_copy)|0);
    if ($call25) {
     $call28 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
     __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($ref$tmp29,$this,0);
     $call30 = (__ZNK12_GLOBAL__N_110StringView5emptyEv($ref$tmp29)|0);
     $4 = $call28 & $call30;
     if ($4) {
      $retval$2 = 0;
     } else {
      $call33 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
      $cmp35 = ($call33<<24>>24)==(46);
      if ($cmp35) {
       $Last37 = ((($this)) + 4|0);
       $5 = HEAP32[$Last37>>2]|0;
       HEAP32[$this>>2] = $5;
      }
      $call40 = (__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this)|0);
      $cmp41 = ($call40|0)==(0);
      if ($cmp41) {
       $call44 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA34_KcRPNS0_4NodeEEEESC_DpOT0_($this,23268,$Encoding20)|0);
       $retval$2 = $call44;
      } else {
       $retval$2 = 0;
      }
     }
    } else {
     $retval$2 = 0;
    }
   }
   $retval$4 = $retval$2;
  }
 } while(0);
 STACKTOP = sp;return ($retval$4|0);
}
function __ZN12_GLOBAL__N_122initializeOutputStreamEPcPmRNS_12OutputStreamEm($Buf,$N,$S) {
 $Buf = $Buf|0;
 $N = $N|0;
 $S = $S|0;
 var $0 = 0, $Buf$addr$0 = 0, $BufferSize$0 = 0, $call = 0, $cmp = 0, $cmp1 = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($Buf|0)==(0|0);
 if ($cmp) {
  $call = (_malloc(1024)|0);
  $cmp1 = ($call|0)==(0|0);
  if ($cmp1) {
   $retval$0 = 0;
  } else {
   $Buf$addr$0 = $call;$BufferSize$0 = 1024;
   label = 4;
  }
 } else {
  $0 = HEAP32[$N>>2]|0;
  $Buf$addr$0 = $Buf;$BufferSize$0 = $0;
  label = 4;
 }
 if ((label|0) == 4) {
  __ZN12_GLOBAL__N_112OutputStream5resetEPcm($S,$Buf$addr$0,$BufferSize$0);
  $retval$0 = 1;
 }
 return ($retval$0|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $2 = 0, $RHSComponentCache = 0, $cmp = 0, $vfn = 0, $vfn3 = 0, $vtable = 0, $vtable2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $vtable = HEAP32[$this>>2]|0;
 $vfn = ((($vtable)) + 16|0);
 $0 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vii[$0 & 255]($this,$S);
 $RHSComponentCache = ((($this)) + 5|0);
 $1 = HEAP8[$RHSComponentCache>>0]|0;
 $cmp = ($1<<24>>24)==(1);
 if (!($cmp)) {
  $vtable2 = HEAP32[$this>>2]|0;
  $vfn3 = ((($vtable2)) + 20|0);
  $2 = HEAP32[$vfn3>>2]|0;
  FUNCTION_TABLE_vii[$2 & 255]($this,$S);
 }
 return;
}
function __ZN12_GLOBAL__N_112OutputStreampLEc($this,$C) {
 $this = $this|0;
 $C = $C|0;
 var $0 = 0, $1 = 0, $CurrentPosition = 0, $arrayidx = 0, $inc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_112OutputStream4growEm($this,1);
 $0 = HEAP32[$this>>2]|0;
 $CurrentPosition = ((($this)) + 4|0);
 $1 = HEAP32[$CurrentPosition>>2]|0;
 $inc = (($1) + 1)|0;
 HEAP32[$CurrentPosition>>2] = $inc;
 $arrayidx = (($0) + ($1)|0);
 HEAP8[$arrayidx>>0] = $C;
 return;
}
function __ZNK12_GLOBAL__N_112OutputStream18getCurrentPositionEv($this) {
 $this = $this|0;
 var $0 = 0, $CurrentPosition = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $CurrentPosition = ((($this)) + 4|0);
 $0 = HEAP32[$CurrentPosition>>2]|0;
 return ($0|0);
}
function __ZN12_GLOBAL__N_112OutputStream9getBufferEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 return ($0|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_ED2Ev($this) {
 $this = $this|0;
 var $ASTAllocator = 0, $ForwardTemplateRefs = 0, $Names = 0, $Subs = 0, $TemplateParams = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 __ZN12_GLOBAL__N_116DefaultAllocatorD2Ev($ASTAllocator);
 $ForwardTemplateRefs = ((($this)) + 332|0);
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EED2Ev($ForwardTemplateRefs);
 $TemplateParams = ((($this)) + 288|0);
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EED2Ev($TemplateParams);
 $Subs = ((($this)) + 148|0);
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EED2Ev($Subs);
 $Names = ((($this)) + 8|0);
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EED2Ev($Names);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocatorD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_120BumpPointerAllocatorD2Ev($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE8isInlineEv($this)|0);
 if (!($call)) {
  $0 = HEAP32[$this>>2]|0;
  _free($0);
 }
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE8isInlineEv($this)|0);
 if (!($call)) {
  $0 = HEAP32[$this>>2]|0;
  _free($0);
 }
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE8isInlineEv($this)|0);
 if (!($call)) {
  $0 = HEAP32[$this>>2]|0;
  _free($0);
 }
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE8isInlineEv($this) {
 $this = $this|0;
 var $0 = 0, $arraydecay = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $arraydecay = ((($this)) + 12|0);
 $cmp = ($0|0)==($arraydecay|0);
 return ($cmp|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE8isInlineEv($this) {
 $this = $this|0;
 var $0 = 0, $arraydecay = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $arraydecay = ((($this)) + 12|0);
 $cmp = ($0|0)==($arraydecay|0);
 return ($cmp|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE8isInlineEv($this) {
 $this = $this|0;
 var $0 = 0, $arraydecay = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $arraydecay = ((($this)) + 12|0);
 $cmp = ($0|0)==($arraydecay|0);
 return ($cmp|0);
}
function __ZN12_GLOBAL__N_120BumpPointerAllocatorD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_120BumpPointerAllocator5resetEv($this);
 return;
}
function __ZN12_GLOBAL__N_120BumpPointerAllocator5resetEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $BlockList = 0, $Current = 0, $cmp = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $BlockList = ((($this)) + 4096|0);
 while(1) {
  $0 = HEAP32[$BlockList>>2]|0;
  $tobool = ($0|0)==(0|0);
  if ($tobool) {
   break;
  }
  $1 = HEAP32[$0>>2]|0;
  HEAP32[$BlockList>>2] = $1;
  $cmp = ($this|0)==($0|0);
  if (!($cmp)) {
   _free($0);
  }
 }
 HEAP32[$this>>2] = 0;
 $Current = ((($this)) + 4|0);
 HEAP32[$Current>>2] = 0;
 HEAP32[$BlockList>>2] = $this;
 return;
}
function __ZN12_GLOBAL__N_112OutputStream4growEm($this,$N) {
 $this = $this|0;
 $N = $N|0;
 var $0 = 0, $1 = 0, $2 = 0, $BufferCapacity = 0, $CurrentPosition = 0, $add = 0, $call = 0, $cmp = 0, $cmp14 = 0, $cmp6 = 0, $mul = 0, $spec$store$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $CurrentPosition = ((($this)) + 4|0);
 $0 = HEAP32[$CurrentPosition>>2]|0;
 $add = (($0) + ($N))|0;
 $BufferCapacity = ((($this)) + 8|0);
 $1 = HEAP32[$BufferCapacity>>2]|0;
 $cmp = ($add>>>0)<($1>>>0);
 if (!($cmp)) {
  $mul = $1 << 1;
  $cmp6 = ($mul>>>0)<($add>>>0);
  $spec$store$select = $cmp6 ? $add : $mul;
  HEAP32[$BufferCapacity>>2] = $spec$store$select;
  $2 = HEAP32[$this>>2]|0;
  $call = (_realloc($2,$spec$store$select)|0);
  HEAP32[$this>>2] = $call;
  $cmp14 = ($call|0)==(0|0);
  if ($cmp14) {
   __ZSt9terminatev();
   // unreachable;
  }
 }
 return;
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $call4 = 0, $call8 = 0, $terminateHandler = 0, $tobool = 0, $tobool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___cxa_get_globals_fast()|0);
 $tobool = ($call|0)==(0|0);
 if (!($tobool)) {
  $0 = HEAP32[$call>>2]|0;
  $tobool1 = ($0|0)==(0|0);
  if (!($tobool1)) {
   $1 = ((($0)) + 48|0);
   $call4 = (__ZN10__cxxabiv121__isOurExceptionClassEPK17_Unwind_Exception($1)|0);
   if ($call4) {
    $terminateHandler = ((($0)) + 12|0);
    $2 = HEAP32[$terminateHandler>>2]|0;
    __ZSt11__terminatePFvvE($2);
    // unreachable;
   }
  }
 }
 $call8 = (__ZSt13get_terminatev()|0);
 __ZSt11__terminatePFvvE($call8);
 // unreachable;
}
function __ZSt11__terminatePFvvE($func) {
 $func = $func|0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 FUNCTION_TABLE_v[$func & 255]();
 _abort_message(23206,$vararg_buffer);
 // unreachable;
}
function __ZSt13get_terminatev() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (238|0);
}
function __ZN12_GLOBAL__N_112OutputStream5resetEPcm($this,$Buffer_,$BufferCapacity_) {
 $this = $this|0;
 $Buffer_ = $Buffer_|0;
 $BufferCapacity_ = $BufferCapacity_|0;
 var $BufferCapacity = 0, $CurrentPosition = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $CurrentPosition = ((($this)) + 4|0);
 HEAP32[$CurrentPosition>>2] = 0;
 HEAP32[$this>>2] = $Buffer_;
 $BufferCapacity = ((($this)) + 8|0);
 HEAP32[$BufferCapacity>>2] = $BufferCapacity_;
 return;
}
function __ZN12_GLOBAL__N_110StringViewC2EPKc($this,$Str) {
 $this = $this|0;
 $Str = $Str|0;
 var $Last = 0, $add$ptr = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = $Str;
 $Last = ((($this)) + 4|0);
 $call = (_strlen($Str)|0);
 $add$ptr = (($Str) + ($call)|0);
 HEAP32[$Last>>2] = $add$ptr;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Last = 0, $add$ptr = 0, $agg$tmp = 0, $call = 0, $call2 = 0, $ref$tmp = 0, $retval$0 = 0;
 var $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmpcast$byval_copy = sp + 16|0;
 $ref$tmp = sp + 8|0;
 $agg$tmp = sp;
 $0 = HEAP32[$this>>2]|0;
 $Last = ((($this)) + 4|0);
 $1 = HEAP32[$Last>>2]|0;
 __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($ref$tmp,$0,$1);
 $2 = $S;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = $agg$tmp;
 $9 = $8;
 HEAP32[$9>>2] = $4;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $7;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 $call = (__ZNK12_GLOBAL__N_110StringView10startsWithES0_($ref$tmp,$tmpcast$byval_copy)|0);
 if ($call) {
  $call2 = (__ZNK12_GLOBAL__N_110StringView4sizeEv($S)|0);
  $12 = HEAP32[$this>>2]|0;
  $add$ptr = (($12) + ($call2)|0);
  HEAP32[$this>>2] = $add$ptr;
  $retval$0 = 1;
 } else {
  $retval$0 = 0;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($this|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $Arg = 0, $Attrs = 0, $CVQualifiers = 0, $CVQualifiers63 = 0, $EndsWithTemplateArgs = 0, $IsEndOfEncoding = 0, $Name = 0, $NameInfo = 0, $Names = 0, $Names49 = 0, $ReferenceQualifier = 0, $ReferenceQualifier64 = 0, $ReturnType = 0, $Ty = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call12 = 0;
 var $call15 = 0, $call18 = 0, $call20 = 0, $call21 = 0, $call23 = 0, $call28 = 0, $call39 = 0, $call44 = 0, $call47 = 0, $call5 = 0, $call50 = 0, $call52 = 0, $call6 = 0, $call60 = 0, $call65 = 0, $call7 = 0, $call8 = 0, $cmp24 = 0, $cmp40 = 0, $cmp53 = 0;
 var $cmp9 = 0, $ref$tmp = 0, $ref$tmp46 = 0, $ref$tmp62 = 0, $retval$10 = 0, $retval$7 = 0, $retval$8 = 0, $retval$9 = 0, $tobool35 = 0, $tobool36 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $agg$tmp$byval_copy = sp + 88|0;
 $IsEndOfEncoding = sp + 80|0;
 $NameInfo = sp + 64|0;
 $Name = sp + 60|0;
 $Attrs = sp + 56|0;
 $agg$tmp = sp + 48|0;
 $Arg = sp + 40|0;
 $ref$tmp = sp + 32|0;
 $ReturnType = sp + 24|0;
 $ref$tmp46 = sp + 16|0;
 $Ty = sp + 8|0;
 $ref$tmp62 = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
 switch ($call<<24>>24) {
 case 84: case 71:  {
  $call5 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
  $call6 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseSpecialNameEv($call5)|0);
  $retval$10 = $call6;
  break;
 }
 default: {
  HEAP32[$IsEndOfEncoding>>2] = $this;
  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9NameStateC2EPS5_($NameInfo,$this);
  $call7 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
  $call8 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE($call7,$NameInfo)|0);
  HEAP32[$Name>>2] = $call8;
  $cmp9 = ($call8|0)==(0|0);
  if ($cmp9) {
   $retval$9 = 0;
  } else {
   $call12 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E26resolveForwardTemplateRefsERNS5_9NameStateE($this,$NameInfo)|0);
   if ($call12) {
    $retval$9 = 0;
   } else {
    $call15 = (__ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEvENKUlvE_clEv($IsEndOfEncoding)|0);
    if ($call15) {
     $retval$9 = $call8;
    } else {
     HEAP32[$Attrs>>2] = 0;
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,28631);
     ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
     $call18 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp$byval_copy)|0);
     do {
      if ($call18) {
       $Names = ((($this)) + 8|0);
       $call20 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names)|0);
       while(1) {
        $call21 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
        if ($call21) {
         label = 11;
         break;
        }
        $call23 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseTemplateArgEv($call7)|0);
        HEAP32[$Arg>>2] = $call23;
        $cmp24 = ($call23|0)==(0|0);
        if ($cmp24) {
         label = 12;
         break;
        }
        __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names,$Arg);
       }
       if ((label|0) == 11) {
        __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($ref$tmp,$this,$call20);
        $call28 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12EnableIfAttrEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this,$ref$tmp)|0);
        HEAP32[$Attrs>>2] = $call28;
        label = 13;
        break;
       }
       else if ((label|0) == 12) {
        $retval$8 = 0;
        break;
       }
      } else {
       label = 13;
      }
     } while(0);
     if ((label|0) == 13) {
      HEAP32[$ReturnType>>2] = 0;
      $0 = HEAP8[$NameInfo>>0]|0;
      $tobool35 = ($0<<24>>24)==(0);
      if ($tobool35) {
       $EndsWithTemplateArgs = ((($NameInfo)) + 1|0);
       $1 = HEAP8[$EndsWithTemplateArgs>>0]|0;
       $tobool36 = ($1<<24>>24)==(0);
       if ($tobool36) {
        label = 16;
       } else {
        $call39 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call7)|0);
        HEAP32[$ReturnType>>2] = $call39;
        $cmp40 = ($call39|0)==(0|0);
        if ($cmp40) {
         $retval$7 = 0;
        } else {
         label = 16;
        }
       }
      } else {
       label = 16;
      }
      do {
       if ((label|0) == 16) {
        $call44 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,118)|0);
        if ($call44) {
         __ZN12_GLOBAL__N_116itanium_demangle9NodeArrayC2Ev($ref$tmp46);
         $CVQualifiers = ((($NameInfo)) + 4|0);
         $ReferenceQualifier = ((($NameInfo)) + 8|0);
         $call47 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FunctionEncodingEJRPNS0_4NodeESA_NS0_9NodeArrayESA_RNS0_10QualifiersERNS0_15FunctionRefQualEEEES9_DpOT0_($this,$ReturnType,$Name,$ref$tmp46,$Attrs,$CVQualifiers,$ReferenceQualifier)|0);
         $retval$7 = $call47;
         break;
        }
        $Names49 = ((($this)) + 8|0);
        $call50 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names49)|0);
        while(1) {
         $call52 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call7)|0);
         HEAP32[$Ty>>2] = $call52;
         $cmp53 = ($call52|0)==(0|0);
         if ($cmp53) {
          label = 21;
          break;
         }
         __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names49,$Ty);
         $call60 = (__ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEvENKUlvE_clEv($IsEndOfEncoding)|0);
         if ($call60) {
          label = 22;
          break;
         }
        }
        if ((label|0) == 21) {
         $retval$7 = 0;
         break;
        }
        else if ((label|0) == 22) {
         __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($ref$tmp62,$this,$call50);
         $CVQualifiers63 = ((($NameInfo)) + 4|0);
         $ReferenceQualifier64 = ((($NameInfo)) + 8|0);
         $call65 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FunctionEncodingEJRPNS0_4NodeESA_NS0_9NodeArrayESA_RNS0_10QualifiersERNS0_15FunctionRefQualEEEES9_DpOT0_($this,$ReturnType,$Name,$ref$tmp62,$Attrs,$CVQualifiers63,$ReferenceQualifier64)|0);
         $retval$7 = $call65;
         break;
        }
       }
      } while(0);
      $retval$8 = $retval$7;
     }
     $retval$9 = $retval$8;
    }
   }
  }
  $retval$10 = $retval$9;
 }
 }
 STACKTOP = sp;return ($retval$10|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,$Lookahead) {
 $this = $this|0;
 $Lookahead = $Lookahead|0;
 var $0 = 0, $1 = 0, $2 = 0, $Last = 0, $arrayidx = 0, $cmp = 0, $retval$0 = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Last = ((($this)) + 4|0);
 $0 = HEAP32[$Last>>2]|0;
 $1 = HEAP32[$this>>2]|0;
 $sub$ptr$rhs$cast = $1;
 $sub$ptr$sub = (($0) - ($sub$ptr$rhs$cast))|0;
 $cmp = ($sub$ptr$sub>>>0)>($Lookahead>>>0);
 if ($cmp) {
  $arrayidx = (($1) + ($Lookahead)|0);
  $2 = HEAP8[$arrayidx>>0]|0;
  $retval$0 = $2;
 } else {
  $retval$0 = 0;
 }
 return ($retval$0|0);
}
function __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($this,$First_,$Last_) {
 $this = $this|0;
 $First_ = $First_|0;
 $Last_ = $Last_|0;
 var $Last = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = $First_;
 $Last = ((($this)) + 4|0);
 HEAP32[$Last>>2] = $Last_;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9DotSuffixEJRPNS0_4NodeENS_10StringViewEEEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9DotSuffixEJRPNS2_4NodeENS_10StringViewEEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $Last = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Last = ((($this)) + 4|0);
 $0 = HEAP32[$Last>>2]|0;
 $1 = HEAP32[$this>>2]|0;
 $sub$ptr$sub = (($0) - ($1))|0;
 return ($sub$ptr$sub|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,$C) {
 $this = $this|0;
 $C = $C|0;
 var $0 = 0, $1 = 0, $2 = 0, $Last = 0, $cmp = 0, $cmp4 = 0, $incdec$ptr = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $Last = ((($this)) + 4|0);
 $1 = HEAP32[$Last>>2]|0;
 $cmp = ($0|0)==($1|0);
 if ($cmp) {
  $retval$0 = 0;
 } else {
  $2 = HEAP8[$0>>0]|0;
  $cmp4 = ($2<<24>>24)==($C<<24>>24);
  if ($cmp4) {
   $incdec$ptr = ((($0)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr;
   $retval$0 = 1;
  } else {
   $retval$0 = 0;
  }
 }
 return ($retval$0|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($agg$result,$this,$AllowNegative) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $AllowNegative = $AllowNegative|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $call2 = 0, $call8 = 0, $cmp = 0, $cmp9 = 0, $conv = 0, $conv11 = 0, $incdec$ptr = 0, $isdigit = 0, $isdigit3 = 0, $isdigittmp = 0, $isdigittmp2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 if ($AllowNegative) {
  (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,110)|0);
 }
 $call2 = (__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this)|0);
 $cmp = ($call2|0)==(0);
 if ($cmp) {
  label = 6;
 } else {
  $1 = HEAP32[$this>>2]|0;
  $2 = HEAP8[$1>>0]|0;
  $conv = $2 << 24 >> 24;
  $isdigittmp = (($conv) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $4 = $1;
   while(1) {
    $call8 = (__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this)|0);
    $cmp9 = ($call8|0)==(0);
    if ($cmp9) {
     break;
    }
    $3 = HEAP8[$4>>0]|0;
    $conv11 = $3 << 24 >> 24;
    $isdigittmp2 = (($conv11) + -48)|0;
    $isdigit3 = ($isdigittmp2>>>0)<(10);
    if (!($isdigit3)) {
     break;
    }
    $incdec$ptr = ((($4)) + 1|0);
    HEAP32[$this>>2] = $incdec$ptr;
    $4 = $incdec$ptr;
   }
   __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($agg$result,$0,$4);
  } else {
   label = 6;
  }
 }
 if ((label|0) == 6) {
  __ZN12_GLOBAL__N_110StringViewC2Ev($agg$result);
 }
 return;
}
function __ZNK12_GLOBAL__N_110StringView5emptyEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $Last = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $Last = ((($this)) + 4|0);
 $1 = HEAP32[$Last>>2]|0;
 $cmp = ($0|0)==($1|0);
 return ($cmp|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA34_KcRPNS0_4NodeEEEESC_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA34_KcRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($this) {
 $this = $this|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $AfterQuals$1 = 0, $Child = 0, $P = 0, $P289 = 0, $Ptr = 0, $Ref = 0, $Ref265 = 0, $Res = 0, $Result = 0, $Sub = 0, $Subs = 0, $TA = 0, $TA318 = 0, $TryToParseTemplateArgs = 0, $TryToParseTemplateArgs311 = 0, $add = 0, $add$ptr = 0, $add$ptr145 = 0, $add$ptr149 = 0;
 var $add$ptr153 = 0, $add$ptr157 = 0, $add$ptr161 = 0, $add$ptr165 = 0, $add$ptr169 = 0, $add$ptr173 = 0, $add$ptr183 = 0, $call = 0, $call10 = 0, $call100 = 0, $call104 = 0, $call108 = 0, $call112 = 0, $call116 = 0, $call120 = 0, $call124 = 0, $call128 = 0, $call132 = 0, $call135 = 0, $call138 = 0;
 var $call142 = 0, $call146 = 0, $call150 = 0, $call154 = 0, $call158 = 0, $call16 = 0, $call162 = 0, $call166 = 0, $call170 = 0, $call174 = 0, $call176 = 0, $call177 = 0, $call179 = 0, $call180 = 0, $call184 = 0, $call185 = 0, $call188 = 0, $call192 = 0, $call193 = 0, $call195 = 0;
 var $call196 = 0, $call198 = 0, $call199 = 0, $call201 = 0, $call202 = 0, $call204 = 0, $call216 = 0, $call217 = 0, $call219 = 0, $call22 = 0, $call220 = 0, $call226 = 0, $call231 = 0, $call235 = 0, $call243 = 0, $call244 = 0, $call248 = 0, $call254 = 0, $call255 = 0, $call259 = 0;
 var $call266 = 0, $call267 = 0, $call272 = 0, $call278 = 0, $call279 = 0, $call283 = 0, $call290 = 0, $call291 = 0, $call295 = 0, $call299 = 0, $call306 = 0, $call307 = 0, $call314 = 0, $call320 = 0, $call324 = 0, $call330 = 0, $call331 = 0, $call4 = 0, $call41 = 0, $call42 = 0;
 var $call45 = 0, $call46 = 0, $call48 = 0, $call52 = 0, $call56 = 0, $call60 = 0, $call64 = 0, $call68 = 0, $call72 = 0, $call76 = 0, $call80 = 0, $call84 = 0, $call88 = 0, $call92 = 0, $call96 = 0, $cmp = 0, $cmp12 = 0, $cmp221 = 0, $cmp228 = 0, $cmp232 = 0;
 var $cmp245 = 0, $cmp256 = 0, $cmp268 = 0, $cmp280 = 0, $cmp292 = 0, $cmp308 = 0, $cmp316 = 0, $cmp321 = 0, $cmp333 = 0, $cmp6 = 0, $conv = 0, $conv139 = 0, $inc14 = 0, $inc8 = 0, $incdec$ptr = 0, $incdec$ptr103 = 0, $incdec$ptr107 = 0, $incdec$ptr111 = 0, $incdec$ptr115 = 0, $incdec$ptr119 = 0;
 var $incdec$ptr123 = 0, $incdec$ptr127 = 0, $incdec$ptr131 = 0, $incdec$ptr242 = 0, $incdec$ptr253 = 0, $incdec$ptr264 = 0, $incdec$ptr277 = 0, $incdec$ptr288 = 0, $incdec$ptr51 = 0, $incdec$ptr55 = 0, $incdec$ptr59 = 0, $incdec$ptr63 = 0, $incdec$ptr67 = 0, $incdec$ptr71 = 0, $incdec$ptr75 = 0, $incdec$ptr79 = 0, $incdec$ptr83 = 0, $incdec$ptr87 = 0, $incdec$ptr91 = 0, $incdec$ptr95 = 0;
 var $incdec$ptr99 = 0, $ref$tmp = 0, $ref$tmp271 = 0, $retval$0 = 0, $retval$10 = 0, $retval$9$ph = 0, $spec$select = 0, $spec$select28 = 0, $tobool = 0, $tobool224 = 0, $tobool312 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $Result = sp + 56|0;
 $Res = sp + 48|0;
 $Child = sp + 40|0;
 $TA = sp + 36|0;
 $Ptr = sp + 32|0;
 $Ref = sp + 28|0;
 $ref$tmp = sp + 24|0;
 $Ref265 = sp + 20|0;
 $ref$tmp271 = sp + 16|0;
 $P = sp + 12|0;
 $P289 = sp + 8|0;
 $Sub = sp + 4|0;
 $TA318 = sp;
 HEAP32[$Result>>2] = 0;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
 $conv = $call << 24 >> 24;
 L1: do {
  switch ($conv|0) {
  case 75: case 86: case 114:  {
   $cmp = ($call<<24>>24)==(114);
   $spec$select = $cmp&1;
   $call4 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,$spec$select)|0);
   $cmp6 = ($call4<<24>>24)==(86);
   $inc8 = $cmp ? 2 : 1;
   $AfterQuals$1 = $cmp6 ? $inc8 : $spec$select;
   $call10 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,$AfterQuals$1)|0);
   $cmp12 = ($call10<<24>>24)==(75);
   $inc14 = $cmp12&1;
   $spec$select28 = (($AfterQuals$1) + ($inc14))|0;
   $call16 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,$spec$select28)|0);
   switch ($call16<<24>>24) {
   case 70:  {
    break;
   }
   case 68:  {
    $add = (($spec$select28) + 1)|0;
    $call22 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,$add)|0);
    switch ($call22<<24>>24) {
    case 120: case 119: case 79: case 111:  {
     break;
    }
    default: {
     label = 5;
     break L1;
    }
    }
    break;
   }
   default: {
    label = 5;
    break L1;
   }
   }
   $call41 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call42 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseFunctionTypeEv($call41)|0);
   HEAP32[$Result>>2] = $call42;
   $39 = $call42;
   label = 81;
   break;
  }
  case 85:  {
   label = 5;
   break;
  }
  case 118:  {
   $0 = HEAP32[$this>>2]|0;
   $incdec$ptr = ((($0)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr;
   $call48 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA5_KcEEEPNS0_4NodeEDpOT0_($this,23302)|0);
   $retval$10 = $call48;
   break;
  }
  case 119:  {
   $1 = HEAP32[$this>>2]|0;
   $incdec$ptr51 = ((($1)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr51;
   $call52 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA8_KcEEEPNS0_4NodeEDpOT0_($this)|0);
   $retval$10 = $call52;
   break;
  }
  case 98:  {
   $2 = HEAP32[$this>>2]|0;
   $incdec$ptr55 = ((($2)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr55;
   $call56 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA5_KcEEEPNS0_4NodeEDpOT0_($this,23307)|0);
   $retval$10 = $call56;
   break;
  }
  case 99:  {
   $3 = HEAP32[$this>>2]|0;
   $incdec$ptr59 = ((($3)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr59;
   $call60 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA5_KcEEEPNS0_4NodeEDpOT0_($this,23312)|0);
   $retval$10 = $call60;
   break;
  }
  case 97:  {
   $4 = HEAP32[$this>>2]|0;
   $incdec$ptr63 = ((($4)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr63;
   $call64 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA12_KcEEEPNS0_4NodeEDpOT0_($this,23317)|0);
   $retval$10 = $call64;
   break;
  }
  case 104:  {
   $5 = HEAP32[$this>>2]|0;
   $incdec$ptr67 = ((($5)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr67;
   $call68 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA14_KcEEEPNS0_4NodeEDpOT0_($this,23329)|0);
   $retval$10 = $call68;
   break;
  }
  case 115:  {
   $6 = HEAP32[$this>>2]|0;
   $incdec$ptr71 = ((($6)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr71;
   $call72 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA6_KcEEEPNS0_4NodeEDpOT0_($this,23343)|0);
   $retval$10 = $call72;
   break;
  }
  case 116:  {
   $7 = HEAP32[$this>>2]|0;
   $incdec$ptr75 = ((($7)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr75;
   $call76 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA15_KcEEEPNS0_4NodeEDpOT0_($this,23349)|0);
   $retval$10 = $call76;
   break;
  }
  case 105:  {
   $8 = HEAP32[$this>>2]|0;
   $incdec$ptr79 = ((($8)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr79;
   $call80 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA4_KcEEEPNS0_4NodeEDpOT0_($this,23364)|0);
   $retval$10 = $call80;
   break;
  }
  case 106:  {
   $9 = HEAP32[$this>>2]|0;
   $incdec$ptr83 = ((($9)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr83;
   $call84 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA13_KcEEEPNS0_4NodeEDpOT0_($this,23368)|0);
   $retval$10 = $call84;
   break;
  }
  case 108:  {
   $10 = HEAP32[$this>>2]|0;
   $incdec$ptr87 = ((($10)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr87;
   $call88 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA5_KcEEEPNS0_4NodeEDpOT0_($this,23381)|0);
   $retval$10 = $call88;
   break;
  }
  case 109:  {
   $11 = HEAP32[$this>>2]|0;
   $incdec$ptr91 = ((($11)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr91;
   $call92 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA14_KcEEEPNS0_4NodeEDpOT0_($this,23386)|0);
   $retval$10 = $call92;
   break;
  }
  case 120:  {
   $12 = HEAP32[$this>>2]|0;
   $incdec$ptr95 = ((($12)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr95;
   $call96 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,23400)|0);
   $retval$10 = $call96;
   break;
  }
  case 121:  {
   $13 = HEAP32[$this>>2]|0;
   $incdec$ptr99 = ((($13)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr99;
   $call100 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA19_KcEEEPNS0_4NodeEDpOT0_($this)|0);
   $retval$10 = $call100;
   break;
  }
  case 110:  {
   $14 = HEAP32[$this>>2]|0;
   $incdec$ptr103 = ((($14)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr103;
   $call104 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA9_KcEEEPNS0_4NodeEDpOT0_($this,23410)|0);
   $retval$10 = $call104;
   break;
  }
  case 111:  {
   $15 = HEAP32[$this>>2]|0;
   $incdec$ptr107 = ((($15)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr107;
   $call108 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA18_KcEEEPNS0_4NodeEDpOT0_($this,23419)|0);
   $retval$10 = $call108;
   break;
  }
  case 102:  {
   $16 = HEAP32[$this>>2]|0;
   $incdec$ptr111 = ((($16)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr111;
   $call112 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA6_KcEEEPNS0_4NodeEDpOT0_($this,23437)|0);
   $retval$10 = $call112;
   break;
  }
  case 100:  {
   $17 = HEAP32[$this>>2]|0;
   $incdec$ptr115 = ((($17)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr115;
   $call116 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA7_KcEEEPNS0_4NodeEDpOT0_($this)|0);
   $retval$10 = $call116;
   break;
  }
  case 101:  {
   $18 = HEAP32[$this>>2]|0;
   $incdec$ptr119 = ((($18)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr119;
   $call120 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA12_KcEEEPNS0_4NodeEDpOT0_($this,23443)|0);
   $retval$10 = $call120;
   break;
  }
  case 103:  {
   $19 = HEAP32[$this>>2]|0;
   $incdec$ptr123 = ((($19)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr123;
   $call124 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,23455)|0);
   $retval$10 = $call124;
   break;
  }
  case 122:  {
   $20 = HEAP32[$this>>2]|0;
   $incdec$ptr127 = ((($20)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr127;
   $call128 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA4_KcEEEPNS0_4NodeEDpOT0_($this,23466)|0);
   $retval$10 = $call128;
   break;
  }
  case 117:  {
   $21 = HEAP32[$this>>2]|0;
   $incdec$ptr131 = ((($21)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr131;
   __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseBareSourceNameEv($Res,$this);
   $call132 = (__ZNK12_GLOBAL__N_110StringView5emptyEv($Res)|0);
   if ($call132) {
    $retval$0 = 0;
   } else {
    $call135 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this,$Res)|0);
    $retval$0 = $call135;
   }
   $retval$10 = $retval$0;
   break;
  }
  case 68:  {
   $call138 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $conv139 = $call138 << 24 >> 24;
   do {
    switch ($conv139|0) {
    case 100:  {
     $22 = HEAP32[$this>>2]|0;
     $add$ptr = ((($22)) + 2|0);
     HEAP32[$this>>2] = $add$ptr;
     $call142 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,23470)|0);
     $retval$10 = $call142;
     break L1;
     break;
    }
    case 101:  {
     $23 = HEAP32[$this>>2]|0;
     $add$ptr145 = ((($23)) + 2|0);
     HEAP32[$this>>2] = $add$ptr145;
     $call146 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,23480)|0);
     $retval$10 = $call146;
     break L1;
     break;
    }
    case 102:  {
     $24 = HEAP32[$this>>2]|0;
     $add$ptr149 = ((($24)) + 2|0);
     HEAP32[$this>>2] = $add$ptr149;
     $call150 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,23491)|0);
     $retval$10 = $call150;
     break L1;
     break;
    }
    case 104:  {
     $25 = HEAP32[$this>>2]|0;
     $add$ptr153 = ((($25)) + 2|0);
     HEAP32[$this>>2] = $add$ptr153;
     $call154 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,23501)|0);
     $retval$10 = $call154;
     break L1;
     break;
    }
    case 105:  {
     $26 = HEAP32[$this>>2]|0;
     $add$ptr157 = ((($26)) + 2|0);
     HEAP32[$this>>2] = $add$ptr157;
     $call158 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA9_KcEEEPNS0_4NodeEDpOT0_($this,23511)|0);
     $retval$10 = $call158;
     break L1;
     break;
    }
    case 115:  {
     $27 = HEAP32[$this>>2]|0;
     $add$ptr161 = ((($27)) + 2|0);
     HEAP32[$this>>2] = $add$ptr161;
     $call162 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA9_KcEEEPNS0_4NodeEDpOT0_($this,23520)|0);
     $retval$10 = $call162;
     break L1;
     break;
    }
    case 97:  {
     $28 = HEAP32[$this>>2]|0;
     $add$ptr165 = ((($28)) + 2|0);
     HEAP32[$this>>2] = $add$ptr165;
     $call166 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA5_KcEEEPNS0_4NodeEDpOT0_($this,23529)|0);
     $retval$10 = $call166;
     break L1;
     break;
    }
    case 99:  {
     $29 = HEAP32[$this>>2]|0;
     $add$ptr169 = ((($29)) + 2|0);
     HEAP32[$this>>2] = $add$ptr169;
     $call170 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA15_KcEEEPNS0_4NodeEDpOT0_($this,23534)|0);
     $retval$10 = $call170;
     break L1;
     break;
    }
    case 110:  {
     $30 = HEAP32[$this>>2]|0;
     $add$ptr173 = ((($30)) + 2|0);
     HEAP32[$this>>2] = $add$ptr173;
     $call174 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA15_KcEEEPNS0_4NodeEDpOT0_($this,23549)|0);
     $retval$10 = $call174;
     break L1;
     break;
    }
    case 84: case 116:  {
     $call176 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $call177 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseDecltypeEv($call176)|0);
     HEAP32[$Result>>2] = $call177;
     $39 = $call177;
     label = 81;
     break L1;
     break;
    }
    case 118:  {
     $call179 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $call180 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseVectorTypeEv($call179)|0);
     HEAP32[$Result>>2] = $call180;
     $39 = $call180;
     label = 81;
     break L1;
     break;
    }
    case 112:  {
     $31 = HEAP32[$this>>2]|0;
     $add$ptr183 = ((($31)) + 2|0);
     HEAP32[$this>>2] = $add$ptr183;
     $call184 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $call185 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call184)|0);
     HEAP32[$Child>>2] = $call185;
     $tobool = ($call185|0)==(0|0);
     if ($tobool) {
      $retval$10 = 0;
      break L1;
     } else {
      $call188 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ParameterPackExpansionEJRPNS0_4NodeEEEES9_DpOT0_($this,$Child)|0);
      HEAP32[$Result>>2] = $call188;
      label = 82;
      break L1;
     }
     break;
    }
    case 120: case 119: case 79: case 111:  {
     $call192 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $call193 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseFunctionTypeEv($call192)|0);
     HEAP32[$Result>>2] = $call193;
     $39 = $call193;
     label = 81;
     break L1;
     break;
    }
    default: {
     $retval$10 = 0;
     break L1;
    }
    }
   } while(0);
   break;
  }
  case 70:  {
   $call195 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call196 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseFunctionTypeEv($call195)|0);
   HEAP32[$Result>>2] = $call196;
   $39 = $call196;
   label = 81;
   break;
  }
  case 65:  {
   $call198 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call199 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E14parseArrayTypeEv($call198)|0);
   HEAP32[$Result>>2] = $call199;
   $39 = $call199;
   label = 81;
   break;
  }
  case 77:  {
   $call201 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call202 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E24parsePointerToMemberTypeEv($call201)|0);
   HEAP32[$Result>>2] = $call202;
   $39 = $call202;
   label = 81;
   break;
  }
  case 84:  {
   $call204 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   switch ($call204<<24>>24) {
   case 101: case 117: case 115:  {
    $call216 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call217 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseClassEnumTypeEv($call216)|0);
    HEAP32[$Result>>2] = $call217;
    $39 = $call217;
    label = 81;
    break L1;
    break;
   }
   default: {
   }
   }
   $call219 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call220 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseTemplateParamEv($call219)|0);
   HEAP32[$Result>>2] = $call220;
   $cmp221 = ($call220|0)==(0|0);
   if ($cmp221) {
    $retval$10 = 0;
   } else {
    $TryToParseTemplateArgs = ((($this)) + 360|0);
    $32 = HEAP8[$TryToParseTemplateArgs>>0]|0;
    $tobool224 = ($32<<24>>24)==(0);
    if ($tobool224) {
     label = 82;
    } else {
     $call226 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
     $cmp228 = ($call226<<24>>24)==(73);
     if ($cmp228) {
      $call231 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb($call219,0)|0);
      HEAP32[$TA>>2] = $call231;
      $cmp232 = ($call231|0)==(0|0);
      if ($cmp232) {
       $retval$10 = 0;
       break L1;
      } else {
       $call235 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$Result,$TA)|0);
       HEAP32[$Result>>2] = $call235;
       label = 82;
       break L1;
      }
     } else {
      label = 82;
     }
    }
   }
   break;
  }
  case 80:  {
   $33 = HEAP32[$this>>2]|0;
   $incdec$ptr242 = ((($33)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr242;
   $call243 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call244 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call243)|0);
   HEAP32[$Ptr>>2] = $call244;
   $cmp245 = ($call244|0)==(0|0);
   if ($cmp245) {
    $retval$10 = 0;
    break L1;
   } else {
    $call248 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11PointerTypeEJRPNS0_4NodeEEEES9_DpOT0_($this,$Ptr)|0);
    HEAP32[$Result>>2] = $call248;
    label = 82;
    break L1;
   }
   break;
  }
  case 82:  {
   $34 = HEAP32[$this>>2]|0;
   $incdec$ptr253 = ((($34)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr253;
   $call254 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call255 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call254)|0);
   HEAP32[$Ref>>2] = $call255;
   $cmp256 = ($call255|0)==(0|0);
   if ($cmp256) {
    $retval$10 = 0;
    break L1;
   } else {
    HEAP32[$ref$tmp>>2] = 0;
    $call259 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13ReferenceTypeEJRPNS0_4NodeENS0_13ReferenceKindEEEES9_DpOT0_($this,$Ref,$ref$tmp)|0);
    HEAP32[$Result>>2] = $call259;
    label = 82;
    break L1;
   }
   break;
  }
  case 79:  {
   $35 = HEAP32[$this>>2]|0;
   $incdec$ptr264 = ((($35)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr264;
   $call266 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call267 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call266)|0);
   HEAP32[$Ref265>>2] = $call267;
   $cmp268 = ($call267|0)==(0|0);
   if ($cmp268) {
    $retval$10 = 0;
    break L1;
   } else {
    HEAP32[$ref$tmp271>>2] = 1;
    $call272 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13ReferenceTypeEJRPNS0_4NodeENS0_13ReferenceKindEEEES9_DpOT0_($this,$Ref265,$ref$tmp271)|0);
    HEAP32[$Result>>2] = $call272;
    label = 82;
    break L1;
   }
   break;
  }
  case 67:  {
   $36 = HEAP32[$this>>2]|0;
   $incdec$ptr277 = ((($36)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr277;
   $call278 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call279 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call278)|0);
   HEAP32[$P>>2] = $call279;
   $cmp280 = ($call279|0)==(0|0);
   if ($cmp280) {
    $retval$10 = 0;
    break L1;
   } else {
    $call283 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20PostfixQualifiedTypeEJRPNS0_4NodeERA9_KcEEES9_DpOT0_($this,$P)|0);
    HEAP32[$Result>>2] = $call283;
    label = 82;
    break L1;
   }
   break;
  }
  case 71:  {
   $37 = HEAP32[$this>>2]|0;
   $incdec$ptr288 = ((($37)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr288;
   $call290 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call291 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call290)|0);
   HEAP32[$P289>>2] = $call291;
   $cmp292 = ($call291|0)==(0|0);
   if ($cmp292) {
    $retval$10 = 0;
    break L1;
   } else {
    $call295 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20PostfixQualifiedTypeEJRPNS0_4NodeERA11_KcEEES9_DpOT0_($this,$P289)|0);
    HEAP32[$Result>>2] = $call295;
    label = 82;
    break L1;
   }
   break;
  }
  case 83:  {
   $call299 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   switch ($call299<<24>>24) {
   case 116: case 0:  {
    label = 80;
    break L1;
    break;
   }
   default: {
   }
   }
   $call306 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call307 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseSubstitutionEv($call306)|0);
   HEAP32[$Sub>>2] = $call307;
   $cmp308 = ($call307|0)==(0|0);
   if ($cmp308) {
    $retval$9$ph = 0;
   } else {
    $TryToParseTemplateArgs311 = ((($this)) + 360|0);
    $38 = HEAP8[$TryToParseTemplateArgs311>>0]|0;
    $tobool312 = ($38<<24>>24)==(0);
    if ($tobool312) {
     $retval$9$ph = $call307;
    } else {
     $call314 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
     $cmp316 = ($call314<<24>>24)==(73);
     if ($cmp316) {
      $call320 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb($call306,0)|0);
      HEAP32[$TA318>>2] = $call320;
      $cmp321 = ($call320|0)==(0|0);
      if ($cmp321) {
       $retval$10 = 0;
       break L1;
      } else {
       $call324 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$Sub,$TA318)|0);
       HEAP32[$Result>>2] = $call324;
       label = 82;
       break L1;
      }
     } else {
      $retval$9$ph = $call307;
     }
    }
   }
   $retval$10 = $retval$9$ph;
   break;
  }
  default: {
   label = 80;
  }
  }
 } while(0);
 if ((label|0) == 5) {
  $call45 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
  $call46 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseQualifiedTypeEv($call45)|0);
  HEAP32[$Result>>2] = $call46;
  $39 = $call46;
  label = 81;
 }
 else if ((label|0) == 80) {
  $call330 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
  $call331 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseClassEnumTypeEv($call330)|0);
  HEAP32[$Result>>2] = $call331;
  $39 = $call331;
  label = 81;
 }
 if ((label|0) == 81) {
  $cmp333 = ($39|0)==(0|0);
  if ($cmp333) {
   $retval$10 = 0;
  } else {
   label = 82;
  }
 }
 if ((label|0) == 82) {
  $Subs = ((($this)) + 148|0);
  __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Subs,$Result);
  $$pre = HEAP32[$Result>>2]|0;
  $retval$10 = $$pre;
 }
 STACKTOP = sp;return ($retval$10|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseFunctionTypeEv($this) {
 $this = $this|0;
 var $CVQuals = 0, $E = 0, $ExceptionSpec = 0, $Names = 0, $Names53 = 0, $Params = 0, $ReferenceQualifier = 0, $ReturnType = 0, $T = 0, $T71 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp18 = 0, $agg$tmp18$byval_copy = 0, $agg$tmp42 = 0, $agg$tmp42$byval_copy = 0, $agg$tmp5 = 0, $agg$tmp5$byval_copy = 0, $agg$tmp63 = 0, $agg$tmp63$byval_copy = 0;
 var $agg$tmp67 = 0, $agg$tmp67$byval_copy = 0, $call = 0, $call10 = 0, $call13 = 0, $call19 = 0, $call2 = 0, $call21 = 0, $call22 = 0, $call23 = 0, $call24 = 0, $call3 = 0, $call32 = 0, $call44 = 0, $call48 = 0, $call49 = 0, $call54 = 0, $call57 = 0, $call6 = 0, $call60 = 0;
 var $call64 = 0, $call68 = 0, $call73 = 0, $call8 = 0, $call82 = 0, $call9 = 0, $cmp = 0, $cmp25 = 0, $cmp50 = 0, $cmp74 = 0, $ref$tmp = 0, $retval$7 = 0, $retval$8 = 0, $retval$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $agg$tmp67$byval_copy = sp + 144|0;
 $agg$tmp63$byval_copy = sp + 136|0;
 $agg$tmp42$byval_copy = sp + 128|0;
 $agg$tmp18$byval_copy = sp + 120|0;
 $agg$tmp5$byval_copy = sp + 112|0;
 $agg$tmp$byval_copy = sp + 104|0;
 $CVQuals = sp + 100|0;
 $ExceptionSpec = sp + 96|0;
 $agg$tmp = sp + 88|0;
 $agg$tmp5 = sp + 80|0;
 $E = sp + 72|0;
 $agg$tmp18 = sp + 64|0;
 $T = sp + 56|0;
 $ref$tmp = sp + 48|0;
 $agg$tmp42 = sp + 40|0;
 $ReturnType = sp + 32|0;
 $ReferenceQualifier = sp + 152|0;
 $agg$tmp63 = sp + 24|0;
 $agg$tmp67 = sp + 16|0;
 $T71 = sp + 8|0;
 $Params = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCVQualifiersEv($this)|0);
 HEAP32[$CVQuals>>2] = $call;
 HEAP32[$ExceptionSpec>>2] = 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,28332);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp$byval_copy)|0);
 do {
  if ($call2) {
   $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA9_KcEEEPNS0_4NodeEDpOT0_($this,28335)|0);
   HEAP32[$ExceptionSpec>>2] = $call3;
   label = 14;
  } else {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp5,28344);
   ;HEAP32[$agg$tmp5$byval_copy>>2]=HEAP32[$agg$tmp5>>2]|0;HEAP32[$agg$tmp5$byval_copy+4>>2]=HEAP32[$agg$tmp5+4>>2]|0;
   $call6 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp5$byval_copy)|0);
   if ($call6) {
    $call8 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call9 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call8)|0);
    HEAP32[$E>>2] = $call9;
    $cmp = ($call9|0)==(0|0);
    if ($cmp) {
     $retval$9 = 0;
     break;
    }
    $call10 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
    if ($call10) {
     $call13 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12NoexceptSpecEJRPNS0_4NodeEEEES9_DpOT0_($this,$E)|0);
     HEAP32[$ExceptionSpec>>2] = $call13;
     label = 14;
     break;
    } else {
     $retval$9 = 0;
     break;
    }
   }
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp18,28347);
   ;HEAP32[$agg$tmp18$byval_copy>>2]=HEAP32[$agg$tmp18>>2]|0;HEAP32[$agg$tmp18$byval_copy+4>>2]=HEAP32[$agg$tmp18+4>>2]|0;
   $call19 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp18$byval_copy)|0);
   if ($call19) {
    $Names = ((($this)) + 8|0);
    $call21 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names)|0);
    while(1) {
     $call22 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
     if ($call22) {
      label = 12;
      break;
     }
     $call23 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $call24 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call23)|0);
     HEAP32[$T>>2] = $call24;
     $cmp25 = ($call24|0)==(0|0);
     if ($cmp25) {
      label = 13;
      break;
     }
     __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names,$T);
    }
    if ((label|0) == 12) {
     __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($ref$tmp,$this,$call21);
     $call32 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20DynamicExceptionSpecEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this,$ref$tmp)|0);
     HEAP32[$ExceptionSpec>>2] = $call32;
     label = 14;
     break;
    }
    else if ((label|0) == 13) {
     $retval$9 = 0;
     break;
    }
   } else {
    label = 14;
   }
  }
 } while(0);
 if ((label|0) == 14) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp42,28350);
  ;HEAP32[$agg$tmp42$byval_copy>>2]=HEAP32[$agg$tmp42>>2]|0;HEAP32[$agg$tmp42$byval_copy+4>>2]=HEAP32[$agg$tmp42+4>>2]|0;
  (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp42$byval_copy)|0);
  $call44 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,70)|0);
  if ($call44) {
   (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,89)|0);
   $call48 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call49 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call48)|0);
   HEAP32[$ReturnType>>2] = $call49;
   $cmp50 = ($call49|0)==(0|0);
   if ($cmp50) {
    $retval$8 = 0;
   } else {
    HEAP8[$ReferenceQualifier>>0] = 0;
    $Names53 = ((($this)) + 8|0);
    $call54 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names53)|0);
    while(1) {
     $call57 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
     if ($call57) {
      label = 27;
      break;
     }
     $call60 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,118)|0);
     if (!($call60)) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp63,28353);
      ;HEAP32[$agg$tmp63$byval_copy>>2]=HEAP32[$agg$tmp63>>2]|0;HEAP32[$agg$tmp63$byval_copy+4>>2]=HEAP32[$agg$tmp63+4>>2]|0;
      $call64 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp63$byval_copy)|0);
      if ($call64) {
       label = 21;
       break;
      }
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp67,28356);
      ;HEAP32[$agg$tmp67$byval_copy>>2]=HEAP32[$agg$tmp67>>2]|0;HEAP32[$agg$tmp67$byval_copy+4>>2]=HEAP32[$agg$tmp67+4>>2]|0;
      $call68 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp67$byval_copy)|0);
      if ($call68) {
       label = 23;
       break;
      }
      $call73 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call48)|0);
      HEAP32[$T71>>2] = $call73;
      $cmp74 = ($call73|0)==(0|0);
      if ($cmp74) {
       label = 26;
       break;
      }
      __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names53,$T71);
     }
    }
    if ((label|0) == 21) {
     HEAP8[$ReferenceQualifier>>0] = 1;
     label = 27;
    }
    else if ((label|0) == 23) {
     HEAP8[$ReferenceQualifier>>0] = 2;
     label = 27;
    }
    else if ((label|0) == 26) {
     $retval$7 = 0;
    }
    if ((label|0) == 27) {
     __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($Params,$this,$call54);
     $call82 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12FunctionTypeEJRPNS0_4NodeERNS0_9NodeArrayERNS0_10QualifiersERNS0_15FunctionRefQualESA_EEES9_DpOT0_($this,$ReturnType,$Params,$CVQuals,$ReferenceQualifier,$ExceptionSpec)|0);
     $retval$7 = $call82;
    }
    $retval$8 = $retval$7;
   }
   $retval$9 = $retval$8;
  } else {
   $retval$9 = 0;
  }
 }
 STACKTOP = sp;return ($retval$9|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseQualifiedTypeEv($this) {
 $this = $this|0;
 var $Child = 0, $Child19 = 0, $Last = 0, $Proto = 0, $ProtoSourceName = 0, $Qual = 0, $Quals = 0, $SaveFirst = 0, $SaveLast = 0, $Ty = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call11 = 0, $call12 = 0, $call15 = 0, $call2 = 0, $call20 = 0, $call21 = 0, $call25 = 0;
 var $call29 = 0, $call30 = 0, $call31 = 0, $call37 = 0, $call4 = 0, $call6 = 0, $call7 = 0, $call8 = 0, $cmp = 0, $cmp22 = 0, $cmp32 = 0, $cmp35 = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, $retval$3 = 0, $retval$4 = 0, $retval$5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $agg$tmp$byval_copy = sp + 72|0;
 $Qual = sp + 64|0;
 $agg$tmp = sp + 56|0;
 $ProtoSourceName = sp + 48|0;
 $Proto = sp;
 $SaveFirst = sp + 36|0;
 $SaveLast = sp + 24|0;
 $Child = sp + 20|0;
 $Child19 = sp + 16|0;
 $Quals = sp + 12|0;
 $Ty = sp + 8|0;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,85)|0);
 if ($call) {
  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseBareSourceNameEv($Qual,$this);
  $call2 = (__ZNK12_GLOBAL__N_110StringView5emptyEv($Qual)|0);
  do {
   if ($call2) {
    $retval$3 = 0;
   } else {
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,28147);
    ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
    $call4 = (__ZNK12_GLOBAL__N_110StringView10startsWithES0_($Qual,$agg$tmp$byval_copy)|0);
    if (!($call4)) {
     $call20 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $call21 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseQualifiedTypeEv($call20)|0);
     HEAP32[$Child19>>2] = $call21;
     $cmp22 = ($call21|0)==(0|0);
     if ($cmp22) {
      $retval$2 = 0;
     } else {
      $call25 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_17VendorExtQualTypeEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this,$Child19,$Qual)|0);
      $retval$2 = $call25;
     }
     $retval$3 = $retval$2;
     break;
    }
    __ZNK12_GLOBAL__N_110StringView9dropFrontEm($ProtoSourceName,$Qual,9);
    __ZN12_GLOBAL__N_110StringViewC2Ev($Proto);
    $call6 = (__ZNK12_GLOBAL__N_110StringView5beginEv($ProtoSourceName)|0);
    __ZN12_GLOBAL__N_114SwapAndRestoreIPKcEC2ERS2_S2_($SaveFirst,$this,$call6);
    $Last = ((($this)) + 4|0);
    $call7 = (__ZNK12_GLOBAL__N_110StringView3endEv($ProtoSourceName)|0);
    __ZN12_GLOBAL__N_114SwapAndRestoreIPKcEC2ERS2_S2_($SaveLast,$Last,$call7);
    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseBareSourceNameEv($Proto,$this);
    __ZN12_GLOBAL__N_114SwapAndRestoreIPKcED2Ev($SaveLast);
    __ZN12_GLOBAL__N_114SwapAndRestoreIPKcED2Ev($SaveFirst);
    $call8 = (__ZNK12_GLOBAL__N_110StringView5emptyEv($Proto)|0);
    if ($call8) {
     $retval$1 = 0;
    } else {
     $call11 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $call12 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseQualifiedTypeEv($call11)|0);
     HEAP32[$Child>>2] = $call12;
     $cmp = ($call12|0)==(0|0);
     if ($cmp) {
      $retval$0 = 0;
     } else {
      $call15 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13ObjCProtoNameEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this,$Child,$Proto)|0);
      $retval$0 = $call15;
     }
     $retval$1 = $retval$0;
    }
    $retval$3 = $retval$1;
   }
  } while(0);
  $retval$5 = $retval$3;
 } else {
  $call29 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCVQualifiersEv($this)|0);
  HEAP32[$Quals>>2] = $call29;
  $call30 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
  $call31 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call30)|0);
  HEAP32[$Ty>>2] = $call31;
  $cmp32 = ($call31|0)==(0|0);
  if ($cmp32) {
   $retval$4 = 0;
  } else {
   $cmp35 = ($call29|0)==(0);
   if ($cmp35) {
    $retval$4 = $call31;
   } else {
    $call37 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8QualTypeEJRPNS0_4NodeERNS0_10QualifiersEEEES9_DpOT0_($this,$Ty,$Quals)|0);
    HEAP32[$Ty>>2] = $call37;
    $retval$4 = $call37;
   }
  }
  $retval$5 = $retval$4;
 }
 STACKTOP = sp;return ($retval$5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA5_KcEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA5_KcEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA8_KcEEEPNS0_4NodeEDpOT0_($this) {
 $this = $this|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA8_KcEEEPT_DpOT0_($ASTAllocator,24252)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA12_KcEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA12_KcEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA14_KcEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA14_KcEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA6_KcEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA6_KcEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA15_KcEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA15_KcEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA4_KcEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA4_KcEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA13_KcEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA13_KcEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA10_KcEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA19_KcEEEPNS0_4NodeEDpOT0_($this) {
 $this = $this|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA19_KcEEEPT_DpOT0_($ASTAllocator,28128)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA9_KcEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA9_KcEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA18_KcEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA18_KcEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA7_KcEEEPNS0_4NodeEDpOT0_($this) {
 $this = $this|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA7_KcEEEPT_DpOT0_($ASTAllocator,28121)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA11_KcEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseBareSourceNameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Int = 0, $R = 0, $add$ptr = 0, $add$ptr5 = 0, $call = 0, $call2 = 0, $cmp = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $Int = sp + 8|0;
 $R = sp;
 HEAP32[$Int>>2] = 0;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parsePositiveIntegerEPm($this,$Int)|0);
 if ($call) {
  label = 3;
 } else {
  $call2 = (__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this)|0);
  $0 = HEAP32[$Int>>2]|0;
  $cmp = ($call2>>>0)<($0>>>0);
  if ($cmp) {
   label = 3;
  } else {
   $1 = HEAP32[$this>>2]|0;
   $add$ptr = (($1) + ($0)|0);
   __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($R,$1,$add$ptr);
   $2 = HEAP32[$this>>2]|0;
   $add$ptr5 = (($2) + ($0)|0);
   HEAP32[$this>>2] = $add$ptr5;
   $3 = $R;
   $4 = $3;
   $5 = HEAP32[$4>>2]|0;
   $6 = (($3) + 4)|0;
   $7 = $6;
   $8 = HEAP32[$7>>2]|0;
   $9 = $agg$result;
   $10 = $9;
   HEAP32[$10>>2] = $5;
   $11 = (($9) + 4)|0;
   $12 = $11;
   HEAP32[$12>>2] = $8;
  }
 }
 if ((label|0) == 3) {
  __ZN12_GLOBAL__N_110StringViewC2Ev($agg$result);
 }
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRNS_10StringViewEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseDecltypeEv($this) {
 $this = $this|0;
 var $E = 0, $call = 0, $call10 = 0, $call13 = 0, $call2 = 0, $call3 = 0, $call6 = 0, $call7 = 0, $cmp = 0, $retval$0 = 0, $retval$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $E = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,68)|0);
 do {
  if ($call) {
   $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,116)|0);
   if (!($call2)) {
    $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,84)|0);
    if (!($call3)) {
     $retval$1 = 0;
     break;
    }
   }
   $call6 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call7 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call6)|0);
   HEAP32[$E>>2] = $call7;
   $cmp = ($call7|0)==(0|0);
   if ($cmp) {
    $retval$0 = 0;
   } else {
    $call10 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
    if ($call10) {
     $call13 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA10_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this,28111,$E)|0);
     $retval$0 = $call13;
    } else {
     $retval$0 = 0;
    }
   }
   $retval$1 = $retval$0;
  } else {
   $retval$1 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($retval$1|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseVectorTypeEv($this) {
 $this = $this|0;
 var $0 = 0, $DimExpr = 0, $DimensionNumber = 0, $ElemType = 0, $ElemType31 = 0, $ElemType41 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call10 = 0, $call12 = 0, $call14 = 0, $call15 = 0, $call19 = 0, $call2 = 0, $call2$off = 0, $call22 = 0, $call24 = 0, $call25 = 0, $call28 = 0;
 var $call33 = 0, $call37 = 0, $call42 = 0, $call43 = 0, $call47 = 0, $call7 = 0, $cmp16 = 0, $ref$tmp = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, $retval$3 = 0, $retval$4 = 0, $retval$5 = 0, $tobool = 0, $tobool34 = 0, $tobool44 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp$byval_copy = sp + 40|0;
 $agg$tmp = sp + 32|0;
 $DimensionNumber = sp + 24|0;
 $ElemType = sp + 20|0;
 $DimExpr = sp + 16|0;
 $ElemType31 = sp + 12|0;
 $ElemType41 = sp + 8|0;
 $ref$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,27986);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp$byval_copy)|0);
 do {
  if ($call) {
   $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
   $call2$off = (($call2) + -49)<<24>>24;
   $0 = ($call2$off&255)<(9);
   if ($0) {
    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($DimensionNumber,$this,0);
    $call7 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
    do {
     if ($call7) {
      $call10 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,112)|0);
      if ($call10) {
       $call12 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15PixelVectorTypeEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this,$DimensionNumber)|0);
       $retval$1 = $call12;
       break;
      }
      $call14 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call15 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call14)|0);
      HEAP32[$ElemType>>2] = $call15;
      $cmp16 = ($call15|0)==(0|0);
      if ($cmp16) {
       $retval$0 = 0;
      } else {
       $call19 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10VectorTypeEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this,$ElemType,$DimensionNumber)|0);
       $retval$0 = $call19;
      }
      $retval$1 = $retval$0;
     } else {
      $retval$1 = 0;
     }
    } while(0);
    $retval$5 = $retval$1;
    break;
   }
   $call22 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
   if ($call22) {
    $call42 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call43 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call42)|0);
    HEAP32[$ElemType41>>2] = $call43;
    $tobool44 = ($call43|0)==(0|0);
    if ($tobool44) {
     $retval$4 = 0;
    } else {
     __ZN12_GLOBAL__N_110StringViewC2Ev($ref$tmp);
     $call47 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10VectorTypeEJRPNS0_4NodeENS_10StringViewEEEES9_DpOT0_($this,$ElemType41,$ref$tmp)|0);
     $retval$4 = $call47;
    }
    $retval$5 = $retval$4;
    break;
   }
   $call24 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call25 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call24)|0);
   HEAP32[$DimExpr>>2] = $call25;
   $tobool = ($call25|0)==(0|0);
   if ($tobool) {
    $retval$3 = 0;
   } else {
    $call28 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
    if ($call28) {
     $call33 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call24)|0);
     HEAP32[$ElemType31>>2] = $call33;
     $tobool34 = ($call33|0)==(0|0);
     if ($tobool34) {
      $retval$2 = 0;
     } else {
      $call37 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10VectorTypeEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$ElemType31,$DimExpr)|0);
      $retval$2 = $call37;
     }
     $retval$3 = $retval$2;
    } else {
     $retval$3 = 0;
    }
   }
   $retval$5 = $retval$3;
  } else {
   $retval$5 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($retval$5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ParameterPackExpansionEJRPNS0_4NodeEEEES9_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle22ParameterPackExpansionEJRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E14parseArrayTypeEv($this) {
 $this = $this|0;
 var $Dimension = 0, $Ty = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call10 = 0, $call11 = 0, $call14 = 0, $call2 = 0, $call20 = 0, $call21 = 0, $call25 = 0, $call5 = 0, $call8 = 0, $cmp = 0, $cmp22 = 0, $conv = 0, $isdigit = 0, $isdigittmp = 0, $retval$1 = 0;
 var $retval$2 = 0, $retval$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp$byval_copy = sp + 24|0;
 $Dimension = sp;
 $agg$tmp = sp + 16|0;
 $Ty = sp + 8|0;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,65)|0);
 if ($call) {
  __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2Ev($Dimension);
  $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
  $conv = $call2 << 24 >> 24;
  $isdigittmp = (($conv) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($agg$tmp,$this,0);
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
   __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2ENS_10StringViewE($Dimension,$agg$tmp$byval_copy);
   $call5 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
   if ($call5) {
    label = 8;
   } else {
    $retval$2 = 0;
   }
  } else {
   $call8 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
   if ($call8) {
    label = 8;
   } else {
    $call10 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call11 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call10)|0);
    $cmp = ($call11|0)==(0|0);
    if ($cmp) {
     $retval$2 = 0;
    } else {
     $call14 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
     if ($call14) {
      __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2EPNS0_4NodeE($Dimension,$call11);
      label = 8;
     } else {
      $retval$2 = 0;
     }
    }
   }
  }
  if ((label|0) == 8) {
   $call20 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call21 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call20)|0);
   HEAP32[$Ty>>2] = $call21;
   $cmp22 = ($call21|0)==(0|0);
   if ($cmp22) {
    $retval$1 = 0;
   } else {
    $call25 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9ArrayTypeEJRPNS0_4NodeERNS0_12NodeOrStringEEEES9_DpOT0_($this,$Ty,$Dimension)|0);
    $retval$1 = $call25;
   }
   $retval$2 = $retval$1;
  }
  $retval$3 = $retval$2;
 } else {
  $retval$3 = 0;
 }
 STACKTOP = sp;return ($retval$3|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E24parsePointerToMemberTypeEv($this) {
 $this = $this|0;
 var $ClassType = 0, $MemberType = 0, $call = 0, $call11 = 0, $call2 = 0, $call3 = 0, $call7 = 0, $cmp = 0, $cmp8 = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ClassType = sp + 4|0;
 $MemberType = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,77)|0);
 if ($call) {
  $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
  $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call2)|0);
  HEAP32[$ClassType>>2] = $call3;
  $cmp = ($call3|0)==(0|0);
  if ($cmp) {
   $retval$1 = 0;
  } else {
   $call7 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call2)|0);
   HEAP32[$MemberType>>2] = $call7;
   $cmp8 = ($call7|0)==(0|0);
   if ($cmp8) {
    $retval$0 = 0;
   } else {
    $call11 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19PointerToMemberTypeEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$ClassType,$MemberType)|0);
    $retval$0 = $call11;
   }
   $retval$1 = $retval$0;
  }
  $retval$2 = $retval$1;
 } else {
  $retval$2 = 0;
 }
 STACKTOP = sp;return ($retval$2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseClassEnumTypeEv($this) {
 $this = $this|0;
 var $ElabSpef = 0, $Name = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $agg$tmp7 = 0, $agg$tmp7$byval_copy = 0, $call = 0, $call13 = 0, $call14 = 0, $call17 = 0, $call19 = 0, $call3 = 0, $call8 = 0, $cmp = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $agg$tmp7$byval_copy = sp + 56|0;
 $agg$tmp2$byval_copy = sp + 48|0;
 $agg$tmp$byval_copy = sp + 40|0;
 $ElabSpef = sp;
 $agg$tmp = sp + 32|0;
 $agg$tmp2 = sp + 24|0;
 $agg$tmp7 = sp + 16|0;
 $Name = sp + 8|0;
 __ZN12_GLOBAL__N_110StringViewC2Ev($ElabSpef);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,27042);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp$byval_copy)|0);
 do {
  if ($call) {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($ElabSpef,27045);
  } else {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2,27052);
   ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$agg$tmp2$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
   $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp2$byval_copy)|0);
   if ($call3) {
    __ZN12_GLOBAL__N_110StringViewC2EPKc($ElabSpef,27055);
    break;
   }
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp7,27061);
   ;HEAP32[$agg$tmp7$byval_copy>>2]=HEAP32[$agg$tmp7>>2]|0;HEAP32[$agg$tmp7$byval_copy+4>>2]=HEAP32[$agg$tmp7+4>>2]|0;
   $call8 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp7$byval_copy)|0);
   if ($call8) {
    __ZN12_GLOBAL__N_110StringViewC2EPKc($ElabSpef,27064);
   }
  }
 } while(0);
 $call13 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
 $call14 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE($call13,0)|0);
 HEAP32[$Name>>2] = $call14;
 $cmp = ($call14|0)==(0|0);
 if ($cmp) {
  $retval$0 = 0;
 } else {
  $call17 = (__ZNK12_GLOBAL__N_110StringView5emptyEv($ElabSpef)|0);
  if ($call17) {
   $retval$0 = $call14;
  } else {
   $call19 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ElaboratedTypeSpefTypeEJRNS_10StringViewERPNS0_4NodeEEEESB_DpOT0_($this,$ElabSpef,$Name)|0);
   $retval$0 = $call19;
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseTemplateParamEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $ForwardTemplateRefs = 0, $Index = 0, $ParsingLambdaParams = 0, $PermitForwardTemplateReferences = 0, $TemplateParams = 0, $call = 0, $call12 = 0, $call16 = 0, $call2 = 0, $call21 = 0, $call25 = 0, $call4 = 0, $call7 = 0, $cmp = 0, $inc = 0;
 var $ref$tmp = 0, $retval$1 = 0, $retval$2 = 0, $tobool = 0, $tobool14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $Index = sp + 4|0;
 $ref$tmp = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,84)|0);
 if ($call) {
  HEAP32[$Index>>2] = 0;
  $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
  if ($call2) {
   $3 = 0;
   label = 5;
  } else {
   $call4 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parsePositiveIntegerEPm($this,$Index)|0);
   if ($call4) {
    $retval$1 = 0;
   } else {
    $0 = HEAP32[$Index>>2]|0;
    $inc = (($0) + 1)|0;
    HEAP32[$Index>>2] = $inc;
    $call7 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
    if ($call7) {
     $3 = $inc;
     label = 5;
    } else {
     $retval$1 = 0;
    }
   }
  }
  do {
   if ((label|0) == 5) {
    $ParsingLambdaParams = ((($this)) + 362|0);
    $1 = HEAP8[$ParsingLambdaParams>>0]|0;
    $tobool = ($1<<24>>24)==(0);
    if (!($tobool)) {
     $call12 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA5_KcEEEPNS0_4NodeEDpOT0_($this,23529)|0);
     $retval$1 = $call12;
     break;
    }
    $PermitForwardTemplateReferences = ((($this)) + 361|0);
    $2 = HEAP8[$PermitForwardTemplateReferences>>0]|0;
    $tobool14 = ($2<<24>>24)==(0);
    if (!($tobool14)) {
     $call16 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_24ForwardTemplateReferenceEJRmEEEPNS0_4NodeEDpOT0_($this,$Index)|0);
     $ForwardTemplateRefs = ((($this)) + 332|0);
     HEAP32[$ref$tmp>>2] = $call16;
     __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE9push_backERKS3_($ForwardTemplateRefs,$ref$tmp);
     $retval$1 = $call16;
     break;
    }
    $TemplateParams = ((($this)) + 288|0);
    $call21 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE4sizeEv($TemplateParams)|0);
    $cmp = ($3>>>0)<($call21>>>0);
    if ($cmp) {
     $call25 = (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEixEm($TemplateParams,$3)|0);
     $4 = HEAP32[$call25>>2]|0;
     $retval$1 = $4;
    } else {
     $retval$1 = 0;
    }
   }
  } while(0);
  $retval$2 = $retval$1;
 } else {
  $retval$2 = 0;
 }
 STACKTOP = sp;return ($retval$2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb($this,$TagTemplates) {
 $this = $this|0;
 $TagTemplates = $TagTemplates|0;
 var $0 = 0, $Arg = 0, $Arg30 = 0, $Names = 0, $OldParams = 0, $TableEntry = 0, $TemplateParams = 0, $call = 0, $call10 = 0, $call11 = 0, $call18 = 0, $call21 = 0, $call31 = 0, $call32 = 0, $call4 = 0, $call42 = 0, $call5 = 0, $cmp = 0, $cmp19 = 0, $cmp33 = 0;
 var $ref$tmp = 0, $ref$tmp41 = 0, $retval$6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $OldParams = sp + 32|0;
 $Arg = sp + 28|0;
 $TableEntry = sp + 24|0;
 $ref$tmp = sp + 16|0;
 $Arg30 = sp + 8|0;
 $ref$tmp41 = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,73)|0);
 do {
  if ($call) {
   $TemplateParams = ((($this)) + 288|0);
   if ($TagTemplates) {
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5clearEv($TemplateParams);
   }
   $Names = ((($this)) + 8|0);
   $call4 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names)|0);
   while(1) {
    $call5 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
    if ($call5) {
     label = 16;
     break;
    }
    if ($TagTemplates) {
     __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEC2EOS4_($OldParams,$TemplateParams);
     $call10 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $call11 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseTemplateArgEv($call10)|0);
     HEAP32[$Arg>>2] = $call11;
     __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEaSEOS4_($TemplateParams,$OldParams);
     $cmp = ($call11|0)==(0|0);
     if ($cmp) {
      label = 12;
      break;
     }
     $0 = $call11;
     __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names,$Arg);
     HEAP32[$TableEntry>>2] = $0;
     $call18 = (__ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($call11)|0);
     $cmp19 = ($call18<<24>>24)==(28);
     if ($cmp19) {
      __ZNK12_GLOBAL__N_116itanium_demangle20TemplateArgumentPack11getElementsEv($ref$tmp,$call11);
      $call21 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13ParameterPackEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this,$ref$tmp)|0);
      HEAP32[$TableEntry>>2] = $call21;
     }
     __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE9push_backERKS3_($TemplateParams,$TableEntry);
     __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EED2Ev($OldParams);
    } else {
     $call31 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $call32 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseTemplateArgEv($call31)|0);
     HEAP32[$Arg30>>2] = $call32;
     $cmp33 = ($call32|0)==(0|0);
     if ($cmp33) {
      label = 15;
      break;
     }
     __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names,$Arg30);
    }
   }
   if ((label|0) == 12) {
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EED2Ev($OldParams);
    $retval$6 = 0;
    break;
   }
   else if ((label|0) == 15) {
    $retval$6 = 0;
    break;
   }
   else if ((label|0) == 16) {
    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($ref$tmp41,$this,$call4);
    $call42 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12TemplateArgsEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this,$ref$tmp41)|0);
    $retval$6 = $call42;
    break;
   }
  } else {
   $retval$6 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($retval$6|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20NameWithTemplateArgsEJRPNS2_4NodeES6_EEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11PointerTypeEJRPNS0_4NodeEEEES9_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11PointerTypeEJRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13ReferenceTypeEJRPNS0_4NodeENS0_13ReferenceKindEEEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13ReferenceTypeEJRPNS2_4NodeENS2_13ReferenceKindEEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20PostfixQualifiedTypeEJRPNS0_4NodeERA9_KcEEES9_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20PostfixQualifiedTypeEJRPNS2_4NodeERA9_KcEEEPT_DpOT0_($ASTAllocator,$args,23953)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20PostfixQualifiedTypeEJRPNS0_4NodeERA11_KcEEES9_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20PostfixQualifiedTypeEJRPNS2_4NodeERA11_KcEEEPT_DpOT0_($ASTAllocator,$args,23885)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseSubstitutionEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $Index = 0, $SpecialSub$0 = 0, $SpecialSub$1 = 0, $Subs = 0, $Subs43 = 0, $Subs54 = 0, $WithTags = 0, $call = 0, $call12 = 0, $call17 = 0, $call2 = 0;
 var $call22 = 0, $call27 = 0, $call3 = 0, $call32 = 0, $call36 = 0, $call37 = 0, $call41 = 0, $call44 = 0, $call48 = 0, $call50 = 0, $call53 = 0, $call55 = 0, $call60 = 0, $call7 = 0, $cmp = 0, $cmp56 = 0, $conv = 0, $inc = 0, $incdec$ptr = 0, $incdec$ptr10 = 0;
 var $incdec$ptr15 = 0, $incdec$ptr20 = 0, $incdec$ptr25 = 0, $incdec$ptr30 = 0, $ref$tmp = 0, $ref$tmp11 = 0, $ref$tmp16 = 0, $ref$tmp21 = 0, $ref$tmp26 = 0, $ref$tmp31 = 0, $retval$1 = 0, $retval$2 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $ref$tmp = sp + 28|0;
 $ref$tmp11 = sp + 24|0;
 $ref$tmp16 = sp + 20|0;
 $ref$tmp21 = sp + 16|0;
 $ref$tmp26 = sp + 12|0;
 $ref$tmp31 = sp + 8|0;
 $WithTags = sp + 4|0;
 $Index = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,83)|0);
 L1: do {
  if ($call) {
   $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
   $conv = $call2 << 24 >> 24;
   $call3 = (_islower($conv)|0);
   $tobool = ($call3|0)==(0);
   if ($tobool) {
    $call41 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
    if ($call41) {
     $Subs43 = ((($this)) + 148|0);
     $call44 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE5emptyEv($Subs43)|0);
     if ($call44) {
      $retval$2 = 0;
      break;
     }
     $call48 = (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EEixEm($Subs43,0)|0);
     $6 = HEAP32[$call48>>2]|0;
     $retval$2 = $6;
     break;
    }
    HEAP32[$Index>>2] = 0;
    $call50 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10parseSeqIdEPm($this,$Index)|0);
    if ($call50) {
     $retval$1 = 0;
    } else {
     $7 = HEAP32[$Index>>2]|0;
     $inc = (($7) + 1)|0;
     HEAP32[$Index>>2] = $inc;
     $call53 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
     if ($call53) {
      $Subs54 = ((($this)) + 148|0);
      $call55 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Subs54)|0);
      $cmp56 = ($inc>>>0)<($call55>>>0);
      if ($cmp56) {
       $call60 = (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EEixEm($Subs54,$inc)|0);
       $8 = HEAP32[$call60>>2]|0;
       $retval$1 = $8;
      } else {
       $retval$1 = 0;
      }
     } else {
      $retval$1 = 0;
     }
    }
    $retval$2 = $retval$1;
    break;
   }
   switch ($conv|0) {
   case 97:  {
    $0 = HEAP32[$this>>2]|0;
    $incdec$ptr = ((($0)) + 1|0);
    HEAP32[$this>>2] = $incdec$ptr;
    HEAP32[$ref$tmp>>2] = 0;
    $call7 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SpecialSubstitutionEJNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_($this,$ref$tmp)|0);
    $SpecialSub$0 = $call7;
    break;
   }
   case 98:  {
    $1 = HEAP32[$this>>2]|0;
    $incdec$ptr10 = ((($1)) + 1|0);
    HEAP32[$this>>2] = $incdec$ptr10;
    HEAP32[$ref$tmp11>>2] = 1;
    $call12 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SpecialSubstitutionEJNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_($this,$ref$tmp11)|0);
    $SpecialSub$0 = $call12;
    break;
   }
   case 115:  {
    $2 = HEAP32[$this>>2]|0;
    $incdec$ptr15 = ((($2)) + 1|0);
    HEAP32[$this>>2] = $incdec$ptr15;
    HEAP32[$ref$tmp16>>2] = 2;
    $call17 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SpecialSubstitutionEJNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_($this,$ref$tmp16)|0);
    $SpecialSub$0 = $call17;
    break;
   }
   case 105:  {
    $3 = HEAP32[$this>>2]|0;
    $incdec$ptr20 = ((($3)) + 1|0);
    HEAP32[$this>>2] = $incdec$ptr20;
    HEAP32[$ref$tmp21>>2] = 3;
    $call22 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SpecialSubstitutionEJNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_($this,$ref$tmp21)|0);
    $SpecialSub$0 = $call22;
    break;
   }
   case 111:  {
    $4 = HEAP32[$this>>2]|0;
    $incdec$ptr25 = ((($4)) + 1|0);
    HEAP32[$this>>2] = $incdec$ptr25;
    HEAP32[$ref$tmp26>>2] = 4;
    $call27 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SpecialSubstitutionEJNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_($this,$ref$tmp26)|0);
    $SpecialSub$0 = $call27;
    break;
   }
   case 100:  {
    $5 = HEAP32[$this>>2]|0;
    $incdec$ptr30 = ((($5)) + 1|0);
    HEAP32[$this>>2] = $incdec$ptr30;
    HEAP32[$ref$tmp31>>2] = 5;
    $call32 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SpecialSubstitutionEJNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_($this,$ref$tmp31)|0);
    $SpecialSub$0 = $call32;
    break;
   }
   default: {
    $retval$2 = 0;
    break L1;
   }
   }
   $call36 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call37 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E12parseAbiTagsEPNS0_4NodeE($call36,$SpecialSub$0)|0);
   HEAP32[$WithTags>>2] = $call37;
   $cmp = ($call37|0)==($SpecialSub$0|0);
   if ($cmp) {
    $SpecialSub$1 = $SpecialSub$0;
   } else {
    $Subs = ((($this)) + 148|0);
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Subs,$WithTags);
    $SpecialSub$1 = $call37;
   }
   $retval$2 = $SpecialSub$1;
  } else {
   $retval$2 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($retval$2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($this,$Elem) {
 $this = $this|0;
 $Elem = $Elem|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $Cap = 0, $Last = 0, $call = 0, $cmp = 0, $incdec$ptr = 0, $mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Last = ((($this)) + 4|0);
 $0 = HEAP32[$Last>>2]|0;
 $Cap = ((($this)) + 8|0);
 $1 = HEAP32[$Cap>>2]|0;
 $cmp = ($0|0)==($1|0);
 if ($cmp) {
  $call = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($this)|0);
  $mul = $call << 1;
  __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE7reserveEm($this,$mul);
  $$pre = HEAP32[$Last>>2]|0;
  $3 = $$pre;
 } else {
  $3 = $0;
 }
 $2 = HEAP32[$Elem>>2]|0;
 $incdec$ptr = ((($3)) + 4|0);
 HEAP32[$Last>>2] = $incdec$ptr;
 HEAP32[$3>>2] = $2;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $Last = 0, $sub$ptr$div = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Last = ((($this)) + 4|0);
 $0 = HEAP32[$Last>>2]|0;
 $1 = HEAP32[$this>>2]|0;
 $sub$ptr$sub = (($0) - ($1))|0;
 $sub$ptr$div = $sub$ptr$sub >> 2;
 return ($sub$ptr$div|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE7reserveEm($this,$NewCap) {
 $this = $this|0;
 $NewCap = $NewCap|0;
 var $$in = 0, $$pre7 = 0, $0 = 0, $1 = 0, $2 = 0, $Cap = 0, $Last = 0, $Last17$pre$phiZ2D = 0, $add$ptr = 0, $add$ptr19 = 0, $call = 0, $call2 = 0, $call3 = 0, $call9 = 0, $cmp = 0, $cmp$i$i = 0, $cmp12 = 0, $mul = 0, $mul8 = 0, $sub$ptr$rhs$cast$i$i = 0;
 var $sub$ptr$sub$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($this)|0);
 $call2 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE8isInlineEv($this)|0);
 do {
  if ($call2) {
   $mul = $NewCap << 2;
   $call3 = (_malloc($mul)|0);
   $cmp = ($call3|0)==(0|0);
   if ($cmp) {
    __ZSt9terminatev();
    // unreachable;
   }
   $0 = HEAP32[$this>>2]|0;
   $Last = ((($this)) + 4|0);
   $1 = HEAP32[$Last>>2]|0;
   $sub$ptr$rhs$cast$i$i = $0;
   $sub$ptr$sub$i$i = (($1) - ($sub$ptr$rhs$cast$i$i))|0;
   $cmp$i$i = ($sub$ptr$sub$i$i|0)==(0);
   if (!($cmp$i$i)) {
    _memmove(($call3|0),($0|0),($sub$ptr$sub$i$i|0))|0;
   }
   HEAP32[$this>>2] = $call3;
   $$in = $call3;$Last17$pre$phiZ2D = $Last;
  } else {
   $2 = HEAP32[$this>>2]|0;
   $mul8 = $NewCap << 2;
   $call9 = (_realloc($2,$mul8)|0);
   HEAP32[$this>>2] = $call9;
   $cmp12 = ($call9|0)==(0|0);
   if ($cmp12) {
    __ZSt9terminatev();
    // unreachable;
   } else {
    $$pre7 = ((($this)) + 4|0);
    $$in = $call9;$Last17$pre$phiZ2D = $$pre7;
    break;
   }
  }
 } while(0);
 $add$ptr = (($$in) + ($call<<2)|0);
 HEAP32[$Last17$pre$phiZ2D>>2] = $add$ptr;
 $add$ptr19 = (($$in) + ($NewCap<<2)|0);
 $Cap = ((($this)) + 8|0);
 HEAP32[$Cap>>2] = $add$ptr19;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SpecialSubstitutionEJNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19SpecialSubstitutionEJNS2_14SpecialSubKindEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E12parseAbiTagsEPNS0_4NodeE($this,$N) {
 $this = $this|0;
 $N = $N|0;
 var $0 = 0, $N$addr = 0, $SN = 0, $call = 0, $call2 = 0, $call3 = 0, $retval$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $N$addr = sp + 8|0;
 $SN = sp;
 HEAP32[$N$addr>>2] = $N;
 $0 = $N;
 while(1) {
  $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,66)|0);
  if (!($call)) {
   $retval$2 = $0;
   break;
  }
  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseBareSourceNameEv($SN,$this);
  $call2 = (__ZNK12_GLOBAL__N_110StringView5emptyEv($SN)|0);
  if ($call2) {
   label = 5;
   break;
  }
  $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10AbiTagAttrEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this,$N$addr,$SN)|0);
  HEAP32[$N$addr>>2] = $call3;
  $0 = $call3;
 }
 if ((label|0) == 5) {
  $retval$2 = 0;
 }
 STACKTOP = sp;return ($retval$2|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE5emptyEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $Last = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $Last = ((($this)) + 4|0);
 $1 = HEAP32[$Last>>2]|0;
 $cmp = ($0|0)==($1|0);
 return ($cmp|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EEixEm($this,$Index) {
 $this = $this|0;
 $Index = $Index|0;
 var $add$ptr = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE5beginEv($this)|0);
 $add$ptr = (($call) + ($Index<<2)|0);
 return ($add$ptr|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10parseSeqIdEPm($this,$Out) {
 $this = $this|0;
 $Out = $Out|0;
 var $$sink = 0, $0 = 0, $1 = 0, $2 = 0, $Id$0 = 0, $add35 = 0, $add36 = 0, $call = 0, $call$off = 0, $call13 = 0, $call13$off = 0, $cmp = 0, $cmp15 = 0, $cmp19 = 0, $cmp4 = 0, $conv33 = 0, $incdec$ptr = 0, $mul31 = 0, $or$cond = 0, $retval$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
 $cmp = ($call<<24>>24)>(47);
 if ($cmp) {
  $cmp4 = ($call<<24>>24)<(58);
  $call$off = (($call) + -65)<<24>>24;
  $0 = ($call$off&255)<(26);
  $or$cond = $cmp4 | $0;
  if ($or$cond) {
   $Id$0 = 0;
   while(1) {
    $call13 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
    $cmp15 = ($call13<<24>>24)>(47);
    if (!($cmp15)) {
     break;
    }
    $cmp19 = ($call13<<24>>24)<(58);
    if ($cmp19) {
     $$sink = -48;
    } else {
     $call13$off = (($call13) + -65)<<24>>24;
     $1 = ($call13$off&255)<(26);
     if ($1) {
      $$sink = -55;
     } else {
      break;
     }
    }
    $mul31 = ($Id$0*36)|0;
    $conv33 = $call13 << 24 >> 24;
    $add35 = (($mul31) + ($$sink))|0;
    $add36 = (($add35) + ($conv33))|0;
    $2 = HEAP32[$this>>2]|0;
    $incdec$ptr = ((($2)) + 1|0);
    HEAP32[$this>>2] = $incdec$ptr;
    $Id$0 = $add36;
   }
   HEAP32[$Out>>2] = $Id$0;
   $retval$0 = 0;
  } else {
   $retval$0 = 1;
  }
 } else {
  $retval$0 = 1;
 }
 return ($retval$0|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE5beginEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 return ($0|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10AbiTagAttrEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10AbiTagAttrEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10AbiTagAttrEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = $args1;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle10AbiTagAttrC2EPNS0_4NodeENS_10StringViewE($call,$0,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,$N) {
 $this = $this|0;
 $N = $N|0;
 var $$pre = 0, $$pre6 = 0, $$pre7 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $BlockList = 0, $Current = 0, $Current7$phi$trans$insert = 0, $Current7$pre$phiZ2D = 0, $add = 0, $add$ptr = 0, $add$ptr13 = 0, $add2 = 0, $add8$pre$phiZ2D = 0, $and = 0, $call = 0, $cmp = 0, $cmp3 = 0;
 var $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $add = (($N) + 15)|0;
 $and = $add & -16;
 $BlockList = ((($this)) + 4096|0);
 $0 = HEAP32[$BlockList>>2]|0;
 $Current = ((($0)) + 4|0);
 $1 = HEAP32[$Current>>2]|0;
 $add2 = (($1) + ($and))|0;
 $cmp = ($add2>>>0)>(4087);
 do {
  if ($cmp) {
   $cmp3 = ($and>>>0)>(4088);
   if ($cmp3) {
    $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator15allocateMassiveEm($this,$and)|0);
    $retval$0 = $call;
    break;
   } else {
    __ZN12_GLOBAL__N_120BumpPointerAllocator4growEv($this);
    $$pre = HEAP32[$BlockList>>2]|0;
    $Current7$phi$trans$insert = ((($$pre)) + 4|0);
    $$pre6 = HEAP32[$Current7$phi$trans$insert>>2]|0;
    $$pre7 = (($$pre6) + ($and))|0;
    $2 = $$pre;$3 = $$pre6;$Current7$pre$phiZ2D = $Current7$phi$trans$insert;$add8$pre$phiZ2D = $$pre7;
    label = 5;
    break;
   }
  } else {
   $2 = $0;$3 = $1;$Current7$pre$phiZ2D = $Current;$add8$pre$phiZ2D = $add2;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  HEAP32[$Current7$pre$phiZ2D>>2] = $add8$pre$phiZ2D;
  $add$ptr = ((($2)) + 8|0);
  $add$ptr13 = (($add$ptr) + ($3)|0);
  $retval$0 = $add$ptr13;
 }
 return ($retval$0|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle10AbiTagAttrC2EPNS0_4NodeENS_10StringViewE($this,$Base_,$Tag_) {
 $this = $this|0;
 $Base_ = $Base_|0;
 $Tag_ = $Tag_|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ArrayCache = 0, $Base = 0, $FunctionCache = 0, $RHSComponentCache = 0, $Tag = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $RHSComponentCache = ((($Base_)) + 5|0);
 $0 = HEAP8[$RHSComponentCache>>0]|0;
 $ArrayCache = ((($Base_)) + 6|0);
 $1 = HEAP8[$ArrayCache>>0]|0;
 $FunctionCache = ((($Base_)) + 7|0);
 $2 = HEAP8[$FunctionCache>>0]|0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,8,$0,$1,$2);
 HEAP32[$this>>2] = (4124);
 $Base = ((($this)) + 8|0);
 HEAP32[$Base>>2] = $Base_;
 $Tag = ((($this)) + 12|0);
 $3 = $Tag_;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = $Tag;
 $10 = $9;
 HEAP32[$10>>2] = $5;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $8;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,$K_,$RHSComponentCache_,$ArrayCache_,$FunctionCache_) {
 $this = $this|0;
 $K_ = $K_|0;
 $RHSComponentCache_ = $RHSComponentCache_|0;
 $ArrayCache_ = $ArrayCache_|0;
 $FunctionCache_ = $FunctionCache_|0;
 var $ArrayCache = 0, $FunctionCache = 0, $K = 0, $RHSComponentCache = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (4168);
 $K = ((($this)) + 4|0);
 HEAP8[$K>>0] = $K_;
 $RHSComponentCache = ((($this)) + 5|0);
 HEAP8[$RHSComponentCache>>0] = $RHSComponentCache_;
 $ArrayCache = ((($this)) + 6|0);
 HEAP8[$ArrayCache>>0] = $ArrayCache_;
 $FunctionCache = ((($this)) + 7|0);
 HEAP8[$FunctionCache>>0] = $FunctionCache_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle4Node19hasRHSComponentSlowERNS_12OutputStreamE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNK12_GLOBAL__N_116itanium_demangle4Node12hasArraySlowERNS_12OutputStreamE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNK12_GLOBAL__N_116itanium_demangle4Node15hasFunctionSlowERNS_12OutputStreamE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function __ZNK12_GLOBAL__N_116itanium_demangle4Node13getSyntaxNodeERNS_12OutputStreamE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($this|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle10AbiTagAttr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Base = 0, $Tag = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, $tmpcast$byval_copy = 0;
 var $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp4$byval_copy = sp + 40|0;
 $tmpcast$byval_copy = sp + 32|0;
 $agg$tmp$byval_copy = sp + 24|0;
 $agg$tmp = sp + 16|0;
 $agg$tmp2 = sp;
 $agg$tmp4 = sp + 8|0;
 $Base = ((($this)) + 8|0);
 $0 = HEAP32[$Base>>2]|0;
 $vtable = HEAP32[$0>>2]|0;
 $vfn = ((($vtable)) + 16|0);
 $1 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vii[$1 & 255]($0,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,23564);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Tag = ((($this)) + 12|0);
 $2 = $Tag;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = $agg$tmp2;
 $9 = $8;
 HEAP32[$9>>2] = $4;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $7;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4,23570);
 ;HEAP32[$agg$tmp4$byval_copy>>2]=HEAP32[$agg$tmp4>>2]|0;HEAP32[$agg$tmp4$byval_copy+4>>2]=HEAP32[$agg$tmp4+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp4$byval_copy);
 STACKTOP = sp;return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle4Node10printRightERNS_12OutputStreamE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle4Node11getBaseNameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_110StringViewC2Ev($agg$result);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle4NodeD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle10AbiTagAttrD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_110StringViewC2Ev($this) {
 $this = $this|0;
 var $Last = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $Last = ((($this)) + 4|0);
 HEAP32[$Last>>2] = 0;
 return;
}
function __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($this,$R) {
 $this = $this|0;
 $R = $R|0;
 var $0 = 0, $1 = 0, $2 = 0, $CurrentPosition = 0, $add = 0, $add$ptr = 0, $call = 0, $call2 = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNK12_GLOBAL__N_110StringView4sizeEv($R)|0);
 $cmp = ($call|0)==(0);
 if (!($cmp)) {
  __ZN12_GLOBAL__N_112OutputStream4growEm($this,$call);
  $0 = HEAP32[$this>>2]|0;
  $CurrentPosition = ((($this)) + 4|0);
  $1 = HEAP32[$CurrentPosition>>2]|0;
  $add$ptr = (($0) + ($1)|0);
  $call2 = (__ZNK12_GLOBAL__N_110StringView5beginEv($R)|0);
  _memmove(($add$ptr|0),($call2|0),($call|0))|0;
  $2 = HEAP32[$CurrentPosition>>2]|0;
  $add = (($2) + ($call))|0;
  HEAP32[$CurrentPosition>>2] = $add;
 }
 return;
}
function __ZNK12_GLOBAL__N_110StringView4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $Last = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Last = ((($this)) + 4|0);
 $0 = HEAP32[$Last>>2]|0;
 $1 = HEAP32[$this>>2]|0;
 $sub$ptr$sub = (($0) - ($1))|0;
 return ($sub$ptr$sub|0);
}
function __ZNK12_GLOBAL__N_110StringView5beginEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 return ($0|0);
}
function ___cxa_pure_virtual() {
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 _abort_message(23659,$vararg_buffer);
 // unreachable;
}
function __ZN12_GLOBAL__N_116itanium_demangle4NodeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _llvm_trap();
 // unreachable;
}
function __ZN12_GLOBAL__N_120BumpPointerAllocator15allocateMassiveEm($this,$NBytes) {
 $this = $this|0;
 $NBytes = $NBytes|0;
 var $0 = 0, $1 = 0, $BlockList = 0, $Current = 0, $add = 0, $add$ptr = 0, $call = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $add = (($NBytes) + 8)|0;
 $call = (_malloc($add)|0);
 $cmp = ($call|0)==(0|0);
 if ($cmp) {
  __ZSt9terminatev();
  // unreachable;
 } else {
  $BlockList = ((($this)) + 4096|0);
  $0 = HEAP32[$BlockList>>2]|0;
  $1 = HEAP32[$0>>2]|0;
  HEAP32[$call>>2] = $1;
  $Current = ((($call)) + 4|0);
  HEAP32[$Current>>2] = 0;
  HEAP32[$0>>2] = $call;
  $add$ptr = ((($call)) + 8|0);
  return ($add$ptr|0);
 }
 return (0)|0;
}
function __ZN12_GLOBAL__N_120BumpPointerAllocator4growEv($this) {
 $this = $this|0;
 var $0 = 0, $BlockList = 0, $Current = 0, $call = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_malloc(4096)|0);
 $cmp = ($call|0)==(0|0);
 if ($cmp) {
  __ZSt9terminatev();
  // unreachable;
 } else {
  $BlockList = ((($this)) + 4096|0);
  $0 = HEAP32[$BlockList>>2]|0;
  HEAP32[$call>>2] = $0;
  $Current = ((($call)) + 4|0);
  HEAP32[$Current>>2] = 0;
  HEAP32[$BlockList>>2] = $call;
  return;
 }
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19SpecialSubstitutionEJNS2_14SpecialSubKindEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,12)|0);
 $0 = HEAP32[$args>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle19SpecialSubstitutionC2ENS0_14SpecialSubKindE($call,$0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle19SpecialSubstitutionC2ENS0_14SpecialSubKindE($this,$SSK_) {
 $this = $this|0;
 $SSK_ = $SSK_|0;
 var $SSK = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,36,1,1,1);
 HEAP32[$this>>2] = (4212);
 $SSK = ((($this)) + 8|0);
 HEAP32[$SSK>>2] = $SSK_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle19SpecialSubstitution9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $SSK = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp12 = 0, $agg$tmp12$byval_copy = 0, $agg$tmp15 = 0, $agg$tmp15$byval_copy = 0, $agg$tmp3 = 0, $agg$tmp3$byval_copy = 0, $agg$tmp6 = 0, $agg$tmp6$byval_copy = 0, $agg$tmp9 = 0, $agg$tmp9$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $agg$tmp15$byval_copy = sp + 88|0;
 $agg$tmp12$byval_copy = sp + 80|0;
 $agg$tmp9$byval_copy = sp + 72|0;
 $agg$tmp6$byval_copy = sp + 64|0;
 $agg$tmp3$byval_copy = sp + 56|0;
 $agg$tmp$byval_copy = sp + 48|0;
 $agg$tmp = sp + 40|0;
 $agg$tmp3 = sp + 32|0;
 $agg$tmp6 = sp + 24|0;
 $agg$tmp9 = sp + 16|0;
 $agg$tmp12 = sp + 8|0;
 $agg$tmp15 = sp;
 $SSK = ((($this)) + 8|0);
 $0 = HEAP32[$SSK>>2]|0;
 switch ($0|0) {
 case 0:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,23744);
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
  break;
 }
 case 1:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp3,23759);
  ;HEAP32[$agg$tmp3$byval_copy>>2]=HEAP32[$agg$tmp3>>2]|0;HEAP32[$agg$tmp3$byval_copy+4>>2]=HEAP32[$agg$tmp3+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp3$byval_copy);
  break;
 }
 case 2:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6,23777);
  ;HEAP32[$agg$tmp6$byval_copy>>2]=HEAP32[$agg$tmp6>>2]|0;HEAP32[$agg$tmp6$byval_copy+4>>2]=HEAP32[$agg$tmp6+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp6$byval_copy);
  break;
 }
 case 3:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp9,23789);
  ;HEAP32[$agg$tmp9$byval_copy>>2]=HEAP32[$agg$tmp9>>2]|0;HEAP32[$agg$tmp9$byval_copy+4>>2]=HEAP32[$agg$tmp9+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp9$byval_copy);
  break;
 }
 case 4:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp12,23802);
  ;HEAP32[$agg$tmp12$byval_copy>>2]=HEAP32[$agg$tmp12>>2]|0;HEAP32[$agg$tmp12$byval_copy+4>>2]=HEAP32[$agg$tmp12+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp12$byval_copy);
  break;
 }
 case 5:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp15,23815);
  ;HEAP32[$agg$tmp15$byval_copy>>2]=HEAP32[$agg$tmp15>>2]|0;HEAP32[$agg$tmp15$byval_copy+4>>2]=HEAP32[$agg$tmp15+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp15$byval_copy);
  break;
 }
 default: {
 }
 }
 STACKTOP = sp;return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle19SpecialSubstitution11getBaseNameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $SSK = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $SSK = ((($this)) + 8|0);
 $0 = HEAP32[$SSK>>2]|0;
 switch ($0|0) {
 case 0:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result,23689);
  break;
 }
 case 1:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result,23699);
  break;
 }
 case 2:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result,23712);
  break;
 }
 case 3:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result,23719);
  break;
 }
 case 4:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result,23727);
  break;
 }
 case 5:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result,23735);
  break;
 }
 default: {
  // unreachable;
 }
 }
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle19SpecialSubstitutionD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20PostfixQualifiedTypeEJRPNS2_4NodeERA11_KcEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args1);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle20PostfixQualifiedTypeC2EPNS0_4NodeENS_10StringViewE($call,$0,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle20PostfixQualifiedTypeC2EPNS0_4NodeENS_10StringViewE($this,$Ty_,$Postfix_) {
 $this = $this|0;
 $Ty_ = $Ty_|0;
 $Postfix_ = $Postfix_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Postfix = 0, $Ty = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,5,1,1,1);
 HEAP32[$this>>2] = (4256);
 $Ty = ((($this)) + 8|0);
 HEAP32[$Ty>>2] = $Ty_;
 $Postfix = ((($this)) + 12|0);
 $0 = $Postfix_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Postfix;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle20PostfixQualifiedType9printLeftERNS_12OutputStreamE($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Postfix = 0, $Ty = 0, $agg$tmp = 0, $tmpcast$byval_copy = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $Ty = ((($this)) + 8|0);
 $0 = HEAP32[$Ty>>2]|0;
 $vtable = HEAP32[$0>>2]|0;
 $vfn = ((($vtable)) + 16|0);
 $1 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vii[$1 & 255]($0,$s);
 $Postfix = ((($this)) + 12|0);
 $2 = $Postfix;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = $agg$tmp;
 $9 = $8;
 HEAP32[$9>>2] = $4;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $7;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$tmpcast$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle20PostfixQualifiedTypeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20PostfixQualifiedTypeEJRPNS2_4NodeERA9_KcEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args1);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle20PostfixQualifiedTypeC2EPNS0_4NodeENS_10StringViewE($call,$0,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13ReferenceTypeEJRPNS2_4NodeENS2_13ReferenceKindEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = HEAP32[$args1>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle13ReferenceTypeC2EPKNS0_4NodeENS0_13ReferenceKindE($call,$0,$1);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle13ReferenceTypeC2EPKNS0_4NodeENS0_13ReferenceKindE($this,$Pointee_,$RK_) {
 $this = $this|0;
 $Pointee_ = $Pointee_|0;
 $RK_ = $RK_|0;
 var $0 = 0, $Pointee = 0, $Printing = 0, $RHSComponentCache = 0, $RK = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $RHSComponentCache = ((($Pointee_)) + 5|0);
 $0 = HEAP8[$RHSComponentCache>>0]|0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,12,$0,1,1);
 HEAP32[$this>>2] = (4300);
 $Pointee = ((($this)) + 8|0);
 HEAP32[$Pointee>>2] = $Pointee_;
 $RK = ((($this)) + 12|0);
 HEAP32[$RK>>2] = $RK_;
 $Printing = ((($this)) + 16|0);
 HEAP8[$Printing>>0] = 0;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType19hasRHSComponentSlowERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $Pointee = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Pointee = ((($this)) + 8|0);
 $0 = HEAP32[$Pointee>>2]|0;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE($0,$S)|0);
 return ($call|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType9printLeftERNS_12OutputStreamE($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $Collapsed = 0, $Printing = 0, $SavePrinting = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp12 = 0, $agg$tmp12$byval_copy = 0, $agg$tmp15 = 0, $agg$tmp15$byval_copy = 0, $call = 0, $call10 = 0, $call8 = 0, $cmp = 0, $cond = 0, $second = 0, $tobool = 0;
 var $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $agg$tmp15$byval_copy = sp + 56|0;
 $agg$tmp12$byval_copy = sp + 48|0;
 $agg$tmp$byval_copy = sp + 40|0;
 $SavePrinting = sp + 32|0;
 $Collapsed = sp + 24|0;
 $agg$tmp = sp + 16|0;
 $agg$tmp12 = sp + 8|0;
 $agg$tmp15 = sp;
 $Printing = ((($this)) + 16|0);
 $0 = HEAP8[$Printing>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if ($tobool) {
  __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting,$Printing,1);
  __ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType8collapseERNS_12OutputStreamE($Collapsed,$this,$s);
  $second = ((($Collapsed)) + 4|0);
  $1 = HEAP32[$second>>2]|0;
  $vtable = HEAP32[$1>>2]|0;
  $vfn = ((($vtable)) + 16|0);
  $2 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_vii[$2 & 255]($1,$s);
  $call = (__ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE($1,$s)|0);
  if ($call) {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,23964);
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$agg$tmp$byval_copy);
  }
  $call8 = (__ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE($1,$s)|0);
  if ($call8) {
   label = 6;
  } else {
   $call10 = (__ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE($1,$s)|0);
   if ($call10) {
    label = 6;
   }
  }
  if ((label|0) == 6) {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp12,23966);
   ;HEAP32[$agg$tmp12$byval_copy>>2]=HEAP32[$agg$tmp12>>2]|0;HEAP32[$agg$tmp12$byval_copy+4>>2]=HEAP32[$agg$tmp12+4>>2]|0;
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$agg$tmp12$byval_copy);
  }
  $3 = HEAP32[$Collapsed>>2]|0;
  $cmp = ($3|0)==(0);
  $cond = $cmp ? 23968 : 23970;
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp15,$cond);
  ;HEAP32[$agg$tmp15$byval_copy>>2]=HEAP32[$agg$tmp15>>2]|0;HEAP32[$agg$tmp15$byval_copy+4>>2]=HEAP32[$agg$tmp15+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$agg$tmp15$byval_copy);
  __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
 }
 STACKTOP = sp;return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType10printRightERNS_12OutputStreamE($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $Collapsed = 0, $Printing = 0, $SavePrinting = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call4 = 0, $second = 0, $tobool = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp$byval_copy = sp + 24|0;
 $SavePrinting = sp + 16|0;
 $Collapsed = sp + 8|0;
 $agg$tmp = sp;
 $Printing = ((($this)) + 16|0);
 $0 = HEAP8[$Printing>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if ($tobool) {
  __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting,$Printing,1);
  __ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType8collapseERNS_12OutputStreamE($Collapsed,$this,$s);
  $second = ((($Collapsed)) + 4|0);
  $1 = HEAP32[$second>>2]|0;
  $call = (__ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE($1,$s)|0);
  if ($call) {
   label = 4;
  } else {
   $call4 = (__ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE($1,$s)|0);
   if ($call4) {
    label = 4;
   }
  }
  if ((label|0) == 4) {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,23962);
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$agg$tmp$byval_copy);
  }
  $vtable = HEAP32[$1>>2]|0;
  $vfn = ((($vtable)) + 20|0);
  $2 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_vii[$2 & 255]($1,$s);
  __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
 }
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle13ReferenceTypeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($this,$Restore_,$NewVal) {
 $this = $this|0;
 $Restore_ = $Restore_|0;
 $NewVal = $NewVal|0;
 var $0 = 0, $OriginalValue = 0, $ShouldRestore = 0, $frombool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $frombool = $NewVal&1;
 HEAP32[$this>>2] = $Restore_;
 $OriginalValue = ((($this)) + 4|0);
 $0 = HEAP8[$Restore_>>0]|0;
 HEAP8[$OriginalValue>>0] = $0;
 $ShouldRestore = ((($this)) + 5|0);
 HEAP8[$ShouldRestore>>0] = 1;
 HEAP8[$Restore_>>0] = $frombool;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType8collapseERNS_12OutputStreamE($agg$result,$this,$S) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $S = $S|0;
 var $$in = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $Pointee = 0, $Pointee3 = 0, $RK = 0, $RK5 = 0, $call = 0, $call2 = 0, $cmp = 0, $cmp$i$i$i = 0, $second$i$i = 0, $vfn = 0;
 var $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $RK = ((($this)) + 12|0);
 $Pointee = ((($this)) + 8|0);
 $0 = HEAP32[$RK>>2]|0;
 HEAP32[$agg$result>>2] = $0;
 $second$i$i = ((($agg$result)) + 4|0);
 $1 = HEAP32[$Pointee>>2]|0;
 HEAP32[$second$i$i>>2] = $1;
 $$in = $1;$7 = $0;
 while(1) {
  $2 = $$in;
  $3 = $$in;
  $vtable = HEAP32[$3>>2]|0;
  $vfn = ((($vtable)) + 12|0);
  $4 = HEAP32[$vfn>>2]|0;
  $call = (FUNCTION_TABLE_iii[$4 & 255]($2,$S)|0);
  $call2 = (__ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($call)|0);
  $cmp = ($call2<<24>>24)==(12);
  if (!($cmp)) {
   break;
  }
  $Pointee3 = ((($call)) + 8|0);
  $5 = HEAP32[$Pointee3>>2]|0;
  HEAP32[$second$i$i>>2] = $5;
  $RK5 = ((($call)) + 12|0);
  $6 = HEAP32[$RK5>>2]|0;
  $cmp$i$i$i = ($6|0)<($7|0);
  $8 = $cmp$i$i$i ? $6 : $7;
  HEAP32[$agg$result>>2] = $8;
  $$in = $5;$7 = $8;
 }
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $ArrayCache = 0, $call = 0, $cmp = 0, $cmp3 = 0, $retval$0 = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ArrayCache = ((($this)) + 6|0);
 $0 = HEAP8[$ArrayCache>>0]|0;
 $cmp = ($0<<24>>24)==(2);
 if ($cmp) {
  $vtable = HEAP32[$this>>2]|0;
  $vfn = ((($vtable)) + 4|0);
  $1 = HEAP32[$vfn>>2]|0;
  $call = (FUNCTION_TABLE_iii[$1 & 255]($this,$S)|0);
  $retval$0 = $call;
 } else {
  $cmp3 = ($0<<24>>24)==(0);
  $retval$0 = $cmp3;
 }
 return ($retval$0|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $FunctionCache = 0, $call = 0, $cmp = 0, $cmp3 = 0, $retval$0 = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $FunctionCache = ((($this)) + 7|0);
 $0 = HEAP8[$FunctionCache>>0]|0;
 $cmp = ($0<<24>>24)==(2);
 if ($cmp) {
  $vtable = HEAP32[$this>>2]|0;
  $vfn = ((($vtable)) + 8|0);
  $1 = HEAP32[$vfn>>2]|0;
  $call = (FUNCTION_TABLE_iii[$1 & 255]($this,$S)|0);
  $retval$0 = $call;
 } else {
  $cmp3 = ($0<<24>>24)==(0);
  $retval$0 = $cmp3;
 }
 return ($retval$0|0);
}
function __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $OriginalValue = 0, $ShouldRestore = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ShouldRestore = ((($this)) + 5|0);
 $0 = HEAP8[$ShouldRestore>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if (!($tobool)) {
  $OriginalValue = ((($this)) + 4|0);
  $1 = HEAP8[$OriginalValue>>0]|0;
  $2 = HEAP32[$this>>2]|0;
  HEAP8[$2>>0] = $1;
 }
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($this) {
 $this = $this|0;
 var $0 = 0, $K = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $K = ((($this)) + 4|0);
 $0 = HEAP8[$K>>0]|0;
 return ($0|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $RHSComponentCache = 0, $call = 0, $cmp = 0, $cmp3 = 0, $retval$0 = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $RHSComponentCache = ((($this)) + 5|0);
 $0 = HEAP8[$RHSComponentCache>>0]|0;
 $cmp = ($0<<24>>24)==(2);
 if ($cmp) {
  $vtable = HEAP32[$this>>2]|0;
  $1 = HEAP32[$vtable>>2]|0;
  $call = (FUNCTION_TABLE_iii[$1 & 255]($this,$S)|0);
  $retval$0 = $call;
 } else {
  $cmp3 = ($0<<24>>24)==(0);
  $retval$0 = $cmp3;
 }
 return ($retval$0|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11PointerTypeEJRPNS2_4NodeEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,12)|0);
 $0 = HEAP32[$args>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle11PointerTypeC2EPKNS0_4NodeE($call,$0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle11PointerTypeC2EPKNS0_4NodeE($this,$Pointee_) {
 $this = $this|0;
 $Pointee_ = $Pointee_|0;
 var $0 = 0, $Pointee = 0, $RHSComponentCache = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $RHSComponentCache = ((($Pointee_)) + 5|0);
 $0 = HEAP8[$RHSComponentCache>>0]|0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,11,$0,1,1);
 HEAP32[$this>>2] = (4344);
 $Pointee = ((($this)) + 8|0);
 HEAP32[$Pointee>>2] = $Pointee_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle11PointerType19hasRHSComponentSlowERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $Pointee = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Pointee = ((($this)) + 8|0);
 $0 = HEAP32[$Pointee>>2]|0;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE($0,$S)|0);
 return ($call|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle11PointerType9printLeftERNS_12OutputStreamE($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Pointee = 0, $Protocol = 0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp15 = 0, $agg$tmp15$byval_copy = 0, $agg$tmp18 = 0, $agg$tmp18$byval_copy = 0, $agg$tmp21 = 0, $agg$tmp21$byval_copy = 0, $agg$tmp23 = 0, $agg$tmp25 = 0, $agg$tmp25$byval_copy = 0, $call = 0, $call10 = 0, $call13 = 0, $call3 = 0, $call6 = 0, $cmp = 0, $tmpcast$byval_copy = 0, $vfn = 0, $vtable = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $agg$tmp25$byval_copy = sp + 88|0;
 $tmpcast$byval_copy = sp + 80|0;
 $agg$tmp21$byval_copy = sp + 72|0;
 $agg$tmp18$byval_copy = sp + 64|0;
 $agg$tmp15$byval_copy = sp + 56|0;
 $agg$tmp$byval_copy = sp + 48|0;
 $agg$tmp = sp + 40|0;
 $agg$tmp15 = sp + 32|0;
 $agg$tmp18 = sp + 24|0;
 $agg$tmp21 = sp + 16|0;
 $agg$tmp23 = sp;
 $agg$tmp25 = sp + 8|0;
 $Pointee = ((($this)) + 8|0);
 $0 = HEAP32[$Pointee>>2]|0;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($0)|0);
 $cmp = ($call<<24>>24)==(10);
 do {
  if ($cmp) {
   $call3 = (__ZNK12_GLOBAL__N_116itanium_demangle13ObjCProtoName12isObjCObjectEv($0)|0);
   if ($call3) {
    $6 = HEAP32[$Pointee>>2]|0;
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp21,24037);
    ;HEAP32[$agg$tmp21$byval_copy>>2]=HEAP32[$agg$tmp21>>2]|0;HEAP32[$agg$tmp21$byval_copy+4>>2]=HEAP32[$agg$tmp21+4>>2]|0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$agg$tmp21$byval_copy);
    $Protocol = ((($6)) + 12|0);
    $7 = $Protocol;
    $8 = $7;
    $9 = HEAP32[$8>>2]|0;
    $10 = (($7) + 4)|0;
    $11 = $10;
    $12 = HEAP32[$11>>2]|0;
    $13 = $agg$tmp23;
    $14 = $13;
    HEAP32[$14>>2] = $9;
    $15 = (($13) + 4)|0;
    $16 = $15;
    HEAP32[$16>>2] = $12;
    ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp23>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp23+4>>2]|0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$tmpcast$byval_copy);
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp25,24041);
    ;HEAP32[$agg$tmp25$byval_copy>>2]=HEAP32[$agg$tmp25>>2]|0;HEAP32[$agg$tmp25$byval_copy+4>>2]=HEAP32[$agg$tmp25+4>>2]|0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$agg$tmp25$byval_copy);
    break;
   } else {
    $$pre = HEAP32[$Pointee>>2]|0;
    $1 = $$pre;
    label = 4;
    break;
   }
  } else {
   $1 = $0;
   label = 4;
  }
 } while(0);
 if ((label|0) == 4) {
  $vtable = HEAP32[$1>>2]|0;
  $vfn = ((($vtable)) + 16|0);
  $2 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_vii[$2 & 255]($1,$s);
  $3 = HEAP32[$Pointee>>2]|0;
  $call6 = (__ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE($3,$s)|0);
  if ($call6) {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,23964);
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$agg$tmp$byval_copy);
  }
  $4 = HEAP32[$Pointee>>2]|0;
  $call10 = (__ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE($4,$s)|0);
  if ($call10) {
   label = 8;
  } else {
   $5 = HEAP32[$Pointee>>2]|0;
   $call13 = (__ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE($5,$s)|0);
   if ($call13) {
    label = 8;
   }
  }
  if ((label|0) == 8) {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp15,23966);
   ;HEAP32[$agg$tmp15$byval_copy>>2]=HEAP32[$agg$tmp15>>2]|0;HEAP32[$agg$tmp15$byval_copy+4>>2]=HEAP32[$agg$tmp15+4>>2]|0;
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$agg$tmp15$byval_copy);
  }
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp18,24035);
  ;HEAP32[$agg$tmp18$byval_copy>>2]=HEAP32[$agg$tmp18>>2]|0;HEAP32[$agg$tmp18$byval_copy+4>>2]=HEAP32[$agg$tmp18+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$agg$tmp18$byval_copy);
 }
 STACKTOP = sp;return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle11PointerType10printRightERNS_12OutputStreamE($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $Pointee = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call3 = 0, $call5 = 0, $call8 = 0, $cmp = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $Pointee = ((($this)) + 8|0);
 $0 = HEAP32[$Pointee>>2]|0;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($0)|0);
 $cmp = ($call<<24>>24)==(10);
 if ($cmp) {
  $call3 = (__ZNK12_GLOBAL__N_116itanium_demangle13ObjCProtoName12isObjCObjectEv($0)|0);
  if (!($call3)) {
   $$pre = HEAP32[$Pointee>>2]|0;
   $1 = $$pre;
   label = 4;
  }
 } else {
  $1 = $0;
  label = 4;
 }
 if ((label|0) == 4) {
  $call5 = (__ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE($1,$s)|0);
  if ($call5) {
   label = 6;
  } else {
   $2 = HEAP32[$Pointee>>2]|0;
   $call8 = (__ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE($2,$s)|0);
   if ($call8) {
    label = 6;
   }
  }
  if ((label|0) == 6) {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,23962);
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$agg$tmp$byval_copy);
  }
  $3 = HEAP32[$Pointee>>2]|0;
  $vtable = HEAP32[$3>>2]|0;
  $vfn = ((($vtable)) + 20|0);
  $4 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_vii[$4 & 255]($3,$s);
 }
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle11PointerTypeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle13ObjCProtoName12isObjCObjectEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $Ty = 0, $call = 0, $call5 = 0, $cmp = 0, $ref$tmp = 0, $ref$tmp3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp = sp + 8|0;
 $ref$tmp3 = sp;
 $Ty = ((($this)) + 8|0);
 $0 = HEAP32[$Ty>>2]|0;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($0)|0);
 $cmp = ($call<<24>>24)==(7);
 if ($cmp) {
  __ZNK12_GLOBAL__N_116itanium_demangle8NameType7getNameEv($ref$tmp,$0);
  __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp3,24023);
  $call5 = (__ZN12_GLOBAL__N_1eqERKNS_10StringViewES2_($ref$tmp,$ref$tmp3)|0);
  $1 = $call5;
 } else {
  $1 = 0;
 }
 STACKTOP = sp;return ($1|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle8NameType7getNameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Name = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Name = ((($this)) + 8|0);
 $0 = $Name;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$result;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZN12_GLOBAL__N_1eqERKNS_10StringViewES2_($LHS,$RHS) {
 $LHS = $LHS|0;
 $RHS = $RHS|0;
 var $0 = 0, $1 = 0, $2 = 0, $__first1$addr$0$i$i = 0, $__first2$addr$0$i$i = 0, $call = 0, $call1 = 0, $call2 = 0, $call3 = 0, $call4 = 0, $cmp = 0, $cmp$i$i = 0, $cmp$i$i$i = 0, $incdec$ptr$i$i = 0, $incdec$ptr1$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNK12_GLOBAL__N_110StringView4sizeEv($LHS)|0);
 $call1 = (__ZNK12_GLOBAL__N_110StringView4sizeEv($RHS)|0);
 $cmp = ($call|0)==($call1|0);
 L1: do {
  if ($cmp) {
   $call2 = (__ZNK12_GLOBAL__N_110StringView5beginEv($LHS)|0);
   $call3 = (__ZNK12_GLOBAL__N_110StringView3endEv($LHS)|0);
   $call4 = (__ZNK12_GLOBAL__N_110StringView5beginEv($RHS)|0);
   $__first1$addr$0$i$i = $call2;$__first2$addr$0$i$i = $call4;
   while(1) {
    $cmp$i$i = ($__first1$addr$0$i$i|0)==($call3|0);
    if ($cmp$i$i) {
     $2 = 1;
     break L1;
    }
    $0 = HEAP8[$__first1$addr$0$i$i>>0]|0;
    $1 = HEAP8[$__first2$addr$0$i$i>>0]|0;
    $cmp$i$i$i = ($0<<24>>24)==($1<<24>>24);
    if (!($cmp$i$i$i)) {
     $2 = 0;
     break L1;
    }
    $incdec$ptr$i$i = ((($__first1$addr$0$i$i)) + 1|0);
    $incdec$ptr1$i$i = ((($__first2$addr$0$i$i)) + 1|0);
    $__first1$addr$0$i$i = $incdec$ptr$i$i;$__first2$addr$0$i$i = $incdec$ptr1$i$i;
   }
  } else {
   $2 = 0;
  }
 } while(0);
 return ($2|0);
}
function __ZNK12_GLOBAL__N_110StringView3endEv($this) {
 $this = $this|0;
 var $0 = 0, $Last = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Last = ((($this)) + 4|0);
 $0 = HEAP32[$Last>>2]|0;
 return ($0|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20NameWithTemplateArgsEJRPNS2_4NodeES6_EEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = HEAP32[$args1>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgsC2EPNS0_4NodeES3_($call,$0,$1);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgsC2EPNS0_4NodeES3_($this,$Name_,$TemplateArgs_) {
 $this = $this|0;
 $Name_ = $Name_|0;
 $TemplateArgs_ = $TemplateArgs_|0;
 var $Name = 0, $TemplateArgs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,32,1,1,1);
 HEAP32[$this>>2] = (4388);
 $Name = ((($this)) + 8|0);
 HEAP32[$Name>>2] = $Name_;
 $TemplateArgs = ((($this)) + 12|0);
 HEAP32[$TemplateArgs>>2] = $TemplateArgs_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgs9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $Name = 0, $TemplateArgs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Name = ((($this)) + 8|0);
 $0 = HEAP32[$Name>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 $TemplateArgs = ((($this)) + 12|0);
 $1 = HEAP32[$TemplateArgs>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($1,$S);
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgs11getBaseNameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $Name = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Name = ((($this)) + 8|0);
 $0 = HEAP32[$Name>>2]|0;
 $vtable = HEAP32[$0>>2]|0;
 $vfn = ((($vtable)) + 24|0);
 $1 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vii[$1 & 255]($agg$result,$0);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgsD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5clearEv($this) {
 $this = $this|0;
 var $0 = 0, $Last = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $Last = ((($this)) + 4|0);
 HEAP32[$Last>>2] = $0;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEC2EOS4_($this,$Other) {
 $this = $this|0;
 $Other = $Other|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $Cap = 0, $Cap11 = 0, $Last = 0, $Last10 = 0, $Last9 = 0, $add$ptr = 0, $call = 0, $call2 = 0, $call3 = 0, $call6 = 0, $cmp$i$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEC2Ev($this);
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE8isInlineEv($Other)|0);
 if ($call) {
  $call2 = (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5beginEv($Other)|0);
  $call3 = (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE3endEv($Other)|0);
  $sub$ptr$lhs$cast$i$i = $call3;
  $sub$ptr$rhs$cast$i$i = $call2;
  $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
  $cmp$i$i = ($sub$ptr$sub$i$i|0)==(0);
  if (!($cmp$i$i)) {
   $0 = HEAP32[$this>>2]|0;
   _memmove(($0|0),($call2|0),($sub$ptr$sub$i$i|0))|0;
  }
  $1 = HEAP32[$this>>2]|0;
  $call6 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE4sizeEv($Other)|0);
  $add$ptr = (($1) + ($call6<<2)|0);
  $Last = ((($this)) + 4|0);
  HEAP32[$Last>>2] = $add$ptr;
  __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5clearEv($Other);
 } else {
  $2 = HEAP32[$Other>>2]|0;
  HEAP32[$this>>2] = $2;
  $Last9 = ((($Other)) + 4|0);
  $3 = HEAP32[$Last9>>2]|0;
  $Last10 = ((($this)) + 4|0);
  HEAP32[$Last10>>2] = $3;
  $Cap = ((($Other)) + 8|0);
  $4 = HEAP32[$Cap>>2]|0;
  $Cap11 = ((($this)) + 8|0);
  HEAP32[$Cap11>>2] = $4;
  __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE11clearInlineEv($Other);
 }
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseTemplateArgEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $Arg10 = 0, $Args = 0, $Names = 0, $add$ptr = 0, $call = 0, $call11 = 0, $call12 = 0, $call18 = 0, $call2 = 0, $call22 = 0, $call28 = 0, $call29 = 0, $call3 = 0, $call32 = 0, $call37 = 0, $call38 = 0, $call39 = 0;
 var $call4 = 0, $call40 = 0, $call8 = 0, $call9 = 0, $cmp = 0, $cmp13 = 0, $cmp24 = 0, $cmp30 = 0, $conv = 0, $incdec$ptr = 0, $incdec$ptr7 = 0, $retval$5 = 0, $spec$select = 0, $spec$select6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $Arg10 = sp + 8|0;
 $Args = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
 $conv = $call << 24 >> 24;
 L1: do {
  switch ($conv|0) {
  case 88:  {
   $0 = HEAP32[$this>>2]|0;
   $incdec$ptr = ((($0)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr;
   $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call2)|0);
   $cmp = ($call3|0)==(0|0);
   if ($cmp) {
    $retval$5 = 0;
   } else {
    $call4 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
    $spec$select = $call4 ? $call3 : 0;
    STACKTOP = sp;return ($spec$select|0);
   }
   break;
  }
  case 74:  {
   $1 = HEAP32[$this>>2]|0;
   $incdec$ptr7 = ((($1)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr7;
   $Names = ((($this)) + 8|0);
   $call8 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names)|0);
   while(1) {
    $call9 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
    if ($call9) {
     label = 9;
     break;
    }
    $call11 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call12 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseTemplateArgEv($call11)|0);
    HEAP32[$Arg10>>2] = $call12;
    $cmp13 = ($call12|0)==(0|0);
    if ($cmp13) {
     label = 8;
     break;
    }
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names,$Arg10);
   }
   if ((label|0) == 8) {
    $retval$5 = 0;
    break L1;
   }
   else if ((label|0) == 9) {
    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($Args,$this,$call8);
    $call18 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20TemplateArgumentPackEJRNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this,$Args)|0);
    $retval$5 = $call18;
    break L1;
   }
   break;
  }
  case 76:  {
   $call22 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $cmp24 = ($call22<<24>>24)==(90);
   if (!($cmp24)) {
    $call37 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call38 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseExprPrimaryEv($call37)|0);
    $retval$5 = $call38;
    break L1;
   }
   $2 = HEAP32[$this>>2]|0;
   $add$ptr = ((($2)) + 2|0);
   HEAP32[$this>>2] = $add$ptr;
   $call28 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call29 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv($call28)|0);
   $cmp30 = ($call29|0)==(0|0);
   if ($cmp30) {
    $retval$5 = 0;
   } else {
    $call32 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
    $spec$select6 = $call32 ? $call29 : 0;
    $retval$5 = $spec$select6;
   }
   break;
  }
  default: {
   $call39 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call40 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call39)|0);
   $retval$5 = $call40;
  }
  }
 } while(0);
 STACKTOP = sp;return ($retval$5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEaSEOS4_($this,$Other) {
 $this = $this|0;
 $Other = $Other|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Cap = 0, $Cap17 = 0, $Cap23 = 0, $Cap24 = 0, $Last = 0, $Last15 = 0, $Last16 = 0, $Last21 = 0;
 var $Last22 = 0, $add$ptr = 0, $call = 0, $call2 = 0, $call4 = 0, $call5 = 0, $call9 = 0, $cmp$i$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$sub$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE8isInlineEv($Other)|0);
 $call2 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE8isInlineEv($this)|0);
 do {
  if ($call) {
   if (!($call2)) {
    $0 = HEAP32[$this>>2]|0;
    _free($0);
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE11clearInlineEv($this);
   }
   $call4 = (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5beginEv($Other)|0);
   $call5 = (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE3endEv($Other)|0);
   $sub$ptr$lhs$cast$i$i = $call5;
   $sub$ptr$rhs$cast$i$i = $call4;
   $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
   $cmp$i$i = ($sub$ptr$sub$i$i|0)==(0);
   if (!($cmp$i$i)) {
    $1 = HEAP32[$this>>2]|0;
    _memmove(($1|0),($call4|0),($sub$ptr$sub$i$i|0))|0;
   }
   $2 = HEAP32[$this>>2]|0;
   $call9 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE4sizeEv($Other)|0);
   $add$ptr = (($2) + ($call9<<2)|0);
   $Last = ((($this)) + 4|0);
   HEAP32[$Last>>2] = $add$ptr;
   __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5clearEv($Other);
  } else {
   if ($call2) {
    $3 = HEAP32[$Other>>2]|0;
    HEAP32[$this>>2] = $3;
    $Last15 = ((($Other)) + 4|0);
    $4 = HEAP32[$Last15>>2]|0;
    $Last16 = ((($this)) + 4|0);
    HEAP32[$Last16>>2] = $4;
    $Cap = ((($Other)) + 8|0);
    $5 = HEAP32[$Cap>>2]|0;
    $Cap17 = ((($this)) + 8|0);
    HEAP32[$Cap17>>2] = $5;
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE11clearInlineEv($Other);
    break;
   } else {
    $6 = HEAP32[$this>>2]|0;
    $7 = HEAP32[$Other>>2]|0;
    HEAP32[$this>>2] = $7;
    HEAP32[$Other>>2] = $6;
    $Last21 = ((($this)) + 4|0);
    $Last22 = ((($Other)) + 4|0);
    $8 = HEAP32[$Last21>>2]|0;
    $9 = HEAP32[$Last22>>2]|0;
    HEAP32[$Last21>>2] = $9;
    HEAP32[$Last22>>2] = $8;
    $Cap23 = ((($this)) + 8|0);
    $Cap24 = ((($Other)) + 8|0);
    $10 = HEAP32[$Cap23>>2]|0;
    $11 = HEAP32[$Cap24>>2]|0;
    HEAP32[$Cap23>>2] = $11;
    HEAP32[$Cap24>>2] = $10;
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5clearEv($Other);
    break;
   }
  }
 } while(0);
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle20TemplateArgumentPack11getElementsEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Elements = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Elements = ((($this)) + 8|0);
 $0 = $Elements;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$result;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13ParameterPackEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13ParameterPackEJNS2_9NodeArrayEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE9push_backERKS3_($this,$Elem) {
 $this = $this|0;
 $Elem = $Elem|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $Cap = 0, $Last = 0, $call = 0, $cmp = 0, $incdec$ptr = 0, $mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Last = ((($this)) + 4|0);
 $0 = HEAP32[$Last>>2]|0;
 $Cap = ((($this)) + 8|0);
 $1 = HEAP32[$Cap>>2]|0;
 $cmp = ($0|0)==($1|0);
 if ($cmp) {
  $call = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE4sizeEv($this)|0);
  $mul = $call << 1;
  __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE7reserveEm($this,$mul);
  $$pre = HEAP32[$Last>>2]|0;
  $3 = $$pre;
 } else {
  $3 = $0;
 }
 $2 = HEAP32[$Elem>>2]|0;
 $incdec$ptr = ((($3)) + 4|0);
 HEAP32[$Last>>2] = $incdec$ptr;
 HEAP32[$3>>2] = $2;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($agg$result,$this,$FromPosition) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $FromPosition = $FromPosition|0;
 var $Names = 0, $add$ptr = 0, $call = 0, $call3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Names = ((($this)) + 8|0);
 $call = (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE5beginEv($Names)|0);
 $add$ptr = (($call) + ($FromPosition<<2)|0);
 $call3 = (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE3endEv($Names)|0);
 __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13makeNodeArrayIPPNS0_4NodeEEENS0_9NodeArrayET_SB_($agg$result,$this,$add$ptr,$call3);
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE8dropBackEm($Names,$FromPosition);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12TemplateArgsEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12TemplateArgsEJNS2_9NodeArrayEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12TemplateArgsEJNS2_9NodeArrayEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle12TemplateArgsC2ENS0_9NodeArrayE($call,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle12TemplateArgsC2ENS0_9NodeArrayE($this,$Params_) {
 $this = $this|0;
 $Params_ = $Params_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Params = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,30,1,1,1);
 HEAP32[$this>>2] = (4432);
 $Params = ((($this)) + 8|0);
 $0 = $Params_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Params;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle12TemplateArgs9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $Params = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp3 = 0, $agg$tmp3$byval_copy = 0, $agg$tmp5 = 0, $agg$tmp5$byval_copy = 0, $call2 = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp5$byval_copy = sp + 40|0;
 $agg$tmp3$byval_copy = sp + 32|0;
 $agg$tmp$byval_copy = sp + 24|0;
 $agg$tmp = sp + 16|0;
 $agg$tmp3 = sp + 8|0;
 $agg$tmp5 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,24148);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Params = ((($this)) + 8|0);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($Params,$S);
 $call2 = (__ZNK12_GLOBAL__N_112OutputStream4backEv($S)|0);
 $cmp = ($call2<<24>>24)==(62);
 if ($cmp) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp3,23964);
  ;HEAP32[$agg$tmp3$byval_copy>>2]=HEAP32[$agg$tmp3>>2]|0;HEAP32[$agg$tmp3$byval_copy+4>>2]=HEAP32[$agg$tmp3+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp3$byval_copy);
 }
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp5,24041);
 ;HEAP32[$agg$tmp5$byval_copy>>2]=HEAP32[$agg$tmp5>>2]|0;HEAP32[$agg$tmp5$byval_copy+4>>2]=HEAP32[$agg$tmp5+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp5$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle12TemplateArgsD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $2 = 0, $FirstElement$0$off0 = 0, $FirstElement$1$off0 = 0, $Idx$0 = 0, $NumElements = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $arrayidx = 0, $call = 0, $call3 = 0, $call4 = 0, $cmp = 0, $cmp5 = 0, $inc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $NumElements = ((($this)) + 4|0);
 $FirstElement$0$off0 = 1;$Idx$0 = 0;
 while(1) {
  $0 = HEAP32[$NumElements>>2]|0;
  $cmp = ($Idx$0|0)==($0|0);
  if ($cmp) {
   break;
  }
  $call = (__ZNK12_GLOBAL__N_112OutputStream18getCurrentPositionEv($S)|0);
  if (!($FirstElement$0$off0)) {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,24150);
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
  }
  $call3 = (__ZNK12_GLOBAL__N_112OutputStream18getCurrentPositionEv($S)|0);
  $1 = HEAP32[$this>>2]|0;
  $arrayidx = (($1) + ($Idx$0<<2)|0);
  $2 = HEAP32[$arrayidx>>2]|0;
  __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($2,$S);
  $call4 = (__ZNK12_GLOBAL__N_112OutputStream18getCurrentPositionEv($S)|0);
  $cmp5 = ($call3|0)==($call4|0);
  if ($cmp5) {
   __ZN12_GLOBAL__N_112OutputStream18setCurrentPositionEm($S,$call);
   $FirstElement$1$off0 = $FirstElement$0$off0;
  } else {
   $FirstElement$1$off0 = 0;
  }
  $inc = (($Idx$0) + 1)|0;
  $FirstElement$0$off0 = $FirstElement$1$off0;$Idx$0 = $inc;
 }
 STACKTOP = sp;return;
}
function __ZNK12_GLOBAL__N_112OutputStream4backEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $CurrentPosition = 0, $arrayidx = 0, $cond = 0, $sub = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $CurrentPosition = ((($this)) + 4|0);
 $0 = HEAP32[$CurrentPosition>>2]|0;
 $tobool = ($0|0)==(0);
 if ($tobool) {
  $cond = 0;
 } else {
  $sub = (($0) + -1)|0;
  $1 = HEAP32[$this>>2]|0;
  $arrayidx = (($1) + ($sub)|0);
  $2 = HEAP8[$arrayidx>>0]|0;
  $cond = $2;
 }
 return ($cond|0);
}
function __ZN12_GLOBAL__N_112OutputStream18setCurrentPositionEm($this,$NewPos) {
 $this = $this|0;
 $NewPos = $NewPos|0;
 var $CurrentPosition = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $CurrentPosition = ((($this)) + 4|0);
 HEAP32[$CurrentPosition>>2] = $NewPos;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE3endEv($this) {
 $this = $this|0;
 var $0 = 0, $Last = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Last = ((($this)) + 4|0);
 $0 = HEAP32[$Last>>2]|0;
 return ($0|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13makeNodeArrayIPPNS0_4NodeEEENS0_9NodeArrayET_SB_($agg$result,$this,$begin,$end) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $begin = $begin|0;
 $end = $end|0;
 var $ASTAllocator = 0, $call = 0, $cmp$i$i = 0, $sub$ptr$div = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $sub$ptr$lhs$cast = $end;
 $sub$ptr$rhs$cast = $begin;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $sub$ptr$div = $sub$ptr$sub >> 2;
 $ASTAllocator = ((($this)) + 368|0);
 $call = (__ZN12_GLOBAL__N_116DefaultAllocator17allocateNodeArrayEm($ASTAllocator,$sub$ptr$div)|0);
 $cmp$i$i = ($sub$ptr$sub|0)==(0);
 if (!($cmp$i$i)) {
  _memmove(($call|0),($begin|0),($sub$ptr$sub|0))|0;
 }
 __ZN12_GLOBAL__N_116itanium_demangle9NodeArrayC2EPPNS0_4NodeEm($agg$result,$call,$sub$ptr$div);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE8dropBackEm($this,$Index) {
 $this = $this|0;
 $Index = $Index|0;
 var $0 = 0, $Last = 0, $add$ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $add$ptr = (($0) + ($Index<<2)|0);
 $Last = ((($this)) + 4|0);
 HEAP32[$Last>>2] = $add$ptr;
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator17allocateNodeArrayEm($this,$sz) {
 $this = $this|0;
 $sz = $sz|0;
 var $call = 0, $mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $mul = $sz << 2;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,$mul)|0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle9NodeArrayC2EPPNS0_4NodeEm($this,$Elements_,$NumElements_) {
 $this = $this|0;
 $Elements_ = $Elements_|0;
 $NumElements_ = $NumElements_|0;
 var $NumElements = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = $Elements_;
 $NumElements = ((($this)) + 4|0);
 HEAP32[$NumElements>>2] = $NumElements_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $Last = 0, $sub$ptr$div = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Last = ((($this)) + 4|0);
 $0 = HEAP32[$Last>>2]|0;
 $1 = HEAP32[$this>>2]|0;
 $sub$ptr$sub = (($0) - ($1))|0;
 $sub$ptr$div = $sub$ptr$sub >> 2;
 return ($sub$ptr$div|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE7reserveEm($this,$NewCap) {
 $this = $this|0;
 $NewCap = $NewCap|0;
 var $$in = 0, $$pre7 = 0, $0 = 0, $1 = 0, $2 = 0, $Cap = 0, $Last = 0, $Last17$pre$phiZ2D = 0, $add$ptr = 0, $add$ptr19 = 0, $call = 0, $call2 = 0, $call3 = 0, $call9 = 0, $cmp = 0, $cmp$i$i = 0, $cmp12 = 0, $mul = 0, $mul8 = 0, $sub$ptr$rhs$cast$i$i = 0;
 var $sub$ptr$sub$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE4sizeEv($this)|0);
 $call2 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE8isInlineEv($this)|0);
 do {
  if ($call2) {
   $mul = $NewCap << 2;
   $call3 = (_malloc($mul)|0);
   $cmp = ($call3|0)==(0|0);
   if ($cmp) {
    __ZSt9terminatev();
    // unreachable;
   }
   $0 = HEAP32[$this>>2]|0;
   $Last = ((($this)) + 4|0);
   $1 = HEAP32[$Last>>2]|0;
   $sub$ptr$rhs$cast$i$i = $0;
   $sub$ptr$sub$i$i = (($1) - ($sub$ptr$rhs$cast$i$i))|0;
   $cmp$i$i = ($sub$ptr$sub$i$i|0)==(0);
   if (!($cmp$i$i)) {
    _memmove(($call3|0),($0|0),($sub$ptr$sub$i$i|0))|0;
   }
   HEAP32[$this>>2] = $call3;
   $$in = $call3;$Last17$pre$phiZ2D = $Last;
  } else {
   $2 = HEAP32[$this>>2]|0;
   $mul8 = $NewCap << 2;
   $call9 = (_realloc($2,$mul8)|0);
   HEAP32[$this>>2] = $call9;
   $cmp12 = ($call9|0)==(0|0);
   if ($cmp12) {
    __ZSt9terminatev();
    // unreachable;
   } else {
    $$pre7 = ((($this)) + 4|0);
    $$in = $call9;$Last17$pre$phiZ2D = $$pre7;
    break;
   }
  }
 } while(0);
 $add$ptr = (($$in) + ($call<<2)|0);
 HEAP32[$Last17$pre$phiZ2D>>2] = $add$ptr;
 $add$ptr19 = (($$in) + ($NewCap<<2)|0);
 $Cap = ((($this)) + 8|0);
 HEAP32[$Cap>>2] = $add$ptr19;
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13ParameterPackEJNS2_9NodeArrayEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle13ParameterPackC2ENS0_9NodeArrayE($call,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle13ParameterPackC2ENS0_9NodeArrayE($this,$Data_) {
 $this = $this|0;
 $Data_ = $Data_|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ArrayCache = 0, $Data = 0, $FunctionCache = 0, $RHSComponentCache = 0, $__first$addr$0$i = 0, $__first$addr$0$i1 = 0, $__first$addr$0$i8 = 0;
 var $call = 0, $call$i = 0, $call$i11 = 0, $call$i4 = 0, $call10 = 0, $call17 = 0, $call19 = 0, $call4 = 0, $call8 = 0, $cmp$i = 0, $cmp$i2 = 0, $cmp$i9 = 0, $incdec$ptr$i = 0, $incdec$ptr$i12 = 0, $incdec$ptr$i5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,27,1,1,1);
 HEAP32[$this>>2] = (4476);
 $Data = ((($this)) + 8|0);
 $0 = $Data_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Data;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $RHSComponentCache = ((($this)) + 5|0);
 HEAP8[$RHSComponentCache>>0] = 2;
 $FunctionCache = ((($this)) + 7|0);
 HEAP8[$FunctionCache>>0] = 2;
 $ArrayCache = ((($this)) + 6|0);
 HEAP8[$ArrayCache>>0] = 2;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray5beginEv($Data)|0);
 $call4 = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray3endEv($Data)|0);
 $__first$addr$0$i = $call;
 while(1) {
  $cmp$i = ($__first$addr$0$i|0)==($call4|0);
  if ($cmp$i) {
   label = 4;
   break;
  }
  $10 = HEAP32[$__first$addr$0$i>>2]|0;
  $call$i = (__ZZN12_GLOBAL__N_116itanium_demangle13ParameterPackC1ENS0_9NodeArrayEENKUlPNS0_4NodeEE_clES4_($10)|0);
  $incdec$ptr$i = ((($__first$addr$0$i)) + 4|0);
  if ($call$i) {
   $__first$addr$0$i = $incdec$ptr$i;
  } else {
   break;
  }
 }
 if ((label|0) == 4) {
  HEAP8[$ArrayCache>>0] = 1;
 }
 $call8 = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray5beginEv($Data)|0);
 $call10 = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray3endEv($Data)|0);
 $__first$addr$0$i1 = $call8;
 while(1) {
  $cmp$i2 = ($__first$addr$0$i1|0)==($call10|0);
  if ($cmp$i2) {
   label = 8;
   break;
  }
  $11 = HEAP32[$__first$addr$0$i1>>2]|0;
  $call$i4 = (__ZZN12_GLOBAL__N_116itanium_demangle13ParameterPackC1ENS0_9NodeArrayEENKUlPNS0_4NodeEE0_clES4_($11)|0);
  $incdec$ptr$i5 = ((($__first$addr$0$i1)) + 4|0);
  if ($call$i4) {
   $__first$addr$0$i1 = $incdec$ptr$i5;
  } else {
   break;
  }
 }
 if ((label|0) == 8) {
  HEAP8[$FunctionCache>>0] = 1;
 }
 $call17 = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray5beginEv($Data)|0);
 $call19 = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray3endEv($Data)|0);
 $__first$addr$0$i8 = $call17;
 while(1) {
  $cmp$i9 = ($__first$addr$0$i8|0)==($call19|0);
  if ($cmp$i9) {
   label = 12;
   break;
  }
  $12 = HEAP32[$__first$addr$0$i8>>2]|0;
  $call$i11 = (__ZZN12_GLOBAL__N_116itanium_demangle13ParameterPackC1ENS0_9NodeArrayEENKUlPNS0_4NodeEE1_clES4_($12)|0);
  $incdec$ptr$i12 = ((($__first$addr$0$i8)) + 4|0);
  if ($call$i11) {
   $__first$addr$0$i8 = $incdec$ptr$i12;
  } else {
   break;
  }
 }
 if ((label|0) == 12) {
  HEAP8[$RHSComponentCache>>0] = 1;
 }
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray5beginEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 return ($0|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray3endEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $NumElements = 0, $add$ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $NumElements = ((($this)) + 4|0);
 $1 = HEAP32[$NumElements>>2]|0;
 $add$ptr = (($0) + ($1<<2)|0);
 return ($add$ptr|0);
}
function __ZZN12_GLOBAL__N_116itanium_demangle13ParameterPackC1ENS0_9NodeArrayEENKUlPNS0_4NodeEE_clES4_($P) {
 $P = $P|0;
 var $0 = 0, $ArrayCache = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ArrayCache = ((($P)) + 6|0);
 $0 = HEAP8[$ArrayCache>>0]|0;
 $cmp = ($0<<24>>24)==(1);
 return ($cmp|0);
}
function __ZZN12_GLOBAL__N_116itanium_demangle13ParameterPackC1ENS0_9NodeArrayEENKUlPNS0_4NodeEE0_clES4_($P) {
 $P = $P|0;
 var $0 = 0, $FunctionCache = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $FunctionCache = ((($P)) + 7|0);
 $0 = HEAP8[$FunctionCache>>0]|0;
 $cmp = ($0<<24>>24)==(1);
 return ($cmp|0);
}
function __ZZN12_GLOBAL__N_116itanium_demangle13ParameterPackC1ENS0_9NodeArrayEENKUlPNS0_4NodeEE1_clES4_($P) {
 $P = $P|0;
 var $0 = 0, $RHSComponentCache = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $RHSComponentCache = ((($P)) + 5|0);
 $0 = HEAP8[$RHSComponentCache>>0]|0;
 $cmp = ($0<<24>>24)==(1);
 return ($cmp|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack19hasRHSComponentSlowERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $CurrentPackIndex = 0, $Data = 0, $call = 0, $call3 = 0, $call4 = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack23initializePackExpansionERNS_12OutputStreamE($this,$S);
 $CurrentPackIndex = ((($S)) + 12|0);
 $0 = HEAP32[$CurrentPackIndex>>2]|0;
 $Data = ((($this)) + 8|0);
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($Data)|0);
 $cmp = ($0>>>0)<($call>>>0);
 if ($cmp) {
  $call3 = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArrayixEm($Data,$0)|0);
  $call4 = (__ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE($call3,$S)|0);
  $1 = $call4;
 } else {
  $1 = 0;
 }
 return ($1|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack12hasArraySlowERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $CurrentPackIndex = 0, $Data = 0, $call = 0, $call3 = 0, $call4 = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack23initializePackExpansionERNS_12OutputStreamE($this,$S);
 $CurrentPackIndex = ((($S)) + 12|0);
 $0 = HEAP32[$CurrentPackIndex>>2]|0;
 $Data = ((($this)) + 8|0);
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($Data)|0);
 $cmp = ($0>>>0)<($call>>>0);
 if ($cmp) {
  $call3 = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArrayixEm($Data,$0)|0);
  $call4 = (__ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE($call3,$S)|0);
  $1 = $call4;
 } else {
  $1 = 0;
 }
 return ($1|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack15hasFunctionSlowERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $CurrentPackIndex = 0, $Data = 0, $call = 0, $call3 = 0, $call4 = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack23initializePackExpansionERNS_12OutputStreamE($this,$S);
 $CurrentPackIndex = ((($S)) + 12|0);
 $0 = HEAP32[$CurrentPackIndex>>2]|0;
 $Data = ((($this)) + 8|0);
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($Data)|0);
 $cmp = ($0>>>0)<($call>>>0);
 if ($cmp) {
  $call3 = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArrayixEm($Data,$0)|0);
  $call4 = (__ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE($call3,$S)|0);
  $1 = $call4;
 } else {
  $1 = 0;
 }
 return ($1|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack13getSyntaxNodeERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $CurrentPackIndex = 0, $Data = 0, $call = 0, $call3 = 0, $call4 = 0, $cmp = 0, $cond = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack23initializePackExpansionERNS_12OutputStreamE($this,$S);
 $CurrentPackIndex = ((($S)) + 12|0);
 $0 = HEAP32[$CurrentPackIndex>>2]|0;
 $Data = ((($this)) + 8|0);
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($Data)|0);
 $cmp = ($0>>>0)<($call>>>0);
 if ($cmp) {
  $call3 = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArrayixEm($Data,$0)|0);
  $vtable = HEAP32[$call3>>2]|0;
  $vfn = ((($vtable)) + 12|0);
  $1 = HEAP32[$vfn>>2]|0;
  $call4 = (FUNCTION_TABLE_iii[$1 & 255]($call3,$S)|0);
  $cond = $call4;
 } else {
  $cond = $this;
 }
 return ($cond|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $CurrentPackIndex = 0, $Data = 0, $call = 0, $call3 = 0, $cmp = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack23initializePackExpansionERNS_12OutputStreamE($this,$S);
 $CurrentPackIndex = ((($S)) + 12|0);
 $0 = HEAP32[$CurrentPackIndex>>2]|0;
 $Data = ((($this)) + 8|0);
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($Data)|0);
 $cmp = ($0>>>0)<($call>>>0);
 if ($cmp) {
  $call3 = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArrayixEm($Data,$0)|0);
  $vtable = HEAP32[$call3>>2]|0;
  $vfn = ((($vtable)) + 16|0);
  $1 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_vii[$1 & 255]($call3,$S);
 }
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack10printRightERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $CurrentPackIndex = 0, $Data = 0, $call = 0, $call3 = 0, $cmp = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack23initializePackExpansionERNS_12OutputStreamE($this,$S);
 $CurrentPackIndex = ((($S)) + 12|0);
 $0 = HEAP32[$CurrentPackIndex>>2]|0;
 $Data = ((($this)) + 8|0);
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($Data)|0);
 $cmp = ($0>>>0)<($call>>>0);
 if ($cmp) {
  $call3 = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArrayixEm($Data,$0)|0);
  $vtable = HEAP32[$call3>>2]|0;
  $vfn = ((($vtable)) + 20|0);
  $1 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_vii[$1 & 255]($call3,$S);
 }
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle13ParameterPackD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack23initializePackExpansionERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $CurrentPackIndex = 0, $CurrentPackMax = 0, $Data = 0, $call2 = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $CurrentPackMax = ((($S)) + 16|0);
 $0 = HEAP32[$CurrentPackMax>>2]|0;
 $cmp = ($0|0)==(-1);
 if ($cmp) {
  $Data = ((($this)) + 8|0);
  $call2 = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($Data)|0);
  HEAP32[$CurrentPackMax>>2] = $call2;
  $CurrentPackIndex = ((($S)) + 12|0);
  HEAP32[$CurrentPackIndex>>2] = 0;
 }
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $NumElements = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $NumElements = ((($this)) + 4|0);
 $0 = HEAP32[$NumElements>>2]|0;
 return ($0|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle9NodeArrayixEm($this,$Idx) {
 $this = $this|0;
 $Idx = $Idx|0;
 var $0 = 0, $1 = 0, $arrayidx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $arrayidx = (($0) + ($Idx<<2)|0);
 $1 = HEAP32[$arrayidx>>2]|0;
 return ($1|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE11clearInlineEv($this) {
 $this = $this|0;
 var $Cap = 0, $Last = 0, $add$ptr = 0, $arraydecay = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arraydecay = ((($this)) + 12|0);
 HEAP32[$this>>2] = $arraydecay;
 $Last = ((($this)) + 4|0);
 HEAP32[$Last>>2] = $arraydecay;
 $add$ptr = ((($this)) + 44|0);
 $Cap = ((($this)) + 8|0);
 HEAP32[$Cap>>2] = $add$ptr;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5beginEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 return ($0|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE3endEv($this) {
 $this = $this|0;
 var $0 = 0, $Last = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Last = ((($this)) + 4|0);
 $0 = HEAP32[$Last>>2]|0;
 return ($0|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Arg = 0, $Base = 0, $Callee = 0;
 var $Child = 0, $Cond = 0, $E = 0, $E175 = 0, $E303 = 0, $E751 = 0, $Ex = 0, $Ex140 = 0, $Ex157 = 0, $Ex385 = 0, $Ex422 = 0, $Ex488 = 0, $Ex562 = 0, $Ex609 = 0, $Ex645 = 0, $Ex716 = 0, $Ex773 = 0, $FP = 0, $Global = 0, $Index = 0;
 var $L = 0, $LHS = 0, $LHS206 = 0, $LHS532 = 0, $Names = 0, $Names297 = 0, $Names684 = 0, $Names745 = 0, $Pack = 0, $R = 0, $R660 = 0, $RHS = 0, $RHS212 = 0, $RHS538 = 0, $T = 0, $T556 = 0, $T603 = 0, $Ty = 0, $Ty634 = 0, $Ty68 = 0;
 var $Ty727 = 0, $Ty738 = 0, $Ty83 = 0, $add$ptr = 0, $add$ptr119 = 0, $add$ptr125 = 0, $add$ptr139 = 0, $add$ptr151 = 0, $add$ptr168 = 0, $add$ptr174 = 0, $add$ptr189 = 0, $add$ptr205 = 0, $add$ptr223 = 0, $add$ptr229 = 0, $add$ptr240 = 0, $add$ptr246 = 0, $add$ptr252 = 0, $add$ptr263 = 0, $add$ptr269 = 0, $add$ptr280 = 0;
 var $add$ptr296 = 0, $add$ptr325 = 0, $add$ptr331 = 0, $add$ptr337 = 0, $add$ptr34 = 0, $add$ptr343 = 0, $add$ptr354 = 0, $add$ptr360 = 0, $add$ptr366 = 0, $add$ptr372 = 0, $add$ptr378 = 0, $add$ptr40 = 0, $add$ptr403 = 0, $add$ptr409 = 0, $add$ptr415 = 0, $add$ptr421 = 0, $add$ptr440 = 0, $add$ptr446 = 0, $add$ptr452 = 0, $add$ptr46 = 0;
 var $add$ptr463 = 0, $add$ptr469 = 0, $add$ptr475 = 0, $add$ptr481 = 0, $add$ptr498 = 0, $add$ptr504 = 0, $add$ptr52 = 0, $add$ptr526 = 0, $add$ptr555 = 0, $add$ptr573 = 0, $add$ptr579 = 0, $add$ptr58 = 0, $add$ptr585 = 0, $add$ptr591 = 0, $add$ptr602 = 0, $add$ptr620 = 0, $add$ptr633 = 0, $add$ptr644 = 0, $add$ptr655 = 0, $add$ptr67 = 0;
 var $add$ptr683 = 0, $add$ptr715 = 0, $add$ptr726 = 0, $add$ptr737 = 0, $add$ptr768 = 0, $add$ptr772 = 0, $add$ptr82 = 0, $add$ptr99 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp121 = 0, $agg$tmp121$byval_copy = 0, $agg$tmp127 = 0, $agg$tmp127$byval_copy = 0, $agg$tmp170 = 0, $agg$tmp170$byval_copy = 0, $agg$tmp225 = 0, $agg$tmp225$byval_copy = 0, $agg$tmp231 = 0, $agg$tmp231$byval_copy = 0;
 var $agg$tmp242 = 0, $agg$tmp242$byval_copy = 0, $agg$tmp248 = 0, $agg$tmp248$byval_copy = 0, $agg$tmp254 = 0, $agg$tmp254$byval_copy = 0, $agg$tmp265 = 0, $agg$tmp265$byval_copy = 0, $agg$tmp271 = 0, $agg$tmp271$byval_copy = 0, $agg$tmp30 = 0, $agg$tmp30$byval_copy = 0, $agg$tmp327 = 0, $agg$tmp327$byval_copy = 0, $agg$tmp333 = 0, $agg$tmp333$byval_copy = 0, $agg$tmp339 = 0, $agg$tmp339$byval_copy = 0, $agg$tmp345 = 0, $agg$tmp345$byval_copy = 0;
 var $agg$tmp356 = 0, $agg$tmp356$byval_copy = 0, $agg$tmp36 = 0, $agg$tmp36$byval_copy = 0, $agg$tmp362 = 0, $agg$tmp362$byval_copy = 0, $agg$tmp368 = 0, $agg$tmp368$byval_copy = 0, $agg$tmp374 = 0, $agg$tmp374$byval_copy = 0, $agg$tmp382 = 0, $agg$tmp382$byval_copy = 0, $agg$tmp405 = 0, $agg$tmp405$byval_copy = 0, $agg$tmp411 = 0, $agg$tmp411$byval_copy = 0, $agg$tmp417 = 0, $agg$tmp417$byval_copy = 0, $agg$tmp42 = 0, $agg$tmp42$byval_copy = 0;
 var $agg$tmp442 = 0, $agg$tmp442$byval_copy = 0, $agg$tmp448 = 0, $agg$tmp448$byval_copy = 0, $agg$tmp454 = 0, $agg$tmp454$byval_copy = 0, $agg$tmp465 = 0, $agg$tmp465$byval_copy = 0, $agg$tmp471 = 0, $agg$tmp471$byval_copy = 0, $agg$tmp477 = 0, $agg$tmp477$byval_copy = 0, $agg$tmp48 = 0, $agg$tmp48$byval_copy = 0, $agg$tmp485 = 0, $agg$tmp485$byval_copy = 0, $agg$tmp500 = 0, $agg$tmp500$byval_copy = 0, $agg$tmp54 = 0, $agg$tmp54$byval_copy = 0;
 var $agg$tmp575 = 0, $agg$tmp575$byval_copy = 0, $agg$tmp581 = 0, $agg$tmp581$byval_copy = 0, $agg$tmp587 = 0, $agg$tmp587$byval_copy = 0, $agg$tmp593 = 0, $agg$tmp593$byval_copy = 0, $arrayidx = 0, $arrayidx135 = 0, $arrayidx236 = 0, $arrayidx259 = 0, $arrayidx276 = 0, $arrayidx321 = 0, $arrayidx350 = 0, $arrayidx396 = 0, $arrayidx433 = 0, $arrayidx459 = 0, $arrayidx521 = 0, $arrayidx551 = 0;
 var $arrayidx598 = 0, $arrayidx711 = 0, $arrayidx78 = 0, $call = 0, $call100 = 0, $call101 = 0, $call105 = 0, $call106 = 0, $call108 = 0, $call114 = 0, $call120 = 0, $call122 = 0, $call126 = 0, $call128 = 0, $call130 = 0, $call131 = 0, $call141 = 0, $call142 = 0, $call147 = 0, $call15 = 0;
 var $call152 = 0, $call153 = 0, $call159 = 0, $call163 = 0, $call169 = 0, $call171 = 0, $call176 = 0, $call177 = 0, $call182 = 0, $call185 = 0, $call186 = 0, $call19 = 0, $call190 = 0, $call191 = 0, $call196 = 0, $call2 = 0, $call20 = 0, $call200 = 0, $call207 = 0, $call208 = 0;
 var $call214 = 0, $call218 = 0, $call22 = 0, $call224 = 0, $call226 = 0, $call23 = 0, $call230 = 0, $call232 = 0, $call241 = 0, $call243 = 0, $call247 = 0, $call249 = 0, $call253 = 0, $call255 = 0, $call264 = 0, $call266 = 0, $call270 = 0, $call272 = 0, $call281 = 0, $call282 = 0;
 var $call287 = 0, $call29 = 0, $call291 = 0, $call298 = 0, $call3 = 0, $call300 = 0, $call304 = 0, $call305 = 0, $call31 = 0, $call316 = 0, $call326 = 0, $call328 = 0, $call332 = 0, $call334 = 0, $call338 = 0, $call340 = 0, $call344 = 0, $call346 = 0, $call35 = 0, $call355 = 0;
 var $call357 = 0, $call361 = 0, $call363 = 0, $call367 = 0, $call369 = 0, $call37 = 0, $call373 = 0, $call375 = 0, $call379 = 0, $call381 = 0, $call383 = 0, $call386 = 0, $call387 = 0, $call391 = 0, $call399 = 0, $call4 = 0, $call400 = 0, $call404 = 0, $call406 = 0, $call41 = 0;
 var $call410 = 0, $call412 = 0, $call416 = 0, $call418 = 0, $call423 = 0, $call424 = 0, $call428 = 0, $call43 = 0, $call436 = 0, $call437 = 0, $call441 = 0, $call443 = 0, $call447 = 0, $call449 = 0, $call453 = 0, $call455 = 0, $call464 = 0, $call466 = 0, $call47 = 0, $call470 = 0;
 var $call472 = 0, $call476 = 0, $call478 = 0, $call482 = 0, $call484 = 0, $call486 = 0, $call489 = 0, $call49 = 0, $call490 = 0, $call494 = 0, $call499 = 0, $call501 = 0, $call505 = 0, $call506 = 0, $call511 = 0, $call515 = 0, $call527 = 0, $call528 = 0, $call53 = 0, $call534 = 0;
 var $call540 = 0, $call544 = 0, $call55 = 0, $call557 = 0, $call558 = 0, $call564 = 0, $call568 = 0, $call574 = 0, $call576 = 0, $call580 = 0, $call582 = 0, $call586 = 0, $call588 = 0, $call59 = 0, $call592 = 0, $call594 = 0, $call6 = 0, $call60 = 0, $call604 = 0, $call605 = 0;
 var $call611 = 0, $call615 = 0, $call621 = 0, $call622 = 0, $call626 = 0, $call629 = 0, $call630 = 0, $call635 = 0, $call636 = 0, $call64 = 0, $call640 = 0, $call646 = 0, $call647 = 0, $call651 = 0, $call656 = 0, $call661 = 0, $call662 = 0, $call666 = 0, $call672 = 0, $call673 = 0;
 var $call677 = 0, $call685 = 0, $call687 = 0, $call69 = 0, $call690 = 0, $call691 = 0, $call7 = 0, $call70 = 0, $call701 = 0, $call705 = 0, $call717 = 0, $call718 = 0, $call722 = 0, $call728 = 0, $call729 = 0, $call733 = 0, $call739 = 0, $call74 = 0, $call740 = 0, $call746 = 0;
 var $call748 = 0, $call753 = 0, $call763 = 0, $call769 = 0, $call774 = 0, $call775 = 0, $call779 = 0, $call783 = 0, $call784 = 0, $call84 = 0, $call85 = 0, $call9 = 0, $call90 = 0, $call94 = 0, $cmp = 0, $cmp102 = 0, $cmp109 = 0, $cmp143 = 0, $cmp154 = 0, $cmp160 = 0;
 var $cmp178 = 0, $cmp192 = 0, $cmp197 = 0, $cmp209 = 0, $cmp215 = 0, $cmp283 = 0, $cmp288 = 0, $cmp306 = 0, $cmp388 = 0, $cmp425 = 0, $cmp491 = 0, $cmp507 = 0, $cmp512 = 0, $cmp523 = 0, $cmp529 = 0, $cmp535 = 0, $cmp541 = 0, $cmp559 = 0, $cmp565 = 0, $cmp606 = 0;
 var $cmp61 = 0, $cmp612 = 0, $cmp623 = 0, $cmp637 = 0, $cmp648 = 0, $cmp663 = 0, $cmp674 = 0, $cmp692 = 0, $cmp71 = 0, $cmp719 = 0, $cmp730 = 0, $cmp741 = 0, $cmp754 = 0, $cmp776 = 0, $cmp86 = 0, $cmp91 = 0, $conv = 0, $conv136 = 0, $conv16 = 0, $conv237 = 0;
 var $conv26 = 0, $conv260 = 0, $conv277 = 0, $conv322 = 0, $conv351 = 0, $conv397 = 0, $conv434 = 0, $conv460 = 0, $conv552 = 0, $conv599 = 0, $conv712 = 0, $conv79 = 0, $frombool = 0, $isdigit = 0, $isdigittmp = 0, $ref$tmp = 0, $ref$tmp146 = 0, $ref$tmp181 = 0, $ref$tmp314 = 0, $ref$tmp315 = 0;
 var $ref$tmp700 = 0, $ref$tmp762 = 0, $retval$0 = 0, $retval$1 = 0, $retval$10 = 0, $retval$11 = 0, $retval$12 = 0, $retval$13 = 0, $retval$14 = 0, $retval$15 = 0, $retval$16 = 0, $retval$17 = 0, $retval$2 = 0, $retval$21 = 0, $retval$22 = 0, $retval$23 = 0, $retval$24 = 0, $retval$25 = 0, $retval$26 = 0, $retval$27 = 0;
 var $retval$28 = 0, $retval$29 = 0, $retval$3 = 0, $retval$30 = 0, $retval$31 = 0, $retval$32 = 0, $retval$33 = 0, $retval$34 = 0, $retval$35 = 0, $retval$36 = 0, $retval$37 = 0, $retval$42 = 0, $retval$43 = 0, $retval$47 = 0, $retval$48 = 0, $retval$49 = 0, $retval$7 = 0, $retval$8 = 0, $retval$9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 880|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(880|0);
 $agg$tmp593$byval_copy = sp + 864|0;
 $agg$tmp587$byval_copy = sp + 856|0;
 $agg$tmp581$byval_copy = sp + 848|0;
 $agg$tmp575$byval_copy = sp + 840|0;
 $agg$tmp500$byval_copy = sp + 832|0;
 $agg$tmp485$byval_copy = sp + 824|0;
 $agg$tmp477$byval_copy = sp + 816|0;
 $agg$tmp471$byval_copy = sp + 808|0;
 $agg$tmp465$byval_copy = sp + 800|0;
 $agg$tmp454$byval_copy = sp + 792|0;
 $agg$tmp448$byval_copy = sp + 784|0;
 $agg$tmp442$byval_copy = sp + 776|0;
 $agg$tmp417$byval_copy = sp + 768|0;
 $agg$tmp411$byval_copy = sp + 760|0;
 $agg$tmp405$byval_copy = sp + 752|0;
 $agg$tmp382$byval_copy = sp + 744|0;
 $agg$tmp374$byval_copy = sp + 736|0;
 $agg$tmp368$byval_copy = sp + 728|0;
 $agg$tmp362$byval_copy = sp + 720|0;
 $agg$tmp356$byval_copy = sp + 712|0;
 $agg$tmp345$byval_copy = sp + 704|0;
 $agg$tmp339$byval_copy = sp + 696|0;
 $agg$tmp333$byval_copy = sp + 688|0;
 $agg$tmp327$byval_copy = sp + 680|0;
 $agg$tmp271$byval_copy = sp + 672|0;
 $agg$tmp265$byval_copy = sp + 664|0;
 $agg$tmp254$byval_copy = sp + 656|0;
 $agg$tmp248$byval_copy = sp + 648|0;
 $agg$tmp242$byval_copy = sp + 640|0;
 $agg$tmp231$byval_copy = sp + 632|0;
 $agg$tmp225$byval_copy = sp + 624|0;
 $agg$tmp170$byval_copy = sp + 616|0;
 $agg$tmp127$byval_copy = sp + 608|0;
 $agg$tmp121$byval_copy = sp + 600|0;
 $agg$tmp54$byval_copy = sp + 592|0;
 $agg$tmp48$byval_copy = sp + 584|0;
 $agg$tmp42$byval_copy = sp + 576|0;
 $agg$tmp36$byval_copy = sp + 568|0;
 $agg$tmp30$byval_copy = sp + 560|0;
 $agg$tmp$byval_copy = sp + 552|0;
 $Global = sp + 874|0;
 $agg$tmp = sp + 544|0;
 $agg$tmp30 = sp + 536|0;
 $agg$tmp36 = sp + 528|0;
 $agg$tmp42 = sp + 520|0;
 $agg$tmp48 = sp + 512|0;
 $agg$tmp54 = sp + 504|0;
 $Ty = sp + 500|0;
 $Ty68 = sp + 496|0;
 $Ty83 = sp + 492|0;
 $Ex = sp + 488|0;
 $Callee = sp + 484|0;
 $E = sp + 480|0;
 $ref$tmp = sp + 472|0;
 $agg$tmp121 = sp + 464|0;
 $agg$tmp127 = sp + 456|0;
 $Ex140 = sp + 448|0;
 $ref$tmp146 = sp + 873|0;
 $T = sp + 444|0;
 $Ex157 = sp + 440|0;
 $agg$tmp170 = sp + 432|0;
 $E175 = sp + 424|0;
 $ref$tmp181 = sp + 872|0;
 $LHS = sp + 420|0;
 $RHS = sp + 416|0;
 $LHS206 = sp + 412|0;
 $RHS212 = sp + 408|0;
 $agg$tmp225 = sp + 400|0;
 $agg$tmp231 = sp + 392|0;
 $agg$tmp242 = sp + 384|0;
 $agg$tmp248 = sp + 376|0;
 $agg$tmp254 = sp + 368|0;
 $agg$tmp265 = sp + 360|0;
 $agg$tmp271 = sp + 352|0;
 $Base = sp + 348|0;
 $Index = sp + 344|0;
 $E303 = sp + 340|0;
 $ref$tmp314 = sp + 336|0;
 $ref$tmp315 = sp + 328|0;
 $agg$tmp327 = sp + 320|0;
 $agg$tmp333 = sp + 312|0;
 $agg$tmp339 = sp + 304|0;
 $agg$tmp345 = sp + 296|0;
 $agg$tmp356 = sp + 288|0;
 $agg$tmp362 = sp + 280|0;
 $agg$tmp368 = sp + 272|0;
 $agg$tmp374 = sp + 264|0;
 $agg$tmp382 = sp + 256|0;
 $Ex385 = sp + 248|0;
 $agg$tmp405 = sp + 240|0;
 $agg$tmp411 = sp + 232|0;
 $agg$tmp417 = sp + 224|0;
 $Ex422 = sp + 216|0;
 $agg$tmp442 = sp + 208|0;
 $agg$tmp448 = sp + 200|0;
 $agg$tmp454 = sp + 192|0;
 $agg$tmp465 = sp + 184|0;
 $agg$tmp471 = sp + 176|0;
 $agg$tmp477 = sp + 168|0;
 $agg$tmp485 = sp + 160|0;
 $Ex488 = sp + 152|0;
 $agg$tmp500 = sp + 144|0;
 $L = sp + 136|0;
 $R = sp + 132|0;
 $Cond = sp + 128|0;
 $LHS532 = sp + 124|0;
 $RHS538 = sp + 120|0;
 $T556 = sp + 116|0;
 $Ex562 = sp + 112|0;
 $agg$tmp575 = sp + 104|0;
 $agg$tmp581 = sp + 96|0;
 $agg$tmp587 = sp + 88|0;
 $agg$tmp593 = sp + 80|0;
 $T603 = sp + 72|0;
 $Ex609 = sp + 68|0;
 $Child = sp + 64|0;
 $Ty634 = sp + 60|0;
 $Ex645 = sp + 56|0;
 $R660 = sp + 52|0;
 $FP = sp + 48|0;
 $Arg = sp + 44|0;
 $Pack = sp + 40|0;
 $ref$tmp700 = sp + 32|0;
 $Ex716 = sp + 28|0;
 $Ty727 = sp + 24|0;
 $Ty738 = sp + 20|0;
 $E751 = sp + 16|0;
 $ref$tmp762 = sp + 8|0;
 $Ex773 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,24679);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp$byval_copy)|0);
 $frombool = $call&1;
 HEAP8[$Global>>0] = $frombool;
 $call2 = (__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this)|0);
 $cmp = ($call2>>>0)<(2);
 L1: do {
  if ($cmp) {
   $retval$49 = 0;
  } else {
   $0 = HEAP32[$this>>2]|0;
   $1 = HEAP8[$0>>0]|0;
   $conv = $1 << 24 >> 24;
   do {
    switch ($conv|0) {
    case 76:  {
     $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $call4 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseExprPrimaryEv($call3)|0);
     $retval$49 = $call4;
     break L1;
     break;
    }
    case 84:  {
     $call6 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $call7 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseTemplateParamEv($call6)|0);
     $retval$49 = $call7;
     break L1;
     break;
    }
    case 102:  {
     $call9 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
     switch ($call9<<24>>24) {
     case 112:  {
      label = 7;
      break;
     }
     case 76:  {
      $call15 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,2)|0);
      $conv16 = $call15 << 24 >> 24;
      $isdigittmp = (($conv16) + -48)|0;
      $isdigit = ($isdigittmp>>>0)<(10);
      if ($isdigit) {
       label = 7;
      } else {
       label = 8;
      }
      break;
     }
     default: {
      label = 8;
     }
     }
     if ((label|0) == 7) {
      $call19 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call20 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseFunctionParamEv($call19)|0);
      $retval$49 = $call20;
      break L1;
     }
     else if ((label|0) == 8) {
      $call22 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call23 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseFoldExprEv($call22)|0);
      $retval$49 = $call23;
      break L1;
     }
     break;
    }
    case 97:  {
     $arrayidx = ((($0)) + 1|0);
     $2 = HEAP8[$arrayidx>>0]|0;
     $conv26 = $2 << 24 >> 24;
     switch ($conv26|0) {
     case 97:  {
      $add$ptr = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr;
      $call29 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp30,23970);
      ;HEAP32[$agg$tmp30$byval_copy>>2]=HEAP32[$agg$tmp30>>2]|0;HEAP32[$agg$tmp30$byval_copy+4>>2]=HEAP32[$agg$tmp30+4>>2]|0;
      $call31 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call29,$agg$tmp30$byval_copy)|0);
      $retval$49 = $call31;
      break L1;
      break;
     }
     case 100:  {
      $add$ptr34 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr34;
      $call35 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp36,23968);
      ;HEAP32[$agg$tmp36$byval_copy>>2]=HEAP32[$agg$tmp36>>2]|0;HEAP32[$agg$tmp36$byval_copy+4>>2]=HEAP32[$agg$tmp36+4>>2]|0;
      $call37 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE($call35,$agg$tmp36$byval_copy)|0);
      $retval$49 = $call37;
      break L1;
      break;
     }
     case 110:  {
      $add$ptr40 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr40;
      $call41 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp42,23968);
      ;HEAP32[$agg$tmp42$byval_copy>>2]=HEAP32[$agg$tmp42>>2]|0;HEAP32[$agg$tmp42$byval_copy+4>>2]=HEAP32[$agg$tmp42+4>>2]|0;
      $call43 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call41,$agg$tmp42$byval_copy)|0);
      $retval$49 = $call43;
      break L1;
      break;
     }
     case 78:  {
      $add$ptr46 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr46;
      $call47 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp48,24682);
      ;HEAP32[$agg$tmp48$byval_copy>>2]=HEAP32[$agg$tmp48>>2]|0;HEAP32[$agg$tmp48$byval_copy+4>>2]=HEAP32[$agg$tmp48+4>>2]|0;
      $call49 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call47,$agg$tmp48$byval_copy)|0);
      $retval$49 = $call49;
      break L1;
      break;
     }
     case 83:  {
      $add$ptr52 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr52;
      $call53 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp54,24685);
      ;HEAP32[$agg$tmp54$byval_copy>>2]=HEAP32[$agg$tmp54>>2]|0;HEAP32[$agg$tmp54$byval_copy+4>>2]=HEAP32[$agg$tmp54+4>>2]|0;
      $call55 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call53,$agg$tmp54$byval_copy)|0);
      $retval$49 = $call55;
      break L1;
      break;
     }
     case 116:  {
      $add$ptr58 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr58;
      $call59 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call60 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call59)|0);
      HEAP32[$Ty>>2] = $call60;
      $cmp61 = ($call60|0)==(0|0);
      if ($cmp61) {
       $retval$0 = 0;
      } else {
       $call64 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA10_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this,24687,$Ty)|0);
       $retval$0 = $call64;
      }
      $retval$49 = $retval$0;
      break L1;
      break;
     }
     case 122:  {
      $add$ptr67 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr67;
      $call69 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call70 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call69)|0);
      HEAP32[$Ty68>>2] = $call70;
      $cmp71 = ($call70|0)==(0|0);
      if ($cmp71) {
       $retval$1 = 0;
      } else {
       $call74 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA10_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this,24687,$Ty68)|0);
       $retval$1 = $call74;
      }
      $retval$49 = $retval$1;
      break L1;
      break;
     }
     default: {
      $retval$49 = 0;
      break L1;
     }
     }
     break;
    }
    case 99:  {
     $arrayidx78 = ((($0)) + 1|0);
     $3 = HEAP8[$arrayidx78>>0]|0;
     $conv79 = $3 << 24 >> 24;
     switch ($conv79|0) {
     case 99:  {
      $add$ptr82 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr82;
      $call84 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call85 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call84)|0);
      HEAP32[$Ty83>>2] = $call85;
      $cmp86 = ($call85|0)==(0|0);
      if ($cmp86) {
       $retval$3 = 0;
      } else {
       $call90 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call84)|0);
       HEAP32[$Ex>>2] = $call90;
       $cmp91 = ($call90|0)==(0|0);
       if ($cmp91) {
        $retval$2 = 0;
       } else {
        $call94 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA11_KcRPNS0_4NodeESD_EEESC_DpOT0_($this,$Ty83,$Ex)|0);
        $retval$2 = $call94;
       }
       $retval$3 = $retval$2;
      }
      $retval$49 = $retval$3;
      break L1;
      break;
     }
     case 108:  {
      $add$ptr99 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr99;
      $call100 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call101 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call100)|0);
      HEAP32[$Callee>>2] = $call101;
      $cmp102 = ($call101|0)==(0|0);
      do {
       if ($cmp102) {
        $retval$7 = 0;
       } else {
        $Names = ((($this)) + 8|0);
        $call105 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names)|0);
        while(1) {
         $call106 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
         if ($call106) {
          label = 33;
          break;
         }
         $call108 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call100)|0);
         HEAP32[$E>>2] = $call108;
         $cmp109 = ($call108|0)==(0|0);
         if ($cmp109) {
          label = 31;
          break;
         }
         __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names,$E);
        }
        if ((label|0) == 31) {
         $retval$7 = 0;
         break;
        }
        else if ((label|0) == 33) {
         __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($ref$tmp,$this,$call105);
         $call114 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CallExprEJRPNS0_4NodeENS0_9NodeArrayEEEES9_DpOT0_($this,$Callee,$ref$tmp)|0);
         $retval$7 = $call114;
         break;
        }
       }
      } while(0);
      $retval$49 = $retval$7;
      break L1;
      break;
     }
     case 109:  {
      $add$ptr119 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr119;
      $call120 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp121,24697);
      ;HEAP32[$agg$tmp121$byval_copy>>2]=HEAP32[$agg$tmp121>>2]|0;HEAP32[$agg$tmp121$byval_copy+4>>2]=HEAP32[$agg$tmp121+4>>2]|0;
      $call122 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call120,$agg$tmp121$byval_copy)|0);
      $retval$49 = $call122;
      break L1;
      break;
     }
     case 111:  {
      $add$ptr125 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr125;
      $call126 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp127,24699);
      ;HEAP32[$agg$tmp127$byval_copy>>2]=HEAP32[$agg$tmp127>>2]|0;HEAP32[$agg$tmp127$byval_copy+4>>2]=HEAP32[$agg$tmp127+4>>2]|0;
      $call128 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE($call126,$agg$tmp127$byval_copy)|0);
      $retval$49 = $call128;
      break L1;
      break;
     }
     case 118:  {
      $call130 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call131 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseConversionExprEv($call130)|0);
      $retval$49 = $call131;
      break L1;
      break;
     }
     default: {
      $retval$49 = 0;
      break L1;
     }
     }
     break;
    }
    case 100:  {
     $arrayidx135 = ((($0)) + 1|0);
     $4 = HEAP8[$arrayidx135>>0]|0;
     $conv136 = $4 << 24 >> 24;
     switch ($conv136|0) {
     case 97:  {
      $add$ptr139 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr139;
      $call141 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call142 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call141)|0);
      HEAP32[$Ex140>>2] = $call142;
      $cmp143 = ($call142|0)==(0|0);
      if ($cmp143) {
       $retval$8 = 0;
      } else {
       HEAP8[$ref$tmp146>>0] = 1;
       $call147 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10DeleteExprEJRPNS0_4NodeERbbEEES9_DpOT0_($this,$Ex140,$Global,$ref$tmp146)|0);
       $retval$8 = $call147;
      }
      $retval$49 = $retval$8;
      break L1;
      break;
     }
     case 99:  {
      $add$ptr151 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr151;
      $call152 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call153 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call152)|0);
      HEAP32[$T>>2] = $call153;
      $cmp154 = ($call153|0)==(0|0);
      if ($cmp154) {
       $retval$10 = 0;
      } else {
       $call159 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call152)|0);
       HEAP32[$Ex157>>2] = $call159;
       $cmp160 = ($call159|0)==(0|0);
       if ($cmp160) {
        $retval$9 = 0;
       } else {
        $call163 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA13_KcRPNS0_4NodeESD_EEESC_DpOT0_($this,$T,$Ex157)|0);
        $retval$9 = $call163;
       }
       $retval$10 = $retval$9;
      }
      $retval$49 = $retval$10;
      break L1;
      break;
     }
     case 101:  {
      $add$ptr168 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr168;
      $call169 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp170,24035);
      ;HEAP32[$agg$tmp170$byval_copy>>2]=HEAP32[$agg$tmp170>>2]|0;HEAP32[$agg$tmp170$byval_copy+4>>2]=HEAP32[$agg$tmp170+4>>2]|0;
      $call171 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE($call169,$agg$tmp170$byval_copy)|0);
      $retval$49 = $call171;
      break L1;
      break;
     }
     case 108:  {
      $add$ptr174 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr174;
      $call176 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call177 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call176)|0);
      HEAP32[$E175>>2] = $call177;
      $cmp178 = ($call177|0)==(0|0);
      if ($cmp178) {
       $retval$11 = 0;
      } else {
       HEAP8[$ref$tmp181>>0] = 0;
       $call182 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10DeleteExprEJRPNS0_4NodeERbbEEES9_DpOT0_($this,$E175,$Global,$ref$tmp181)|0);
       $retval$11 = $call182;
      }
      $retval$49 = $retval$11;
      break L1;
      break;
     }
     case 110:  {
      $call185 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call186 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedNameEv($call185)|0);
      $retval$49 = $call186;
      break L1;
      break;
     }
     case 115:  {
      $add$ptr189 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr189;
      $call190 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call191 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call190)|0);
      HEAP32[$LHS>>2] = $call191;
      $cmp192 = ($call191|0)==(0|0);
      if ($cmp192) {
       $retval$13 = 0;
      } else {
       $call196 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call190)|0);
       HEAP32[$RHS>>2] = $call196;
       $cmp197 = ($call196|0)==(0|0);
       if ($cmp197) {
        $retval$12 = 0;
       } else {
        $call200 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10MemberExprEJRPNS0_4NodeERA3_KcSA_EEES9_DpOT0_($this,$LHS,24701,$RHS)|0);
        $retval$12 = $call200;
       }
       $retval$13 = $retval$12;
      }
      $retval$49 = $retval$13;
      break L1;
      break;
     }
     case 116:  {
      $add$ptr205 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr205;
      $call207 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call208 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call207)|0);
      HEAP32[$LHS206>>2] = $call208;
      $cmp209 = ($call208|0)==(0|0);
      if ($cmp209) {
       $retval$15 = 0;
      } else {
       $call214 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call207)|0);
       HEAP32[$RHS212>>2] = $call214;
       $cmp215 = ($call214|0)==(0|0);
       if ($cmp215) {
        $retval$14 = 0;
       } else {
        $call218 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10MemberExprEJRPNS0_4NodeERA2_KcSA_EEES9_DpOT0_($this,$LHS206,$RHS212)|0);
        $retval$14 = $call218;
       }
       $retval$15 = $retval$14;
      }
      $retval$49 = $retval$15;
      break L1;
      break;
     }
     case 118:  {
      $add$ptr223 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr223;
      $call224 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp225,24704);
      ;HEAP32[$agg$tmp225$byval_copy>>2]=HEAP32[$agg$tmp225>>2]|0;HEAP32[$agg$tmp225$byval_copy+4>>2]=HEAP32[$agg$tmp225+4>>2]|0;
      $call226 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call224,$agg$tmp225$byval_copy)|0);
      $retval$49 = $call226;
      break L1;
      break;
     }
     case 86:  {
      $add$ptr229 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr229;
      $call230 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp231,24706);
      ;HEAP32[$agg$tmp231$byval_copy>>2]=HEAP32[$agg$tmp231>>2]|0;HEAP32[$agg$tmp231$byval_copy+4>>2]=HEAP32[$agg$tmp231+4>>2]|0;
      $call232 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call230,$agg$tmp231$byval_copy)|0);
      $retval$49 = $call232;
      break L1;
      break;
     }
     default: {
      $retval$49 = 0;
      break L1;
     }
     }
     break;
    }
    case 101:  {
     $arrayidx236 = ((($0)) + 1|0);
     $5 = HEAP8[$arrayidx236>>0]|0;
     $conv237 = $5 << 24 >> 24;
     switch ($conv237|0) {
     case 111:  {
      $add$ptr240 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr240;
      $call241 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp242,24709);
      ;HEAP32[$agg$tmp242$byval_copy>>2]=HEAP32[$agg$tmp242>>2]|0;HEAP32[$agg$tmp242$byval_copy+4>>2]=HEAP32[$agg$tmp242+4>>2]|0;
      $call243 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call241,$agg$tmp242$byval_copy)|0);
      $retval$49 = $call243;
      break L1;
      break;
     }
     case 79:  {
      $add$ptr246 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr246;
      $call247 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp248,24711);
      ;HEAP32[$agg$tmp248$byval_copy>>2]=HEAP32[$agg$tmp248>>2]|0;HEAP32[$agg$tmp248$byval_copy+4>>2]=HEAP32[$agg$tmp248+4>>2]|0;
      $call249 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call247,$agg$tmp248$byval_copy)|0);
      $retval$49 = $call249;
      break L1;
      break;
     }
     case 113:  {
      $add$ptr252 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr252;
      $call253 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp254,24714);
      ;HEAP32[$agg$tmp254$byval_copy>>2]=HEAP32[$agg$tmp254>>2]|0;HEAP32[$agg$tmp254$byval_copy+4>>2]=HEAP32[$agg$tmp254+4>>2]|0;
      $call255 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call253,$agg$tmp254$byval_copy)|0);
      $retval$49 = $call255;
      break L1;
      break;
     }
     default: {
      $retval$49 = 0;
      break L1;
     }
     }
     break;
    }
    case 103:  {
     $arrayidx259 = ((($0)) + 1|0);
     $6 = HEAP8[$arrayidx259>>0]|0;
     $conv260 = $6 << 24 >> 24;
     switch ($conv260|0) {
     case 101:  {
      $add$ptr263 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr263;
      $call264 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp265,24717);
      ;HEAP32[$agg$tmp265$byval_copy>>2]=HEAP32[$agg$tmp265>>2]|0;HEAP32[$agg$tmp265$byval_copy+4>>2]=HEAP32[$agg$tmp265+4>>2]|0;
      $call266 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call264,$agg$tmp265$byval_copy)|0);
      $retval$49 = $call266;
      break L1;
      break;
     }
     case 116:  {
      $add$ptr269 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr269;
      $call270 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp271,24041);
      ;HEAP32[$agg$tmp271$byval_copy>>2]=HEAP32[$agg$tmp271>>2]|0;HEAP32[$agg$tmp271$byval_copy+4>>2]=HEAP32[$agg$tmp271+4>>2]|0;
      $call272 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call270,$agg$tmp271$byval_copy)|0);
      $retval$49 = $call272;
      break L1;
      break;
     }
     default: {
      $retval$49 = 0;
      break L1;
     }
     }
     break;
    }
    case 105:  {
     $arrayidx276 = ((($0)) + 1|0);
     $7 = HEAP8[$arrayidx276>>0]|0;
     $conv277 = $7 << 24 >> 24;
     switch ($conv277|0) {
     case 120:  {
      $add$ptr280 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr280;
      $call281 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call282 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call281)|0);
      HEAP32[$Base>>2] = $call282;
      $cmp283 = ($call282|0)==(0|0);
      if ($cmp283) {
       $retval$17 = 0;
      } else {
       $call287 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call281)|0);
       HEAP32[$Index>>2] = $call287;
       $cmp288 = ($call287|0)==(0|0);
       if ($cmp288) {
        $retval$16 = 0;
       } else {
        $call291 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_18ArraySubscriptExprEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$Base,$Index)|0);
        $retval$16 = $call291;
       }
       $retval$17 = $retval$16;
      }
      $retval$49 = $retval$17;
      break L1;
      break;
     }
     case 108:  {
      break;
     }
     default: {
      $retval$49 = 0;
      break L1;
     }
     }
     $add$ptr296 = ((($0)) + 2|0);
     HEAP32[$this>>2] = $add$ptr296;
     $Names297 = ((($this)) + 8|0);
     $call298 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names297)|0);
     while(1) {
      $call300 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
      if ($call300) {
       label = 82;
       break;
      }
      $call304 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call305 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBracedExprEv($call304)|0);
      HEAP32[$E303>>2] = $call305;
      $cmp306 = ($call305|0)==(0|0);
      if ($cmp306) {
       label = 81;
       break;
      }
      __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names297,$E303);
     }
     if ((label|0) == 81) {
      $retval$49 = 0;
      break L1;
     }
     else if ((label|0) == 82) {
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($ref$tmp315,$this,$call298);
      $call316 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12InitListExprEJDnNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this,$ref$tmp314,$ref$tmp315)|0);
      $retval$49 = $call316;
      break L1;
     }
     break;
    }
    case 108:  {
     $arrayidx321 = ((($0)) + 1|0);
     $8 = HEAP8[$arrayidx321>>0]|0;
     $conv322 = $8 << 24 >> 24;
     switch ($conv322|0) {
     case 101:  {
      $add$ptr325 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr325;
      $call326 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp327,24720);
      ;HEAP32[$agg$tmp327$byval_copy>>2]=HEAP32[$agg$tmp327>>2]|0;HEAP32[$agg$tmp327$byval_copy+4>>2]=HEAP32[$agg$tmp327+4>>2]|0;
      $call328 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call326,$agg$tmp327$byval_copy)|0);
      $retval$49 = $call328;
      break L1;
      break;
     }
     case 115:  {
      $add$ptr331 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr331;
      $call332 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp333,24723);
      ;HEAP32[$agg$tmp333$byval_copy>>2]=HEAP32[$agg$tmp333>>2]|0;HEAP32[$agg$tmp333$byval_copy+4>>2]=HEAP32[$agg$tmp333+4>>2]|0;
      $call334 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call332,$agg$tmp333$byval_copy)|0);
      $retval$49 = $call334;
      break L1;
      break;
     }
     case 83:  {
      $add$ptr337 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr337;
      $call338 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp339,24726);
      ;HEAP32[$agg$tmp339$byval_copy>>2]=HEAP32[$agg$tmp339>>2]|0;HEAP32[$agg$tmp339$byval_copy+4>>2]=HEAP32[$agg$tmp339+4>>2]|0;
      $call340 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call338,$agg$tmp339$byval_copy)|0);
      $retval$49 = $call340;
      break L1;
      break;
     }
     case 116:  {
      $add$ptr343 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr343;
      $call344 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp345,24148);
      ;HEAP32[$agg$tmp345$byval_copy>>2]=HEAP32[$agg$tmp345>>2]|0;HEAP32[$agg$tmp345$byval_copy+4>>2]=HEAP32[$agg$tmp345+4>>2]|0;
      $call346 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call344,$agg$tmp345$byval_copy)|0);
      $retval$49 = $call346;
      break L1;
      break;
     }
     default: {
      $retval$49 = 0;
      break L1;
     }
     }
     break;
    }
    case 109:  {
     $arrayidx350 = ((($0)) + 1|0);
     $9 = HEAP8[$arrayidx350>>0]|0;
     $conv351 = $9 << 24 >> 24;
     switch ($conv351|0) {
     case 105:  {
      $add$ptr354 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr354;
      $call355 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp356,24569);
      ;HEAP32[$agg$tmp356$byval_copy>>2]=HEAP32[$agg$tmp356>>2]|0;HEAP32[$agg$tmp356$byval_copy+4>>2]=HEAP32[$agg$tmp356+4>>2]|0;
      $call357 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call355,$agg$tmp356$byval_copy)|0);
      $retval$49 = $call357;
      break L1;
      break;
     }
     case 73:  {
      $add$ptr360 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr360;
      $call361 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp362,24730);
      ;HEAP32[$agg$tmp362$byval_copy>>2]=HEAP32[$agg$tmp362>>2]|0;HEAP32[$agg$tmp362$byval_copy+4>>2]=HEAP32[$agg$tmp362+4>>2]|0;
      $call363 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call361,$agg$tmp362$byval_copy)|0);
      $retval$49 = $call363;
      break L1;
      break;
     }
     case 108:  {
      $add$ptr366 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr366;
      $call367 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp368,24035);
      ;HEAP32[$agg$tmp368$byval_copy>>2]=HEAP32[$agg$tmp368>>2]|0;HEAP32[$agg$tmp368$byval_copy+4>>2]=HEAP32[$agg$tmp368+4>>2]|0;
      $call369 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call367,$agg$tmp368$byval_copy)|0);
      $retval$49 = $call369;
      break L1;
      break;
     }
     case 76:  {
      $add$ptr372 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr372;
      $call373 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp374,24733);
      ;HEAP32[$agg$tmp374$byval_copy>>2]=HEAP32[$agg$tmp374>>2]|0;HEAP32[$agg$tmp374$byval_copy+4>>2]=HEAP32[$agg$tmp374+4>>2]|0;
      $call375 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call373,$agg$tmp374$byval_copy)|0);
      $retval$49 = $call375;
      break L1;
      break;
     }
     case 109:  {
      $add$ptr378 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr378;
      $call379 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
      if ($call379) {
       $call381 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
       __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp382,24736);
       ;HEAP32[$agg$tmp382$byval_copy>>2]=HEAP32[$agg$tmp382>>2]|0;HEAP32[$agg$tmp382$byval_copy+4>>2]=HEAP32[$agg$tmp382+4>>2]|0;
       $call383 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE($call381,$agg$tmp382$byval_copy)|0);
       $retval$49 = $call383;
       break L1;
      }
      $call386 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call387 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call386)|0);
      HEAP32[$Ex385>>2] = $call387;
      $cmp388 = ($call387|0)==(0|0);
      if ($cmp388) {
       $retval$21 = 0;
      } else {
       $call391 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11PostfixExprEJRPNS0_4NodeERA3_KcEEES9_DpOT0_($this,$Ex385,24736)|0);
       $retval$21 = $call391;
      }
      $retval$49 = $retval$21;
      break L1;
      break;
     }
     default: {
      $retval$49 = 0;
      break L1;
     }
     }
     break;
    }
    case 110:  {
     $arrayidx396 = ((($0)) + 1|0);
     $10 = HEAP8[$arrayidx396>>0]|0;
     $conv397 = $10 << 24 >> 24;
     switch ($conv397|0) {
     case 119: case 97:  {
      $call399 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call400 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E12parseNewExprEv($call399)|0);
      $retval$49 = $call400;
      break L1;
      break;
     }
     case 101:  {
      $add$ptr403 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr403;
      $call404 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp405,24739);
      ;HEAP32[$agg$tmp405$byval_copy>>2]=HEAP32[$agg$tmp405>>2]|0;HEAP32[$agg$tmp405$byval_copy+4>>2]=HEAP32[$agg$tmp405+4>>2]|0;
      $call406 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call404,$agg$tmp405$byval_copy)|0);
      $retval$49 = $call406;
      break L1;
      break;
     }
     case 103:  {
      $add$ptr409 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr409;
      $call410 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp411,24569);
      ;HEAP32[$agg$tmp411$byval_copy>>2]=HEAP32[$agg$tmp411>>2]|0;HEAP32[$agg$tmp411$byval_copy+4>>2]=HEAP32[$agg$tmp411+4>>2]|0;
      $call412 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE($call410,$agg$tmp411$byval_copy)|0);
      $retval$49 = $call412;
      break L1;
      break;
     }
     case 116:  {
      $add$ptr415 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr415;
      $call416 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp417,24742);
      ;HEAP32[$agg$tmp417$byval_copy>>2]=HEAP32[$agg$tmp417>>2]|0;HEAP32[$agg$tmp417$byval_copy+4>>2]=HEAP32[$agg$tmp417+4>>2]|0;
      $call418 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE($call416,$agg$tmp417$byval_copy)|0);
      $retval$49 = $call418;
      break L1;
      break;
     }
     case 120:  {
      $add$ptr421 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr421;
      $call423 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call424 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call423)|0);
      HEAP32[$Ex422>>2] = $call424;
      $cmp425 = ($call424|0)==(0|0);
      if ($cmp425) {
       $retval$22 = 0;
      } else {
       $call428 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA11_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this,$Ex422)|0);
       $retval$22 = $call428;
      }
      $retval$49 = $retval$22;
      break L1;
      break;
     }
     default: {
      $retval$49 = 0;
      break L1;
     }
     }
     break;
    }
    case 111:  {
     $arrayidx433 = ((($0)) + 1|0);
     $11 = HEAP8[$arrayidx433>>0]|0;
     $conv434 = $11 << 24 >> 24;
     switch ($conv434|0) {
     case 110:  {
      $call436 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call437 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedNameEv($call436)|0);
      $retval$49 = $call437;
      break L1;
      break;
     }
     case 111:  {
      $add$ptr440 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr440;
      $call441 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp442,24744);
      ;HEAP32[$agg$tmp442$byval_copy>>2]=HEAP32[$agg$tmp442>>2]|0;HEAP32[$agg$tmp442$byval_copy+4>>2]=HEAP32[$agg$tmp442+4>>2]|0;
      $call443 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call441,$agg$tmp442$byval_copy)|0);
      $retval$49 = $call443;
      break L1;
      break;
     }
     case 114:  {
      $add$ptr446 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr446;
      $call447 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp448,24747);
      ;HEAP32[$agg$tmp448$byval_copy>>2]=HEAP32[$agg$tmp448>>2]|0;HEAP32[$agg$tmp448$byval_copy+4>>2]=HEAP32[$agg$tmp448+4>>2]|0;
      $call449 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call447,$agg$tmp448$byval_copy)|0);
      $retval$49 = $call449;
      break L1;
      break;
     }
     case 82:  {
      $add$ptr452 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr452;
      $call453 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp454,24749);
      ;HEAP32[$agg$tmp454$byval_copy>>2]=HEAP32[$agg$tmp454>>2]|0;HEAP32[$agg$tmp454$byval_copy+4>>2]=HEAP32[$agg$tmp454+4>>2]|0;
      $call455 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call453,$agg$tmp454$byval_copy)|0);
      $retval$49 = $call455;
      break L1;
      break;
     }
     default: {
      $retval$49 = 0;
      break L1;
     }
     }
     break;
    }
    case 112:  {
     $arrayidx459 = ((($0)) + 1|0);
     $12 = HEAP8[$arrayidx459>>0]|0;
     $conv460 = $12 << 24 >> 24;
     switch ($conv460|0) {
     case 109:  {
      $add$ptr463 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr463;
      $call464 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp465,24752);
      ;HEAP32[$agg$tmp465$byval_copy>>2]=HEAP32[$agg$tmp465>>2]|0;HEAP32[$agg$tmp465$byval_copy+4>>2]=HEAP32[$agg$tmp465+4>>2]|0;
      $call466 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call464,$agg$tmp465$byval_copy)|0);
      $retval$49 = $call466;
      break L1;
      break;
     }
     case 108:  {
      $add$ptr469 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr469;
      $call470 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp471,24756);
      ;HEAP32[$agg$tmp471$byval_copy>>2]=HEAP32[$agg$tmp471>>2]|0;HEAP32[$agg$tmp471$byval_copy+4>>2]=HEAP32[$agg$tmp471+4>>2]|0;
      $call472 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call470,$agg$tmp471$byval_copy)|0);
      $retval$49 = $call472;
      break L1;
      break;
     }
     case 76:  {
      $add$ptr475 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr475;
      $call476 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp477,24758);
      ;HEAP32[$agg$tmp477$byval_copy>>2]=HEAP32[$agg$tmp477>>2]|0;HEAP32[$agg$tmp477$byval_copy+4>>2]=HEAP32[$agg$tmp477+4>>2]|0;
      $call478 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call476,$agg$tmp477$byval_copy)|0);
      $retval$49 = $call478;
      break L1;
      break;
     }
     case 112:  {
      $add$ptr481 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr481;
      $call482 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
      if ($call482) {
       $call484 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
       __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp485,24761);
       ;HEAP32[$agg$tmp485$byval_copy>>2]=HEAP32[$agg$tmp485>>2]|0;HEAP32[$agg$tmp485$byval_copy+4>>2]=HEAP32[$agg$tmp485+4>>2]|0;
       $call486 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE($call484,$agg$tmp485$byval_copy)|0);
       $retval$49 = $call486;
       break L1;
      }
      $call489 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call490 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call489)|0);
      HEAP32[$Ex488>>2] = $call490;
      $cmp491 = ($call490|0)==(0|0);
      if ($cmp491) {
       $retval$23 = 0;
      } else {
       $call494 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11PostfixExprEJRPNS0_4NodeERA3_KcEEES9_DpOT0_($this,$Ex488,24761)|0);
       $retval$23 = $call494;
      }
      $retval$49 = $retval$23;
      break L1;
      break;
     }
     case 115:  {
      $add$ptr498 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr498;
      $call499 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp500,24756);
      ;HEAP32[$agg$tmp500$byval_copy>>2]=HEAP32[$agg$tmp500>>2]|0;HEAP32[$agg$tmp500$byval_copy+4>>2]=HEAP32[$agg$tmp500+4>>2]|0;
      $call501 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE($call499,$agg$tmp500$byval_copy)|0);
      $retval$49 = $call501;
      break L1;
      break;
     }
     case 116:  {
      $add$ptr504 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr504;
      $call505 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call506 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call505)|0);
      HEAP32[$L>>2] = $call506;
      $cmp507 = ($call506|0)==(0|0);
      if ($cmp507) {
       $retval$25 = 0;
      } else {
       $call511 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call505)|0);
       HEAP32[$R>>2] = $call511;
       $cmp512 = ($call511|0)==(0|0);
       if ($cmp512) {
        $retval$24 = 0;
       } else {
        $call515 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10MemberExprEJRPNS0_4NodeERA3_KcSA_EEES9_DpOT0_($this,$L,24764,$R)|0);
        $retval$24 = $call515;
       }
       $retval$25 = $retval$24;
      }
      $retval$49 = $retval$25;
      break L1;
      break;
     }
     default: {
      $retval$49 = 0;
      break L1;
     }
     }
     break;
    }
    case 113:  {
     $arrayidx521 = ((($0)) + 1|0);
     $13 = HEAP8[$arrayidx521>>0]|0;
     $cmp523 = ($13<<24>>24)==(117);
     if (!($cmp523)) {
      $retval$49 = 0;
      break L1;
     }
     $add$ptr526 = ((($0)) + 2|0);
     HEAP32[$this>>2] = $add$ptr526;
     $call527 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $call528 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call527)|0);
     HEAP32[$Cond>>2] = $call528;
     $cmp529 = ($call528|0)==(0|0);
     if ($cmp529) {
      $retval$28 = 0;
     } else {
      $call534 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call527)|0);
      HEAP32[$LHS532>>2] = $call534;
      $cmp535 = ($call534|0)==(0|0);
      if ($cmp535) {
       $retval$27 = 0;
      } else {
       $call540 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call527)|0);
       HEAP32[$RHS538>>2] = $call540;
       $cmp541 = ($call540|0)==(0|0);
       if ($cmp541) {
        $retval$26 = 0;
       } else {
        $call544 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15ConditionalExprEJRPNS0_4NodeESA_SA_EEES9_DpOT0_($this,$Cond,$LHS532,$RHS538)|0);
        $retval$26 = $call544;
       }
       $retval$27 = $retval$26;
      }
      $retval$28 = $retval$27;
     }
     $retval$49 = $retval$28;
     break L1;
     break;
    }
    case 114:  {
     $arrayidx551 = ((($0)) + 1|0);
     $14 = HEAP8[$arrayidx551>>0]|0;
     $conv552 = $14 << 24 >> 24;
     switch ($conv552|0) {
     case 99:  {
      $add$ptr555 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr555;
      $call557 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call558 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call557)|0);
      HEAP32[$T556>>2] = $call558;
      $cmp559 = ($call558|0)==(0|0);
      if ($cmp559) {
       $retval$30 = 0;
      } else {
       $call564 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call557)|0);
       HEAP32[$Ex562>>2] = $call564;
       $cmp565 = ($call564|0)==(0|0);
       if ($cmp565) {
        $retval$29 = 0;
       } else {
        $call568 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA17_KcRPNS0_4NodeESD_EEESC_DpOT0_($this,$T556,$Ex562)|0);
        $retval$29 = $call568;
       }
       $retval$30 = $retval$29;
      }
      $retval$49 = $retval$30;
      break L1;
      break;
     }
     case 109:  {
      $add$ptr573 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr573;
      $call574 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp575,24767);
      ;HEAP32[$agg$tmp575$byval_copy>>2]=HEAP32[$agg$tmp575>>2]|0;HEAP32[$agg$tmp575$byval_copy+4>>2]=HEAP32[$agg$tmp575+4>>2]|0;
      $call576 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call574,$agg$tmp575$byval_copy)|0);
      $retval$49 = $call576;
      break L1;
      break;
     }
     case 77:  {
      $add$ptr579 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr579;
      $call580 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp581,24769);
      ;HEAP32[$agg$tmp581$byval_copy>>2]=HEAP32[$agg$tmp581>>2]|0;HEAP32[$agg$tmp581$byval_copy+4>>2]=HEAP32[$agg$tmp581+4>>2]|0;
      $call582 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call580,$agg$tmp581$byval_copy)|0);
      $retval$49 = $call582;
      break L1;
      break;
     }
     case 115:  {
      $add$ptr585 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr585;
      $call586 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp587,24772);
      ;HEAP32[$agg$tmp587$byval_copy>>2]=HEAP32[$agg$tmp587>>2]|0;HEAP32[$agg$tmp587$byval_copy+4>>2]=HEAP32[$agg$tmp587+4>>2]|0;
      $call588 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call586,$agg$tmp587$byval_copy)|0);
      $retval$49 = $call588;
      break L1;
      break;
     }
     case 83:  {
      $add$ptr591 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr591;
      $call592 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp593,24775);
      ;HEAP32[$agg$tmp593$byval_copy>>2]=HEAP32[$agg$tmp593>>2]|0;HEAP32[$agg$tmp593$byval_copy+4>>2]=HEAP32[$agg$tmp593+4>>2]|0;
      $call594 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($call592,$agg$tmp593$byval_copy)|0);
      $retval$49 = $call594;
      break L1;
      break;
     }
     default: {
      $retval$49 = 0;
      break L1;
     }
     }
     break;
    }
    case 115:  {
     $arrayidx598 = ((($0)) + 1|0);
     $15 = HEAP8[$arrayidx598>>0]|0;
     $conv599 = $15 << 24 >> 24;
     switch ($conv599|0) {
     case 99:  {
      $add$ptr602 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr602;
      $call604 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call605 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call604)|0);
      HEAP32[$T603>>2] = $call605;
      $cmp606 = ($call605|0)==(0|0);
      if ($cmp606) {
       $retval$32 = 0;
      } else {
       $call611 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call604)|0);
       HEAP32[$Ex609>>2] = $call611;
       $cmp612 = ($call611|0)==(0|0);
       if ($cmp612) {
        $retval$31 = 0;
       } else {
        $call615 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA12_KcRPNS0_4NodeESD_EEESC_DpOT0_($this,$T603,$Ex609)|0);
        $retval$31 = $call615;
       }
       $retval$32 = $retval$31;
      }
      $retval$49 = $retval$32;
      break L1;
      break;
     }
     case 112:  {
      $add$ptr620 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr620;
      $call621 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call622 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call621)|0);
      HEAP32[$Child>>2] = $call622;
      $cmp623 = ($call622|0)==(0|0);
      if ($cmp623) {
       $retval$33 = 0;
      } else {
       $call626 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ParameterPackExpansionEJRPNS0_4NodeEEEES9_DpOT0_($this,$Child)|0);
       $retval$33 = $call626;
      }
      $retval$49 = $retval$33;
      break L1;
      break;
     }
     case 114:  {
      $call629 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call630 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedNameEv($call629)|0);
      $retval$49 = $call630;
      break L1;
      break;
     }
     case 116:  {
      $add$ptr633 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr633;
      $call635 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call636 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call635)|0);
      HEAP32[$Ty634>>2] = $call636;
      $cmp637 = ($call636|0)==(0|0);
      if ($cmp637) {
       $retval$34 = 0;
      } else {
       $call640 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA9_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this,24779,$Ty634)|0);
       $retval$34 = $call640;
      }
      $retval$49 = $retval$34;
      break L1;
      break;
     }
     case 122:  {
      $add$ptr644 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr644;
      $call646 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call647 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call646)|0);
      HEAP32[$Ex645>>2] = $call647;
      $cmp648 = ($call647|0)==(0|0);
      if ($cmp648) {
       $retval$35 = 0;
      } else {
       $call651 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA9_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this,24779,$Ex645)|0);
       $retval$35 = $call651;
      }
      $retval$49 = $retval$35;
      break L1;
      break;
     }
     case 90:  {
      $add$ptr655 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr655;
      $call656 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
      switch ($call656<<24>>24) {
      case 84:  {
       $call661 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
       $call662 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseTemplateParamEv($call661)|0);
       HEAP32[$R660>>2] = $call662;
       $cmp663 = ($call662|0)==(0|0);
       if ($cmp663) {
        $retval$36 = 0;
       } else {
        $call666 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SizeofParamPackExprEJRPNS0_4NodeEEEES9_DpOT0_($this,$R660)|0);
        $retval$36 = $call666;
       }
       $retval$49 = $retval$36;
       break L1;
       break;
      }
      case 102:  {
       $call672 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
       $call673 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseFunctionParamEv($call672)|0);
       HEAP32[$FP>>2] = $call673;
       $cmp674 = ($call673|0)==(0|0);
       if ($cmp674) {
        $retval$37 = 0;
       } else {
        $call677 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA12_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this,$FP)|0);
        $retval$37 = $call677;
       }
       $retval$49 = $retval$37;
       break L1;
       break;
      }
      default: {
       $retval$49 = 0;
       break L1;
      }
      }
      break;
     }
     case 80:  {
      $add$ptr683 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr683;
      $Names684 = ((($this)) + 8|0);
      $call685 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names684)|0);
      while(1) {
       $call687 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
       if ($call687) {
        label = 172;
        break;
       }
       $call690 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
       $call691 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseTemplateArgEv($call690)|0);
       HEAP32[$Arg>>2] = $call691;
       $cmp692 = ($call691|0)==(0|0);
       if ($cmp692) {
        label = 171;
        break;
       }
       __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names684,$Arg);
      }
      if ((label|0) == 171) {
       $retval$49 = 0;
       break L1;
      }
      else if ((label|0) == 172) {
       __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($ref$tmp700,$this,$call685);
       $call701 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13NodeArrayNodeEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this,$ref$tmp700)|0);
       HEAP32[$Pack>>2] = $call701;
       $call705 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA12_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this,$Pack)|0);
       $retval$49 = $call705;
       break L1;
      }
      break;
     }
     default: {
      $retval$49 = 0;
      break L1;
     }
     }
     break;
    }
    case 116:  {
     $arrayidx711 = ((($0)) + 1|0);
     $16 = HEAP8[$arrayidx711>>0]|0;
     $conv712 = $16 << 24 >> 24;
     switch ($conv712|0) {
     case 101:  {
      $add$ptr715 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr715;
      $call717 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call718 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call717)|0);
      HEAP32[$Ex716>>2] = $call718;
      $cmp719 = ($call718|0)==(0|0);
      if ($cmp719) {
       $retval$42 = 0;
      } else {
       $call722 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA9_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this,24788,$Ex716)|0);
       $retval$42 = $call722;
      }
      $retval$49 = $retval$42;
      break L1;
      break;
     }
     case 105:  {
      $add$ptr726 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr726;
      $call728 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call729 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call728)|0);
      HEAP32[$Ty727>>2] = $call729;
      $cmp730 = ($call729|0)==(0|0);
      if ($cmp730) {
       $retval$43 = 0;
      } else {
       $call733 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA9_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this,24788,$Ty727)|0);
       $retval$43 = $call733;
      }
      $retval$49 = $retval$43;
      break L1;
      break;
     }
     case 108:  {
      $add$ptr737 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr737;
      $call739 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call740 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call739)|0);
      HEAP32[$Ty738>>2] = $call740;
      $cmp741 = ($call740|0)==(0|0);
      do {
       if ($cmp741) {
        $retval$47 = 0;
       } else {
        $Names745 = ((($this)) + 8|0);
        $call746 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names745)|0);
        while(1) {
         $call748 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
         if ($call748) {
          label = 186;
          break;
         }
         $call753 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBracedExprEv($call739)|0);
         HEAP32[$E751>>2] = $call753;
         $cmp754 = ($call753|0)==(0|0);
         if ($cmp754) {
          label = 185;
          break;
         }
         __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names745,$E751);
        }
        if ((label|0) == 185) {
         $retval$47 = 0;
         break;
        }
        else if ((label|0) == 186) {
         __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($ref$tmp762,$this,$call746);
         $call763 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12InitListExprEJRPNS0_4NodeENS0_9NodeArrayEEEES9_DpOT0_($this,$Ty738,$ref$tmp762)|0);
         $retval$47 = $call763;
         break;
        }
       }
      } while(0);
      $retval$49 = $retval$47;
      break L1;
      break;
     }
     case 114:  {
      $add$ptr768 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr768;
      $call769 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA6_KcEEEPNS0_4NodeEDpOT0_($this,24797)|0);
      $retval$49 = $call769;
      break L1;
      break;
     }
     case 119:  {
      $add$ptr772 = ((($0)) + 2|0);
      HEAP32[$this>>2] = $add$ptr772;
      $call774 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call775 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call774)|0);
      HEAP32[$Ex773>>2] = $call775;
      $cmp776 = ($call775|0)==(0|0);
      if ($cmp776) {
       $retval$48 = 0;
      } else {
       $call779 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9ThrowExprEJRPNS0_4NodeEEEES9_DpOT0_($this,$Ex773)|0);
       $retval$48 = $call779;
      }
      $retval$49 = $retval$48;
      break L1;
      break;
     }
     default: {
      $retval$49 = 0;
      break L1;
     }
     }
     break;
    }
    case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49:  {
     $call783 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $call784 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedNameEv($call783)|0);
     $retval$49 = $call784;
     break L1;
     break;
    }
    default: {
     $retval$49 = 0;
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 STACKTOP = sp;return ($retval$49|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20TemplateArgumentPackEJRNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20TemplateArgumentPackEJRNS2_9NodeArrayEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseExprPrimaryEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $N = 0, $T = 0, $agg$tmp = 0;
 var $agg$tmp$byval_copy = 0, $agg$tmp11 = 0, $agg$tmp11$byval_copy = 0, $agg$tmp111 = 0, $agg$tmp111$byval_copy = 0, $agg$tmp21 = 0, $agg$tmp21$byval_copy = 0, $agg$tmp27 = 0, $agg$tmp27$byval_copy = 0, $agg$tmp33 = 0, $agg$tmp33$byval_copy = 0, $agg$tmp39 = 0, $agg$tmp39$byval_copy = 0, $agg$tmp45 = 0, $agg$tmp45$byval_copy = 0, $agg$tmp51 = 0, $agg$tmp51$byval_copy = 0, $agg$tmp57 = 0, $agg$tmp57$byval_copy = 0, $agg$tmp6 = 0;
 var $agg$tmp6$byval_copy = 0, $agg$tmp63 = 0, $agg$tmp63$byval_copy = 0, $agg$tmp69 = 0, $agg$tmp69$byval_copy = 0, $agg$tmp75 = 0, $agg$tmp75$byval_copy = 0, $agg$tmp81 = 0, $agg$tmp81$byval_copy = 0, $agg$tmp87 = 0, $agg$tmp87$byval_copy = 0, $agg$tmp93 = 0, $agg$tmp93$byval_copy = 0, $call = 0, $call103 = 0, $call104 = 0, $call108 = 0, $call109 = 0, $call112 = 0, $call114 = 0;
 var $call115 = 0, $call116 = 0, $call12 = 0, $call121 = 0, $call122 = 0, $call126 = 0, $call131 = 0, $call133 = 0, $call15 = 0, $call2 = 0, $call20 = 0, $call22 = 0, $call26 = 0, $call28 = 0, $call3 = 0, $call32 = 0, $call34 = 0, $call38 = 0, $call4 = 0, $call40 = 0;
 var $call44 = 0, $call46 = 0, $call50 = 0, $call52 = 0, $call56 = 0, $call58 = 0, $call62 = 0, $call64 = 0, $call68 = 0, $call7 = 0, $call70 = 0, $call74 = 0, $call76 = 0, $call80 = 0, $call82 = 0, $call86 = 0, $call88 = 0, $call9 = 0, $call92 = 0, $call94 = 0;
 var $call98 = 0, $call99 = 0, $cmp = 0, $cmp123 = 0, $conv = 0, $incdec$ptr = 0, $incdec$ptr102 = 0, $incdec$ptr107 = 0, $incdec$ptr19 = 0, $incdec$ptr25 = 0, $incdec$ptr31 = 0, $incdec$ptr37 = 0, $incdec$ptr43 = 0, $incdec$ptr49 = 0, $incdec$ptr55 = 0, $incdec$ptr61 = 0, $incdec$ptr67 = 0, $incdec$ptr73 = 0, $incdec$ptr79 = 0, $incdec$ptr85 = 0;
 var $incdec$ptr91 = 0, $incdec$ptr97 = 0, $ref$tmp = 0, $ref$tmp14 = 0, $retval$1 = 0, $retval$2 = 0, $retval$3 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(304|0);
 $agg$tmp111$byval_copy = sp + 296|0;
 $agg$tmp93$byval_copy = sp + 288|0;
 $agg$tmp87$byval_copy = sp + 280|0;
 $agg$tmp81$byval_copy = sp + 272|0;
 $agg$tmp75$byval_copy = sp + 264|0;
 $agg$tmp69$byval_copy = sp + 256|0;
 $agg$tmp63$byval_copy = sp + 248|0;
 $agg$tmp57$byval_copy = sp + 240|0;
 $agg$tmp51$byval_copy = sp + 232|0;
 $agg$tmp45$byval_copy = sp + 224|0;
 $agg$tmp39$byval_copy = sp + 216|0;
 $agg$tmp33$byval_copy = sp + 208|0;
 $agg$tmp27$byval_copy = sp + 200|0;
 $agg$tmp21$byval_copy = sp + 192|0;
 $agg$tmp11$byval_copy = sp + 184|0;
 $agg$tmp6$byval_copy = sp + 176|0;
 $agg$tmp$byval_copy = sp + 168|0;
 $agg$tmp = sp + 160|0;
 $agg$tmp6 = sp + 152|0;
 $ref$tmp = sp + 144|0;
 $agg$tmp11 = sp + 136|0;
 $ref$tmp14 = sp + 128|0;
 $agg$tmp21 = sp + 120|0;
 $agg$tmp27 = sp + 112|0;
 $agg$tmp33 = sp + 104|0;
 $agg$tmp39 = sp + 96|0;
 $agg$tmp45 = sp + 88|0;
 $agg$tmp51 = sp + 80|0;
 $agg$tmp57 = sp + 72|0;
 $agg$tmp63 = sp + 64|0;
 $agg$tmp69 = sp + 56|0;
 $agg$tmp75 = sp + 48|0;
 $agg$tmp81 = sp + 40|0;
 $agg$tmp87 = sp + 32|0;
 $agg$tmp93 = sp + 24|0;
 $agg$tmp111 = sp + 16|0;
 $T = sp + 8|0;
 $N = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,76)|0);
 L1: do {
  if ($call) {
   $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
   $conv = $call2 << 24 >> 24;
   do {
    switch ($conv|0) {
    case 84:  {
     $retval$3 = 0;
     break L1;
     break;
    }
    case 119:  {
     $0 = HEAP32[$this>>2]|0;
     $incdec$ptr = ((($0)) + 1|0);
     HEAP32[$this>>2] = $incdec$ptr;
     $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,24252);
     ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
     $call4 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call3,$agg$tmp$byval_copy)|0);
     $retval$3 = $call4;
     break L1;
     break;
    }
    case 98:  {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6,24260);
     ;HEAP32[$agg$tmp6$byval_copy>>2]=HEAP32[$agg$tmp6>>2]|0;HEAP32[$agg$tmp6$byval_copy+4>>2]=HEAP32[$agg$tmp6+4>>2]|0;
     $call7 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp6$byval_copy)|0);
     if ($call7) {
      HEAP32[$ref$tmp>>2] = 0;
      $call9 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8BoolExprEJiEEEPNS0_4NodeEDpOT0_($this,$ref$tmp)|0);
      $retval$3 = $call9;
      break L1;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp11,24264);
     ;HEAP32[$agg$tmp11$byval_copy>>2]=HEAP32[$agg$tmp11>>2]|0;HEAP32[$agg$tmp11$byval_copy+4>>2]=HEAP32[$agg$tmp11+4>>2]|0;
     $call12 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp11$byval_copy)|0);
     if (!($call12)) {
      $retval$3 = 0;
      break L1;
     }
     HEAP32[$ref$tmp14>>2] = 1;
     $call15 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8BoolExprEJiEEEPNS0_4NodeEDpOT0_($this,$ref$tmp14)|0);
     $retval$3 = $call15;
     break L1;
     break;
    }
    case 99:  {
     $1 = HEAP32[$this>>2]|0;
     $incdec$ptr19 = ((($1)) + 1|0);
     HEAP32[$this>>2] = $incdec$ptr19;
     $call20 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp21,23312);
     ;HEAP32[$agg$tmp21$byval_copy>>2]=HEAP32[$agg$tmp21>>2]|0;HEAP32[$agg$tmp21$byval_copy+4>>2]=HEAP32[$agg$tmp21+4>>2]|0;
     $call22 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call20,$agg$tmp21$byval_copy)|0);
     $retval$3 = $call22;
     break L1;
     break;
    }
    case 97:  {
     $2 = HEAP32[$this>>2]|0;
     $incdec$ptr25 = ((($2)) + 1|0);
     HEAP32[$this>>2] = $incdec$ptr25;
     $call26 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp27,23317);
     ;HEAP32[$agg$tmp27$byval_copy>>2]=HEAP32[$agg$tmp27>>2]|0;HEAP32[$agg$tmp27$byval_copy+4>>2]=HEAP32[$agg$tmp27+4>>2]|0;
     $call28 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call26,$agg$tmp27$byval_copy)|0);
     $retval$3 = $call28;
     break L1;
     break;
    }
    case 104:  {
     $3 = HEAP32[$this>>2]|0;
     $incdec$ptr31 = ((($3)) + 1|0);
     HEAP32[$this>>2] = $incdec$ptr31;
     $call32 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp33,23329);
     ;HEAP32[$agg$tmp33$byval_copy>>2]=HEAP32[$agg$tmp33>>2]|0;HEAP32[$agg$tmp33$byval_copy+4>>2]=HEAP32[$agg$tmp33+4>>2]|0;
     $call34 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call32,$agg$tmp33$byval_copy)|0);
     $retval$3 = $call34;
     break L1;
     break;
    }
    case 115:  {
     $4 = HEAP32[$this>>2]|0;
     $incdec$ptr37 = ((($4)) + 1|0);
     HEAP32[$this>>2] = $incdec$ptr37;
     $call38 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp39,23343);
     ;HEAP32[$agg$tmp39$byval_copy>>2]=HEAP32[$agg$tmp39>>2]|0;HEAP32[$agg$tmp39$byval_copy+4>>2]=HEAP32[$agg$tmp39+4>>2]|0;
     $call40 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call38,$agg$tmp39$byval_copy)|0);
     $retval$3 = $call40;
     break L1;
     break;
    }
    case 116:  {
     $5 = HEAP32[$this>>2]|0;
     $incdec$ptr43 = ((($5)) + 1|0);
     HEAP32[$this>>2] = $incdec$ptr43;
     $call44 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp45,23349);
     ;HEAP32[$agg$tmp45$byval_copy>>2]=HEAP32[$agg$tmp45>>2]|0;HEAP32[$agg$tmp45$byval_copy+4>>2]=HEAP32[$agg$tmp45+4>>2]|0;
     $call46 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call44,$agg$tmp45$byval_copy)|0);
     $retval$3 = $call46;
     break L1;
     break;
    }
    case 105:  {
     $6 = HEAP32[$this>>2]|0;
     $incdec$ptr49 = ((($6)) + 1|0);
     HEAP32[$this>>2] = $incdec$ptr49;
     $call50 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp51,35325);
     ;HEAP32[$agg$tmp51$byval_copy>>2]=HEAP32[$agg$tmp51>>2]|0;HEAP32[$agg$tmp51$byval_copy+4>>2]=HEAP32[$agg$tmp51+4>>2]|0;
     $call52 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call50,$agg$tmp51$byval_copy)|0);
     $retval$3 = $call52;
     break L1;
     break;
    }
    case 106:  {
     $7 = HEAP32[$this>>2]|0;
     $incdec$ptr55 = ((($7)) + 1|0);
     HEAP32[$this>>2] = $incdec$ptr55;
     $call56 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp57,24268);
     ;HEAP32[$agg$tmp57$byval_copy>>2]=HEAP32[$agg$tmp57>>2]|0;HEAP32[$agg$tmp57$byval_copy+4>>2]=HEAP32[$agg$tmp57+4>>2]|0;
     $call58 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call56,$agg$tmp57$byval_copy)|0);
     $retval$3 = $call58;
     break L1;
     break;
    }
    case 108:  {
     $8 = HEAP32[$this>>2]|0;
     $incdec$ptr61 = ((($8)) + 1|0);
     HEAP32[$this>>2] = $incdec$ptr61;
     $call62 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp63,24270);
     ;HEAP32[$agg$tmp63$byval_copy>>2]=HEAP32[$agg$tmp63>>2]|0;HEAP32[$agg$tmp63$byval_copy+4>>2]=HEAP32[$agg$tmp63+4>>2]|0;
     $call64 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call62,$agg$tmp63$byval_copy)|0);
     $retval$3 = $call64;
     break L1;
     break;
    }
    case 109:  {
     $9 = HEAP32[$this>>2]|0;
     $incdec$ptr67 = ((($9)) + 1|0);
     HEAP32[$this>>2] = $incdec$ptr67;
     $call68 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp69,24272);
     ;HEAP32[$agg$tmp69$byval_copy>>2]=HEAP32[$agg$tmp69>>2]|0;HEAP32[$agg$tmp69$byval_copy+4>>2]=HEAP32[$agg$tmp69+4>>2]|0;
     $call70 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call68,$agg$tmp69$byval_copy)|0);
     $retval$3 = $call70;
     break L1;
     break;
    }
    case 120:  {
     $10 = HEAP32[$this>>2]|0;
     $incdec$ptr73 = ((($10)) + 1|0);
     HEAP32[$this>>2] = $incdec$ptr73;
     $call74 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp75,24275);
     ;HEAP32[$agg$tmp75$byval_copy>>2]=HEAP32[$agg$tmp75>>2]|0;HEAP32[$agg$tmp75$byval_copy+4>>2]=HEAP32[$agg$tmp75+4>>2]|0;
     $call76 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call74,$agg$tmp75$byval_copy)|0);
     $retval$3 = $call76;
     break L1;
     break;
    }
    case 121:  {
     $11 = HEAP32[$this>>2]|0;
     $incdec$ptr79 = ((($11)) + 1|0);
     HEAP32[$this>>2] = $incdec$ptr79;
     $call80 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp81,24278);
     ;HEAP32[$agg$tmp81$byval_copy>>2]=HEAP32[$agg$tmp81>>2]|0;HEAP32[$agg$tmp81$byval_copy+4>>2]=HEAP32[$agg$tmp81+4>>2]|0;
     $call82 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call80,$agg$tmp81$byval_copy)|0);
     $retval$3 = $call82;
     break L1;
     break;
    }
    case 110:  {
     $12 = HEAP32[$this>>2]|0;
     $incdec$ptr85 = ((($12)) + 1|0);
     HEAP32[$this>>2] = $incdec$ptr85;
     $call86 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp87,23410);
     ;HEAP32[$agg$tmp87$byval_copy>>2]=HEAP32[$agg$tmp87>>2]|0;HEAP32[$agg$tmp87$byval_copy+4>>2]=HEAP32[$agg$tmp87+4>>2]|0;
     $call88 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call86,$agg$tmp87$byval_copy)|0);
     $retval$3 = $call88;
     break L1;
     break;
    }
    case 111:  {
     $13 = HEAP32[$this>>2]|0;
     $incdec$ptr91 = ((($13)) + 1|0);
     HEAP32[$this>>2] = $incdec$ptr91;
     $call92 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp93,23419);
     ;HEAP32[$agg$tmp93$byval_copy>>2]=HEAP32[$agg$tmp93>>2]|0;HEAP32[$agg$tmp93$byval_copy+4>>2]=HEAP32[$agg$tmp93+4>>2]|0;
     $call94 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($call92,$agg$tmp93$byval_copy)|0);
     $retval$3 = $call94;
     break L1;
     break;
    }
    case 102:  {
     $14 = HEAP32[$this>>2]|0;
     $incdec$ptr97 = ((($14)) + 1|0);
     HEAP32[$this>>2] = $incdec$ptr97;
     $call98 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $call99 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseFloatingLiteralIfEEPNS0_4NodeEv($call98)|0);
     $retval$3 = $call99;
     break L1;
     break;
    }
    case 100:  {
     $15 = HEAP32[$this>>2]|0;
     $incdec$ptr102 = ((($15)) + 1|0);
     HEAP32[$this>>2] = $incdec$ptr102;
     $call103 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $call104 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseFloatingLiteralIdEEPNS0_4NodeEv($call103)|0);
     $retval$3 = $call104;
     break L1;
     break;
    }
    case 101:  {
     $16 = HEAP32[$this>>2]|0;
     $incdec$ptr107 = ((($16)) + 1|0);
     HEAP32[$this>>2] = $incdec$ptr107;
     $call108 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $call109 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseFloatingLiteralIeEEPNS0_4NodeEv($call108)|0);
     $retval$3 = $call109;
     break L1;
     break;
    }
    case 95:  {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp111,23246);
     ;HEAP32[$agg$tmp111$byval_copy>>2]=HEAP32[$agg$tmp111>>2]|0;HEAP32[$agg$tmp111$byval_copy+4>>2]=HEAP32[$agg$tmp111+4>>2]|0;
     $call112 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp111$byval_copy)|0);
     if (!($call112)) {
      $retval$3 = 0;
      break L1;
     }
     $call114 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $call115 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv($call114)|0);
     $cmp = ($call115|0)==(0|0);
     if (!($cmp)) {
      $call116 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
      if ($call116) {
       $retval$3 = $call115;
       break L1;
      }
     }
     $retval$3 = 0;
     break L1;
     break;
    }
    default: {
     $call121 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $call122 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call121)|0);
     HEAP32[$T>>2] = $call122;
     $cmp123 = ($call122|0)==(0|0);
     if ($cmp123) {
      $retval$2 = 0;
     } else {
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($N,$this,0);
      $call126 = (__ZNK12_GLOBAL__N_110StringView5emptyEv($N)|0);
      $call133 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
      if ($call126) {
       $spec$select = $call133 ? $call122 : 0;
       $retval$1 = $spec$select;
      } else {
       if ($call133) {
        $call131 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15IntegerCastExprEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this,$T,$N)|0);
        $retval$1 = $call131;
       } else {
        $retval$1 = 0;
       }
      }
      $retval$2 = $retval$1;
     }
     $retval$3 = $retval$2;
     break L1;
    }
    }
   } while(0);
  } else {
   $retval$3 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($retval$3|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseIntegerLiteralENS_10StringViewE($this,$Lit) {
 $this = $this|0;
 $Lit = $Lit|0;
 var $Tmp = 0, $call = 0, $call2 = 0, $call3 = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $Tmp = sp;
 __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($Tmp,$this,1);
 $call = (__ZNK12_GLOBAL__N_110StringView5emptyEv($Tmp)|0);
 if ($call) {
  $retval$0 = 0;
 } else {
  $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
  if ($call2) {
   $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_14IntegerLiteralEJRNS_10StringViewES9_EEEPNS0_4NodeEDpOT0_($this,$Lit,$Tmp)|0);
   $retval$0 = $call3;
  } else {
   $retval$0 = 0;
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8BoolExprEJiEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8BoolExprEJiEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseFloatingLiteralIfEEPNS0_4NodeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $Data = 0, $__begin$0 = 0, $add$ptr = 0, $add$ptr14 = 0, $call = 0, $call15 = 0, $call18 = 0, $call3 = 0, $call4 = 0, $call6 = 0, $cmp = 0, $cmp5 = 0, $conv = 0, $incdec$ptr = 0, $retval$3 = 0, $retval$4 = 0, $tobool = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $Data = sp;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this)|0);
 $cmp = ($call>>>0)<(9);
 if ($cmp) {
  $retval$4 = 0;
 } else {
  $0 = HEAP32[$this>>2]|0;
  $add$ptr = ((($0)) + 8|0);
  __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($Data,$0,$add$ptr);
  $call3 = (__ZNK12_GLOBAL__N_110StringView5beginEv($Data)|0);
  $call4 = (__ZNK12_GLOBAL__N_110StringView3endEv($Data)|0);
  $__begin$0 = $call3;
  while(1) {
   $cmp5 = ($__begin$0|0)==($call4|0);
   if ($cmp5) {
    label = 5;
    break;
   }
   $1 = HEAP8[$__begin$0>>0]|0;
   $conv = $1 << 24 >> 24;
   $call6 = (_isxdigit($conv)|0);
   $tobool = ($call6|0)==(0);
   $incdec$ptr = ((($__begin$0)) + 1|0);
   if ($tobool) {
    $retval$3 = 0;
    break;
   } else {
    $__begin$0 = $incdec$ptr;
   }
  }
  if ((label|0) == 5) {
   $2 = HEAP32[$this>>2]|0;
   $add$ptr14 = ((($2)) + 8|0);
   HEAP32[$this>>2] = $add$ptr14;
   $call15 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
   if ($call15) {
    $call18 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FloatLiteralImplIfEEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this,$Data)|0);
    $retval$3 = $call18;
   } else {
    $retval$3 = 0;
   }
  }
  $retval$4 = $retval$3;
 }
 STACKTOP = sp;return ($retval$4|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseFloatingLiteralIdEEPNS0_4NodeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $Data = 0, $__begin$0 = 0, $add$ptr = 0, $add$ptr14 = 0, $call = 0, $call15 = 0, $call18 = 0, $call3 = 0, $call4 = 0, $call6 = 0, $cmp = 0, $cmp5 = 0, $conv = 0, $incdec$ptr = 0, $retval$3 = 0, $retval$4 = 0, $tobool = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $Data = sp;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this)|0);
 $cmp = ($call>>>0)<(17);
 if ($cmp) {
  $retval$4 = 0;
 } else {
  $0 = HEAP32[$this>>2]|0;
  $add$ptr = ((($0)) + 16|0);
  __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($Data,$0,$add$ptr);
  $call3 = (__ZNK12_GLOBAL__N_110StringView5beginEv($Data)|0);
  $call4 = (__ZNK12_GLOBAL__N_110StringView3endEv($Data)|0);
  $__begin$0 = $call3;
  while(1) {
   $cmp5 = ($__begin$0|0)==($call4|0);
   if ($cmp5) {
    label = 5;
    break;
   }
   $1 = HEAP8[$__begin$0>>0]|0;
   $conv = $1 << 24 >> 24;
   $call6 = (_isxdigit($conv)|0);
   $tobool = ($call6|0)==(0);
   $incdec$ptr = ((($__begin$0)) + 1|0);
   if ($tobool) {
    $retval$3 = 0;
    break;
   } else {
    $__begin$0 = $incdec$ptr;
   }
  }
  if ((label|0) == 5) {
   $2 = HEAP32[$this>>2]|0;
   $add$ptr14 = ((($2)) + 16|0);
   HEAP32[$this>>2] = $add$ptr14;
   $call15 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
   if ($call15) {
    $call18 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FloatLiteralImplIdEEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this,$Data)|0);
    $retval$3 = $call18;
   } else {
    $retval$3 = 0;
   }
  }
  $retval$4 = $retval$3;
 }
 STACKTOP = sp;return ($retval$4|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseFloatingLiteralIeEEPNS0_4NodeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $Data = 0, $__begin$0 = 0, $add$ptr = 0, $add$ptr14 = 0, $call = 0, $call15 = 0, $call18 = 0, $call3 = 0, $call4 = 0, $call6 = 0, $cmp = 0, $cmp5 = 0, $conv = 0, $incdec$ptr = 0, $retval$3 = 0, $retval$4 = 0, $tobool = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $Data = sp;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this)|0);
 $cmp = ($call>>>0)<(21);
 if ($cmp) {
  $retval$4 = 0;
 } else {
  $0 = HEAP32[$this>>2]|0;
  $add$ptr = ((($0)) + 20|0);
  __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($Data,$0,$add$ptr);
  $call3 = (__ZNK12_GLOBAL__N_110StringView5beginEv($Data)|0);
  $call4 = (__ZNK12_GLOBAL__N_110StringView3endEv($Data)|0);
  $__begin$0 = $call3;
  while(1) {
   $cmp5 = ($__begin$0|0)==($call4|0);
   if ($cmp5) {
    label = 5;
    break;
   }
   $1 = HEAP8[$__begin$0>>0]|0;
   $conv = $1 << 24 >> 24;
   $call6 = (_isxdigit($conv)|0);
   $tobool = ($call6|0)==(0);
   $incdec$ptr = ((($__begin$0)) + 1|0);
   if ($tobool) {
    $retval$3 = 0;
    break;
   } else {
    $__begin$0 = $incdec$ptr;
   }
  }
  if ((label|0) == 5) {
   $2 = HEAP32[$this>>2]|0;
   $add$ptr14 = ((($2)) + 20|0);
   HEAP32[$this>>2] = $add$ptr14;
   $call15 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
   if ($call15) {
    $call18 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FloatLiteralImplIeEEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this,$Data)|0);
    $retval$3 = $call18;
   } else {
    $retval$3 = 0;
   }
  }
  $retval$4 = $retval$3;
 }
 STACKTOP = sp;return ($retval$4|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15IntegerCastExprEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15IntegerCastExprEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15IntegerCastExprEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = $args1;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle15IntegerCastExprC2EPKNS0_4NodeENS_10StringViewE($call,$0,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle15IntegerCastExprC2EPKNS0_4NodeENS_10StringViewE($this,$Ty_,$Integer_) {
 $this = $this|0;
 $Ty_ = $Ty_|0;
 $Integer_ = $Integer_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Integer = 0, $Ty = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,60,1,1,1);
 HEAP32[$this>>2] = (4520);
 $Ty = ((($this)) + 8|0);
 HEAP32[$Ty>>2] = $Ty_;
 $Integer = ((($this)) + 12|0);
 $0 = $Integer_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Integer;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle15IntegerCastExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Integer = 0, $Ty = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $agg$tmp4 = 0, $tmpcast$byval_copy = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $tmpcast$byval_copy = sp + 40|0;
 $agg$tmp2$byval_copy = sp + 32|0;
 $agg$tmp$byval_copy = sp + 24|0;
 $agg$tmp = sp + 16|0;
 $agg$tmp2 = sp + 8|0;
 $agg$tmp4 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,23966);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Ty = ((($this)) + 8|0);
 $0 = HEAP32[$Ty>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2,23962);
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$agg$tmp2$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp2$byval_copy);
 $Integer = ((($this)) + 12|0);
 $1 = $Integer;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp4;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp4>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp4+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle15IntegerCastExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FloatLiteralImplIeEEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FloatLiteralImplIeEEJRNS_10StringViewEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FloatLiteralImplIeEEJRNS_10StringViewEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIeEC2ENS_10StringViewE($call,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIeEC2ENS_10StringViewE($this,$Contents_) {
 $this = $this|0;
 $Contents_ = $Contents_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Contents = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,64,1,1,1);
 HEAP32[$this>>2] = (4564);
 $Contents = ((($this)) + 8|0);
 $0 = $Contents_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Contents;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIeE9printLeftERNS_12OutputStreamE($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $Contents = 0, $__first$addr$0$i$i = 0, $__last$addr$0$i$i = 0, $add$ptr = 0, $add$ptr32 = 0, $add22 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call29 = 0, $call3 = 0, $cmp = 0, $cmp1$i$i = 0, $cmp5 = 0;
 var $cond = 0, $cond$v = 0, $cond21 = 0, $cond21$v = 0, $conv = 0, $conv10 = 0, $conv23 = 0, $e$0 = 0, $incdec$ptr$add = 0, $incdec$ptr$i$i = 0, $incdec$ptr$ptr = 0, $incdec$ptr2$i$i = 0, $incdec$ptr25 = 0, $isdigit = 0, $isdigit21 = 0, $isdigittmp = 0, $isdigittmp20 = 0, $num = 0, $scevgep = 0, $shl = 0;
 var $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $t$0$add = 0, $t$0$idx = 0, $t$0$ptr = 0, $uglygep = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $agg$tmp$byval_copy = sp + 64|0;
 $vararg_buffer = sp + 48|0;
 $0 = sp + 40|0;
 $num = sp;
 $agg$tmp = sp + 56|0;
 $Contents = ((($this)) + 8|0);
 $call = (__ZNK12_GLOBAL__N_110StringView5beginEv($Contents)|0);
 $call3 = (__ZNK12_GLOBAL__N_110StringView3endEv($Contents)|0);
 $add$ptr = ((($call3)) + 1|0);
 $sub$ptr$lhs$cast = $add$ptr;
 $sub$ptr$rhs$cast = $call;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $cmp = ($sub$ptr$sub>>>0)>(20);
 if ($cmp) {
  $scevgep = ((($0)) + 8|0);
  $e$0 = $0;$t$0$idx = 0;
  while(1) {
   $cmp5 = ($t$0$idx|0)==(20);
   if ($cmp5) {
    break;
   }
   $t$0$ptr = (($call) + ($t$0$idx)|0);
   $1 = HEAP8[$t$0$ptr>>0]|0;
   $conv = $1 << 24 >> 24;
   $isdigittmp = (($conv) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   $cond$v = $isdigit ? 0 : 9;
   $cond = (($cond$v) + ($conv))|0;
   $t$0$add = $t$0$idx | 1;
   $incdec$ptr$ptr = (($call) + ($t$0$add)|0);
   $2 = HEAP8[$incdec$ptr$ptr>>0]|0;
   $conv10 = $2 << 24 >> 24;
   $isdigittmp20 = (($conv10) + -48)|0;
   $isdigit21 = ($isdigittmp20>>>0)<(10);
   $cond21$v = $isdigit21 ? 208 : 169;
   $cond21 = (($cond21$v) + ($conv10))|0;
   $shl = $cond << 4;
   $add22 = (($cond21) + ($shl))|0;
   $conv23 = $add22&255;
   HEAP8[$e$0>>0] = $conv23;
   $incdec$ptr$add = (($t$0$idx) + 2)|0;
   $incdec$ptr25 = ((($e$0)) + 1|0);
   $e$0 = $incdec$ptr25;$t$0$idx = $incdec$ptr$add;
  }
  $uglygep = ((($scevgep)) + 2|0);
  $__first$addr$0$i$i = $0;$__last$addr$0$i$i = $uglygep;
  while(1) {
   $incdec$ptr$i$i = ((($__last$addr$0$i$i)) + -1|0);
   $cmp1$i$i = ($__first$addr$0$i$i>>>0)<($incdec$ptr$i$i>>>0);
   if (!($cmp1$i$i)) {
    break;
   }
   $3 = HEAP8[$__first$addr$0$i$i>>0]|0;
   $4 = HEAP8[$incdec$ptr$i$i>>0]|0;
   HEAP8[$__first$addr$0$i$i>>0] = $4;
   HEAP8[$incdec$ptr$i$i>>0] = $3;
   $incdec$ptr2$i$i = ((($__first$addr$0$i$i)) + 1|0);
   $__first$addr$0$i$i = $incdec$ptr2$i$i;$__last$addr$0$i$i = $incdec$ptr$i$i;
  }
  dest=$num; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $5 = +HEAPF64[$0>>3];
  HEAPF64[$vararg_buffer>>3] = $5;
  $call29 = (_snprintf($num,40,24334,$vararg_buffer)|0);
  $add$ptr32 = (($num) + ($call29)|0);
  __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($agg$tmp,$num,$add$ptr32);
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$agg$tmp$byval_copy);
 }
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIeED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FloatLiteralImplIdEEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FloatLiteralImplIdEEJRNS_10StringViewEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FloatLiteralImplIdEEJRNS_10StringViewEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIdEC2ENS_10StringViewE($call,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIdEC2ENS_10StringViewE($this,$Contents_) {
 $this = $this|0;
 $Contents_ = $Contents_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Contents = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,63,1,1,1);
 HEAP32[$this>>2] = (4608);
 $Contents = ((($this)) + 8|0);
 $0 = $Contents_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Contents;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIdE9printLeftERNS_12OutputStreamE($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $Contents = 0, $__first$addr$0$i$i = 0, $__last$addr$0$i$i = 0, $add$ptr = 0, $add$ptr32 = 0, $add22 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call29 = 0, $call3 = 0, $cmp = 0, $cmp1$i$i = 0, $cmp5 = 0;
 var $cond = 0, $cond$v = 0, $cond21 = 0, $cond21$v = 0, $conv = 0, $conv10 = 0, $conv23 = 0, $e$0 = 0, $incdec$ptr$add = 0, $incdec$ptr$i$i = 0, $incdec$ptr$ptr = 0, $incdec$ptr2$i$i = 0, $incdec$ptr25 = 0, $isdigit = 0, $isdigit21 = 0, $isdigittmp = 0, $isdigittmp20 = 0, $num = 0, $scevgep = 0, $shl = 0;
 var $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $t$0$add = 0, $t$0$idx = 0, $t$0$ptr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $agg$tmp$byval_copy = sp + 56|0;
 $vararg_buffer = sp + 40|0;
 $0 = sp + 32|0;
 $num = sp;
 $agg$tmp = sp + 48|0;
 $Contents = ((($this)) + 8|0);
 $call = (__ZNK12_GLOBAL__N_110StringView5beginEv($Contents)|0);
 $call3 = (__ZNK12_GLOBAL__N_110StringView3endEv($Contents)|0);
 $add$ptr = ((($call3)) + 1|0);
 $sub$ptr$lhs$cast = $add$ptr;
 $sub$ptr$rhs$cast = $call;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $cmp = ($sub$ptr$sub>>>0)>(16);
 if ($cmp) {
  $scevgep = ((($0)) + 8|0);
  $e$0 = $0;$t$0$idx = 0;
  while(1) {
   $cmp5 = ($t$0$idx|0)==(16);
   if ($cmp5) {
    break;
   }
   $t$0$ptr = (($call) + ($t$0$idx)|0);
   $1 = HEAP8[$t$0$ptr>>0]|0;
   $conv = $1 << 24 >> 24;
   $isdigittmp = (($conv) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   $cond$v = $isdigit ? 0 : 9;
   $cond = (($cond$v) + ($conv))|0;
   $t$0$add = $t$0$idx | 1;
   $incdec$ptr$ptr = (($call) + ($t$0$add)|0);
   $2 = HEAP8[$incdec$ptr$ptr>>0]|0;
   $conv10 = $2 << 24 >> 24;
   $isdigittmp20 = (($conv10) + -48)|0;
   $isdigit21 = ($isdigittmp20>>>0)<(10);
   $cond21$v = $isdigit21 ? 208 : 169;
   $cond21 = (($cond21$v) + ($conv10))|0;
   $shl = $cond << 4;
   $add22 = (($cond21) + ($shl))|0;
   $conv23 = $add22&255;
   HEAP8[$e$0>>0] = $conv23;
   $incdec$ptr$add = (($t$0$idx) + 2)|0;
   $incdec$ptr25 = ((($e$0)) + 1|0);
   $e$0 = $incdec$ptr25;$t$0$idx = $incdec$ptr$add;
  }
  $__first$addr$0$i$i = $0;$__last$addr$0$i$i = $scevgep;
  while(1) {
   $incdec$ptr$i$i = ((($__last$addr$0$i$i)) + -1|0);
   $cmp1$i$i = ($__first$addr$0$i$i>>>0)<($incdec$ptr$i$i>>>0);
   if (!($cmp1$i$i)) {
    break;
   }
   $3 = HEAP8[$__first$addr$0$i$i>>0]|0;
   $4 = HEAP8[$incdec$ptr$i$i>>0]|0;
   HEAP8[$__first$addr$0$i$i>>0] = $4;
   HEAP8[$incdec$ptr$i$i>>0] = $3;
   $incdec$ptr2$i$i = ((($__first$addr$0$i$i)) + 1|0);
   $__first$addr$0$i$i = $incdec$ptr2$i$i;$__last$addr$0$i$i = $incdec$ptr$i$i;
  }
  ;HEAP32[$num>>2]=0|0;HEAP32[$num+4>>2]=0|0;HEAP32[$num+8>>2]=0|0;HEAP32[$num+12>>2]=0|0;HEAP32[$num+16>>2]=0|0;HEAP32[$num+20>>2]=0|0;HEAP32[$num+24>>2]=0|0;HEAP32[$num+28>>2]=0|0;
  $5 = +HEAPF64[$0>>3];
  HEAPF64[$vararg_buffer>>3] = $5;
  $call29 = (_snprintf($num,32,24395,$vararg_buffer)|0);
  $add$ptr32 = (($num) + ($call29)|0);
  __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($agg$tmp,$num,$add$ptr32);
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$agg$tmp$byval_copy);
 }
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIdED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FloatLiteralImplIfEEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FloatLiteralImplIfEEJRNS_10StringViewEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FloatLiteralImplIfEEJRNS_10StringViewEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIfEC2ENS_10StringViewE($call,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIfEC2ENS_10StringViewE($this,$Contents_) {
 $this = $this|0;
 $Contents_ = $Contents_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Contents = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,62,1,1,1);
 HEAP32[$this>>2] = (4652);
 $Contents = ((($this)) + 8|0);
 $0 = $Contents_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Contents;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIfE9printLeftERNS_12OutputStreamE($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $Contents = 0, $__first$addr$0$i$i = 0, $__last$addr$0$i$i = 0, $add$ptr = 0, $add$ptr33 = 0, $add22 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call3 = 0, $call30 = 0, $cmp = 0, $cmp1$i$i = 0, $cmp5 = 0;
 var $cond = 0, $cond$v = 0, $cond21 = 0, $cond21$v = 0, $conv = 0, $conv10 = 0, $conv23 = 0, $conv29 = 0.0, $e$0 = 0, $incdec$ptr$add = 0, $incdec$ptr$i$i = 0, $incdec$ptr$ptr = 0, $incdec$ptr2$i$i = 0, $incdec$ptr25 = 0, $isdigit = 0, $isdigit21 = 0, $isdigittmp = 0, $isdigittmp20 = 0, $num = 0, $scevgep = 0;
 var $shl = 0, $sub$ptr$lhs$cast = 0, $sub$ptr$rhs$cast = 0, $sub$ptr$sub = 0, $t$0$add = 0, $t$0$idx = 0, $t$0$ptr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $agg$tmp$byval_copy = sp + 48|0;
 $vararg_buffer = sp + 24|0;
 $0 = sp + 40|0;
 $num = sp;
 $agg$tmp = sp + 32|0;
 $Contents = ((($this)) + 8|0);
 $call = (__ZNK12_GLOBAL__N_110StringView5beginEv($Contents)|0);
 $call3 = (__ZNK12_GLOBAL__N_110StringView3endEv($Contents)|0);
 $add$ptr = ((($call3)) + 1|0);
 $sub$ptr$lhs$cast = $add$ptr;
 $sub$ptr$rhs$cast = $call;
 $sub$ptr$sub = (($sub$ptr$lhs$cast) - ($sub$ptr$rhs$cast))|0;
 $cmp = ($sub$ptr$sub>>>0)>(8);
 if ($cmp) {
  $scevgep = ((($0)) + 4|0);
  $e$0 = $0;$t$0$idx = 0;
  while(1) {
   $cmp5 = ($t$0$idx|0)==(8);
   if ($cmp5) {
    break;
   }
   $t$0$ptr = (($call) + ($t$0$idx)|0);
   $1 = HEAP8[$t$0$ptr>>0]|0;
   $conv = $1 << 24 >> 24;
   $isdigittmp = (($conv) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   $cond$v = $isdigit ? 0 : 9;
   $cond = (($cond$v) + ($conv))|0;
   $t$0$add = $t$0$idx | 1;
   $incdec$ptr$ptr = (($call) + ($t$0$add)|0);
   $2 = HEAP8[$incdec$ptr$ptr>>0]|0;
   $conv10 = $2 << 24 >> 24;
   $isdigittmp20 = (($conv10) + -48)|0;
   $isdigit21 = ($isdigittmp20>>>0)<(10);
   $cond21$v = $isdigit21 ? 208 : 169;
   $cond21 = (($cond21$v) + ($conv10))|0;
   $shl = $cond << 4;
   $add22 = (($cond21) + ($shl))|0;
   $conv23 = $add22&255;
   HEAP8[$e$0>>0] = $conv23;
   $incdec$ptr$add = (($t$0$idx) + 2)|0;
   $incdec$ptr25 = ((($e$0)) + 1|0);
   $e$0 = $incdec$ptr25;$t$0$idx = $incdec$ptr$add;
  }
  $__first$addr$0$i$i = $0;$__last$addr$0$i$i = $scevgep;
  while(1) {
   $incdec$ptr$i$i = ((($__last$addr$0$i$i)) + -1|0);
   $cmp1$i$i = ($__first$addr$0$i$i>>>0)<($incdec$ptr$i$i>>>0);
   if (!($cmp1$i$i)) {
    break;
   }
   $3 = HEAP8[$__first$addr$0$i$i>>0]|0;
   $4 = HEAP8[$incdec$ptr$i$i>>0]|0;
   HEAP8[$__first$addr$0$i$i>>0] = $4;
   HEAP8[$incdec$ptr$i$i>>0] = $3;
   $incdec$ptr2$i$i = ((($__first$addr$0$i$i)) + 1|0);
   $__first$addr$0$i$i = $incdec$ptr2$i$i;$__last$addr$0$i$i = $incdec$ptr$i$i;
  }
  ;HEAP32[$num>>2]=0|0;HEAP32[$num+4>>2]=0|0;HEAP32[$num+8>>2]=0|0;HEAP32[$num+12>>2]=0|0;HEAP32[$num+16>>2]=0|0;HEAP32[$num+20>>2]=0|0;
  $5 = +HEAPF32[$0>>2];
  $conv29 = $5;
  HEAPF64[$vararg_buffer>>3] = $conv29;
  $call30 = (_snprintf($num,24,24454,$vararg_buffer)|0);
  $add$ptr33 = (($num) + ($call30)|0);
  __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($agg$tmp,$num,$add$ptr33);
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$agg$tmp$byval_copy);
 }
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIfED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8BoolExprEJiEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $call = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,12)|0);
 $0 = HEAP32[$args>>2]|0;
 $tobool = ($0|0)!=(0);
 __ZN12_GLOBAL__N_116itanium_demangle8BoolExprC2Eb($call,$tobool);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle8BoolExprC2Eb($this,$Value_) {
 $this = $this|0;
 $Value_ = $Value_|0;
 var $Value = 0, $frombool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $frombool = $Value_&1;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,59,1,1,1);
 HEAP32[$this>>2] = (4696);
 $Value = ((($this)) + 8|0);
 HEAP8[$Value>>0] = $frombool;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle8BoolExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $Value = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $Value = ((($this)) + 8|0);
 $0 = HEAP8[$Value>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if ($tobool) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,24519);
 } else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,24514);
 }
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle8BoolExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_14IntegerLiteralEJRNS_10StringViewES9_EEEPNS0_4NodeEDpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle14IntegerLiteralEJRNS_10StringViewES5_EEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle14IntegerLiteralEJRNS_10StringViewES5_EEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $agg$tmp = 0, $agg$tmp5 = 0, $call = 0, $tmpcast$byval_copy = 0, $tmpcast1$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmpcast1$byval_copy = sp + 24|0;
 $tmpcast$byval_copy = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp5 = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,24)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $10 = $args1;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = $agg$tmp5;
 $17 = $16;
 HEAP32[$17>>2] = $12;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $15;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 ;HEAP32[$tmpcast1$byval_copy>>2]=HEAP32[$agg$tmp5>>2]|0;HEAP32[$tmpcast1$byval_copy+4>>2]=HEAP32[$agg$tmp5+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle14IntegerLiteralC2ENS_10StringViewES2_($call,$tmpcast$byval_copy,$tmpcast1$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle14IntegerLiteralC2ENS_10StringViewES2_($this,$Type_,$Value_) {
 $this = $this|0;
 $Type_ = $Type_|0;
 $Value_ = $Value_|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $Type = 0, $Value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,61,1,1,1);
 HEAP32[$this>>2] = (4740);
 $Type = ((($this)) + 8|0);
 $0 = $Type_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Type;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $Value = ((($this)) + 16|0);
 $10 = $Value_;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = $Value;
 $17 = $16;
 HEAP32[$17>>2] = $12;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $15;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle14IntegerLiteral9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Type = 0, $Value = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp11 = 0, $agg$tmp11$byval_copy = 0, $agg$tmp13 = 0, $agg$tmp13$byval_copy = 0, $agg$tmp16 = 0;
 var $agg$tmp24 = 0, $agg$tmp3 = 0, $agg$tmp6 = 0, $agg$tmp6$byval_copy = 0, $call = 0, $call21 = 0, $call8 = 0, $cmp = 0, $cmp22 = 0, $cmp9 = 0, $tmpcast$byval_copy = 0, $tmpcast7$byval_copy = 0, $tmpcast8$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $tmpcast7$byval_copy = sp + 104|0;
 $tmpcast$byval_copy = sp + 96|0;
 $agg$tmp13$byval_copy = sp + 88|0;
 $agg$tmp11$byval_copy = sp + 80|0;
 $agg$tmp6$byval_copy = sp + 72|0;
 $tmpcast8$byval_copy = sp + 64|0;
 $agg$tmp$byval_copy = sp + 56|0;
 $agg$tmp = sp + 48|0;
 $agg$tmp3 = sp + 16|0;
 $agg$tmp6 = sp + 40|0;
 $agg$tmp11 = sp + 32|0;
 $agg$tmp13 = sp + 24|0;
 $agg$tmp16 = sp + 8|0;
 $agg$tmp24 = sp;
 $Type = ((($this)) + 8|0);
 $call = (__ZNK12_GLOBAL__N_110StringView4sizeEv($Type)|0);
 $cmp = ($call>>>0)>(3);
 if ($cmp) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,23966);
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
  $0 = $Type;
  $1 = $0;
  $2 = HEAP32[$1>>2]|0;
  $3 = (($0) + 4)|0;
  $4 = $3;
  $5 = HEAP32[$4>>2]|0;
  $6 = $agg$tmp3;
  $7 = $6;
  HEAP32[$7>>2] = $2;
  $8 = (($6) + 4)|0;
  $9 = $8;
  HEAP32[$9>>2] = $5;
  ;HEAP32[$tmpcast8$byval_copy>>2]=HEAP32[$agg$tmp3>>2]|0;HEAP32[$tmpcast8$byval_copy+4>>2]=HEAP32[$agg$tmp3+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast8$byval_copy);
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6,23962);
  ;HEAP32[$agg$tmp6$byval_copy>>2]=HEAP32[$agg$tmp6>>2]|0;HEAP32[$agg$tmp6$byval_copy+4>>2]=HEAP32[$agg$tmp6+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp6$byval_copy);
 }
 $Value = ((($this)) + 16|0);
 $call8 = (__ZNK12_GLOBAL__N_110StringViewixEm($Value)|0);
 $10 = HEAP8[$call8>>0]|0;
 $cmp9 = ($10<<24>>24)==(110);
 if ($cmp9) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp11,24569);
  ;HEAP32[$agg$tmp11$byval_copy>>2]=HEAP32[$agg$tmp11>>2]|0;HEAP32[$agg$tmp11$byval_copy+4>>2]=HEAP32[$agg$tmp11+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp11$byval_copy);
  __ZNK12_GLOBAL__N_110StringView9dropFrontEm($agg$tmp13,$Value,1);
  ;HEAP32[$agg$tmp13$byval_copy>>2]=HEAP32[$agg$tmp13>>2]|0;HEAP32[$agg$tmp13$byval_copy+4>>2]=HEAP32[$agg$tmp13+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp13$byval_copy);
 } else {
  $11 = $Value;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($11) + 4)|0;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $17 = $agg$tmp16;
  $18 = $17;
  HEAP32[$18>>2] = $13;
  $19 = (($17) + 4)|0;
  $20 = $19;
  HEAP32[$20>>2] = $16;
  ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp16>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp16+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast$byval_copy);
 }
 $call21 = (__ZNK12_GLOBAL__N_110StringView4sizeEv($Type)|0);
 $cmp22 = ($call21>>>0)<(4);
 if ($cmp22) {
  $21 = $Type;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + 4)|0;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = $agg$tmp24;
  $28 = $27;
  HEAP32[$28>>2] = $23;
  $29 = (($27) + 4)|0;
  $30 = $29;
  HEAP32[$30>>2] = $26;
  ;HEAP32[$tmpcast7$byval_copy>>2]=HEAP32[$agg$tmp24>>2]|0;HEAP32[$tmpcast7$byval_copy+4>>2]=HEAP32[$agg$tmp24+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast7$byval_copy);
 }
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle14IntegerLiteralD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK12_GLOBAL__N_110StringViewixEm($this) {
 $this = $this|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNK12_GLOBAL__N_110StringView5beginEv($this)|0);
 return ($call|0);
}
function __ZNK12_GLOBAL__N_110StringView9dropFrontEm($agg$result,$this,$N) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $N = $N|0;
 var $0 = 0, $1 = 0, $Last = 0, $add$ptr = 0, $call = 0, $cmp = 0, $spec$select = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNK12_GLOBAL__N_110StringView4sizeEv($this)|0);
 $cmp = ($call>>>0)>($N>>>0);
 $sub = (($call) + -1)|0;
 $spec$select = $cmp ? $N : $sub;
 $0 = HEAP32[$this>>2]|0;
 $add$ptr = (($0) + ($spec$select)|0);
 $Last = ((($this)) + 4|0);
 $1 = HEAP32[$Last>>2]|0;
 __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($agg$result,$add$ptr,$1);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20TemplateArgumentPackEJRNS2_9NodeArrayEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle20TemplateArgumentPackC2ENS0_9NodeArrayE($call,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle20TemplateArgumentPackC2ENS0_9NodeArrayE($this,$Elements_) {
 $this = $this|0;
 $Elements_ = $Elements_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Elements = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,28,1,1,1);
 HEAP32[$this>>2] = (4784);
 $Elements = ((($this)) + 8|0);
 $0 = $Elements_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Elements;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle20TemplateArgumentPack9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $Elements = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Elements = ((($this)) + 8|0);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($Elements,$S);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle20TemplateArgumentPackD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseFunctionParamEv($this) {
 $this = $this|0;
 var $Num = 0, $Num17 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp7 = 0, $agg$tmp7$byval_copy = 0, $call = 0, $call10 = 0, $call13 = 0, $call18 = 0, $call21 = 0, $call3 = 0, $call5 = 0, $call8 = 0, $ref$tmp = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $agg$tmp7$byval_copy = sp + 48|0;
 $agg$tmp$byval_copy = sp + 40|0;
 $agg$tmp = sp + 32|0;
 $Num = sp + 24|0;
 $agg$tmp7 = sp + 16|0;
 $ref$tmp = sp + 8|0;
 $Num17 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,26925);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp$byval_copy)|0);
 if ($call) {
  (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCVQualifiersEv($this)|0);
  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($Num,$this,0);
  $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
  if ($call3) {
   $call5 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13FunctionParamEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this,$Num)|0);
   $retval$0 = $call5;
  } else {
   $retval$0 = 0;
  }
  $retval$2 = $retval$0;
 } else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp7,26928);
  ;HEAP32[$agg$tmp7$byval_copy>>2]=HEAP32[$agg$tmp7>>2]|0;HEAP32[$agg$tmp7$byval_copy+4>>2]=HEAP32[$agg$tmp7+4>>2]|0;
  $call8 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp7$byval_copy)|0);
  if ($call8) {
   __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($ref$tmp,$this,0);
   $call10 = (__ZNK12_GLOBAL__N_110StringView5emptyEv($ref$tmp)|0);
   if ($call10) {
    $retval$2 = 0;
   } else {
    $call13 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,112)|0);
    if ($call13) {
     (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCVQualifiersEv($this)|0);
     __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($Num17,$this,0);
     $call18 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
     if ($call18) {
      $call21 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13FunctionParamEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this,$Num17)|0);
      $retval$1 = $call21;
     } else {
      $retval$1 = 0;
     }
     $retval$2 = $retval$1;
    } else {
     $retval$2 = 0;
    }
   }
  } else {
   $retval$2 = 0;
  }
 }
 STACKTOP = sp;return ($retval$2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseFoldExprEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Init = 0, $IsLeftFold = 0, $OperatorName = 0, $Pack = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp102 = 0;
 var $agg$tmp102$byval_copy = 0, $agg$tmp107 = 0, $agg$tmp107$byval_copy = 0, $agg$tmp112 = 0, $agg$tmp112$byval_copy = 0, $agg$tmp117 = 0, $agg$tmp117$byval_copy = 0, $agg$tmp122 = 0, $agg$tmp122$byval_copy = 0, $agg$tmp127 = 0, $agg$tmp127$byval_copy = 0, $agg$tmp132 = 0, $agg$tmp132$byval_copy = 0, $agg$tmp137 = 0, $agg$tmp137$byval_copy = 0, $agg$tmp142 = 0, $agg$tmp142$byval_copy = 0, $agg$tmp147 = 0, $agg$tmp147$byval_copy = 0, $agg$tmp152 = 0;
 var $agg$tmp152$byval_copy = 0, $agg$tmp157 = 0, $agg$tmp157$byval_copy = 0, $agg$tmp162 = 0, $agg$tmp162$byval_copy = 0, $agg$tmp167 = 0, $agg$tmp167$byval_copy = 0, $agg$tmp22 = 0, $agg$tmp22$byval_copy = 0, $agg$tmp27 = 0, $agg$tmp27$byval_copy = 0, $agg$tmp32 = 0, $agg$tmp32$byval_copy = 0, $agg$tmp37 = 0, $agg$tmp37$byval_copy = 0, $agg$tmp42 = 0, $agg$tmp42$byval_copy = 0, $agg$tmp47 = 0, $agg$tmp47$byval_copy = 0, $agg$tmp52 = 0;
 var $agg$tmp52$byval_copy = 0, $agg$tmp57 = 0, $agg$tmp57$byval_copy = 0, $agg$tmp62 = 0, $agg$tmp62$byval_copy = 0, $agg$tmp67 = 0, $agg$tmp67$byval_copy = 0, $agg$tmp72 = 0, $agg$tmp72$byval_copy = 0, $agg$tmp77 = 0, $agg$tmp77$byval_copy = 0, $agg$tmp82 = 0, $agg$tmp82$byval_copy = 0, $agg$tmp87 = 0, $agg$tmp87$byval_copy = 0, $agg$tmp92 = 0, $agg$tmp92$byval_copy = 0, $agg$tmp97 = 0, $agg$tmp97$byval_copy = 0, $call = 0;
 var $call103 = 0, $call108 = 0, $call113 = 0, $call118 = 0, $call123 = 0, $call128 = 0, $call133 = 0, $call138 = 0, $call143 = 0, $call148 = 0, $call153 = 0, $call158 = 0, $call163 = 0, $call168 = 0, $call19 = 0, $call2 = 0, $call203 = 0, $call204 = 0, $call210 = 0, $call219 = 0;
 var $call23 = 0, $call28 = 0, $call33 = 0, $call38 = 0, $call43 = 0, $call48 = 0, $call53 = 0, $call58 = 0, $call63 = 0, $call68 = 0, $call73 = 0, $call78 = 0, $call83 = 0, $call88 = 0, $call93 = 0, $call98 = 0, $cmp205 = 0, $cmp211 = 0, $incdec$ptr = 0, $ref$tmp = 0;
 var $ref$tmp100 = 0, $ref$tmp105 = 0, $ref$tmp110 = 0, $ref$tmp115 = 0, $ref$tmp120 = 0, $ref$tmp125 = 0, $ref$tmp130 = 0, $ref$tmp135 = 0, $ref$tmp140 = 0, $ref$tmp145 = 0, $ref$tmp150 = 0, $ref$tmp155 = 0, $ref$tmp160 = 0, $ref$tmp165 = 0, $ref$tmp170 = 0, $ref$tmp25 = 0, $ref$tmp30 = 0, $ref$tmp35 = 0, $ref$tmp40 = 0, $ref$tmp45 = 0;
 var $ref$tmp50 = 0, $ref$tmp55 = 0, $ref$tmp60 = 0, $ref$tmp65 = 0, $ref$tmp70 = 0, $ref$tmp75 = 0, $ref$tmp80 = 0, $ref$tmp85 = 0, $ref$tmp90 = 0, $ref$tmp95 = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, $retval$3 = 0, $storemerge = 0, $tobool215 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 768|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(768|0);
 $agg$tmp167$byval_copy = sp + 752|0;
 $agg$tmp162$byval_copy = sp + 744|0;
 $agg$tmp157$byval_copy = sp + 736|0;
 $agg$tmp152$byval_copy = sp + 728|0;
 $agg$tmp147$byval_copy = sp + 720|0;
 $agg$tmp142$byval_copy = sp + 712|0;
 $agg$tmp137$byval_copy = sp + 704|0;
 $agg$tmp132$byval_copy = sp + 696|0;
 $agg$tmp127$byval_copy = sp + 688|0;
 $agg$tmp122$byval_copy = sp + 680|0;
 $agg$tmp117$byval_copy = sp + 672|0;
 $agg$tmp112$byval_copy = sp + 664|0;
 $agg$tmp107$byval_copy = sp + 656|0;
 $agg$tmp102$byval_copy = sp + 648|0;
 $agg$tmp97$byval_copy = sp + 640|0;
 $agg$tmp92$byval_copy = sp + 632|0;
 $agg$tmp87$byval_copy = sp + 624|0;
 $agg$tmp82$byval_copy = sp + 616|0;
 $agg$tmp77$byval_copy = sp + 608|0;
 $agg$tmp72$byval_copy = sp + 600|0;
 $agg$tmp67$byval_copy = sp + 592|0;
 $agg$tmp62$byval_copy = sp + 584|0;
 $agg$tmp57$byval_copy = sp + 576|0;
 $agg$tmp52$byval_copy = sp + 568|0;
 $agg$tmp47$byval_copy = sp + 560|0;
 $agg$tmp42$byval_copy = sp + 552|0;
 $agg$tmp37$byval_copy = sp + 544|0;
 $agg$tmp32$byval_copy = sp + 536|0;
 $agg$tmp27$byval_copy = sp + 528|0;
 $agg$tmp22$byval_copy = sp + 520|0;
 $agg$tmp$byval_copy = sp + 512|0;
 $IsLeftFold = sp + 760|0;
 $OperatorName = sp + 248|0;
 $agg$tmp = sp + 504|0;
 $ref$tmp = sp + 240|0;
 $agg$tmp22 = sp + 496|0;
 $ref$tmp25 = sp + 232|0;
 $agg$tmp27 = sp + 488|0;
 $ref$tmp30 = sp + 224|0;
 $agg$tmp32 = sp + 480|0;
 $ref$tmp35 = sp + 216|0;
 $agg$tmp37 = sp + 472|0;
 $ref$tmp40 = sp + 208|0;
 $agg$tmp42 = sp + 464|0;
 $ref$tmp45 = sp + 200|0;
 $agg$tmp47 = sp + 456|0;
 $ref$tmp50 = sp + 192|0;
 $agg$tmp52 = sp + 448|0;
 $ref$tmp55 = sp + 184|0;
 $agg$tmp57 = sp + 440|0;
 $ref$tmp60 = sp + 176|0;
 $agg$tmp62 = sp + 432|0;
 $ref$tmp65 = sp + 168|0;
 $agg$tmp67 = sp + 424|0;
 $ref$tmp70 = sp + 160|0;
 $agg$tmp72 = sp + 416|0;
 $ref$tmp75 = sp + 152|0;
 $agg$tmp77 = sp + 408|0;
 $ref$tmp80 = sp + 144|0;
 $agg$tmp82 = sp + 400|0;
 $ref$tmp85 = sp + 136|0;
 $agg$tmp87 = sp + 392|0;
 $ref$tmp90 = sp + 128|0;
 $agg$tmp92 = sp + 384|0;
 $ref$tmp95 = sp + 120|0;
 $agg$tmp97 = sp + 376|0;
 $ref$tmp100 = sp + 112|0;
 $agg$tmp102 = sp + 368|0;
 $ref$tmp105 = sp + 104|0;
 $agg$tmp107 = sp + 360|0;
 $ref$tmp110 = sp + 96|0;
 $agg$tmp112 = sp + 352|0;
 $ref$tmp115 = sp + 88|0;
 $agg$tmp117 = sp + 344|0;
 $ref$tmp120 = sp + 80|0;
 $agg$tmp122 = sp + 336|0;
 $ref$tmp125 = sp + 72|0;
 $agg$tmp127 = sp + 328|0;
 $ref$tmp130 = sp + 64|0;
 $agg$tmp132 = sp + 320|0;
 $ref$tmp135 = sp + 56|0;
 $agg$tmp137 = sp + 312|0;
 $ref$tmp140 = sp + 48|0;
 $agg$tmp142 = sp + 304|0;
 $ref$tmp145 = sp + 40|0;
 $agg$tmp147 = sp + 296|0;
 $ref$tmp150 = sp + 32|0;
 $agg$tmp152 = sp + 288|0;
 $ref$tmp155 = sp + 24|0;
 $agg$tmp157 = sp + 280|0;
 $ref$tmp160 = sp + 16|0;
 $agg$tmp162 = sp + 272|0;
 $ref$tmp165 = sp + 8|0;
 $agg$tmp167 = sp + 264|0;
 $ref$tmp170 = sp;
 $Pack = sp + 260|0;
 $Init = sp + 256|0;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,102)|0);
 if ($call) {
  $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
  switch ($call2<<24>>24) {
  case 76: case 108:  {
   $storemerge = 1;
   label = 4;
   break;
  }
  case 82: case 114:  {
   $storemerge = 0;
   label = 4;
   break;
  }
  default: {
   $retval$2 = 0;
  }
  }
  if ((label|0) == 4) {
   HEAP8[$IsLeftFold>>0] = $storemerge;
   $0 = HEAP32[$this>>2]|0;
   $incdec$ptr = ((($0)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr;
   __ZN12_GLOBAL__N_110StringViewC2Ev($OperatorName);
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,26778);
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
   $call19 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp$byval_copy)|0);
   do {
    if ($call19) {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp,23970);
     $1 = $ref$tmp;
     $2 = $1;
     $3 = HEAP32[$2>>2]|0;
     $4 = (($1) + 4)|0;
     $5 = $4;
     $6 = HEAP32[$5>>2]|0;
     $7 = $OperatorName;
     $8 = $7;
     HEAP32[$8>>2] = $3;
     $9 = (($7) + 4)|0;
     $10 = $9;
     HEAP32[$10>>2] = $6;
     label = 66;
    } else {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp22,26781);
     ;HEAP32[$agg$tmp22$byval_copy>>2]=HEAP32[$agg$tmp22>>2]|0;HEAP32[$agg$tmp22$byval_copy+4>>2]=HEAP32[$agg$tmp22+4>>2]|0;
     $call23 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp22$byval_copy)|0);
     if ($call23) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp25,23968);
      $11 = $ref$tmp25;
      $12 = $11;
      $13 = HEAP32[$12>>2]|0;
      $14 = (($11) + 4)|0;
      $15 = $14;
      $16 = HEAP32[$15>>2]|0;
      $17 = $OperatorName;
      $18 = $17;
      HEAP32[$18>>2] = $13;
      $19 = (($17) + 4)|0;
      $20 = $19;
      HEAP32[$20>>2] = $16;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp27,26784);
     ;HEAP32[$agg$tmp27$byval_copy>>2]=HEAP32[$agg$tmp27>>2]|0;HEAP32[$agg$tmp27$byval_copy+4>>2]=HEAP32[$agg$tmp27+4>>2]|0;
     $call28 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp27$byval_copy)|0);
     if ($call28) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp30,24682);
      $21 = $ref$tmp30;
      $22 = $21;
      $23 = HEAP32[$22>>2]|0;
      $24 = (($21) + 4)|0;
      $25 = $24;
      $26 = HEAP32[$25>>2]|0;
      $27 = $OperatorName;
      $28 = $27;
      HEAP32[$28>>2] = $23;
      $29 = (($27) + 4)|0;
      $30 = $29;
      HEAP32[$30>>2] = $26;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp32,26787);
     ;HEAP32[$agg$tmp32$byval_copy>>2]=HEAP32[$agg$tmp32>>2]|0;HEAP32[$agg$tmp32$byval_copy+4>>2]=HEAP32[$agg$tmp32+4>>2]|0;
     $call33 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp32$byval_copy)|0);
     if ($call33) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp35,24685);
      $31 = $ref$tmp35;
      $32 = $31;
      $33 = HEAP32[$32>>2]|0;
      $34 = (($31) + 4)|0;
      $35 = $34;
      $36 = HEAP32[$35>>2]|0;
      $37 = $OperatorName;
      $38 = $37;
      HEAP32[$38>>2] = $33;
      $39 = (($37) + 4)|0;
      $40 = $39;
      HEAP32[$40>>2] = $36;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp37,26790);
     ;HEAP32[$agg$tmp37$byval_copy>>2]=HEAP32[$agg$tmp37>>2]|0;HEAP32[$agg$tmp37$byval_copy+4>>2]=HEAP32[$agg$tmp37+4>>2]|0;
     $call38 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp37$byval_copy)|0);
     if ($call38) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp40,24697);
      $41 = $ref$tmp40;
      $42 = $41;
      $43 = HEAP32[$42>>2]|0;
      $44 = (($41) + 4)|0;
      $45 = $44;
      $46 = HEAP32[$45>>2]|0;
      $47 = $OperatorName;
      $48 = $47;
      HEAP32[$48>>2] = $43;
      $49 = (($47) + 4)|0;
      $50 = $49;
      HEAP32[$50>>2] = $46;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp42,26793);
     ;HEAP32[$agg$tmp42$byval_copy>>2]=HEAP32[$agg$tmp42>>2]|0;HEAP32[$agg$tmp42$byval_copy+4>>2]=HEAP32[$agg$tmp42+4>>2]|0;
     $call43 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp42$byval_copy)|0);
     if ($call43) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp45,24701);
      $51 = $ref$tmp45;
      $52 = $51;
      $53 = HEAP32[$52>>2]|0;
      $54 = (($51) + 4)|0;
      $55 = $54;
      $56 = HEAP32[$55>>2]|0;
      $57 = $OperatorName;
      $58 = $57;
      HEAP32[$58>>2] = $53;
      $59 = (($57) + 4)|0;
      $60 = $59;
      HEAP32[$60>>2] = $56;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp47,26796);
     ;HEAP32[$agg$tmp47$byval_copy>>2]=HEAP32[$agg$tmp47>>2]|0;HEAP32[$agg$tmp47$byval_copy+4>>2]=HEAP32[$agg$tmp47+4>>2]|0;
     $call48 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp47$byval_copy)|0);
     if ($call48) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp50,24704);
      $61 = $ref$tmp50;
      $62 = $61;
      $63 = HEAP32[$62>>2]|0;
      $64 = (($61) + 4)|0;
      $65 = $64;
      $66 = HEAP32[$65>>2]|0;
      $67 = $OperatorName;
      $68 = $67;
      HEAP32[$68>>2] = $63;
      $69 = (($67) + 4)|0;
      $70 = $69;
      HEAP32[$70>>2] = $66;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp52,26799);
     ;HEAP32[$agg$tmp52$byval_copy>>2]=HEAP32[$agg$tmp52>>2]|0;HEAP32[$agg$tmp52$byval_copy+4>>2]=HEAP32[$agg$tmp52+4>>2]|0;
     $call53 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp52$byval_copy)|0);
     if ($call53) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp55,24706);
      $71 = $ref$tmp55;
      $72 = $71;
      $73 = HEAP32[$72>>2]|0;
      $74 = (($71) + 4)|0;
      $75 = $74;
      $76 = HEAP32[$75>>2]|0;
      $77 = $OperatorName;
      $78 = $77;
      HEAP32[$78>>2] = $73;
      $79 = (($77) + 4)|0;
      $80 = $79;
      HEAP32[$80>>2] = $76;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp57,26802);
     ;HEAP32[$agg$tmp57$byval_copy>>2]=HEAP32[$agg$tmp57>>2]|0;HEAP32[$agg$tmp57$byval_copy+4>>2]=HEAP32[$agg$tmp57+4>>2]|0;
     $call58 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp57$byval_copy)|0);
     if ($call58) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp60,24709);
      $81 = $ref$tmp60;
      $82 = $81;
      $83 = HEAP32[$82>>2]|0;
      $84 = (($81) + 4)|0;
      $85 = $84;
      $86 = HEAP32[$85>>2]|0;
      $87 = $OperatorName;
      $88 = $87;
      HEAP32[$88>>2] = $83;
      $89 = (($87) + 4)|0;
      $90 = $89;
      HEAP32[$90>>2] = $86;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp62,26805);
     ;HEAP32[$agg$tmp62$byval_copy>>2]=HEAP32[$agg$tmp62>>2]|0;HEAP32[$agg$tmp62$byval_copy+4>>2]=HEAP32[$agg$tmp62+4>>2]|0;
     $call63 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp62$byval_copy)|0);
     if ($call63) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp65,24711);
      $91 = $ref$tmp65;
      $92 = $91;
      $93 = HEAP32[$92>>2]|0;
      $94 = (($91) + 4)|0;
      $95 = $94;
      $96 = HEAP32[$95>>2]|0;
      $97 = $OperatorName;
      $98 = $97;
      HEAP32[$98>>2] = $93;
      $99 = (($97) + 4)|0;
      $100 = $99;
      HEAP32[$100>>2] = $96;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp67,26808);
     ;HEAP32[$agg$tmp67$byval_copy>>2]=HEAP32[$agg$tmp67>>2]|0;HEAP32[$agg$tmp67$byval_copy+4>>2]=HEAP32[$agg$tmp67+4>>2]|0;
     $call68 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp67$byval_copy)|0);
     if ($call68) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp70,24714);
      $101 = $ref$tmp70;
      $102 = $101;
      $103 = HEAP32[$102>>2]|0;
      $104 = (($101) + 4)|0;
      $105 = $104;
      $106 = HEAP32[$105>>2]|0;
      $107 = $OperatorName;
      $108 = $107;
      HEAP32[$108>>2] = $103;
      $109 = (($107) + 4)|0;
      $110 = $109;
      HEAP32[$110>>2] = $106;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp72,26811);
     ;HEAP32[$agg$tmp72$byval_copy>>2]=HEAP32[$agg$tmp72>>2]|0;HEAP32[$agg$tmp72$byval_copy+4>>2]=HEAP32[$agg$tmp72+4>>2]|0;
     $call73 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp72$byval_copy)|0);
     if ($call73) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp75,24717);
      $111 = $ref$tmp75;
      $112 = $111;
      $113 = HEAP32[$112>>2]|0;
      $114 = (($111) + 4)|0;
      $115 = $114;
      $116 = HEAP32[$115>>2]|0;
      $117 = $OperatorName;
      $118 = $117;
      HEAP32[$118>>2] = $113;
      $119 = (($117) + 4)|0;
      $120 = $119;
      HEAP32[$120>>2] = $116;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp77,26814);
     ;HEAP32[$agg$tmp77$byval_copy>>2]=HEAP32[$agg$tmp77>>2]|0;HEAP32[$agg$tmp77$byval_copy+4>>2]=HEAP32[$agg$tmp77+4>>2]|0;
     $call78 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp77$byval_copy)|0);
     if ($call78) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp80,24041);
      $121 = $ref$tmp80;
      $122 = $121;
      $123 = HEAP32[$122>>2]|0;
      $124 = (($121) + 4)|0;
      $125 = $124;
      $126 = HEAP32[$125>>2]|0;
      $127 = $OperatorName;
      $128 = $127;
      HEAP32[$128>>2] = $123;
      $129 = (($127) + 4)|0;
      $130 = $129;
      HEAP32[$130>>2] = $126;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp82,26817);
     ;HEAP32[$agg$tmp82$byval_copy>>2]=HEAP32[$agg$tmp82>>2]|0;HEAP32[$agg$tmp82$byval_copy+4>>2]=HEAP32[$agg$tmp82+4>>2]|0;
     $call83 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp82$byval_copy)|0);
     if ($call83) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp85,24720);
      $131 = $ref$tmp85;
      $132 = $131;
      $133 = HEAP32[$132>>2]|0;
      $134 = (($131) + 4)|0;
      $135 = $134;
      $136 = HEAP32[$135>>2]|0;
      $137 = $OperatorName;
      $138 = $137;
      HEAP32[$138>>2] = $133;
      $139 = (($137) + 4)|0;
      $140 = $139;
      HEAP32[$140>>2] = $136;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp87,26820);
     ;HEAP32[$agg$tmp87$byval_copy>>2]=HEAP32[$agg$tmp87>>2]|0;HEAP32[$agg$tmp87$byval_copy+4>>2]=HEAP32[$agg$tmp87+4>>2]|0;
     $call88 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp87$byval_copy)|0);
     if ($call88) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp90,24723);
      $141 = $ref$tmp90;
      $142 = $141;
      $143 = HEAP32[$142>>2]|0;
      $144 = (($141) + 4)|0;
      $145 = $144;
      $146 = HEAP32[$145>>2]|0;
      $147 = $OperatorName;
      $148 = $147;
      HEAP32[$148>>2] = $143;
      $149 = (($147) + 4)|0;
      $150 = $149;
      HEAP32[$150>>2] = $146;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp92,26823);
     ;HEAP32[$agg$tmp92$byval_copy>>2]=HEAP32[$agg$tmp92>>2]|0;HEAP32[$agg$tmp92$byval_copy+4>>2]=HEAP32[$agg$tmp92+4>>2]|0;
     $call93 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp92$byval_copy)|0);
     if ($call93) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp95,24726);
      $151 = $ref$tmp95;
      $152 = $151;
      $153 = HEAP32[$152>>2]|0;
      $154 = (($151) + 4)|0;
      $155 = $154;
      $156 = HEAP32[$155>>2]|0;
      $157 = $OperatorName;
      $158 = $157;
      HEAP32[$158>>2] = $153;
      $159 = (($157) + 4)|0;
      $160 = $159;
      HEAP32[$160>>2] = $156;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp97,26826);
     ;HEAP32[$agg$tmp97$byval_copy>>2]=HEAP32[$agg$tmp97>>2]|0;HEAP32[$agg$tmp97$byval_copy+4>>2]=HEAP32[$agg$tmp97+4>>2]|0;
     $call98 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp97$byval_copy)|0);
     if ($call98) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp100,24148);
      $161 = $ref$tmp100;
      $162 = $161;
      $163 = HEAP32[$162>>2]|0;
      $164 = (($161) + 4)|0;
      $165 = $164;
      $166 = HEAP32[$165>>2]|0;
      $167 = $OperatorName;
      $168 = $167;
      HEAP32[$168>>2] = $163;
      $169 = (($167) + 4)|0;
      $170 = $169;
      HEAP32[$170>>2] = $166;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp102,26829);
     ;HEAP32[$agg$tmp102$byval_copy>>2]=HEAP32[$agg$tmp102>>2]|0;HEAP32[$agg$tmp102$byval_copy+4>>2]=HEAP32[$agg$tmp102+4>>2]|0;
     $call103 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp102$byval_copy)|0);
     if ($call103) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp105,24569);
      $171 = $ref$tmp105;
      $172 = $171;
      $173 = HEAP32[$172>>2]|0;
      $174 = (($171) + 4)|0;
      $175 = $174;
      $176 = HEAP32[$175>>2]|0;
      $177 = $OperatorName;
      $178 = $177;
      HEAP32[$178>>2] = $173;
      $179 = (($177) + 4)|0;
      $180 = $179;
      HEAP32[$180>>2] = $176;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp107,26832);
     ;HEAP32[$agg$tmp107$byval_copy>>2]=HEAP32[$agg$tmp107>>2]|0;HEAP32[$agg$tmp107$byval_copy+4>>2]=HEAP32[$agg$tmp107+4>>2]|0;
     $call108 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp107$byval_copy)|0);
     if ($call108) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp110,24730);
      $181 = $ref$tmp110;
      $182 = $181;
      $183 = HEAP32[$182>>2]|0;
      $184 = (($181) + 4)|0;
      $185 = $184;
      $186 = HEAP32[$185>>2]|0;
      $187 = $OperatorName;
      $188 = $187;
      HEAP32[$188>>2] = $183;
      $189 = (($187) + 4)|0;
      $190 = $189;
      HEAP32[$190>>2] = $186;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp112,26835);
     ;HEAP32[$agg$tmp112$byval_copy>>2]=HEAP32[$agg$tmp112>>2]|0;HEAP32[$agg$tmp112$byval_copy+4>>2]=HEAP32[$agg$tmp112+4>>2]|0;
     $call113 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp112$byval_copy)|0);
     if ($call113) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp115,24035);
      $191 = $ref$tmp115;
      $192 = $191;
      $193 = HEAP32[$192>>2]|0;
      $194 = (($191) + 4)|0;
      $195 = $194;
      $196 = HEAP32[$195>>2]|0;
      $197 = $OperatorName;
      $198 = $197;
      HEAP32[$198>>2] = $193;
      $199 = (($197) + 4)|0;
      $200 = $199;
      HEAP32[$200>>2] = $196;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp117,26838);
     ;HEAP32[$agg$tmp117$byval_copy>>2]=HEAP32[$agg$tmp117>>2]|0;HEAP32[$agg$tmp117$byval_copy+4>>2]=HEAP32[$agg$tmp117+4>>2]|0;
     $call118 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp117$byval_copy)|0);
     if ($call118) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp120,24733);
      $201 = $ref$tmp120;
      $202 = $201;
      $203 = HEAP32[$202>>2]|0;
      $204 = (($201) + 4)|0;
      $205 = $204;
      $206 = HEAP32[$205>>2]|0;
      $207 = $OperatorName;
      $208 = $207;
      HEAP32[$208>>2] = $203;
      $209 = (($207) + 4)|0;
      $210 = $209;
      HEAP32[$210>>2] = $206;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp122,26841);
     ;HEAP32[$agg$tmp122$byval_copy>>2]=HEAP32[$agg$tmp122>>2]|0;HEAP32[$agg$tmp122$byval_copy+4>>2]=HEAP32[$agg$tmp122+4>>2]|0;
     $call123 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp122$byval_copy)|0);
     if ($call123) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp125,24739);
      $211 = $ref$tmp125;
      $212 = $211;
      $213 = HEAP32[$212>>2]|0;
      $214 = (($211) + 4)|0;
      $215 = $214;
      $216 = HEAP32[$215>>2]|0;
      $217 = $OperatorName;
      $218 = $217;
      HEAP32[$218>>2] = $213;
      $219 = (($217) + 4)|0;
      $220 = $219;
      HEAP32[$220>>2] = $216;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp127,26844);
     ;HEAP32[$agg$tmp127$byval_copy>>2]=HEAP32[$agg$tmp127>>2]|0;HEAP32[$agg$tmp127$byval_copy+4>>2]=HEAP32[$agg$tmp127+4>>2]|0;
     $call128 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp127$byval_copy)|0);
     if ($call128) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp130,24744);
      $221 = $ref$tmp130;
      $222 = $221;
      $223 = HEAP32[$222>>2]|0;
      $224 = (($221) + 4)|0;
      $225 = $224;
      $226 = HEAP32[$225>>2]|0;
      $227 = $OperatorName;
      $228 = $227;
      HEAP32[$228>>2] = $223;
      $229 = (($227) + 4)|0;
      $230 = $229;
      HEAP32[$230>>2] = $226;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp132,26847);
     ;HEAP32[$agg$tmp132$byval_copy>>2]=HEAP32[$agg$tmp132>>2]|0;HEAP32[$agg$tmp132$byval_copy+4>>2]=HEAP32[$agg$tmp132+4>>2]|0;
     $call133 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp132$byval_copy)|0);
     if ($call133) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp135,24747);
      $231 = $ref$tmp135;
      $232 = $231;
      $233 = HEAP32[$232>>2]|0;
      $234 = (($231) + 4)|0;
      $235 = $234;
      $236 = HEAP32[$235>>2]|0;
      $237 = $OperatorName;
      $238 = $237;
      HEAP32[$238>>2] = $233;
      $239 = (($237) + 4)|0;
      $240 = $239;
      HEAP32[$240>>2] = $236;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp137,26850);
     ;HEAP32[$agg$tmp137$byval_copy>>2]=HEAP32[$agg$tmp137>>2]|0;HEAP32[$agg$tmp137$byval_copy+4>>2]=HEAP32[$agg$tmp137+4>>2]|0;
     $call138 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp137$byval_copy)|0);
     if ($call138) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp140,24749);
      $241 = $ref$tmp140;
      $242 = $241;
      $243 = HEAP32[$242>>2]|0;
      $244 = (($241) + 4)|0;
      $245 = $244;
      $246 = HEAP32[$245>>2]|0;
      $247 = $OperatorName;
      $248 = $247;
      HEAP32[$248>>2] = $243;
      $249 = (($247) + 4)|0;
      $250 = $249;
      HEAP32[$250>>2] = $246;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp142,26853);
     ;HEAP32[$agg$tmp142$byval_copy>>2]=HEAP32[$agg$tmp142>>2]|0;HEAP32[$agg$tmp142$byval_copy+4>>2]=HEAP32[$agg$tmp142+4>>2]|0;
     $call143 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp142$byval_copy)|0);
     if ($call143) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp145,24756);
      $251 = $ref$tmp145;
      $252 = $251;
      $253 = HEAP32[$252>>2]|0;
      $254 = (($251) + 4)|0;
      $255 = $254;
      $256 = HEAP32[$255>>2]|0;
      $257 = $OperatorName;
      $258 = $257;
      HEAP32[$258>>2] = $253;
      $259 = (($257) + 4)|0;
      $260 = $259;
      HEAP32[$260>>2] = $256;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp147,26856);
     ;HEAP32[$agg$tmp147$byval_copy>>2]=HEAP32[$agg$tmp147>>2]|0;HEAP32[$agg$tmp147$byval_copy+4>>2]=HEAP32[$agg$tmp147+4>>2]|0;
     $call148 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp147$byval_copy)|0);
     if ($call148) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp150,24758);
      $261 = $ref$tmp150;
      $262 = $261;
      $263 = HEAP32[$262>>2]|0;
      $264 = (($261) + 4)|0;
      $265 = $264;
      $266 = HEAP32[$265>>2]|0;
      $267 = $OperatorName;
      $268 = $267;
      HEAP32[$268>>2] = $263;
      $269 = (($267) + 4)|0;
      $270 = $269;
      HEAP32[$270>>2] = $266;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp152,26859);
     ;HEAP32[$agg$tmp152$byval_copy>>2]=HEAP32[$agg$tmp152>>2]|0;HEAP32[$agg$tmp152$byval_copy+4>>2]=HEAP32[$agg$tmp152+4>>2]|0;
     $call153 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp152$byval_copy)|0);
     if ($call153) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp155,24767);
      $271 = $ref$tmp155;
      $272 = $271;
      $273 = HEAP32[$272>>2]|0;
      $274 = (($271) + 4)|0;
      $275 = $274;
      $276 = HEAP32[$275>>2]|0;
      $277 = $OperatorName;
      $278 = $277;
      HEAP32[$278>>2] = $273;
      $279 = (($277) + 4)|0;
      $280 = $279;
      HEAP32[$280>>2] = $276;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp157,26862);
     ;HEAP32[$agg$tmp157$byval_copy>>2]=HEAP32[$agg$tmp157>>2]|0;HEAP32[$agg$tmp157$byval_copy+4>>2]=HEAP32[$agg$tmp157+4>>2]|0;
     $call158 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp157$byval_copy)|0);
     if ($call158) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp160,24769);
      $281 = $ref$tmp160;
      $282 = $281;
      $283 = HEAP32[$282>>2]|0;
      $284 = (($281) + 4)|0;
      $285 = $284;
      $286 = HEAP32[$285>>2]|0;
      $287 = $OperatorName;
      $288 = $287;
      HEAP32[$288>>2] = $283;
      $289 = (($287) + 4)|0;
      $290 = $289;
      HEAP32[$290>>2] = $286;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp162,26865);
     ;HEAP32[$agg$tmp162$byval_copy>>2]=HEAP32[$agg$tmp162>>2]|0;HEAP32[$agg$tmp162$byval_copy+4>>2]=HEAP32[$agg$tmp162+4>>2]|0;
     $call163 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp162$byval_copy)|0);
     if ($call163) {
      __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp165,24772);
      $291 = $ref$tmp165;
      $292 = $291;
      $293 = HEAP32[$292>>2]|0;
      $294 = (($291) + 4)|0;
      $295 = $294;
      $296 = HEAP32[$295>>2]|0;
      $297 = $OperatorName;
      $298 = $297;
      HEAP32[$298>>2] = $293;
      $299 = (($297) + 4)|0;
      $300 = $299;
      HEAP32[$300>>2] = $296;
      label = 66;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp167,26868);
     ;HEAP32[$agg$tmp167$byval_copy>>2]=HEAP32[$agg$tmp167>>2]|0;HEAP32[$agg$tmp167$byval_copy+4>>2]=HEAP32[$agg$tmp167+4>>2]|0;
     $call168 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp167$byval_copy)|0);
     if (!($call168)) {
      $retval$1 = 0;
      break;
     }
     __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp170,24775);
     $301 = $ref$tmp170;
     $302 = $301;
     $303 = HEAP32[$302>>2]|0;
     $304 = (($301) + 4)|0;
     $305 = $304;
     $306 = HEAP32[$305>>2]|0;
     $307 = $OperatorName;
     $308 = $307;
     HEAP32[$308>>2] = $303;
     $309 = (($307) + 4)|0;
     $310 = $309;
     HEAP32[$310>>2] = $306;
     label = 66;
    }
   } while(0);
   if ((label|0) == 66) {
    $call203 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call204 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call203)|0);
    HEAP32[$Pack>>2] = $call204;
    HEAP32[$Init>>2] = 0;
    $cmp205 = ($call204|0)==(0|0);
    $311 = $call204;
    L100: do {
     if ($cmp205) {
      $retval$0 = 0;
     } else {
      switch ($call2<<24>>24) {
      case 76: case 82:  {
       $call210 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call203)|0);
       HEAP32[$Init>>2] = $call210;
       $cmp211 = ($call210|0)==(0|0);
       $312 = $call210;
       if ($cmp211) {
        $retval$0 = 0;
        break L100;
       }
       $tobool215 = ($storemerge<<24>>24)==(0);
       if (!($tobool215)) {
        HEAP32[$Pack>>2] = $312;
        HEAP32[$Init>>2] = $311;
       }
       break;
      }
      default: {
      }
      }
      $call219 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8FoldExprEJRbRNS_10StringViewERPNS0_4NodeESD_EEESC_DpOT0_($this,$IsLeftFold,$OperatorName,$Pack,$Init)|0);
      $retval$0 = $call219;
     }
    } while(0);
    $retval$1 = $retval$0;
   }
   $retval$2 = $retval$1;
  }
  $retval$3 = $retval$2;
 } else {
  $retval$3 = 0;
 }
 STACKTOP = sp;return ($retval$3|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBinaryExprENS_10StringViewE($this,$Kind) {
 $this = $this|0;
 $Kind = $Kind|0;
 var $LHS = 0, $RHS = 0, $call = 0, $call2 = 0, $call4 = 0, $call8 = 0, $cmp = 0, $cmp5 = 0, $retval$0 = 0, $retval$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $LHS = sp + 4|0;
 $RHS = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
 $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call)|0);
 HEAP32[$LHS>>2] = $call2;
 $cmp = ($call2|0)==(0|0);
 if ($cmp) {
  $retval$1 = 0;
 } else {
  $call4 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call)|0);
  HEAP32[$RHS>>2] = $call4;
  $cmp5 = ($call4|0)==(0|0);
  if ($cmp5) {
   $retval$0 = 0;
  } else {
   $call8 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10BinaryExprEJRPNS0_4NodeERNS_10StringViewESA_EEES9_DpOT0_($this,$LHS,$Kind,$RHS)|0);
   $retval$0 = $call8;
  }
  $retval$1 = $retval$0;
 }
 STACKTOP = sp;return ($retval$1|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parsePrefixExprENS_10StringViewE($this,$Kind) {
 $this = $this|0;
 $Kind = $Kind|0;
 var $E = 0, $call = 0, $call2 = 0, $call3 = 0, $cmp = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $E = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
 $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call)|0);
 HEAP32[$E>>2] = $call2;
 $cmp = ($call2|0)==(0|0);
 if ($cmp) {
  $retval$0 = 0;
 } else {
  $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10PrefixExprEJRNS_10StringViewERPNS0_4NodeEEEESB_DpOT0_($this,$Kind,$E)|0);
  $retval$0 = $call3;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA10_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call8 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA10_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_($ASTAllocator,$args,$args1,23962)|0);
 return ($call8|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA11_KcRPNS0_4NodeESD_EEESC_DpOT0_($this,$args1,$args3) {
 $this = $this|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $ASTAllocator = 0, $call8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call8 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA11_KcRPNS2_4NodeES9_EEEPT_DpOT0_($ASTAllocator,26667,$args1,$args3)|0);
 return ($call8|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CallExprEJRPNS0_4NodeENS0_9NodeArrayEEEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CallExprEJRPNS2_4NodeENS2_9NodeArrayEEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseConversionExprEv($this) {
 $this = $this|0;
 var $E = 0, $E21 = 0, $Exprs = 0, $Names = 0, $SaveTemp = 0, $TryToParseTemplateArgs = 0, $Ty = 0, $add$ptr = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call12 = 0, $call17 = 0, $call2 = 0, $call23 = 0, $call28 = 0, $call3 = 0, $call6 = 0, $call8 = 0, $call9 = 0;
 var $cmp = 0, $cmp13 = 0, $cmp24 = 0, $ref$tmp = 0, $retval$3 = 0, $retval$4 = 0, $retval$5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $agg$tmp$byval_copy = sp + 56|0;
 $agg$tmp = sp + 48|0;
 $Ty = sp + 40|0;
 $SaveTemp = sp + 32|0;
 $E = sp + 24|0;
 $Exprs = sp + 16|0;
 $E21 = sp + 8|0;
 $ref$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,26566);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp$byval_copy)|0);
 if ($call) {
  $TryToParseTemplateArgs = ((($this)) + 360|0);
  __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SaveTemp,$TryToParseTemplateArgs,0);
  $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
  $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call2)|0);
  HEAP32[$Ty>>2] = $call3;
  __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SaveTemp);
  $cmp = ($call3|0)==(0|0);
  do {
   if ($cmp) {
    $retval$4 = 0;
   } else {
    $call6 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
    if (!($call6)) {
     $call23 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call2)|0);
     HEAP32[$E21>>2] = $call23;
     $cmp24 = ($call23|0)==(0|0);
     if ($cmp24) {
      $retval$3 = 0;
     } else {
      $add$ptr = ((($E21)) + 4|0);
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13makeNodeArrayIPPNS0_4NodeEEENS0_9NodeArrayET_SB_($ref$tmp,$this,$E21,$add$ptr);
      $call28 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_14ConversionExprEJRPNS0_4NodeENS0_9NodeArrayEEEES9_DpOT0_($this,$Ty,$ref$tmp)|0);
      $retval$3 = $call28;
     }
     $retval$4 = $retval$3;
     break;
    }
    $Names = ((($this)) + 8|0);
    $call8 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names)|0);
    while(1) {
     $call9 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
     if ($call9) {
      label = 9;
      break;
     }
     $call12 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call2)|0);
     HEAP32[$E>>2] = $call12;
     $cmp13 = ($call12|0)==(0|0);
     if ($cmp13) {
      label = 7;
      break;
     }
     __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names,$E);
    }
    if ((label|0) == 7) {
     $retval$4 = 0;
     break;
    }
    else if ((label|0) == 9) {
     __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($Exprs,$this,$call8);
     $call17 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_14ConversionExprEJRPNS0_4NodeERNS0_9NodeArrayEEEES9_DpOT0_($this,$Ty,$Exprs)|0);
     $retval$4 = $call17;
     break;
    }
   }
  } while(0);
  $retval$5 = $retval$4;
 } else {
  $retval$5 = 0;
 }
 STACKTOP = sp;return ($retval$5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10DeleteExprEJRPNS0_4NodeERbbEEES9_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $ASTAllocator = 0, $call8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call8 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10DeleteExprEJRPNS2_4NodeERbbEEEPT_DpOT0_($ASTAllocator,$args,$args1,$args3)|0);
 return ($call8|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA13_KcRPNS0_4NodeESD_EEESC_DpOT0_($this,$args1,$args3) {
 $this = $this|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $ASTAllocator = 0, $call8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call8 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA13_KcRPNS2_4NodeES9_EEEPT_DpOT0_($ASTAllocator,26495,$args1,$args3)|0);
 return ($call8|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedNameEv($this) {
 $this = $this|0;
 var $$pre$phiZ2D = 0, $0 = 0, $Base = 0, $Base107 = 0, $Qual = 0, $Qual59 = 0, $SoFar = 0, $TA = 0, $TA92 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp38 = 0, $agg$tmp38$byval_copy = 0, $agg$tmp40 = 0, $agg$tmp40$byval_copy = 0, $brmerge = 0, $call = 0, $call109 = 0, $call113 = 0, $call13 = 0;
 var $call17 = 0, $call19 = 0, $call2 = 0, $call23 = 0, $call3 = 0, $call31 = 0, $call35 = 0, $call39 = 0, $call39$not = 0, $call41 = 0, $call44 = 0, $call45 = 0, $call5 = 0, $call51 = 0, $call54 = 0, $call60 = 0, $call61 = 0, $call67 = 0, $call70 = 0, $call80 = 0;
 var $call83 = 0, $call84 = 0, $call88 = 0, $call9 = 0, $call94 = 0, $call98 = 0, $cmp = 0, $cmp10 = 0, $cmp110 = 0, $cmp20 = 0, $cmp32 = 0, $cmp46 = 0, $cmp6 = 0, $cmp62 = 0, $cmp85 = 0, $cmp90 = 0, $cmp95 = 0, $conv55 = 0, $isdigit = 0, $isdigittmp = 0;
 var $retval$10 = 0, $retval$4 = 0, $retval$8 = 0, $tobool65 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $agg$tmp40$byval_copy = sp + 80|0;
 $agg$tmp38$byval_copy = sp + 72|0;
 $agg$tmp$byval_copy = sp + 64|0;
 $SoFar = sp + 56|0;
 $agg$tmp = sp + 48|0;
 $TA = sp + 40|0;
 $Qual = sp + 36|0;
 $Base = sp + 32|0;
 $agg$tmp38 = sp + 24|0;
 $agg$tmp40 = sp + 16|0;
 $Qual59 = sp + 8|0;
 $TA92 = sp + 4|0;
 $Base107 = sp;
 HEAP32[$SoFar>>2] = 0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,25705);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp$byval_copy)|0);
 L1: do {
  if ($call) {
   $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedTypeEv($call2)|0);
   HEAP32[$SoFar>>2] = $call3;
   $cmp = ($call3|0)==(0|0);
   if ($cmp) {
    $retval$10 = 0;
   } else {
    $call5 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
    $cmp6 = ($call5<<24>>24)==(73);
    do {
     if ($cmp6) {
      $call9 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb($call2,0)|0);
      HEAP32[$TA>>2] = $call9;
      $cmp10 = ($call9|0)==(0|0);
      if ($cmp10) {
       $retval$10 = 0;
       break L1;
      } else {
       $call13 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$SoFar,$TA)|0);
       HEAP32[$SoFar>>2] = $call13;
       break;
      }
     }
    } while(0);
    while(1) {
     $call17 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
     if ($call17) {
      break;
     }
     $call19 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseSimpleIdEv($call2)|0);
     HEAP32[$Qual>>2] = $call19;
     $cmp20 = ($call19|0)==(0|0);
     if ($cmp20) {
      label = 35;
      break;
     }
     $call23 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13QualifiedNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$SoFar,$Qual)|0);
     HEAP32[$SoFar>>2] = $call23;
    }
    if ((label|0) == 35) {
     $retval$10 = 0;
     break;
    }
    $call31 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E23parseBaseUnresolvedNameEv($call2)|0);
    HEAP32[$Base>>2] = $call31;
    $cmp32 = ($call31|0)==(0|0);
    if ($cmp32) {
     $retval$4 = 0;
    } else {
     $call35 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13QualifiedNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$SoFar,$Base)|0);
     $retval$4 = $call35;
    }
    $retval$10 = $retval$4;
   }
  } else {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp38,24679);
   ;HEAP32[$agg$tmp38$byval_copy>>2]=HEAP32[$agg$tmp38>>2]|0;HEAP32[$agg$tmp38$byval_copy+4>>2]=HEAP32[$agg$tmp38+4>>2]|0;
   $call39 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp38$byval_copy)|0);
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp40,25709);
   ;HEAP32[$agg$tmp40$byval_copy>>2]=HEAP32[$agg$tmp40>>2]|0;HEAP32[$agg$tmp40$byval_copy+4>>2]=HEAP32[$agg$tmp40+4>>2]|0;
   $call41 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp40$byval_copy)|0);
   if (!($call41)) {
    $call44 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call45 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E23parseBaseUnresolvedNameEv($call44)|0);
    HEAP32[$SoFar>>2] = $call45;
    $cmp46 = ($call45|0)==(0|0);
    $call39$not = $call39 ^ 1;
    $brmerge = $cmp46 | $call39$not;
    if ($brmerge) {
     $retval$10 = $call45;
     break;
    }
    $call51 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19GlobalQualifiedNameEJRPNS0_4NodeEEEES9_DpOT0_($this,$SoFar)|0);
    HEAP32[$SoFar>>2] = $call51;
    $retval$10 = $call51;
    break;
   }
   $call54 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
   $conv55 = $call54 << 24 >> 24;
   $isdigittmp = (($conv55) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   L25: do {
    if ($isdigit) {
     while(1) {
      $call60 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call61 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseSimpleIdEv($call60)|0);
      HEAP32[$Qual59>>2] = $call61;
      $cmp62 = ($call61|0)==(0|0);
      if ($cmp62) {
       break;
      }
      $0 = HEAP32[$SoFar>>2]|0;
      $tobool65 = ($0|0)==(0|0);
      do {
       if ($tobool65) {
        if ($call39) {
         $call70 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19GlobalQualifiedNameEJRPNS0_4NodeEEEES9_DpOT0_($this,$Qual59)|0);
         HEAP32[$SoFar>>2] = $call70;
         break;
        } else {
         HEAP32[$SoFar>>2] = $call61;
         break;
        }
       } else {
        $call67 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13QualifiedNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$SoFar,$Qual59)|0);
        HEAP32[$SoFar>>2] = $call67;
       }
      } while(0);
      $call80 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
      if ($call80) {
       $$pre$phiZ2D = $call60;
       break L25;
      }
     }
     $retval$10 = 0;
     break L1;
    } else {
     $call83 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $call84 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedTypeEv($call83)|0);
     HEAP32[$SoFar>>2] = $call84;
     $cmp85 = ($call84|0)==(0|0);
     if ($cmp85) {
      $retval$10 = 0;
      break L1;
     }
     $call88 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
     $cmp90 = ($call88<<24>>24)==(73);
     if ($cmp90) {
      $call94 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb($call83,0)|0);
      HEAP32[$TA92>>2] = $call94;
      $cmp95 = ($call94|0)==(0|0);
      if ($cmp95) {
       $retval$10 = 0;
       break L1;
      } else {
       $call98 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$SoFar,$TA92)|0);
       HEAP32[$SoFar>>2] = $call98;
       $$pre$phiZ2D = $call83;
       break;
      }
     } else {
      $$pre$phiZ2D = $call83;
     }
    }
   } while(0);
   $call109 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E23parseBaseUnresolvedNameEv($$pre$phiZ2D)|0);
   HEAP32[$Base107>>2] = $call109;
   $cmp110 = ($call109|0)==(0|0);
   if ($cmp110) {
    $retval$8 = 0;
   } else {
    $call113 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13QualifiedNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$SoFar,$Base107)|0);
    $retval$8 = $call113;
   }
   $retval$10 = $retval$8;
  }
 } while(0);
 STACKTOP = sp;return ($retval$10|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10MemberExprEJRPNS0_4NodeERA3_KcSA_EEES9_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $ASTAllocator = 0, $call8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call8 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10MemberExprEJRPNS2_4NodeERA3_KcS6_EEEPT_DpOT0_($ASTAllocator,$args,$args1,$args3)|0);
 return ($call8|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10MemberExprEJRPNS0_4NodeERA2_KcSA_EEES9_DpOT0_($this,$args,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args3 = $args3|0;
 var $ASTAllocator = 0, $call8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call8 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10MemberExprEJRPNS2_4NodeERA2_KcS6_EEEPT_DpOT0_($ASTAllocator,$args,25656,$args3)|0);
 return ($call8|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_18ArraySubscriptExprEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle18ArraySubscriptExprEJRPNS2_4NodeES6_EEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBracedExprEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $Field = 0, $Index = 0, $Init = 0, $Init23 = 0, $Init46 = 0, $RangeBegin = 0, $RangeEnd = 0, $add$ptr = 0, $add$ptr17 = 0, $add$ptr35 = 0, $call = 0, $call13 = 0, $call18 = 0, $call19 = 0, $call2 = 0, $call25 = 0, $call30 = 0;
 var $call36 = 0, $call37 = 0, $call4 = 0, $call42 = 0, $call48 = 0, $call5 = 0, $call52 = 0, $call57 = 0, $call58 = 0, $call9 = 0, $cmp = 0, $cmp10 = 0, $cmp20 = 0, $cmp26 = 0, $cmp38 = 0, $cmp43 = 0, $cmp49 = 0, $cmp6 = 0, $conv3 = 0, $ref$tmp = 0;
 var $ref$tmp29 = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, $retval$3 = 0, $retval$4 = 0, $retval$5 = 0, $retval$6 = 0, $retval$7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $Field = sp + 24|0;
 $Init = sp + 20|0;
 $ref$tmp = sp + 29|0;
 $Index = sp + 16|0;
 $Init23 = sp + 12|0;
 $ref$tmp29 = sp + 28|0;
 $RangeBegin = sp + 8|0;
 $RangeEnd = sp + 4|0;
 $Init46 = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
 $cmp = ($call<<24>>24)==(100);
 L1: do {
  if ($cmp) {
   $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $conv3 = $call2 << 24 >> 24;
   switch ($conv3|0) {
   case 105:  {
    $0 = HEAP32[$this>>2]|0;
    $add$ptr = ((($0)) + 2|0);
    HEAP32[$this>>2] = $add$ptr;
    $call4 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call5 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseSourceNameEPNS5_9NameStateE($call4)|0);
    HEAP32[$Field>>2] = $call5;
    $cmp6 = ($call5|0)==(0|0);
    if ($cmp6) {
     $retval$1 = 0;
    } else {
     $call9 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBracedExprEv($call4)|0);
     HEAP32[$Init>>2] = $call9;
     $cmp10 = ($call9|0)==(0|0);
     if ($cmp10) {
      $retval$0 = 0;
     } else {
      HEAP8[$ref$tmp>>0] = 0;
      $call13 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10BracedExprEJRPNS0_4NodeESA_bEEES9_DpOT0_($this,$Field,$Init,$ref$tmp)|0);
      $retval$0 = $call13;
     }
     $retval$1 = $retval$0;
    }
    $retval$7 = $retval$1;
    break L1;
    break;
   }
   case 120:  {
    $1 = HEAP32[$this>>2]|0;
    $add$ptr17 = ((($1)) + 2|0);
    HEAP32[$this>>2] = $add$ptr17;
    $call18 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call19 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call18)|0);
    HEAP32[$Index>>2] = $call19;
    $cmp20 = ($call19|0)==(0|0);
    if ($cmp20) {
     $retval$3 = 0;
    } else {
     $call25 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBracedExprEv($call18)|0);
     HEAP32[$Init23>>2] = $call25;
     $cmp26 = ($call25|0)==(0|0);
     if ($cmp26) {
      $retval$2 = 0;
     } else {
      HEAP8[$ref$tmp29>>0] = 1;
      $call30 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10BracedExprEJRPNS0_4NodeESA_bEEES9_DpOT0_($this,$Index,$Init23,$ref$tmp29)|0);
      $retval$2 = $call30;
     }
     $retval$3 = $retval$2;
    }
    $retval$7 = $retval$3;
    break L1;
    break;
   }
   case 88:  {
    $2 = HEAP32[$this>>2]|0;
    $add$ptr35 = ((($2)) + 2|0);
    HEAP32[$this>>2] = $add$ptr35;
    $call36 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call37 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call36)|0);
    HEAP32[$RangeBegin>>2] = $call37;
    $cmp38 = ($call37|0)==(0|0);
    if ($cmp38) {
     $retval$6 = 0;
    } else {
     $call42 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call36)|0);
     HEAP32[$RangeEnd>>2] = $call42;
     $cmp43 = ($call42|0)==(0|0);
     if ($cmp43) {
      $retval$5 = 0;
     } else {
      $call48 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseBracedExprEv($call36)|0);
      HEAP32[$Init46>>2] = $call48;
      $cmp49 = ($call48|0)==(0|0);
      if ($cmp49) {
       $retval$4 = 0;
      } else {
       $call52 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15BracedRangeExprEJRPNS0_4NodeESA_SA_EEES9_DpOT0_($this,$RangeBegin,$RangeEnd,$Init46)|0);
       $retval$4 = $call52;
      }
      $retval$5 = $retval$4;
     }
     $retval$6 = $retval$5;
    }
    $retval$7 = $retval$6;
    break L1;
    break;
   }
   default: {
    label = 20;
    break L1;
   }
   }
  } else {
   label = 20;
  }
 } while(0);
 if ((label|0) == 20) {
  $call57 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
  $call58 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call57)|0);
  $retval$7 = $call58;
 }
 STACKTOP = sp;return ($retval$7|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12InitListExprEJDnNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12InitListExprEJDnNS2_9NodeArrayEEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11PostfixExprEJRPNS0_4NodeERA3_KcEEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11PostfixExprEJRPNS2_4NodeERA3_KcEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E12parseNewExprEv($this) {
 $this = $this|0;
 var $Ex = 0, $ExprList = 0, $Global = 0, $Init = 0, $Inits = 0, $IsArray = 0, $Names = 0, $Ty = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp22 = 0, $agg$tmp22$byval_copy = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, $agg$tmp6 = 0, $agg$tmp6$byval_copy = 0, $call = 0, $call11 = 0, $call12 = 0, $call17 = 0;
 var $call18 = 0, $call2 = 0, $call23 = 0, $call26 = 0, $call28 = 0, $call32 = 0, $call41 = 0, $call44 = 0, $call48 = 0, $call5 = 0, $call7 = 0, $call8 = 0, $call9 = 0, $cmp = 0, $cmp13 = 0, $cmp19 = 0, $cmp33 = 0, $frombool = 0, $frombool3 = 0, $ref$tmp = 0;
 var $retval$5 = 0, $retval$7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $agg$tmp22$byval_copy = sp + 104|0;
 $agg$tmp6$byval_copy = sp + 96|0;
 $agg$tmp4$byval_copy = sp + 88|0;
 $agg$tmp$byval_copy = sp + 80|0;
 $Global = sp + 113|0;
 $agg$tmp = sp + 72|0;
 $IsArray = sp + 112|0;
 $agg$tmp4 = sp + 64|0;
 $agg$tmp6 = sp + 56|0;
 $Ex = sp + 48|0;
 $ExprList = sp + 40|0;
 $Ty = sp + 32|0;
 $agg$tmp22 = sp + 24|0;
 $Init = sp + 16|0;
 $Inits = sp + 8|0;
 $ref$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,24679);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp$byval_copy)|0);
 $frombool = $call&1;
 HEAP8[$Global>>0] = $frombool;
 $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
 $cmp = ($call2<<24>>24)==(97);
 $frombool3 = $cmp&1;
 HEAP8[$IsArray>>0] = $frombool3;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4,25293);
 ;HEAP32[$agg$tmp4$byval_copy>>2]=HEAP32[$agg$tmp4>>2]|0;HEAP32[$agg$tmp4$byval_copy+4>>2]=HEAP32[$agg$tmp4+4>>2]|0;
 $call5 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp4$byval_copy)|0);
 if ($call5) {
  label = 3;
 } else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6,25296);
  ;HEAP32[$agg$tmp6$byval_copy>>2]=HEAP32[$agg$tmp6>>2]|0;HEAP32[$agg$tmp6$byval_copy+4>>2]=HEAP32[$agg$tmp6+4>>2]|0;
  $call7 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp6$byval_copy)|0);
  if ($call7) {
   label = 3;
  } else {
   $retval$7 = 0;
  }
 }
 do {
  if ((label|0) == 3) {
   $Names = ((($this)) + 8|0);
   $call8 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names)|0);
   while(1) {
    $call9 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
    if ($call9) {
     break;
    }
    $call11 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call12 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call11)|0);
    HEAP32[$Ex>>2] = $call12;
    $cmp13 = ($call12|0)==(0|0);
    if ($cmp13) {
     label = 7;
     break;
    }
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names,$Ex);
   }
   if ((label|0) == 7) {
    $retval$7 = 0;
    break;
   }
   __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($ExprList,$this,$call8);
   $call17 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call18 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call17)|0);
   HEAP32[$Ty>>2] = $call18;
   $cmp19 = ($call18|0)==(0|0);
   do {
    if ($cmp19) {
     $retval$5 = 0;
    } else {
     __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp22,25299);
     ;HEAP32[$agg$tmp22$byval_copy>>2]=HEAP32[$agg$tmp22>>2]|0;HEAP32[$agg$tmp22$byval_copy+4>>2]=HEAP32[$agg$tmp22+4>>2]|0;
     $call23 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp22$byval_copy)|0);
     if (!($call23)) {
      $call44 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
      if (!($call44)) {
       $retval$5 = 0;
       break;
      }
      __ZN12_GLOBAL__N_116itanium_demangle9NodeArrayC2Ev($ref$tmp);
      $call48 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_7NewExprEJRNS0_9NodeArrayERPNS0_4NodeES8_RbSD_EEESB_DpOT0_($this,$ExprList,$Ty,$ref$tmp,$Global,$IsArray)|0);
      $retval$5 = $call48;
      break;
     }
     $call26 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names)|0);
     while(1) {
      $call28 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
      if ($call28) {
       label = 15;
       break;
      }
      $call32 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseExprEv($call17)|0);
      HEAP32[$Init>>2] = $call32;
      $cmp33 = ($call32|0)==(0|0);
      if ($cmp33) {
       label = 13;
       break;
      }
      __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names,$Init);
     }
     if ((label|0) == 13) {
      $retval$5 = 0;
      break;
     }
     else if ((label|0) == 15) {
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($Inits,$this,$call26);
      $call41 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_7NewExprEJRNS0_9NodeArrayERPNS0_4NodeES9_RbSD_EEESB_DpOT0_($this,$ExprList,$Ty,$Inits,$Global,$IsArray)|0);
      $retval$5 = $call41;
      break;
     }
    }
   } while(0);
   $retval$7 = $retval$5;
  }
 } while(0);
 STACKTOP = sp;return ($retval$7|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA11_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this,$args1) {
 $this = $this|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call8 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA11_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_($ASTAllocator,25282,$args1,23962)|0);
 return ($call8|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15ConditionalExprEJRPNS0_4NodeESA_SA_EEES9_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $ASTAllocator = 0, $call8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call8 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15ConditionalExprEJRPNS2_4NodeES6_S6_EEEPT_DpOT0_($ASTAllocator,$args,$args1,$args3)|0);
 return ($call8|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA17_KcRPNS0_4NodeESD_EEESC_DpOT0_($this,$args1,$args3) {
 $this = $this|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $ASTAllocator = 0, $call8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call8 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA17_KcRPNS2_4NodeES9_EEEPT_DpOT0_($ASTAllocator,25201,$args1,$args3)|0);
 return ($call8|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8CastExprEJRA12_KcRPNS0_4NodeESD_EEESC_DpOT0_($this,$args1,$args3) {
 $this = $this|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $ASTAllocator = 0, $call8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call8 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA12_KcRPNS2_4NodeES9_EEEPT_DpOT0_($ASTAllocator,25142,$args1,$args3)|0);
 return ($call8|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA9_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call8 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA9_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_($ASTAllocator,$args,$args1,23962)|0);
 return ($call8|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19SizeofParamPackExprEJRPNS0_4NodeEEEES9_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19SizeofParamPackExprEJRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13EnclosingExprEJRA12_KcRPNS0_4NodeERA2_S8_EEESC_DpOT0_($this,$args1) {
 $this = $this|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call8 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA12_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_($ASTAllocator,24954,$args1,23962)|0);
 return ($call8|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13NodeArrayNodeEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13NodeArrayNodeEJNS2_9NodeArrayEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12InitListExprEJRPNS0_4NodeENS0_9NodeArrayEEEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12InitListExprEJRPNS2_4NodeENS2_9NodeArrayEEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9ThrowExprEJRPNS0_4NodeEEEES9_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9ThrowExprEJRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9ThrowExprEJRPNS2_4NodeEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,12)|0);
 $0 = HEAP32[$args>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle9ThrowExprC2EPKNS0_4NodeE($call,$0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle9ThrowExprC2EPKNS0_4NodeE($this,$Op_) {
 $this = $this|0;
 $Op_ = $Op_|0;
 var $Op = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,58,1,1,1);
 HEAP32[$this>>2] = (4828);
 $Op = ((($this)) + 8|0);
 HEAP32[$Op>>2] = $Op_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle9ThrowExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $Op = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,24803);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Op = ((($this)) + 8|0);
 $0 = HEAP32[$Op>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle9ThrowExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12InitListExprEJRPNS2_4NodeENS2_9NodeArrayEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = $args1;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle12InitListExprC2EPKNS0_4NodeENS0_9NodeArrayE($call,$0,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle12InitListExprC2EPKNS0_4NodeENS0_9NodeArrayE($this,$Ty_,$Inits_) {
 $this = $this|0;
 $Ty_ = $Ty_|0;
 $Inits_ = $Inits_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Inits = 0, $Ty = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,56,1,1,1);
 HEAP32[$this>>2] = (4872);
 $Ty = ((($this)) + 8|0);
 HEAP32[$Ty>>2] = $Ty_;
 $Inits = ((($this)) + 12|0);
 $0 = $Inits_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Inits;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle12InitListExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $Inits = 0, $Ty = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Ty = ((($this)) + 8|0);
 $0 = HEAP32[$Ty>>2]|0;
 $tobool = ($0|0)==(0|0);
 if (!($tobool)) {
  __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 }
 __ZN12_GLOBAL__N_112OutputStreampLEc($S,123);
 $Inits = ((($this)) + 12|0);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($Inits,$S);
 __ZN12_GLOBAL__N_112OutputStreampLEc($S,125);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle12InitListExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13NodeArrayNodeEJNS2_9NodeArrayEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle13NodeArrayNodeC2ENS0_9NodeArrayE($call,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle13NodeArrayNodeC2ENS0_9NodeArrayE($this,$Array_) {
 $this = $this|0;
 $Array_ = $Array_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Array = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,0,1,1,1);
 HEAP32[$this>>2] = (4916);
 $Array = ((($this)) + 8|0);
 $0 = $Array_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Array;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle13NodeArrayNode9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $Array = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Array = ((($this)) + 8|0);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($Array,$S);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle13NodeArrayNodeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA12_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp8 = 0, $agg$tmp8$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp8$byval_copy = sp + 24|0;
 $agg$tmp$byval_copy = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp8 = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,28)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 $0 = HEAP32[$args1>>2]|0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp8,$args3);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 ;HEAP32[$agg$tmp8$byval_copy>>2]=HEAP32[$agg$tmp8>>2]|0;HEAP32[$agg$tmp8$byval_copy+4>>2]=HEAP32[$agg$tmp8+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle13EnclosingExprC2ENS_10StringViewEPNS0_4NodeES2_($call,$agg$tmp$byval_copy,$0,$agg$tmp8$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle13EnclosingExprC2ENS_10StringViewEPNS0_4NodeES2_($this,$Prefix_,$Infix_,$Postfix_) {
 $this = $this|0;
 $Prefix_ = $Prefix_|0;
 $Infix_ = $Infix_|0;
 $Postfix_ = $Postfix_|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $Infix = 0, $Postfix = 0, $Prefix = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,47,1,1,1);
 HEAP32[$this>>2] = (4960);
 $Prefix = ((($this)) + 8|0);
 $0 = $Prefix_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Prefix;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $Infix = ((($this)) + 16|0);
 HEAP32[$Infix>>2] = $Infix_;
 $Postfix = ((($this)) + 20|0);
 $10 = $Postfix_;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = $Postfix;
 $17 = $16;
 HEAP32[$17>>2] = $12;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $15;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle13EnclosingExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $Infix = 0, $Postfix = 0, $Prefix = 0, $agg$tmp = 0, $agg$tmp2 = 0, $tmpcast$byval_copy = 0, $tmpcast3$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmpcast3$byval_copy = sp + 24|0;
 $tmpcast$byval_copy = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp2 = sp;
 $Prefix = ((($this)) + 8|0);
 $0 = $Prefix;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast$byval_copy);
 $Infix = ((($this)) + 16|0);
 $10 = HEAP32[$Infix>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($10,$S);
 $Postfix = ((($this)) + 20|0);
 $11 = $Postfix;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + 4)|0;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = $agg$tmp2;
 $18 = $17;
 HEAP32[$18>>2] = $13;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $16;
 ;HEAP32[$tmpcast3$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$tmpcast3$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast3$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle13EnclosingExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19SizeofParamPackExprEJRPNS2_4NodeEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,12)|0);
 $0 = HEAP32[$args>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle19SizeofParamPackExprC2EPKNS0_4NodeE($call,$0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle19SizeofParamPackExprC2EPKNS0_4NodeE($this,$Pack_) {
 $this = $this|0;
 $Pack_ = $Pack_|0;
 var $Pack = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,49,1,1,1);
 HEAP32[$this>>2] = (5004);
 $Pack = ((($this)) + 8|0);
 HEAP32[$Pack>>2] = $Pack_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle19SizeofParamPackExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $PPE = 0, $Pack = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp2$byval_copy = sp + 40|0;
 $agg$tmp$byval_copy = sp + 32|0;
 $agg$tmp = sp + 24|0;
 $PPE = sp + 8|0;
 $agg$tmp2 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,25016);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Pack = ((($this)) + 8|0);
 $0 = HEAP32[$Pack>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle22ParameterPackExpansionC2EPKNS0_4NodeE($PPE,$0);
 __ZNK12_GLOBAL__N_116itanium_demangle22ParameterPackExpansion9printLeftERNS_12OutputStreamE($PPE,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2,23962);
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$agg$tmp2$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp2$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle19SizeofParamPackExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22ParameterPackExpansionC2EPKNS0_4NodeE($this,$Child_) {
 $this = $this|0;
 $Child_ = $Child_|0;
 var $Child = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,29,1,1,1);
 HEAP32[$this>>2] = (5048);
 $Child = ((($this)) + 8|0);
 HEAP32[$Child>>2] = $Child_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle22ParameterPackExpansion9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $2 = 0, $Child = 0, $CurrentPackIndex = 0, $CurrentPackMax = 0, $I$0 = 0, $SavePackIdx = 0, $SavePackMax = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp10 = 0, $agg$tmp10$byval_copy = 0, $call = 0, $cmp9 = 0, $inc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $agg$tmp10$byval_copy = sp + 48|0;
 $agg$tmp$byval_copy = sp + 40|0;
 $SavePackIdx = sp + 28|0;
 $SavePackMax = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp10 = sp;
 $CurrentPackIndex = ((($S)) + 12|0);
 __ZN12_GLOBAL__N_114SwapAndRestoreIjEC2ERjj($SavePackIdx,$CurrentPackIndex);
 $CurrentPackMax = ((($S)) + 16|0);
 __ZN12_GLOBAL__N_114SwapAndRestoreIjEC2ERjj($SavePackMax,$CurrentPackMax);
 $call = (__ZNK12_GLOBAL__N_112OutputStream18getCurrentPositionEv($S)|0);
 $Child = ((($this)) + 8|0);
 $0 = HEAP32[$Child>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 $1 = HEAP32[$CurrentPackMax>>2]|0;
 L1: do {
  switch ($1|0) {
  case -1:  {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,23466);
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
   break;
  }
  case 0:  {
   __ZN12_GLOBAL__N_112OutputStream18setCurrentPositionEm($S,$call);
   break;
  }
  default: {
   $I$0 = 1;
   while(1) {
    $cmp9 = ($I$0>>>0)<($1>>>0);
    if (!($cmp9)) {
     break L1;
    }
    __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp10,24150);
    ;HEAP32[$agg$tmp10$byval_copy>>2]=HEAP32[$agg$tmp10>>2]|0;HEAP32[$agg$tmp10$byval_copy+4>>2]=HEAP32[$agg$tmp10+4>>2]|0;
    __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp10$byval_copy);
    HEAP32[$CurrentPackIndex>>2] = $I$0;
    $2 = HEAP32[$Child>>2]|0;
    __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($2,$S);
    $inc = (($I$0) + 1)|0;
    $I$0 = $inc;
   }
  }
  }
 } while(0);
 __ZN12_GLOBAL__N_114SwapAndRestoreIjED2Ev($SavePackMax);
 __ZN12_GLOBAL__N_114SwapAndRestoreIjED2Ev($SavePackIdx);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_114SwapAndRestoreIjEC2ERjj($this,$Restore_) {
 $this = $this|0;
 $Restore_ = $Restore_|0;
 var $0 = 0, $OriginalValue = 0, $ShouldRestore = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = $Restore_;
 $OriginalValue = ((($this)) + 4|0);
 $0 = HEAP32[$Restore_>>2]|0;
 HEAP32[$OriginalValue>>2] = $0;
 $ShouldRestore = ((($this)) + 8|0);
 HEAP8[$ShouldRestore>>0] = 1;
 HEAP32[$Restore_>>2] = -1;
 return;
}
function __ZN12_GLOBAL__N_114SwapAndRestoreIjED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $OriginalValue = 0, $ShouldRestore = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ShouldRestore = ((($this)) + 8|0);
 $0 = HEAP8[$ShouldRestore>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if (!($tobool)) {
  $OriginalValue = ((($this)) + 4|0);
  $1 = HEAP32[$OriginalValue>>2]|0;
  $2 = HEAP32[$this>>2]|0;
  HEAP32[$2>>2] = $1;
 }
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22ParameterPackExpansionD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA9_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp8 = 0, $agg$tmp8$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp8$byval_copy = sp + 24|0;
 $agg$tmp$byval_copy = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp8 = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,28)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 $0 = HEAP32[$args1>>2]|0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp8,$args3);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 ;HEAP32[$agg$tmp8$byval_copy>>2]=HEAP32[$agg$tmp8>>2]|0;HEAP32[$agg$tmp8$byval_copy+4>>2]=HEAP32[$agg$tmp8+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle13EnclosingExprC2ENS_10StringViewEPNS0_4NodeES2_($call,$agg$tmp$byval_copy,$0,$agg$tmp8$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA12_KcRPNS2_4NodeES9_EEEPT_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,24)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 $0 = HEAP32[$args1>>2]|0;
 $1 = HEAP32[$args3>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8CastExprC2ENS_10StringViewEPKNS0_4NodeES5_($call,$agg$tmp$byval_copy,$0,$1);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle8CastExprC2ENS_10StringViewEPKNS0_4NodeES5_($this,$CastKind_,$To_,$From_) {
 $this = $this|0;
 $CastKind_ = $CastKind_|0;
 $To_ = $To_|0;
 $From_ = $From_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $CastKind = 0, $From = 0, $To = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,48,1,1,1);
 HEAP32[$this>>2] = (5092);
 $CastKind = ((($this)) + 8|0);
 $0 = $CastKind_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $CastKind;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $To = ((($this)) + 16|0);
 HEAP32[$To>>2] = $To_;
 $From = ((($this)) + 20|0);
 HEAP32[$From>>2] = $From_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle8CastExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $CastKind = 0, $From = 0, $To = 0, $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0;
 var $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, $agg$tmp8 = 0, $agg$tmp8$byval_copy = 0, $tmpcast$byval_copy = 0, $vfn = 0, $vfn7 = 0, $vtable = 0, $vtable6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $agg$tmp8$byval_copy = sp + 56|0;
 $agg$tmp4$byval_copy = sp + 48|0;
 $agg$tmp2$byval_copy = sp + 40|0;
 $tmpcast$byval_copy = sp + 32|0;
 $agg$tmp = sp;
 $agg$tmp2 = sp + 24|0;
 $agg$tmp4 = sp + 16|0;
 $agg$tmp8 = sp + 8|0;
 $CastKind = ((($this)) + 8|0);
 $0 = $CastKind;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2,24148);
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$agg$tmp2$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp2$byval_copy);
 $To = ((($this)) + 16|0);
 $10 = HEAP32[$To>>2]|0;
 $vtable = HEAP32[$10>>2]|0;
 $vfn = ((($vtable)) + 16|0);
 $11 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vii[$11 & 255]($10,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4,25154);
 ;HEAP32[$agg$tmp4$byval_copy>>2]=HEAP32[$agg$tmp4>>2]|0;HEAP32[$agg$tmp4$byval_copy+4>>2]=HEAP32[$agg$tmp4+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp4$byval_copy);
 $From = ((($this)) + 20|0);
 $12 = HEAP32[$From>>2]|0;
 $vtable6 = HEAP32[$12>>2]|0;
 $vfn7 = ((($vtable6)) + 16|0);
 $13 = HEAP32[$vfn7>>2]|0;
 FUNCTION_TABLE_vii[$13 & 255]($12,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp8,23962);
 ;HEAP32[$agg$tmp8$byval_copy>>2]=HEAP32[$agg$tmp8>>2]|0;HEAP32[$agg$tmp8$byval_copy+4>>2]=HEAP32[$agg$tmp8+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp8$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle8CastExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA17_KcRPNS2_4NodeES9_EEEPT_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,24)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 $0 = HEAP32[$args1>>2]|0;
 $1 = HEAP32[$args3>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8CastExprC2ENS_10StringViewEPKNS0_4NodeES5_($call,$agg$tmp$byval_copy,$0,$1);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15ConditionalExprEJRPNS2_4NodeES6_S6_EEEPT_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = HEAP32[$args1>>2]|0;
 $2 = HEAP32[$args3>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle15ConditionalExprC2EPKNS0_4NodeES4_S4_($call,$0,$1,$2);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle15ConditionalExprC2EPKNS0_4NodeES4_S4_($this,$Cond_,$Then_,$Else_) {
 $this = $this|0;
 $Cond_ = $Cond_|0;
 $Then_ = $Then_|0;
 $Else_ = $Else_|0;
 var $Cond = 0, $Else = 0, $Then = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,45,1,1,1);
 HEAP32[$this>>2] = (5136);
 $Cond = ((($this)) + 8|0);
 HEAP32[$Cond>>2] = $Cond_;
 $Then = ((($this)) + 12|0);
 HEAP32[$Then>>2] = $Then_;
 $Else = ((($this)) + 16|0);
 HEAP32[$Else>>2] = $Else_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle15ConditionalExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $2 = 0, $Cond = 0, $Else = 0, $Then = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, $agg$tmp6 = 0, $agg$tmp6$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $agg$tmp6$byval_copy = sp + 56|0;
 $agg$tmp4$byval_copy = sp + 48|0;
 $agg$tmp2$byval_copy = sp + 40|0;
 $agg$tmp$byval_copy = sp + 32|0;
 $agg$tmp = sp + 24|0;
 $agg$tmp2 = sp + 16|0;
 $agg$tmp4 = sp + 8|0;
 $agg$tmp6 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,23966);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Cond = ((($this)) + 8|0);
 $0 = HEAP32[$Cond>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2,25218);
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$agg$tmp2$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp2$byval_copy);
 $Then = ((($this)) + 12|0);
 $1 = HEAP32[$Then>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($1,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4,25224);
 ;HEAP32[$agg$tmp4$byval_copy>>2]=HEAP32[$agg$tmp4>>2]|0;HEAP32[$agg$tmp4$byval_copy+4>>2]=HEAP32[$agg$tmp4+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp4$byval_copy);
 $Else = ((($this)) + 16|0);
 $2 = HEAP32[$Else>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($2,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6,23962);
 ;HEAP32[$agg$tmp6$byval_copy>>2]=HEAP32[$agg$tmp6>>2]|0;HEAP32[$agg$tmp6$byval_copy+4>>2]=HEAP32[$agg$tmp6+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp6$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle15ConditionalExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA11_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp8 = 0, $agg$tmp8$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp8$byval_copy = sp + 24|0;
 $agg$tmp$byval_copy = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp8 = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,28)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 $0 = HEAP32[$args1>>2]|0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp8,$args3);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 ;HEAP32[$agg$tmp8$byval_copy>>2]=HEAP32[$agg$tmp8>>2]|0;HEAP32[$agg$tmp8$byval_copy+4>>2]=HEAP32[$agg$tmp8+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle13EnclosingExprC2ENS_10StringViewEPNS0_4NodeES2_($call,$agg$tmp$byval_copy,$0,$agg$tmp8$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_7NewExprEJRNS0_9NodeArrayERPNS0_4NodeES9_RbSD_EEESB_DpOT0_($this,$args,$args1,$args3,$args5,$args7) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 $args5 = $args5|0;
 $args7 = $args7|0;
 var $ASTAllocator = 0, $call14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call14 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle7NewExprEJRNS2_9NodeArrayERPNS2_4NodeES5_RbS9_EEEPT_DpOT0_($ASTAllocator,$args,$args1,$args3,$args5,$args7)|0);
 return ($call14|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle9NodeArrayC2Ev($this) {
 $this = $this|0;
 var $NumElements = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $NumElements = ((($this)) + 4|0);
 HEAP32[$NumElements>>2] = 0;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_7NewExprEJRNS0_9NodeArrayERPNS0_4NodeES8_RbSD_EEESB_DpOT0_($this,$args,$args1,$args3,$args5,$args7) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 $args5 = $args5|0;
 $args7 = $args7|0;
 var $ASTAllocator = 0, $call14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call14 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle7NewExprEJRNS2_9NodeArrayERPNS2_4NodeES4_RbS9_EEEPT_DpOT0_($ASTAllocator,$args,$args1,$args3,$args5,$args7)|0);
 return ($call14|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle7NewExprEJRNS2_9NodeArrayERPNS2_4NodeES4_RbS9_EEEPT_DpOT0_($this,$args,$args1,$args3,$args5,$args7) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 $args5 = $args5|0;
 $args7 = $args7|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $agg$tmp12 = 0, $call = 0, $tmpcast$byval_copy = 0, $tmpcast1$byval_copy = 0, $tobool = 0, $tobool16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmpcast1$byval_copy = sp + 24|0;
 $tmpcast$byval_copy = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp12 = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,32)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $10 = HEAP32[$args1>>2]|0;
 $11 = $args3;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + 4)|0;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = $agg$tmp12;
 $18 = $17;
 HEAP32[$18>>2] = $13;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $16;
 $21 = HEAP8[$args5>>0]|0;
 $tobool = ($21<<24>>24)!=(0);
 $22 = HEAP8[$args7>>0]|0;
 $tobool16 = ($22<<24>>24)!=(0);
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 ;HEAP32[$tmpcast1$byval_copy>>2]=HEAP32[$agg$tmp12>>2]|0;HEAP32[$tmpcast1$byval_copy+4>>2]=HEAP32[$agg$tmp12+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle7NewExprC2ENS0_9NodeArrayEPNS0_4NodeES2_bb($call,$tmpcast$byval_copy,$10,$tmpcast1$byval_copy,$tobool,$tobool16);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle7NewExprC2ENS0_9NodeArrayEPNS0_4NodeES2_bb($this,$ExprList_,$Type_,$InitList_,$IsGlobal_,$IsArray_) {
 $this = $this|0;
 $ExprList_ = $ExprList_|0;
 $Type_ = $Type_|0;
 $InitList_ = $InitList_|0;
 $IsGlobal_ = $IsGlobal_|0;
 $IsArray_ = $IsArray_|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ExprList = 0, $InitList = 0, $IsArray = 0, $IsGlobal = 0, $Type = 0, $frombool = 0, $frombool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $frombool = $IsGlobal_&1;
 $frombool1 = $IsArray_&1;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,51,1,1,1);
 HEAP32[$this>>2] = (5180);
 $ExprList = ((($this)) + 8|0);
 $0 = $ExprList_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $ExprList;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $Type = ((($this)) + 16|0);
 HEAP32[$Type>>2] = $Type_;
 $InitList = ((($this)) + 20|0);
 $10 = $InitList_;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = $InitList;
 $17 = $16;
 HEAP32[$17>>2] = $12;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $15;
 $IsGlobal = ((($this)) + 28|0);
 HEAP8[$IsGlobal>>0] = $frombool;
 $IsArray = ((($this)) + 29|0);
 HEAP8[$IsArray>>0] = $frombool1;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle7NewExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $2 = 0, $ExprList = 0, $InitList = 0, $IsArray = 0, $IsGlobal = 0, $Type = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp12 = 0, $agg$tmp12$byval_copy = 0, $agg$tmp15 = 0, $agg$tmp15$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $agg$tmp20 = 0, $agg$tmp20$byval_copy = 0, $agg$tmp23 = 0, $agg$tmp23$byval_copy = 0;
 var $agg$tmp6 = 0, $agg$tmp6$byval_copy = 0, $call10 = 0, $call18 = 0, $tobool = 0, $tobool4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $agg$tmp23$byval_copy = sp + 104|0;
 $agg$tmp20$byval_copy = sp + 96|0;
 $agg$tmp15$byval_copy = sp + 88|0;
 $agg$tmp12$byval_copy = sp + 80|0;
 $agg$tmp6$byval_copy = sp + 72|0;
 $agg$tmp2$byval_copy = sp + 64|0;
 $agg$tmp$byval_copy = sp + 56|0;
 $agg$tmp = sp + 48|0;
 $agg$tmp2 = sp + 40|0;
 $agg$tmp6 = sp + 32|0;
 $agg$tmp12 = sp + 24|0;
 $agg$tmp15 = sp + 16|0;
 $agg$tmp20 = sp + 8|0;
 $agg$tmp23 = sp;
 $IsGlobal = ((($this)) + 28|0);
 $0 = HEAP8[$IsGlobal>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if (!($tobool)) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,25302);
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 }
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2,25314);
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$agg$tmp2$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp2$byval_copy);
 $IsArray = ((($this)) + 29|0);
 $1 = HEAP8[$IsArray>>0]|0;
 $tobool4 = ($1<<24>>24)==(0);
 if (!($tobool4)) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6,25318);
  ;HEAP32[$agg$tmp6$byval_copy>>2]=HEAP32[$agg$tmp6>>2]|0;HEAP32[$agg$tmp6$byval_copy+4>>2]=HEAP32[$agg$tmp6+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp6$byval_copy);
 }
 __ZN12_GLOBAL__N_112OutputStreampLEc($S,32);
 $ExprList = ((($this)) + 8|0);
 $call10 = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray5emptyEv($ExprList)|0);
 if (!($call10)) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp12,23966);
  ;HEAP32[$agg$tmp12$byval_copy>>2]=HEAP32[$agg$tmp12>>2]|0;HEAP32[$agg$tmp12$byval_copy+4>>2]=HEAP32[$agg$tmp12+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp12$byval_copy);
  __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($ExprList,$S);
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp15,23962);
  ;HEAP32[$agg$tmp15$byval_copy>>2]=HEAP32[$agg$tmp15>>2]|0;HEAP32[$agg$tmp15$byval_copy+4>>2]=HEAP32[$agg$tmp15+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp15$byval_copy);
 }
 $Type = ((($this)) + 16|0);
 $2 = HEAP32[$Type>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($2,$S);
 $InitList = ((($this)) + 20|0);
 $call18 = (__ZNK12_GLOBAL__N_116itanium_demangle9NodeArray5emptyEv($InitList)|0);
 if (!($call18)) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp20,23966);
  ;HEAP32[$agg$tmp20$byval_copy>>2]=HEAP32[$agg$tmp20>>2]|0;HEAP32[$agg$tmp20$byval_copy+4>>2]=HEAP32[$agg$tmp20+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp20$byval_copy);
  __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($InitList,$S);
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp23,23962);
  ;HEAP32[$agg$tmp23$byval_copy>>2]=HEAP32[$agg$tmp23>>2]|0;HEAP32[$agg$tmp23$byval_copy+4>>2]=HEAP32[$agg$tmp23+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp23$byval_copy);
 }
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle7NewExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray5emptyEv($this) {
 $this = $this|0;
 var $0 = 0, $NumElements = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $NumElements = ((($this)) + 4|0);
 $0 = HEAP32[$NumElements>>2]|0;
 $cmp = ($0|0)==(0);
 return ($cmp|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle7NewExprEJRNS2_9NodeArrayERPNS2_4NodeES5_RbS9_EEEPT_DpOT0_($this,$args,$args1,$args3,$args5,$args7) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 $args5 = $args5|0;
 $args7 = $args7|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $agg$tmp12 = 0, $call = 0, $tmpcast$byval_copy = 0, $tmpcast1$byval_copy = 0, $tobool = 0, $tobool16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmpcast1$byval_copy = sp + 24|0;
 $tmpcast$byval_copy = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp12 = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,32)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $10 = HEAP32[$args1>>2]|0;
 $11 = $args3;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + 4)|0;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = $agg$tmp12;
 $18 = $17;
 HEAP32[$18>>2] = $13;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = $16;
 $21 = HEAP8[$args5>>0]|0;
 $tobool = ($21<<24>>24)!=(0);
 $22 = HEAP8[$args7>>0]|0;
 $tobool16 = ($22<<24>>24)!=(0);
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 ;HEAP32[$tmpcast1$byval_copy>>2]=HEAP32[$agg$tmp12>>2]|0;HEAP32[$tmpcast1$byval_copy+4>>2]=HEAP32[$agg$tmp12+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle7NewExprC2ENS0_9NodeArrayEPNS0_4NodeES2_bb($call,$tmpcast$byval_copy,$10,$tmpcast1$byval_copy,$tobool,$tobool16);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11PostfixExprEJRPNS2_4NodeERA3_KcEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args1);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle11PostfixExprC2EPKNS0_4NodeENS_10StringViewE($call,$0,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle11PostfixExprC2EPKNS0_4NodeENS_10StringViewE($this,$Child_,$Operator_) {
 $this = $this|0;
 $Child_ = $Child_|0;
 $Operator_ = $Operator_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Child = 0, $Operator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,44,1,1,1);
 HEAP32[$this>>2] = (5224);
 $Child = ((($this)) + 8|0);
 HEAP32[$Child>>2] = $Child_;
 $Operator = ((($this)) + 12|0);
 $0 = $Operator_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Operator;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle11PostfixExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Child = 0, $Operator = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $agg$tmp4 = 0, $tmpcast$byval_copy = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $tmpcast$byval_copy = sp + 40|0;
 $agg$tmp2$byval_copy = sp + 32|0;
 $agg$tmp$byval_copy = sp + 24|0;
 $agg$tmp = sp + 16|0;
 $agg$tmp2 = sp + 8|0;
 $agg$tmp4 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,23966);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Child = ((($this)) + 8|0);
 $0 = HEAP32[$Child>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2,23962);
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$agg$tmp2$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp2$byval_copy);
 $Operator = ((($this)) + 12|0);
 $1 = $Operator;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp4;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp4>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp4+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle11PostfixExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12InitListExprEJDnNS2_9NodeArrayEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = $args1;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle12InitListExprC2EPKNS0_4NodeENS0_9NodeArrayE($call,0,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseSourceNameEPNS5_9NameStateE($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $Length = 0, $Name = 0, $add$ptr = 0, $add$ptr8 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call11 = 0, $call13 = 0, $call2 = 0, $call9 = 0, $retval$0 = 0, $retval$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp$byval_copy = sp + 24|0;
 $Length = sp + 16|0;
 $Name = sp + 8|0;
 $agg$tmp = sp;
 HEAP32[$Length>>2] = 0;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parsePositiveIntegerEPm($this,$Length)|0);
 if ($call) {
  $retval$1 = 0;
 } else {
  $call2 = (__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($this)|0);
  $0 = HEAP32[$Length>>2]|0;
  $1 = (($0) + -1)|0;
  $2 = ($1>>>0)<($call2>>>0);
  if ($2) {
   $3 = HEAP32[$this>>2]|0;
   $add$ptr = (($3) + ($0)|0);
   __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($Name,$3,$add$ptr);
   $4 = HEAP32[$this>>2]|0;
   $add$ptr8 = (($4) + ($0)|0);
   HEAP32[$this>>2] = $add$ptr8;
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,25521);
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
   $call9 = (__ZNK12_GLOBAL__N_110StringView10startsWithES0_($Name,$agg$tmp$byval_copy)|0);
   if ($call9) {
    $call11 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA22_KcEEEPNS0_4NodeEDpOT0_($this)|0);
    $retval$0 = $call11;
   } else {
    $call13 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this,$Name)|0);
    $retval$0 = $call13;
   }
   $retval$1 = $retval$0;
  } else {
   $retval$1 = 0;
  }
 }
 STACKTOP = sp;return ($retval$1|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10BracedExprEJRPNS0_4NodeESA_bEEES9_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $ASTAllocator = 0, $call8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call8 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10BracedExprEJRPNS2_4NodeES6_bEEEPT_DpOT0_($ASTAllocator,$args,$args1,$args3)|0);
 return ($call8|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15BracedRangeExprEJRPNS0_4NodeESA_SA_EEES9_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $ASTAllocator = 0, $call8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call8 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15BracedRangeExprEJRPNS2_4NodeES6_S6_EEEPT_DpOT0_($ASTAllocator,$args,$args1,$args3)|0);
 return ($call8|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15BracedRangeExprEJRPNS2_4NodeES6_S6_EEEPT_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = HEAP32[$args1>>2]|0;
 $2 = HEAP32[$args3>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle15BracedRangeExprC2EPKNS0_4NodeES4_S4_($call,$0,$1,$2);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle15BracedRangeExprC2EPKNS0_4NodeES4_S4_($this,$First_,$Last_,$Init_) {
 $this = $this|0;
 $First_ = $First_|0;
 $Last_ = $Last_|0;
 $Init_ = $Init_|0;
 var $First = 0, $Init = 0, $Last = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,66,1,1,1);
 HEAP32[$this>>2] = (5268);
 $First = ((($this)) + 8|0);
 HEAP32[$First>>2] = $First_;
 $Last = ((($this)) + 12|0);
 HEAP32[$Last>>2] = $Last_;
 $Init = ((($this)) + 16|0);
 HEAP32[$Init>>2] = $Init_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle15BracedRangeExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $First = 0, $Init = 0, $Last = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp9 = 0, $agg$tmp9$byval_copy = 0, $call4 = 0, $call4$off = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp9$byval_copy = sp + 24|0;
 $agg$tmp$byval_copy = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp9 = sp;
 __ZN12_GLOBAL__N_112OutputStreampLEc($S,91);
 $First = ((($this)) + 8|0);
 $0 = HEAP32[$First>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,25412);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Last = ((($this)) + 12|0);
 $1 = HEAP32[$Last>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($1,$S);
 __ZN12_GLOBAL__N_112OutputStreampLEc($S,93);
 $Init = ((($this)) + 16|0);
 $2 = HEAP32[$Init>>2]|0;
 $call4 = (__ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($2)|0);
 $call4$off = (($call4) + -65)<<24>>24;
 $switch = ($call4$off&255)<(2);
 if ($switch) {
  $3 = $2;
 } else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp9,25418);
  ;HEAP32[$agg$tmp9$byval_copy>>2]=HEAP32[$agg$tmp9>>2]|0;HEAP32[$agg$tmp9$byval_copy+4>>2]=HEAP32[$agg$tmp9+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp9$byval_copy);
  $$pre = HEAP32[$Init>>2]|0;
  $3 = $$pre;
 }
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($3,$S);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle15BracedRangeExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10BracedExprEJRPNS2_4NodeES6_bEEEPT_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = HEAP32[$args1>>2]|0;
 $2 = HEAP8[$args3>>0]|0;
 $tobool = ($2<<24>>24)!=(0);
 __ZN12_GLOBAL__N_116itanium_demangle10BracedExprC2EPKNS0_4NodeES4_b($call,$0,$1,$tobool);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle10BracedExprC2EPKNS0_4NodeES4_b($this,$Elem_,$Init_,$IsArray_) {
 $this = $this|0;
 $Elem_ = $Elem_|0;
 $Init_ = $Init_|0;
 $IsArray_ = $IsArray_|0;
 var $Elem = 0, $Init = 0, $IsArray = 0, $frombool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $frombool = $IsArray_&1;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,65,1,1,1);
 HEAP32[$this>>2] = (5312);
 $Elem = ((($this)) + 8|0);
 HEAP32[$Elem>>2] = $Elem_;
 $Init = ((($this)) + 12|0);
 HEAP32[$Init>>2] = $Init_;
 $IsArray = ((($this)) + 16|0);
 HEAP8[$IsArray>>0] = $frombool;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle10BracedExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $Elem = 0, $Elem4 = 0, $Init = 0, $IsArray = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call5 = 0, $call5$off = 0, $switch = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $IsArray = ((($this)) + 16|0);
 $0 = HEAP8[$IsArray>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if ($tobool) {
  __ZN12_GLOBAL__N_112OutputStreampLEc($S,46);
  $Elem4 = ((($this)) + 8|0);
  $2 = HEAP32[$Elem4>>2]|0;
  __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($2,$S);
 } else {
  __ZN12_GLOBAL__N_112OutputStreampLEc($S,91);
  $Elem = ((($this)) + 8|0);
  $1 = HEAP32[$Elem>>2]|0;
  __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($1,$S);
  __ZN12_GLOBAL__N_112OutputStreampLEc($S,93);
 }
 $Init = ((($this)) + 12|0);
 $3 = HEAP32[$Init>>2]|0;
 $call5 = (__ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($3)|0);
 $call5$off = (($call5) + -65)<<24>>24;
 $switch = ($call5$off&255)<(2);
 if ($switch) {
  $4 = $3;
 } else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,25418);
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
  $$pre = HEAP32[$Init>>2]|0;
  $4 = $$pre;
 }
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($4,$S);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle10BracedExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parsePositiveIntegerEPm($this,$Out) {
 $this = $this|0;
 $Out = $Out|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add = 0, $call = 0, $call$off = 0, $call11 = 0, $call5 = 0, $call5$off = 0, $conv12 = 0, $mul = 0, $retval$0 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$Out>>2] = 0;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
 $call$off = (($call) + -48)<<24>>24;
 $0 = ($call$off&255)>(9);
 L1: do {
  if ($0) {
   $retval$0 = 1;
  } else {
   $2 = 0;
   while(1) {
    $call5 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
    $call5$off = (($call5) + -48)<<24>>24;
    $1 = ($call5$off&255)<(10);
    if (!($1)) {
     $retval$0 = 0;
     break L1;
    }
    $mul = ($2*10)|0;
    HEAP32[$Out>>2] = $mul;
    $call11 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7consumeEv($this)|0);
    $conv12 = $call11 << 24 >> 24;
    $sub = (($conv12) + -48)|0;
    $3 = HEAP32[$Out>>2]|0;
    $add = (($sub) + ($3))|0;
    HEAP32[$Out>>2] = $add;
    $2 = $add;
   }
  }
 } while(0);
 return ($retval$0|0);
}
function __ZNK12_GLOBAL__N_110StringView10startsWithES0_($this,$Str) {
 $this = $this|0;
 $Str = $Str|0;
 var $0 = 0, $1 = 0, $__first1$addr$0$i$i = 0, $__first2$addr$0$i$i = 0, $call = 0, $call2 = 0, $call3 = 0, $call4 = 0, $call5 = 0, $cmp = 0, $cmp$i$i = 0, $cmp$i$i$i = 0, $incdec$ptr$i$i = 0, $incdec$ptr1$i$i = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNK12_GLOBAL__N_110StringView4sizeEv($Str)|0);
 $call2 = (__ZNK12_GLOBAL__N_110StringView4sizeEv($this)|0);
 $cmp = ($call>>>0)>($call2>>>0);
 L1: do {
  if ($cmp) {
   $retval$0 = 0;
  } else {
   $call3 = (__ZNK12_GLOBAL__N_110StringView5beginEv($Str)|0);
   $call4 = (__ZNK12_GLOBAL__N_110StringView3endEv($Str)|0);
   $call5 = (__ZNK12_GLOBAL__N_110StringView5beginEv($this)|0);
   $__first1$addr$0$i$i = $call3;$__first2$addr$0$i$i = $call5;
   while(1) {
    $cmp$i$i = ($__first1$addr$0$i$i|0)==($call4|0);
    if ($cmp$i$i) {
     $retval$0 = 1;
     break L1;
    }
    $0 = HEAP8[$__first1$addr$0$i$i>>0]|0;
    $1 = HEAP8[$__first2$addr$0$i$i>>0]|0;
    $cmp$i$i$i = ($0<<24>>24)==($1<<24>>24);
    if (!($cmp$i$i$i)) {
     $retval$0 = 0;
     break L1;
    }
    $incdec$ptr$i$i = ((($__first1$addr$0$i$i)) + 1|0);
    $incdec$ptr1$i$i = ((($__first2$addr$0$i$i)) + 1|0);
    $__first1$addr$0$i$i = $incdec$ptr$i$i;$__first2$addr$0$i$i = $incdec$ptr1$i$i;
   }
  }
 } while(0);
 return ($retval$0|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA22_KcEEEPNS0_4NodeEDpOT0_($this) {
 $this = $this|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA22_KcEEEPT_DpOT0_($ASTAllocator,25532)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA22_KcEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($this,$Name_) {
 $this = $this|0;
 $Name_ = $Name_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Name = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,7,1,1,1);
 HEAP32[$this>>2] = (5356);
 $Name = ((($this)) + 8|0);
 $0 = $Name_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Name;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle8NameType9printLeftERNS_12OutputStreamE($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Name = 0, $agg$tmp = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $Name = ((($this)) + 8|0);
 $0 = $Name;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$tmpcast$byval_copy);
 STACKTOP = sp;return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle8NameType11getBaseNameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Name = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Name = ((($this)) + 8|0);
 $0 = $Name;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$result;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle8NameTypeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7consumeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $Last = 0, $cmp = 0, $cond = 0, $incdec$ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $Last = ((($this)) + 4|0);
 $1 = HEAP32[$Last>>2]|0;
 $cmp = ($0|0)==($1|0);
 if ($cmp) {
  $cond = 0;
 } else {
  $incdec$ptr = ((($0)) + 1|0);
  HEAP32[$this>>2] = $incdec$ptr;
  $2 = HEAP8[$0>>0]|0;
  $cond = $2;
 }
 return ($cond|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle18ArraySubscriptExprEJRPNS2_4NodeES6_EEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = HEAP32[$args1>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle18ArraySubscriptExprC2EPKNS0_4NodeES4_($call,$0,$1);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle18ArraySubscriptExprC2EPKNS0_4NodeES4_($this,$Op1_,$Op2_) {
 $this = $this|0;
 $Op1_ = $Op1_|0;
 $Op2_ = $Op2_|0;
 var $Op1 = 0, $Op2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,43,1,1,1);
 HEAP32[$this>>2] = (5400);
 $Op1 = ((($this)) + 8|0);
 HEAP32[$Op1>>2] = $Op1_;
 $Op2 = ((($this)) + 12|0);
 HEAP32[$Op2>>2] = $Op2_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle18ArraySubscriptExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $Op1 = 0, $Op2 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp4$byval_copy = sp + 40|0;
 $agg$tmp2$byval_copy = sp + 32|0;
 $agg$tmp$byval_copy = sp + 24|0;
 $agg$tmp = sp + 16|0;
 $agg$tmp2 = sp + 8|0;
 $agg$tmp4 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,23966);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Op1 = ((($this)) + 8|0);
 $0 = HEAP32[$Op1>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2,25598);
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$agg$tmp2$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp2$byval_copy);
 $Op2 = ((($this)) + 12|0);
 $1 = HEAP32[$Op2>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($1,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4,23570);
 ;HEAP32[$agg$tmp4$byval_copy>>2]=HEAP32[$agg$tmp4>>2]|0;HEAP32[$agg$tmp4$byval_copy+4>>2]=HEAP32[$agg$tmp4+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp4$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle18ArraySubscriptExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10MemberExprEJRPNS2_4NodeERA2_KcS6_EEEPT_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,24)|0);
 $0 = HEAP32[$args>>2]|0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args1);
 $1 = HEAP32[$args3>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle10MemberExprC2EPKNS0_4NodeENS_10StringViewES4_($call,$0,$agg$tmp$byval_copy,$1);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle10MemberExprC2EPKNS0_4NodeENS_10StringViewES4_($this,$LHS_,$Kind_,$RHS_) {
 $this = $this|0;
 $LHS_ = $LHS_|0;
 $Kind_ = $Kind_|0;
 $RHS_ = $RHS_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Kind = 0, $LHS = 0, $RHS = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,46,1,1,1);
 HEAP32[$this>>2] = (5444);
 $LHS = ((($this)) + 8|0);
 HEAP32[$LHS>>2] = $LHS_;
 $Kind = ((($this)) + 12|0);
 $0 = $Kind_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Kind;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $RHS = ((($this)) + 20|0);
 HEAP32[$RHS>>2] = $RHS_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle10MemberExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Kind = 0, $LHS = 0, $RHS = 0, $agg$tmp = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $LHS = ((($this)) + 8|0);
 $0 = HEAP32[$LHS>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 $Kind = ((($this)) + 12|0);
 $1 = $Kind;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast$byval_copy);
 $RHS = ((($this)) + 20|0);
 $11 = HEAP32[$RHS>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($11,$S);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle10MemberExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10MemberExprEJRPNS2_4NodeERA3_KcS6_EEEPT_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,24)|0);
 $0 = HEAP32[$args>>2]|0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args1);
 $1 = HEAP32[$args3>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle10MemberExprC2EPKNS0_4NodeENS_10StringViewES4_($call,$0,$agg$tmp$byval_copy,$1);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedTypeEv($this) {
 $this = $this|0;
 var $DT = 0, $Subs = 0, $Subs16 = 0, $TP = 0, $call = 0, $call11 = 0, $call12 = 0, $call19 = 0, $call2 = 0, $call20 = 0, $call3 = 0, $cmp13 = 0, $cmp4 = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $TP = sp + 4|0;
 $DT = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
 switch ($call<<24>>24) {
 case 84:  {
  $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
  $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseTemplateParamEv($call2)|0);
  HEAP32[$TP>>2] = $call3;
  $cmp4 = ($call3|0)==(0|0);
  if ($cmp4) {
   $retval$0 = 0;
  } else {
   $Subs = ((($this)) + 148|0);
   __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Subs,$TP);
   $retval$0 = $call3;
  }
  $retval$2 = $retval$0;
  break;
 }
 case 68:  {
  $call11 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
  $call12 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseDecltypeEv($call11)|0);
  HEAP32[$DT>>2] = $call12;
  $cmp13 = ($call12|0)==(0|0);
  if ($cmp13) {
   $retval$1 = 0;
  } else {
   $Subs16 = ((($this)) + 148|0);
   __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Subs16,$DT);
   $retval$1 = $call12;
  }
  $retval$2 = $retval$1;
  break;
 }
 default: {
  $call19 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
  $call20 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseSubstitutionEv($call19)|0);
  $retval$2 = $call20;
 }
 }
 STACKTOP = sp;return ($retval$2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseSimpleIdEv($this) {
 $this = $this|0;
 var $SN = 0, $TA = 0, $call = 0, $call11 = 0, $call2 = 0, $call3 = 0, $call7 = 0, $cmp = 0, $cmp4 = 0, $cmp8 = 0, $retval$0 = 0, $retval$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $SN = sp + 4|0;
 $TA = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
 $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseSourceNameEPNS5_9NameStateE($call)|0);
 HEAP32[$SN>>2] = $call2;
 $cmp = ($call2|0)==(0|0);
 if ($cmp) {
  $retval$1 = 0;
 } else {
  $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
  $cmp4 = ($call3<<24>>24)==(73);
  if ($cmp4) {
   $call7 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb($call,0)|0);
   HEAP32[$TA>>2] = $call7;
   $cmp8 = ($call7|0)==(0|0);
   if ($cmp8) {
    $retval$0 = 0;
   } else {
    $call11 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$SN,$TA)|0);
    $retval$0 = $call11;
   }
   $retval$1 = $retval$0;
  } else {
   $retval$1 = $call2;
  }
 }
 STACKTOP = sp;return ($retval$1|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13QualifiedNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13QualifiedNameEJRPNS2_4NodeES6_EEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E23parseBaseUnresolvedNameEv($this) {
 $this = $this|0;
 var $Oper = 0, $TA = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp10 = 0, $agg$tmp10$byval_copy = 0, $call = 0, $call12 = 0, $call13 = 0, $call16 = 0, $call21 = 0, $call25 = 0, $call3 = 0, $call4 = 0, $call5 = 0, $call7 = 0, $call8 = 0, $cmp = 0, $cmp18 = 0, $cmp22 = 0;
 var $conv = 0, $isdigit = 0, $isdigittmp = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp10$byval_copy = sp + 32|0;
 $agg$tmp$byval_copy = sp + 24|0;
 $agg$tmp = sp + 16|0;
 $agg$tmp10 = sp + 8|0;
 $Oper = sp + 4|0;
 $TA = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
 $conv = $call << 24 >> 24;
 $isdigittmp = (($conv) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 do {
  if ($isdigit) {
   $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call4 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseSimpleIdEv($call3)|0);
   $retval$2 = $call4;
  } else {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,25771);
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
   $call5 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp$byval_copy)|0);
   if ($call5) {
    $call7 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call8 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseDestructorNameEv($call7)|0);
    $retval$2 = $call8;
    break;
   }
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp10,25774);
   ;HEAP32[$agg$tmp10$byval_copy>>2]=HEAP32[$agg$tmp10>>2]|0;HEAP32[$agg$tmp10$byval_copy+4>>2]=HEAP32[$agg$tmp10+4>>2]|0;
   (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp10$byval_copy)|0);
   $call12 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call13 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseOperatorNameEPNS5_9NameStateE($call12,0)|0);
   HEAP32[$Oper>>2] = $call13;
   $cmp = ($call13|0)==(0|0);
   if ($cmp) {
    $retval$1 = 0;
   } else {
    $call16 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
    $cmp18 = ($call16<<24>>24)==(73);
    if ($cmp18) {
     $call21 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb($call12,0)|0);
     HEAP32[$TA>>2] = $call21;
     $cmp22 = ($call21|0)==(0|0);
     if ($cmp22) {
      $retval$0 = 0;
     } else {
      $call25 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$Oper,$TA)|0);
      $retval$0 = $call25;
     }
     $retval$1 = $retval$0;
    } else {
     $retval$1 = $call13;
    }
   }
   $retval$2 = $retval$1;
  }
 } while(0);
 STACKTOP = sp;return ($retval$2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19GlobalQualifiedNameEJRPNS0_4NodeEEEES9_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19GlobalQualifiedNameEJRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19GlobalQualifiedNameEJRPNS2_4NodeEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,12)|0);
 $0 = HEAP32[$args>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle19GlobalQualifiedNameC2EPNS0_4NodeE($call,$0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle19GlobalQualifiedNameC2EPNS0_4NodeE($this,$Child_) {
 $this = $this|0;
 $Child_ = $Child_|0;
 var $Child = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,33,1,1,1);
 HEAP32[$this>>2] = (5488);
 $Child = ((($this)) + 8|0);
 HEAP32[$Child>>2] = $Child_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle19GlobalQualifiedName9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $Child = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,25712);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Child = ((($this)) + 8|0);
 $0 = HEAP32[$Child>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 STACKTOP = sp;return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle19GlobalQualifiedName11getBaseNameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $Child = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Child = ((($this)) + 8|0);
 $0 = HEAP32[$Child>>2]|0;
 $vtable = HEAP32[$0>>2]|0;
 $vfn = ((($vtable)) + 24|0);
 $1 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vii[$1 & 255]($agg$result,$0);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle19GlobalQualifiedNameD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseDestructorNameEv($this) {
 $this = $this|0;
 var $Result = 0, $call = 0, $call3 = 0, $call4 = 0, $call6 = 0, $call9 = 0, $cmp = 0, $conv = 0, $isdigit = 0, $isdigittmp = 0, $retval$0 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $Result = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
 $conv = $call << 24 >> 24;
 $isdigittmp = (($conv) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
 if ($isdigit) {
  $call4 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseSimpleIdEv($call3)|0);
  $storemerge = $call4;
 } else {
  $call6 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E19parseUnresolvedTypeEv($call3)|0);
  $storemerge = $call6;
 }
 HEAP32[$Result>>2] = $storemerge;
 $cmp = ($storemerge|0)==(0|0);
 if ($cmp) {
  $retval$0 = 0;
 } else {
  $call9 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8DtorNameEJRPNS0_4NodeEEEES9_DpOT0_($this,$Result)|0);
  $retval$0 = $call9;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseOperatorNameEPNS5_9NameStateE($this,$State) {
 $this = $this|0;
 $State = $State|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $PermitForwardTemplateReferences = 0, $SN = 0, $SN278 = 0, $SavePermit = 0, $SaveTemplate = 0, $TryToParseTemplateArgs = 0, $Ty = 0, $add$ptr = 0;
 var $add$ptr107 = 0, $add$ptr115 = 0, $add$ptr119 = 0, $add$ptr12 = 0, $add$ptr129 = 0, $add$ptr133 = 0, $add$ptr137 = 0, $add$ptr145 = 0, $add$ptr149 = 0, $add$ptr153 = 0, $add$ptr157 = 0, $add$ptr16 = 0, $add$ptr161 = 0, $add$ptr169 = 0, $add$ptr173 = 0, $add$ptr177 = 0, $add$ptr181 = 0, $add$ptr185 = 0, $add$ptr193 = 0, $add$ptr197 = 0;
 var $add$ptr201 = 0, $add$ptr209 = 0, $add$ptr213 = 0, $add$ptr217 = 0, $add$ptr221 = 0, $add$ptr225 = 0, $add$ptr229 = 0, $add$ptr23 = 0, $add$ptr238 = 0, $add$ptr246 = 0, $add$ptr250 = 0, $add$ptr254 = 0, $add$ptr258 = 0, $add$ptr267 = 0, $add$ptr27 = 0, $add$ptr277 = 0, $add$ptr31 = 0, $add$ptr35 = 0, $add$ptr54 = 0, $add$ptr58 = 0;
 var $add$ptr62 = 0, $add$ptr66 = 0, $add$ptr70 = 0, $add$ptr78 = 0, $add$ptr8 = 0, $add$ptr82 = 0, $add$ptr86 = 0, $add$ptr94 = 0, $add$ptr98 = 0, $call = 0, $call102 = 0, $call108 = 0, $call111 = 0, $call116 = 0, $call120 = 0, $call121 = 0, $call125 = 0, $call13 = 0, $call130 = 0, $call134 = 0;
 var $call138 = 0, $call141 = 0, $call146 = 0, $call150 = 0, $call154 = 0, $call158 = 0, $call162 = 0, $call165 = 0, $call17 = 0, $call170 = 0, $call174 = 0, $call178 = 0, $call182 = 0, $call186 = 0, $call189 = 0, $call19 = 0, $call194 = 0, $call198 = 0, $call2 = 0, $call202 = 0;
 var $call205 = 0, $call210 = 0, $call214 = 0, $call218 = 0, $call222 = 0, $call226 = 0, $call230 = 0, $call233 = 0, $call239 = 0, $call24 = 0, $call242 = 0, $call247 = 0, $call251 = 0, $call255 = 0, $call259 = 0, $call262 = 0, $call268 = 0, $call271 = 0, $call279 = 0, $call28 = 0;
 var $call280 = 0, $call284 = 0, $call32 = 0, $call37 = 0, $call38 = 0, $call43 = 0, $call5 = 0, $call50 = 0, $call55 = 0, $call59 = 0, $call63 = 0, $call67 = 0, $call71 = 0, $call74 = 0, $call79 = 0, $call83 = 0, $call87 = 0, $call9 = 0, $call90 = 0, $call95 = 0;
 var $call99 = 0, $cmp = 0, $cmp104 = 0, $cmp122 = 0, $cmp235 = 0, $cmp264 = 0, $cmp281 = 0, $cmp39 = 0, $conv = 0, $conv112 = 0, $conv142 = 0, $conv166 = 0, $conv190 = 0, $conv20 = 0, $conv206 = 0, $conv243 = 0, $conv272 = 0, $conv3 = 0, $conv51 = 0, $conv75 = 0;
 var $conv91 = 0, $isdigit = 0, $isdigittmp = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, $retval$3 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $SaveTemplate = sp + 24|0;
 $SavePermit = sp + 16|0;
 $Ty = sp + 8|0;
 $SN = sp + 4|0;
 $SN278 = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
 $conv = $call << 24 >> 24;
 L1: do {
  switch ($conv|0) {
  case 97:  {
   $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $conv3 = $call2 << 24 >> 24;
   switch ($conv3|0) {
   case 97:  {
    $0 = HEAP32[$this>>2]|0;
    $add$ptr = ((($0)) + 2|0);
    HEAP32[$this>>2] = $add$ptr;
    $call5 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,25777)|0);
    $retval$3 = $call5;
    break L1;
    break;
   }
   case 110: case 100:  {
    $1 = HEAP32[$this>>2]|0;
    $add$ptr8 = ((($1)) + 2|0);
    HEAP32[$this>>2] = $add$ptr8;
    $call9 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,25788)|0);
    $retval$3 = $call9;
    break L1;
    break;
   }
   case 78:  {
    $2 = HEAP32[$this>>2]|0;
    $add$ptr12 = ((($2)) + 2|0);
    HEAP32[$this>>2] = $add$ptr12;
    $call13 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,25798)|0);
    $retval$3 = $call13;
    break L1;
    break;
   }
   case 83:  {
    $3 = HEAP32[$this>>2]|0;
    $add$ptr16 = ((($3)) + 2|0);
    HEAP32[$this>>2] = $add$ptr16;
    $call17 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,25809)|0);
    $retval$3 = $call17;
    break L1;
    break;
   }
   default: {
    $retval$3 = 0;
    break L1;
   }
   }
   break;
  }
  case 99:  {
   $call19 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $conv20 = $call19 << 24 >> 24;
   switch ($conv20|0) {
   case 108:  {
    $4 = HEAP32[$this>>2]|0;
    $add$ptr23 = ((($4)) + 2|0);
    HEAP32[$this>>2] = $add$ptr23;
    $call24 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,25819)|0);
    $retval$3 = $call24;
    break L1;
    break;
   }
   case 109:  {
    $5 = HEAP32[$this>>2]|0;
    $add$ptr27 = ((($5)) + 2|0);
    HEAP32[$this>>2] = $add$ptr27;
    $call28 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,25830)|0);
    $retval$3 = $call28;
    break L1;
    break;
   }
   case 111:  {
    $6 = HEAP32[$this>>2]|0;
    $add$ptr31 = ((($6)) + 2|0);
    HEAP32[$this>>2] = $add$ptr31;
    $call32 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,25840)|0);
    $retval$3 = $call32;
    break L1;
    break;
   }
   case 118:  {
    $7 = HEAP32[$this>>2]|0;
    $add$ptr35 = ((($7)) + 2|0);
    HEAP32[$this>>2] = $add$ptr35;
    $TryToParseTemplateArgs = ((($this)) + 360|0);
    __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SaveTemplate,$TryToParseTemplateArgs,0);
    $PermitForwardTemplateReferences = ((($this)) + 361|0);
    $8 = HEAP8[$PermitForwardTemplateReferences>>0]|0;
    $tobool = ($8<<24>>24)!=(0);
    $cmp = ($State|0)!=(0|0);
    $9 = $cmp | $tobool;
    __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePermit,$PermitForwardTemplateReferences,$9);
    $call37 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call38 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call37)|0);
    HEAP32[$Ty>>2] = $call38;
    $cmp39 = ($call38|0)==(0|0);
    if ($cmp39) {
     $retval$0 = 0;
    } else {
     if ($cmp) {
      HEAP8[$State>>0] = 1;
     }
     $call43 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ConversionOperatorTypeEJRPNS0_4NodeEEEES9_DpOT0_($this,$Ty)|0);
     $retval$0 = $call43;
    }
    __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePermit);
    __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SaveTemplate);
    $retval$3 = $retval$0;
    break L1;
    break;
   }
   default: {
    $retval$3 = 0;
    break L1;
   }
   }
   break;
  }
  case 100:  {
   $call50 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $conv51 = $call50 << 24 >> 24;
   switch ($conv51|0) {
   case 97:  {
    $10 = HEAP32[$this>>2]|0;
    $add$ptr54 = ((($10)) + 2|0);
    HEAP32[$this>>2] = $add$ptr54;
    $call55 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA18_KcEEEPNS0_4NodeEDpOT0_($this,25850)|0);
    $retval$3 = $call55;
    break L1;
    break;
   }
   case 101:  {
    $11 = HEAP32[$this>>2]|0;
    $add$ptr58 = ((($11)) + 2|0);
    HEAP32[$this>>2] = $add$ptr58;
    $call59 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,25868)|0);
    $retval$3 = $call59;
    break L1;
    break;
   }
   case 108:  {
    $12 = HEAP32[$this>>2]|0;
    $add$ptr62 = ((($12)) + 2|0);
    HEAP32[$this>>2] = $add$ptr62;
    $call63 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA16_KcEEEPNS0_4NodeEDpOT0_($this)|0);
    $retval$3 = $call63;
    break L1;
    break;
   }
   case 118:  {
    $13 = HEAP32[$this>>2]|0;
    $add$ptr66 = ((($13)) + 2|0);
    HEAP32[$this>>2] = $add$ptr66;
    $call67 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,25878)|0);
    $retval$3 = $call67;
    break L1;
    break;
   }
   case 86:  {
    $14 = HEAP32[$this>>2]|0;
    $add$ptr70 = ((($14)) + 2|0);
    HEAP32[$this>>2] = $add$ptr70;
    $call71 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,25888)|0);
    $retval$3 = $call71;
    break L1;
    break;
   }
   default: {
    $retval$3 = 0;
    break L1;
   }
   }
   break;
  }
  case 101:  {
   $call74 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $conv75 = $call74 << 24 >> 24;
   switch ($conv75|0) {
   case 111:  {
    $15 = HEAP32[$this>>2]|0;
    $add$ptr78 = ((($15)) + 2|0);
    HEAP32[$this>>2] = $add$ptr78;
    $call79 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,25899)|0);
    $retval$3 = $call79;
    break L1;
    break;
   }
   case 79:  {
    $16 = HEAP32[$this>>2]|0;
    $add$ptr82 = ((($16)) + 2|0);
    HEAP32[$this>>2] = $add$ptr82;
    $call83 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,25909)|0);
    $retval$3 = $call83;
    break L1;
    break;
   }
   case 113:  {
    $17 = HEAP32[$this>>2]|0;
    $add$ptr86 = ((($17)) + 2|0);
    HEAP32[$this>>2] = $add$ptr86;
    $call87 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,25920)|0);
    $retval$3 = $call87;
    break L1;
    break;
   }
   default: {
    $retval$3 = 0;
    break L1;
   }
   }
   break;
  }
  case 103:  {
   $call90 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $conv91 = $call90 << 24 >> 24;
   switch ($conv91|0) {
   case 101:  {
    $18 = HEAP32[$this>>2]|0;
    $add$ptr94 = ((($18)) + 2|0);
    HEAP32[$this>>2] = $add$ptr94;
    $call95 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,25931)|0);
    $retval$3 = $call95;
    break L1;
    break;
   }
   case 116:  {
    $19 = HEAP32[$this>>2]|0;
    $add$ptr98 = ((($19)) + 2|0);
    HEAP32[$this>>2] = $add$ptr98;
    $call99 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,25942)|0);
    $retval$3 = $call99;
    break L1;
    break;
   }
   default: {
    $retval$3 = 0;
    break L1;
   }
   }
   break;
  }
  case 105:  {
   $call102 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $cmp104 = ($call102<<24>>24)==(120);
   if ($cmp104) {
    $20 = HEAP32[$this>>2]|0;
    $add$ptr107 = ((($20)) + 2|0);
    HEAP32[$this>>2] = $add$ptr107;
    $call108 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,25952)|0);
    $retval$3 = $call108;
   } else {
    $retval$3 = 0;
   }
   break;
  }
  case 108:  {
   $call111 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $conv112 = $call111 << 24 >> 24;
   switch ($conv112|0) {
   case 101:  {
    $21 = HEAP32[$this>>2]|0;
    $add$ptr115 = ((($21)) + 2|0);
    HEAP32[$this>>2] = $add$ptr115;
    $call116 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,25963)|0);
    $retval$3 = $call116;
    break L1;
    break;
   }
   case 105:  {
    $22 = HEAP32[$this>>2]|0;
    $add$ptr119 = ((($22)) + 2|0);
    HEAP32[$this>>2] = $add$ptr119;
    $call120 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call121 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseSourceNameEPNS5_9NameStateE($call120)|0);
    HEAP32[$SN>>2] = $call121;
    $cmp122 = ($call121|0)==(0|0);
    if ($cmp122) {
     $retval$1 = 0;
    } else {
     $call125 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15LiteralOperatorEJRPNS0_4NodeEEEES9_DpOT0_($this,$SN)|0);
     $retval$1 = $call125;
    }
    $retval$3 = $retval$1;
    break L1;
    break;
   }
   case 115:  {
    $23 = HEAP32[$this>>2]|0;
    $add$ptr129 = ((($23)) + 2|0);
    HEAP32[$this>>2] = $add$ptr129;
    $call130 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,25974)|0);
    $retval$3 = $call130;
    break L1;
    break;
   }
   case 83:  {
    $24 = HEAP32[$this>>2]|0;
    $add$ptr133 = ((($24)) + 2|0);
    HEAP32[$this>>2] = $add$ptr133;
    $call134 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA12_KcEEEPNS0_4NodeEDpOT0_($this,25985)|0);
    $retval$3 = $call134;
    break L1;
    break;
   }
   case 116:  {
    $25 = HEAP32[$this>>2]|0;
    $add$ptr137 = ((($25)) + 2|0);
    HEAP32[$this>>2] = $add$ptr137;
    $call138 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,25997)|0);
    $retval$3 = $call138;
    break L1;
    break;
   }
   default: {
    $retval$3 = 0;
    break L1;
   }
   }
   break;
  }
  case 109:  {
   $call141 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $conv142 = $call141 << 24 >> 24;
   switch ($conv142|0) {
   case 105:  {
    $26 = HEAP32[$this>>2]|0;
    $add$ptr145 = ((($26)) + 2|0);
    HEAP32[$this>>2] = $add$ptr145;
    $call146 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,26007)|0);
    $retval$3 = $call146;
    break L1;
    break;
   }
   case 73:  {
    $27 = HEAP32[$this>>2]|0;
    $add$ptr149 = ((($27)) + 2|0);
    HEAP32[$this>>2] = $add$ptr149;
    $call150 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,26017)|0);
    $retval$3 = $call150;
    break L1;
    break;
   }
   case 108:  {
    $28 = HEAP32[$this>>2]|0;
    $add$ptr153 = ((($28)) + 2|0);
    HEAP32[$this>>2] = $add$ptr153;
    $call154 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,25868)|0);
    $retval$3 = $call154;
    break L1;
    break;
   }
   case 76:  {
    $29 = HEAP32[$this>>2]|0;
    $add$ptr157 = ((($29)) + 2|0);
    HEAP32[$this>>2] = $add$ptr157;
    $call158 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,26028)|0);
    $retval$3 = $call158;
    break L1;
    break;
   }
   case 109:  {
    $30 = HEAP32[$this>>2]|0;
    $add$ptr161 = ((($30)) + 2|0);
    HEAP32[$this>>2] = $add$ptr161;
    $call162 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,26039)|0);
    $retval$3 = $call162;
    break L1;
    break;
   }
   default: {
    $retval$3 = 0;
    break L1;
   }
   }
   break;
  }
  case 110:  {
   $call165 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $conv166 = $call165 << 24 >> 24;
   switch ($conv166|0) {
   case 97:  {
    $31 = HEAP32[$this>>2]|0;
    $add$ptr169 = ((($31)) + 2|0);
    HEAP32[$this>>2] = $add$ptr169;
    $call170 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA15_KcEEEPNS0_4NodeEDpOT0_($this,26050)|0);
    $retval$3 = $call170;
    break L1;
    break;
   }
   case 101:  {
    $32 = HEAP32[$this>>2]|0;
    $add$ptr173 = ((($32)) + 2|0);
    HEAP32[$this>>2] = $add$ptr173;
    $call174 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,26065)|0);
    $retval$3 = $call174;
    break L1;
    break;
   }
   case 103:  {
    $33 = HEAP32[$this>>2]|0;
    $add$ptr177 = ((($33)) + 2|0);
    HEAP32[$this>>2] = $add$ptr177;
    $call178 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,26007)|0);
    $retval$3 = $call178;
    break L1;
    break;
   }
   case 116:  {
    $34 = HEAP32[$this>>2]|0;
    $add$ptr181 = ((($34)) + 2|0);
    HEAP32[$this>>2] = $add$ptr181;
    $call182 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,26076)|0);
    $retval$3 = $call182;
    break L1;
    break;
   }
   case 119:  {
    $35 = HEAP32[$this>>2]|0;
    $add$ptr185 = ((($35)) + 2|0);
    HEAP32[$this>>2] = $add$ptr185;
    $call186 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA13_KcEEEPNS0_4NodeEDpOT0_($this,26086)|0);
    $retval$3 = $call186;
    break L1;
    break;
   }
   default: {
    $retval$3 = 0;
    break L1;
   }
   }
   break;
  }
  case 111:  {
   $call189 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $conv190 = $call189 << 24 >> 24;
   switch ($conv190|0) {
   case 111:  {
    $36 = HEAP32[$this>>2]|0;
    $add$ptr193 = ((($36)) + 2|0);
    HEAP32[$this>>2] = $add$ptr193;
    $call194 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,26099)|0);
    $retval$3 = $call194;
    break L1;
    break;
   }
   case 114:  {
    $37 = HEAP32[$this>>2]|0;
    $add$ptr197 = ((($37)) + 2|0);
    HEAP32[$this>>2] = $add$ptr197;
    $call198 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,26110)|0);
    $retval$3 = $call198;
    break L1;
    break;
   }
   case 82:  {
    $38 = HEAP32[$this>>2]|0;
    $add$ptr201 = ((($38)) + 2|0);
    HEAP32[$this>>2] = $add$ptr201;
    $call202 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,26120)|0);
    $retval$3 = $call202;
    break L1;
    break;
   }
   default: {
    $retval$3 = 0;
    break L1;
   }
   }
   break;
  }
  case 112:  {
   $call205 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $conv206 = $call205 << 24 >> 24;
   switch ($conv206|0) {
   case 109:  {
    $39 = HEAP32[$this>>2]|0;
    $add$ptr209 = ((($39)) + 2|0);
    HEAP32[$this>>2] = $add$ptr209;
    $call210 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA12_KcEEEPNS0_4NodeEDpOT0_($this,26131)|0);
    $retval$3 = $call210;
    break L1;
    break;
   }
   case 108:  {
    $40 = HEAP32[$this>>2]|0;
    $add$ptr213 = ((($40)) + 2|0);
    HEAP32[$this>>2] = $add$ptr213;
    $call214 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,26143)|0);
    $retval$3 = $call214;
    break L1;
    break;
   }
   case 76:  {
    $41 = HEAP32[$this>>2]|0;
    $add$ptr217 = ((($41)) + 2|0);
    HEAP32[$this>>2] = $add$ptr217;
    $call218 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,26153)|0);
    $retval$3 = $call218;
    break L1;
    break;
   }
   case 112:  {
    $42 = HEAP32[$this>>2]|0;
    $add$ptr221 = ((($42)) + 2|0);
    HEAP32[$this>>2] = $add$ptr221;
    $call222 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,26164)|0);
    $retval$3 = $call222;
    break L1;
    break;
   }
   case 115:  {
    $43 = HEAP32[$this>>2]|0;
    $add$ptr225 = ((($43)) + 2|0);
    HEAP32[$this>>2] = $add$ptr225;
    $call226 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,26143)|0);
    $retval$3 = $call226;
    break L1;
    break;
   }
   case 116:  {
    $44 = HEAP32[$this>>2]|0;
    $add$ptr229 = ((($44)) + 2|0);
    HEAP32[$this>>2] = $add$ptr229;
    $call230 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,26175)|0);
    $retval$3 = $call230;
    break L1;
    break;
   }
   default: {
    $retval$3 = 0;
    break L1;
   }
   }
   break;
  }
  case 113:  {
   $call233 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $cmp235 = ($call233<<24>>24)==(117);
   if ($cmp235) {
    $45 = HEAP32[$this>>2]|0;
    $add$ptr238 = ((($45)) + 2|0);
    HEAP32[$this>>2] = $add$ptr238;
    $call239 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,26186)|0);
    $retval$3 = $call239;
   } else {
    $retval$3 = 0;
   }
   break;
  }
  case 114:  {
   $call242 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $conv243 = $call242 << 24 >> 24;
   switch ($conv243|0) {
   case 109:  {
    $46 = HEAP32[$this>>2]|0;
    $add$ptr246 = ((($46)) + 2|0);
    HEAP32[$this>>2] = $add$ptr246;
    $call247 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA10_KcEEEPNS0_4NodeEDpOT0_($this,26196)|0);
    $retval$3 = $call247;
    break L1;
    break;
   }
   case 77:  {
    $47 = HEAP32[$this>>2]|0;
    $add$ptr250 = ((($47)) + 2|0);
    HEAP32[$this>>2] = $add$ptr250;
    $call251 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,26206)|0);
    $retval$3 = $call251;
    break L1;
    break;
   }
   case 115:  {
    $48 = HEAP32[$this>>2]|0;
    $add$ptr254 = ((($48)) + 2|0);
    HEAP32[$this>>2] = $add$ptr254;
    $call255 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA11_KcEEEPNS0_4NodeEDpOT0_($this,26217)|0);
    $retval$3 = $call255;
    break L1;
    break;
   }
   case 83:  {
    $49 = HEAP32[$this>>2]|0;
    $add$ptr258 = ((($49)) + 2|0);
    HEAP32[$this>>2] = $add$ptr258;
    $call259 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA12_KcEEEPNS0_4NodeEDpOT0_($this,26228)|0);
    $retval$3 = $call259;
    break L1;
    break;
   }
   default: {
    $retval$3 = 0;
    break L1;
   }
   }
   break;
  }
  case 115:  {
   $call262 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $cmp264 = ($call262<<24>>24)==(115);
   if ($cmp264) {
    $50 = HEAP32[$this>>2]|0;
    $add$ptr267 = ((($50)) + 2|0);
    HEAP32[$this>>2] = $add$ptr267;
    $call268 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA12_KcEEEPNS0_4NodeEDpOT0_($this,26240)|0);
    $retval$3 = $call268;
   } else {
    $retval$3 = 0;
   }
   break;
  }
  case 118:  {
   $call271 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $conv272 = $call271 << 24 >> 24;
   $isdigittmp = (($conv272) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $51 = HEAP32[$this>>2]|0;
    $add$ptr277 = ((($51)) + 2|0);
    HEAP32[$this>>2] = $add$ptr277;
    $call279 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call280 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseSourceNameEPNS5_9NameStateE($call279)|0);
    HEAP32[$SN278>>2] = $call280;
    $cmp281 = ($call280|0)==(0|0);
    if ($cmp281) {
     $retval$2 = 0;
    } else {
     $call284 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ConversionOperatorTypeEJRPNS0_4NodeEEEES9_DpOT0_($this,$SN278)|0);
     $retval$2 = $call284;
    }
    $retval$3 = $retval$2;
   } else {
    $retval$3 = 0;
   }
   break;
  }
  default: {
   $retval$3 = 0;
  }
  }
 } while(0);
 STACKTOP = sp;return ($retval$3|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ConversionOperatorTypeEJRPNS0_4NodeEEEES9_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle22ConversionOperatorTypeEJRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA16_KcEEEPNS0_4NodeEDpOT0_($this) {
 $this = $this|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA16_KcEEEPT_DpOT0_($ASTAllocator,26316)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15LiteralOperatorEJRPNS0_4NodeEEEES9_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15LiteralOperatorEJRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15LiteralOperatorEJRPNS2_4NodeEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,12)|0);
 $0 = HEAP32[$args>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle15LiteralOperatorC2EPKNS0_4NodeE($call,$0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle15LiteralOperatorC2EPKNS0_4NodeE($this,$OpName_) {
 $this = $this|0;
 $OpName_ = $OpName_|0;
 var $OpName = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,19,1,1,1);
 HEAP32[$this>>2] = (5532);
 $OpName = ((($this)) + 8|0);
 HEAP32[$OpName>>2] = $OpName_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle15LiteralOperator9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $OpName = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,26252);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $OpName = ((($this)) + 8|0);
 $0 = HEAP32[$OpName>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle15LiteralOperatorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA16_KcEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle22ConversionOperatorTypeEJRPNS2_4NodeEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,12)|0);
 $0 = HEAP32[$args>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle22ConversionOperatorTypeC2EPKNS0_4NodeE($call,$0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22ConversionOperatorTypeC2EPKNS0_4NodeE($this,$Ty_) {
 $this = $this|0;
 $Ty_ = $Ty_|0;
 var $Ty = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,4,1,1,1);
 HEAP32[$this>>2] = (5576);
 $Ty = ((($this)) + 8|0);
 HEAP32[$Ty>>2] = $Ty_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle22ConversionOperatorType9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $Ty = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,26332);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Ty = ((($this)) + 8|0);
 $0 = HEAP32[$Ty>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22ConversionOperatorTypeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8DtorNameEJRPNS0_4NodeEEEES9_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8DtorNameEJRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8DtorNameEJRPNS2_4NodeEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,12)|0);
 $0 = HEAP32[$args>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8DtorNameC2EPKNS0_4NodeE($call,$0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle8DtorNameC2EPKNS0_4NodeE($this,$Base_) {
 $this = $this|0;
 $Base_ = $Base_|0;
 var $Base = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,38,1,1,1);
 HEAP32[$this>>2] = (5620);
 $Base = ((($this)) + 8|0);
 HEAP32[$Base>>2] = $Base_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle8DtorName9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $Base = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,24699);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Base = ((($this)) + 8|0);
 $0 = HEAP32[$Base>>2]|0;
 $vtable = HEAP32[$0>>2]|0;
 $vfn = ((($vtable)) + 16|0);
 $1 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vii[$1 & 255]($0,$S);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle8DtorNameD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13QualifiedNameEJRPNS2_4NodeES6_EEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = HEAP32[$args1>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle13QualifiedNameC2EPKNS0_4NodeES4_($call,$0,$1);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle13QualifiedNameC2EPKNS0_4NodeES4_($this,$Qualifier_,$Name_) {
 $this = $this|0;
 $Qualifier_ = $Qualifier_|0;
 $Name_ = $Name_|0;
 var $Name = 0, $Qualifier = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,22,1,1,1);
 HEAP32[$this>>2] = (5664);
 $Qualifier = ((($this)) + 8|0);
 HEAP32[$Qualifier>>2] = $Qualifier_;
 $Name = ((($this)) + 12|0);
 HEAP32[$Name>>2] = $Name_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle13QualifiedName9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $Name = 0, $Qualifier = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $Qualifier = ((($this)) + 8|0);
 $0 = HEAP32[$Qualifier>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,25712);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Name = ((($this)) + 12|0);
 $1 = HEAP32[$Name>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($1,$S);
 STACKTOP = sp;return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle13QualifiedName11getBaseNameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $Name = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Name = ((($this)) + 12|0);
 $0 = HEAP32[$Name>>2]|0;
 $vtable = HEAP32[$0>>2]|0;
 $vfn = ((($vtable)) + 24|0);
 $1 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vii[$1 & 255]($agg$result,$0);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle13QualifiedNameD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA13_KcRPNS2_4NodeES9_EEEPT_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,24)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 $0 = HEAP32[$args1>>2]|0;
 $1 = HEAP32[$args3>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8CastExprC2ENS_10StringViewEPKNS0_4NodeES5_($call,$agg$tmp$byval_copy,$0,$1);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10DeleteExprEJRPNS2_4NodeERbbEEEPT_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $tobool = 0, $tobool9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = HEAP8[$args1>>0]|0;
 $tobool = ($1<<24>>24)!=(0);
 $2 = HEAP8[$args3>>0]|0;
 $tobool9 = ($2<<24>>24)!=(0);
 __ZN12_GLOBAL__N_116itanium_demangle10DeleteExprC2EPNS0_4NodeEbb($call,$0,$tobool,$tobool9);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle10DeleteExprC2EPNS0_4NodeEbb($this,$Op_,$IsGlobal_,$IsArray_) {
 $this = $this|0;
 $Op_ = $Op_|0;
 $IsGlobal_ = $IsGlobal_|0;
 $IsArray_ = $IsArray_|0;
 var $IsArray = 0, $IsGlobal = 0, $Op = 0, $frombool = 0, $frombool1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $frombool = $IsGlobal_&1;
 $frombool1 = $IsArray_&1;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,52,1,1,1);
 HEAP32[$this>>2] = (5708);
 $Op = ((($this)) + 8|0);
 HEAP32[$Op>>2] = $Op_;
 $IsGlobal = ((($this)) + 12|0);
 HEAP8[$IsGlobal>>0] = $frombool;
 $IsArray = ((($this)) + 13|0);
 HEAP8[$IsArray>>0] = $frombool1;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle10DeleteExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $2 = 0, $IsArray = 0, $IsGlobal = 0, $Op = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $agg$tmp6 = 0, $agg$tmp6$byval_copy = 0, $tobool = 0, $tobool4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp6$byval_copy = sp + 40|0;
 $agg$tmp2$byval_copy = sp + 32|0;
 $agg$tmp$byval_copy = sp + 24|0;
 $agg$tmp = sp + 16|0;
 $agg$tmp2 = sp + 8|0;
 $agg$tmp6 = sp;
 $IsGlobal = ((($this)) + 12|0);
 $0 = HEAP8[$IsGlobal>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if (!($tobool)) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,25712);
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 }
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2,26508);
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$agg$tmp2$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp2$byval_copy);
 $IsArray = ((($this)) + 13|0);
 $1 = HEAP8[$IsArray>>0]|0;
 $tobool4 = ($1<<24>>24)==(0);
 if (!($tobool4)) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6,26515);
  ;HEAP32[$agg$tmp6$byval_copy>>2]=HEAP32[$agg$tmp6>>2]|0;HEAP32[$agg$tmp6$byval_copy+4>>2]=HEAP32[$agg$tmp6+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp6$byval_copy);
 }
 $Op = ((($this)) + 8|0);
 $2 = HEAP32[$Op>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($2,$S);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle10DeleteExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_14ConversionExprEJRPNS0_4NodeERNS0_9NodeArrayEEEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle14ConversionExprEJRPNS2_4NodeERNS2_9NodeArrayEEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_14ConversionExprEJRPNS0_4NodeENS0_9NodeArrayEEEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle14ConversionExprEJRPNS2_4NodeENS2_9NodeArrayEEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle14ConversionExprEJRPNS2_4NodeENS2_9NodeArrayEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = $args1;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle14ConversionExprC2EPKNS0_4NodeENS0_9NodeArrayE($call,$0,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle14ConversionExprC2EPKNS0_4NodeENS0_9NodeArrayE($this,$Type_,$Expressions_) {
 $this = $this|0;
 $Type_ = $Type_|0;
 $Expressions_ = $Expressions_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Expressions = 0, $Type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,55,1,1,1);
 HEAP32[$this>>2] = (5752);
 $Type = ((($this)) + 8|0);
 HEAP32[$Type>>2] = $Type_;
 $Expressions = ((($this)) + 12|0);
 $0 = $Expressions_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Expressions;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle14ConversionExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $Expressions = 0, $Type = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp4$byval_copy = sp + 40|0;
 $agg$tmp2$byval_copy = sp + 32|0;
 $agg$tmp$byval_copy = sp + 24|0;
 $agg$tmp = sp + 16|0;
 $agg$tmp2 = sp + 8|0;
 $agg$tmp4 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,23966);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Type = ((($this)) + 8|0);
 $0 = HEAP32[$Type>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2,26569);
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$agg$tmp2$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp2$byval_copy);
 $Expressions = ((($this)) + 12|0);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($Expressions,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4,23962);
 ;HEAP32[$agg$tmp4$byval_copy>>2]=HEAP32[$agg$tmp4>>2]|0;HEAP32[$agg$tmp4$byval_copy+4>>2]=HEAP32[$agg$tmp4+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp4$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle14ConversionExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle14ConversionExprEJRPNS2_4NodeERNS2_9NodeArrayEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = $args1;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle14ConversionExprC2EPKNS0_4NodeENS0_9NodeArrayE($call,$0,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CallExprEJRPNS2_4NodeENS2_9NodeArrayEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = $args1;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8CallExprC2EPKNS0_4NodeENS0_9NodeArrayE($call,$0,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle8CallExprC2EPKNS0_4NodeENS0_9NodeArrayE($this,$Callee_,$Args_) {
 $this = $this|0;
 $Callee_ = $Callee_|0;
 $Args_ = $Args_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Args = 0, $Callee = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,50,1,1,1);
 HEAP32[$this>>2] = (5796);
 $Callee = ((($this)) + 8|0);
 HEAP32[$Callee>>2] = $Callee_;
 $Args = ((($this)) + 12|0);
 $0 = $Args_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Args;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle8CallExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $Args = 0, $Callee = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp2$byval_copy = sp + 24|0;
 $agg$tmp$byval_copy = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp2 = sp;
 $Callee = ((($this)) + 8|0);
 $0 = HEAP32[$Callee>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,23966);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Args = ((($this)) + 12|0);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($Args,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2,23962);
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$agg$tmp2$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp2$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle8CallExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8CastExprEJRA11_KcRPNS2_4NodeES9_EEEPT_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,24)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 $0 = HEAP32[$args1>>2]|0;
 $1 = HEAP32[$args3>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8CastExprC2ENS_10StringViewEPKNS0_4NodeES5_($call,$agg$tmp$byval_copy,$0,$1);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13EnclosingExprEJRA10_KcRPNS2_4NodeERA2_S4_EEEPT_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp8 = 0, $agg$tmp8$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp8$byval_copy = sp + 24|0;
 $agg$tmp$byval_copy = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp8 = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,28)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 $0 = HEAP32[$args1>>2]|0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp8,$args3);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 ;HEAP32[$agg$tmp8$byval_copy>>2]=HEAP32[$agg$tmp8>>2]|0;HEAP32[$agg$tmp8$byval_copy+4>>2]=HEAP32[$agg$tmp8+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle13EnclosingExprC2ENS_10StringViewEPNS0_4NodeES2_($call,$agg$tmp$byval_copy,$0,$agg$tmp8$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10PrefixExprEJRNS_10StringViewERPNS0_4NodeEEEESB_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10PrefixExprEJRNS_10StringViewERPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10PrefixExprEJRNS_10StringViewERPNS2_4NodeEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $10 = HEAP32[$args1>>2]|0;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle10PrefixExprC2ENS_10StringViewEPNS0_4NodeE($call,$tmpcast$byval_copy,$10);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle10PrefixExprC2ENS_10StringViewEPNS0_4NodeE($this,$Prefix_,$Child_) {
 $this = $this|0;
 $Prefix_ = $Prefix_|0;
 $Child_ = $Child_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Child = 0, $Prefix = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,53,1,1,1);
 HEAP32[$this>>2] = (5840);
 $Prefix = ((($this)) + 8|0);
 $0 = $Prefix_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Prefix;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $Child = ((($this)) + 16|0);
 HEAP32[$Child>>2] = $Child_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle10PrefixExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Child = 0, $Prefix = 0, $agg$tmp = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, $tmpcast$byval_copy = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp4$byval_copy = sp + 40|0;
 $agg$tmp2$byval_copy = sp + 32|0;
 $tmpcast$byval_copy = sp + 24|0;
 $agg$tmp = sp;
 $agg$tmp2 = sp + 16|0;
 $agg$tmp4 = sp + 8|0;
 $Prefix = ((($this)) + 8|0);
 $0 = $Prefix;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2,23966);
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$agg$tmp2$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp2$byval_copy);
 $Child = ((($this)) + 16|0);
 $10 = HEAP32[$Child>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($10,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4,23962);
 ;HEAP32[$agg$tmp4$byval_copy>>2]=HEAP32[$agg$tmp4>>2]|0;HEAP32[$agg$tmp4$byval_copy+4>>2]=HEAP32[$agg$tmp4+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp4$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle10PrefixExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10BinaryExprEJRPNS0_4NodeERNS_10StringViewESA_EEES9_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $ASTAllocator = 0, $call8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call8 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10BinaryExprEJRPNS2_4NodeERNS_10StringViewES6_EEEPT_DpOT0_($ASTAllocator,$args,$args1,$args3)|0);
 return ($call8|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10BinaryExprEJRPNS2_4NodeERNS_10StringViewES6_EEEPT_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,24)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = $args1;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 $11 = HEAP32[$args3>>2]|0;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle10BinaryExprC2EPKNS0_4NodeENS_10StringViewES4_($call,$0,$tmpcast$byval_copy,$11);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle10BinaryExprC2EPKNS0_4NodeENS_10StringViewES4_($this,$LHS_,$InfixOperator_,$RHS_) {
 $this = $this|0;
 $LHS_ = $LHS_|0;
 $InfixOperator_ = $InfixOperator_|0;
 $RHS_ = $RHS_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $InfixOperator = 0, $LHS = 0, $RHS = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,42,1,1,1);
 HEAP32[$this>>2] = (5884);
 $LHS = ((($this)) + 8|0);
 HEAP32[$LHS>>2] = $LHS_;
 $InfixOperator = ((($this)) + 12|0);
 $0 = $InfixOperator_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $InfixOperator;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $RHS = ((($this)) + 20|0);
 HEAP32[$RHS>>2] = $RHS_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle10BinaryExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $InfixOperator = 0, $LHS = 0, $RHS = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp10 = 0, $agg$tmp10$byval_copy = 0, $agg$tmp12 = 0;
 var $agg$tmp12$byval_copy = 0, $agg$tmp18 = 0, $agg$tmp18$byval_copy = 0, $agg$tmp3 = 0, $agg$tmp3$byval_copy = 0, $agg$tmp5 = 0, $agg$tmp5$byval_copy = 0, $agg$tmp7 = 0, $call = 0, $call16 = 0, $ref$tmp = 0, $ref$tmp15 = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $agg$tmp18$byval_copy = sp + 120|0;
 $agg$tmp12$byval_copy = sp + 112|0;
 $agg$tmp10$byval_copy = sp + 104|0;
 $tmpcast$byval_copy = sp + 96|0;
 $agg$tmp5$byval_copy = sp + 88|0;
 $agg$tmp3$byval_copy = sp + 80|0;
 $agg$tmp$byval_copy = sp + 72|0;
 $ref$tmp = sp + 64|0;
 $agg$tmp = sp + 56|0;
 $agg$tmp3 = sp + 48|0;
 $agg$tmp5 = sp + 40|0;
 $agg$tmp7 = sp;
 $agg$tmp10 = sp + 32|0;
 $agg$tmp12 = sp + 24|0;
 $ref$tmp15 = sp + 16|0;
 $agg$tmp18 = sp + 8|0;
 $InfixOperator = ((($this)) + 12|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp,24041);
 $call = (__ZN12_GLOBAL__N_1eqERKNS_10StringViewES2_($InfixOperator,$ref$tmp)|0);
 if ($call) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,23966);
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 }
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp3,23966);
 ;HEAP32[$agg$tmp3$byval_copy>>2]=HEAP32[$agg$tmp3>>2]|0;HEAP32[$agg$tmp3$byval_copy+4>>2]=HEAP32[$agg$tmp3+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp3$byval_copy);
 $LHS = ((($this)) + 8|0);
 $0 = HEAP32[$LHS>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp5,26725);
 ;HEAP32[$agg$tmp5$byval_copy>>2]=HEAP32[$agg$tmp5>>2]|0;HEAP32[$agg$tmp5$byval_copy+4>>2]=HEAP32[$agg$tmp5+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp5$byval_copy);
 $1 = $InfixOperator;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp7;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp7>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp7+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp10,26728);
 ;HEAP32[$agg$tmp10$byval_copy>>2]=HEAP32[$agg$tmp10>>2]|0;HEAP32[$agg$tmp10$byval_copy+4>>2]=HEAP32[$agg$tmp10+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp10$byval_copy);
 $RHS = ((($this)) + 20|0);
 $11 = HEAP32[$RHS>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($11,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp12,23962);
 ;HEAP32[$agg$tmp12$byval_copy>>2]=HEAP32[$agg$tmp12>>2]|0;HEAP32[$agg$tmp12$byval_copy+4>>2]=HEAP32[$agg$tmp12+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp12$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($ref$tmp15,24041);
 $call16 = (__ZN12_GLOBAL__N_1eqERKNS_10StringViewES2_($InfixOperator,$ref$tmp15)|0);
 if ($call16) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp18,23962);
  ;HEAP32[$agg$tmp18$byval_copy>>2]=HEAP32[$agg$tmp18>>2]|0;HEAP32[$agg$tmp18$byval_copy+4>>2]=HEAP32[$agg$tmp18+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp18$byval_copy);
 }
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle10BinaryExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8FoldExprEJRbRNS_10StringViewERPNS0_4NodeESD_EEESC_DpOT0_($this,$args,$args1,$args3,$args5) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 $args5 = $args5|0;
 var $ASTAllocator = 0, $call11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call11 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8FoldExprEJRbRNS_10StringViewERPNS2_4NodeES9_EEEPT_DpOT0_($ASTAllocator,$args,$args1,$args3,$args5)|0);
 return ($call11|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8FoldExprEJRbRNS_10StringViewERPNS2_4NodeES9_EEEPT_DpOT0_($this,$args,$args1,$args3,$args5) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 $args5 = $args5|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,28)|0);
 $0 = HEAP8[$args>>0]|0;
 $tobool = ($0<<24>>24)!=(0);
 $1 = $args1;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 $11 = HEAP32[$args3>>2]|0;
 $12 = HEAP32[$args5>>2]|0;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8FoldExprC2EbNS_10StringViewEPKNS0_4NodeES5_($call,$tobool,$tmpcast$byval_copy,$11,$12);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle8FoldExprC2EbNS_10StringViewEPKNS0_4NodeES5_($this,$IsLeftFold_,$OperatorName_,$Pack_,$Init_) {
 $this = $this|0;
 $IsLeftFold_ = $IsLeftFold_|0;
 $OperatorName_ = $OperatorName_|0;
 $Pack_ = $Pack_|0;
 $Init_ = $Init_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Init = 0, $IsLeftFold = 0, $OperatorName = 0, $Pack = 0, $frombool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $frombool = $IsLeftFold_&1;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,57,1,1,1);
 HEAP32[$this>>2] = (5928);
 $Pack = ((($this)) + 8|0);
 HEAP32[$Pack>>2] = $Pack_;
 $Init = ((($this)) + 12|0);
 HEAP32[$Init>>2] = $Init_;
 $OperatorName = ((($this)) + 16|0);
 $0 = $OperatorName_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $OperatorName;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $IsLeftFold = ((($this)) + 24|0);
 HEAP8[$IsLeftFold>>0] = $frombool;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle8FoldExpr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Init = 0, $Init19 = 0, $IsLeftFold = 0, $OperatorName = 0, $OperatorName15 = 0, $PrintPack = 0, $agg$tmp = 0, $agg$tmp14 = 0, $agg$tmp17 = 0, $agg$tmp17$byval_copy = 0, $agg$tmp23 = 0, $agg$tmp7 = 0, $agg$tmp7$byval_copy = 0;
 var $agg$tmp9 = 0, $cmp = 0, $cmp20 = 0, $tmpcast$byval_copy = 0, $tmpcast17$byval_copy = 0, $tmpcast18$byval_copy = 0, $tmpcast19$byval_copy = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $tmpcast17$byval_copy = sp + 96|0;
 $agg$tmp17$byval_copy = sp + 88|0;
 $tmpcast$byval_copy = sp + 80|0;
 $tmpcast18$byval_copy = sp + 72|0;
 $agg$tmp7$byval_copy = sp + 64|0;
 $tmpcast19$byval_copy = sp + 56|0;
 $PrintPack = sp + 48|0;
 $agg$tmp = sp + 24|0;
 $agg$tmp7 = sp + 40|0;
 $agg$tmp9 = sp + 16|0;
 $agg$tmp14 = sp + 8|0;
 $agg$tmp17 = sp + 32|0;
 $agg$tmp23 = sp;
 HEAP32[$PrintPack>>2] = $S;
 $0 = ((($PrintPack)) + 4|0);
 HEAP32[$0>>2] = $this;
 __ZN12_GLOBAL__N_112OutputStreampLEc($S,40);
 $IsLeftFold = ((($this)) + 24|0);
 $1 = HEAP8[$IsLeftFold>>0]|0;
 $tobool = ($1<<24>>24)==(0);
 if ($tobool) {
  __ZZNK12_GLOBAL__N_116itanium_demangle8FoldExpr9printLeftERNS_12OutputStreamEENKUlvE_clEv($PrintPack);
  __ZN12_GLOBAL__N_112OutputStreampLEc($S,32);
  $OperatorName15 = ((($this)) + 16|0);
  $23 = $OperatorName15;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = $agg$tmp14;
  $30 = $29;
  HEAP32[$30>>2] = $25;
  $31 = (($29) + 4)|0;
  $32 = $31;
  HEAP32[$32>>2] = $28;
  ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp14>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp14+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast$byval_copy);
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp17,26876);
  ;HEAP32[$agg$tmp17$byval_copy>>2]=HEAP32[$agg$tmp17>>2]|0;HEAP32[$agg$tmp17$byval_copy+4>>2]=HEAP32[$agg$tmp17+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp17$byval_copy);
  $Init19 = ((($this)) + 12|0);
  $33 = HEAP32[$Init19>>2]|0;
  $cmp20 = ($33|0)==(0|0);
  if (!($cmp20)) {
   __ZN12_GLOBAL__N_112OutputStreampLEc($S,32);
   $34 = $OperatorName15;
   $35 = $34;
   $36 = HEAP32[$35>>2]|0;
   $37 = (($34) + 4)|0;
   $38 = $37;
   $39 = HEAP32[$38>>2]|0;
   $40 = $agg$tmp23;
   $41 = $40;
   HEAP32[$41>>2] = $36;
   $42 = (($40) + 4)|0;
   $43 = $42;
   HEAP32[$43>>2] = $39;
   ;HEAP32[$tmpcast17$byval_copy>>2]=HEAP32[$agg$tmp23>>2]|0;HEAP32[$tmpcast17$byval_copy+4>>2]=HEAP32[$agg$tmp23+4>>2]|0;
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast17$byval_copy);
   __ZN12_GLOBAL__N_112OutputStreampLEc($S,32);
   $44 = HEAP32[$Init19>>2]|0;
   __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($44,$S);
  }
 } else {
  $Init = ((($this)) + 12|0);
  $2 = HEAP32[$Init>>2]|0;
  $cmp = ($2|0)==(0|0);
  if ($cmp) {
   $$pre = ((($this)) + 16|0);
   $$pre$phiZ2D = $$pre;
  } else {
   __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($2,$S);
   __ZN12_GLOBAL__N_112OutputStreampLEc($S,32);
   $OperatorName = ((($this)) + 16|0);
   $3 = $OperatorName;
   $4 = $3;
   $5 = HEAP32[$4>>2]|0;
   $6 = (($3) + 4)|0;
   $7 = $6;
   $8 = HEAP32[$7>>2]|0;
   $9 = $agg$tmp;
   $10 = $9;
   HEAP32[$10>>2] = $5;
   $11 = (($9) + 4)|0;
   $12 = $11;
   HEAP32[$12>>2] = $8;
   ;HEAP32[$tmpcast19$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast19$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast19$byval_copy);
   __ZN12_GLOBAL__N_112OutputStreampLEc($S,32);
   $$pre$phiZ2D = $OperatorName;
  }
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp7,26871);
  ;HEAP32[$agg$tmp7$byval_copy>>2]=HEAP32[$agg$tmp7>>2]|0;HEAP32[$agg$tmp7$byval_copy+4>>2]=HEAP32[$agg$tmp7+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp7$byval_copy);
  $13 = $$pre$phiZ2D;
  $14 = $13;
  $15 = HEAP32[$14>>2]|0;
  $16 = (($13) + 4)|0;
  $17 = $16;
  $18 = HEAP32[$17>>2]|0;
  $19 = $agg$tmp9;
  $20 = $19;
  HEAP32[$20>>2] = $15;
  $21 = (($19) + 4)|0;
  $22 = $21;
  HEAP32[$22>>2] = $18;
  ;HEAP32[$tmpcast18$byval_copy>>2]=HEAP32[$agg$tmp9>>2]|0;HEAP32[$tmpcast18$byval_copy+4>>2]=HEAP32[$agg$tmp9+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast18$byval_copy);
  __ZN12_GLOBAL__N_112OutputStreampLEc($S,32);
  __ZZNK12_GLOBAL__N_116itanium_demangle8FoldExpr9printLeftERNS_12OutputStreamEENKUlvE_clEv($PrintPack);
 }
 __ZN12_GLOBAL__N_112OutputStreampLEc($S,41);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle8FoldExprD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZZNK12_GLOBAL__N_116itanium_demangle8FoldExpr9printLeftERNS_12OutputStreamEENKUlvE_clEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $Pack = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp = sp;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$this>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLEc($2,40);
 $Pack = ((($1)) + 8|0);
 $3 = HEAP32[$Pack>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle22ParameterPackExpansionC2EPKNS0_4NodeE($ref$tmp,$3);
 $4 = HEAP32[$this>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($ref$tmp,$4);
 $5 = HEAP32[$this>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLEc($5,41);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCVQualifiersEv($this) {
 $this = $this|0;
 var $0 = 0, $CVR = 0, $call = 0, $call3 = 0, $call7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $CVR = sp;
 HEAP32[$CVR>>2] = 0;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,114)|0);
 if ($call) {
  __ZN12_GLOBAL__N_116itanium_demangleoRERNS0_10QualifiersES1_($CVR,4);
 }
 $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,86)|0);
 if ($call3) {
  __ZN12_GLOBAL__N_116itanium_demangleoRERNS0_10QualifiersES1_($CVR,2);
 }
 $call7 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,75)|0);
 if ($call7) {
  __ZN12_GLOBAL__N_116itanium_demangleoRERNS0_10QualifiersES1_($CVR,1);
 }
 $0 = HEAP32[$CVR>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13FunctionParamEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13FunctionParamEJRNS_10StringViewEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13FunctionParamEJRNS_10StringViewEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle13FunctionParamC2ENS_10StringViewE($call,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle13FunctionParamC2ENS_10StringViewE($this,$Number_) {
 $this = $this|0;
 $Number_ = $Number_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Number = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,54,1,1,1);
 HEAP32[$this>>2] = (5972);
 $Number = ((($this)) + 8|0);
 $0 = $Number_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Number;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle13FunctionParam9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Number = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmpcast$byval_copy = sp + 24|0;
 $agg$tmp$byval_copy = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp2 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,26925);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Number = ((($this)) + 8|0);
 $0 = $Number;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp2;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle13FunctionParamD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangleoRERNS0_10QualifiersES1_($Q1,$Q2) {
 $Q1 = $Q1|0;
 $Q2 = $Q2|0;
 var $0 = 0, $or = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$Q1>>2]|0;
 $or = $0 | $Q2;
 HEAP32[$Q1>>2] = $or;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEC2Ev($this) {
 $this = $this|0;
 var $Cap = 0, $Last = 0, $add$ptr = 0, $arraydecay = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arraydecay = ((($this)) + 12|0);
 HEAP32[$this>>2] = $arraydecay;
 $Last = ((($this)) + 4|0);
 HEAP32[$Last>>2] = $arraydecay;
 $Cap = ((($this)) + 8|0);
 $add$ptr = ((($this)) + 44|0);
 HEAP32[$Cap>>2] = $add$ptr;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_24ForwardTemplateReferenceEJRmEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle24ForwardTemplateReferenceEJRmEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE9push_backERKS3_($this,$Elem) {
 $this = $this|0;
 $Elem = $Elem|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $Cap = 0, $Last = 0, $call = 0, $cmp = 0, $incdec$ptr = 0, $mul = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Last = ((($this)) + 4|0);
 $0 = HEAP32[$Last>>2]|0;
 $Cap = ((($this)) + 8|0);
 $1 = HEAP32[$Cap>>2]|0;
 $cmp = ($0|0)==($1|0);
 if ($cmp) {
  $call = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE4sizeEv($this)|0);
  $mul = $call << 1;
  __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE7reserveEm($this,$mul);
  $$pre = HEAP32[$Last>>2]|0;
  $3 = $$pre;
 } else {
  $3 = $0;
 }
 $2 = HEAP32[$Elem>>2]|0;
 $incdec$ptr = ((($3)) + 4|0);
 HEAP32[$Last>>2] = $incdec$ptr;
 HEAP32[$3>>2] = $2;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEixEm($this,$Index) {
 $this = $this|0;
 $Index = $Index|0;
 var $add$ptr = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE5beginEv($this)|0);
 $add$ptr = (($call) + ($Index<<2)|0);
 return ($add$ptr|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE4sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $Last = 0, $sub$ptr$div = 0, $sub$ptr$sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Last = ((($this)) + 4|0);
 $0 = HEAP32[$Last>>2]|0;
 $1 = HEAP32[$this>>2]|0;
 $sub$ptr$sub = (($0) - ($1))|0;
 $sub$ptr$div = $sub$ptr$sub >> 2;
 return ($sub$ptr$div|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE7reserveEm($this,$NewCap) {
 $this = $this|0;
 $NewCap = $NewCap|0;
 var $$in = 0, $$pre7 = 0, $0 = 0, $1 = 0, $2 = 0, $Cap = 0, $Last = 0, $Last17$pre$phiZ2D = 0, $add$ptr = 0, $add$ptr19 = 0, $call = 0, $call2 = 0, $call3 = 0, $call9 = 0, $cmp = 0, $cmp$i$i = 0, $cmp12 = 0, $mul = 0, $mul8 = 0, $sub$ptr$rhs$cast$i$i = 0;
 var $sub$ptr$sub$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE4sizeEv($this)|0);
 $call2 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE8isInlineEv($this)|0);
 do {
  if ($call2) {
   $mul = $NewCap << 2;
   $call3 = (_malloc($mul)|0);
   $cmp = ($call3|0)==(0|0);
   if ($cmp) {
    __ZSt9terminatev();
    // unreachable;
   }
   $0 = HEAP32[$this>>2]|0;
   $Last = ((($this)) + 4|0);
   $1 = HEAP32[$Last>>2]|0;
   $sub$ptr$rhs$cast$i$i = $0;
   $sub$ptr$sub$i$i = (($1) - ($sub$ptr$rhs$cast$i$i))|0;
   $cmp$i$i = ($sub$ptr$sub$i$i|0)==(0);
   if (!($cmp$i$i)) {
    _memmove(($call3|0),($0|0),($sub$ptr$sub$i$i|0))|0;
   }
   HEAP32[$this>>2] = $call3;
   $$in = $call3;$Last17$pre$phiZ2D = $Last;
  } else {
   $2 = HEAP32[$this>>2]|0;
   $mul8 = $NewCap << 2;
   $call9 = (_realloc($2,$mul8)|0);
   HEAP32[$this>>2] = $call9;
   $cmp12 = ($call9|0)==(0|0);
   if ($cmp12) {
    __ZSt9terminatev();
    // unreachable;
   } else {
    $$pre7 = ((($this)) + 4|0);
    $$in = $call9;$Last17$pre$phiZ2D = $$pre7;
    break;
   }
  }
 } while(0);
 $add$ptr = (($$in) + ($call<<2)|0);
 HEAP32[$Last17$pre$phiZ2D>>2] = $add$ptr;
 $add$ptr19 = (($$in) + ($NewCap<<2)|0);
 $Cap = ((($this)) + 8|0);
 HEAP32[$Cap>>2] = $add$ptr19;
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle24ForwardTemplateReferenceEJRmEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle24ForwardTemplateReferenceC2Em($call,$0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle24ForwardTemplateReferenceC2Em($this,$Index_) {
 $this = $this|0;
 $Index_ = $Index_|0;
 var $Index = 0, $Printing = 0, $Ref = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,31,2,2,2);
 HEAP32[$this>>2] = (6016);
 $Index = ((($this)) + 8|0);
 HEAP32[$Index>>2] = $Index_;
 $Ref = ((($this)) + 12|0);
 HEAP32[$Ref>>2] = 0;
 $Printing = ((($this)) + 16|0);
 HEAP8[$Printing>>0] = 0;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference19hasRHSComponentSlowERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $Printing = 0, $Ref = 0, $SavePrinting = 0, $call = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $SavePrinting = sp;
 $Printing = ((($this)) + 16|0);
 $0 = HEAP8[$Printing>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if ($tobool) {
  __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting,$Printing,1);
  $Ref = ((($this)) + 12|0);
  $1 = HEAP32[$Ref>>2]|0;
  $call = (__ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE($1,$S)|0);
  __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
  $retval$0 = $call;
 } else {
  $retval$0 = 0;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference12hasArraySlowERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $Printing = 0, $Ref = 0, $SavePrinting = 0, $call = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $SavePrinting = sp;
 $Printing = ((($this)) + 16|0);
 $0 = HEAP8[$Printing>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if ($tobool) {
  __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting,$Printing,1);
  $Ref = ((($this)) + 12|0);
  $1 = HEAP32[$Ref>>2]|0;
  $call = (__ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE($1,$S)|0);
  __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
  $retval$0 = $call;
 } else {
  $retval$0 = 0;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference15hasFunctionSlowERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $Printing = 0, $Ref = 0, $SavePrinting = 0, $call = 0, $retval$0 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $SavePrinting = sp;
 $Printing = ((($this)) + 16|0);
 $0 = HEAP8[$Printing>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if ($tobool) {
  __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting,$Printing,1);
  $Ref = ((($this)) + 12|0);
  $1 = HEAP32[$Ref>>2]|0;
  $call = (__ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE($1,$S)|0);
  __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
  $retval$0 = $call;
 } else {
  $retval$0 = 0;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference13getSyntaxNodeERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $2 = 0, $Printing = 0, $Ref = 0, $SavePrinting = 0, $call = 0, $retval$0 = 0, $tobool = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $SavePrinting = sp;
 $Printing = ((($this)) + 16|0);
 $0 = HEAP8[$Printing>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if ($tobool) {
  __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting,$Printing,1);
  $Ref = ((($this)) + 12|0);
  $1 = HEAP32[$Ref>>2]|0;
  $vtable = HEAP32[$1>>2]|0;
  $vfn = ((($vtable)) + 12|0);
  $2 = HEAP32[$vfn>>2]|0;
  $call = (FUNCTION_TABLE_iii[$2 & 255]($1,$S)|0);
  __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
  $retval$0 = $call;
 } else {
  $retval$0 = $this;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $2 = 0, $Printing = 0, $Ref = 0, $SavePrinting = 0, $tobool = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $SavePrinting = sp;
 $Printing = ((($this)) + 16|0);
 $0 = HEAP8[$Printing>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if ($tobool) {
  __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting,$Printing,1);
  $Ref = ((($this)) + 12|0);
  $1 = HEAP32[$Ref>>2]|0;
  $vtable = HEAP32[$1>>2]|0;
  $vfn = ((($vtable)) + 16|0);
  $2 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_vii[$2 & 255]($1,$S);
  __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
 }
 STACKTOP = sp;return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference10printRightERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $2 = 0, $Printing = 0, $Ref = 0, $SavePrinting = 0, $tobool = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $SavePrinting = sp;
 $Printing = ((($this)) + 16|0);
 $0 = HEAP8[$Printing>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if ($tobool) {
  __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SavePrinting,$Printing,1);
  $Ref = ((($this)) + 12|0);
  $1 = HEAP32[$Ref>>2]|0;
  $vtable = HEAP32[$1>>2]|0;
  $vfn = ((($vtable)) + 20|0);
  $2 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_vii[$2 & 255]($1,$S);
  __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SavePrinting);
 }
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle24ForwardTemplateReferenceD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE($this,$State) {
 $this = $this|0;
 $State = $State|0;
 var $EndsWithTemplateArgs = 0, $EndsWithTemplateArgs58 = 0, $N = 0, $S = 0, $Subs = 0, $TA = 0, $TA49 = 0, $call10 = 0, $call15 = 0, $call19 = 0, $call2 = 0, $call20 = 0, $call24 = 0, $call3 = 0, $call31 = 0, $call37 = 0, $call4 = 0, $call40 = 0, $call41 = 0, $call45 = 0;
 var $call52 = 0, $call60 = 0, $call9 = 0, $cmp17 = 0, $cmp21 = 0, $cmp26 = 0, $cmp30 = 0, $cmp32 = 0, $cmp42 = 0, $cmp47 = 0, $cmp51 = 0, $cmp53 = 0, $retval$0 = 0, $retval$1 = 0, $retval$2 = 0, $retval$3 = 0, $retval$4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $S = sp + 12|0;
 $TA = sp + 8|0;
 $N = sp + 4|0;
 $TA49 = sp;
 (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,76)|0);
 $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
 switch ($call2<<24>>24) {
 case 78:  {
  $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
  $call4 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateE($call3,$State)|0);
  $retval$4 = $call4;
  break;
 }
 case 90:  {
  $call9 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
  $call10 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E14parseLocalNameEPNS5_9NameStateE($call9,$State)|0);
  $retval$4 = $call10;
  break;
 }
 case 83:  {
  $call15 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
  $cmp17 = ($call15<<24>>24)==(116);
  if ($cmp17) {
   label = 13;
  } else {
   $call19 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call20 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseSubstitutionEv($call19)|0);
   HEAP32[$S>>2] = $call20;
   $cmp21 = ($call20|0)==(0|0);
   if ($cmp21) {
    $retval$1 = 0;
   } else {
    $call24 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
    $cmp26 = ($call24<<24>>24)==(73);
    if ($cmp26) {
     $cmp30 = ($State|0)!=(0|0);
     $call31 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb($call19,$cmp30)|0);
     HEAP32[$TA>>2] = $call31;
     $cmp32 = ($call31|0)==(0|0);
     if ($cmp32) {
      $retval$0 = 0;
     } else {
      if ($cmp30) {
       $EndsWithTemplateArgs = ((($State)) + 1|0);
       HEAP8[$EndsWithTemplateArgs>>0] = 1;
      }
      $call37 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$S,$TA)|0);
      $retval$0 = $call37;
     }
     $retval$1 = $retval$0;
    } else {
     $retval$1 = 0;
    }
   }
   $retval$4 = $retval$1;
  }
  break;
 }
 default: {
  label = 13;
 }
 }
 if ((label|0) == 13) {
  $call40 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
  $call41 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseUnscopedNameEPNS5_9NameStateE($call40,$State)|0);
  HEAP32[$N>>2] = $call41;
  $cmp42 = ($call41|0)==(0|0);
  if ($cmp42) {
   $retval$3 = 0;
  } else {
   $call45 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
   $cmp47 = ($call45<<24>>24)==(73);
   if ($cmp47) {
    $Subs = ((($this)) + 148|0);
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Subs,$N);
    $cmp51 = ($State|0)!=(0|0);
    $call52 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb($call40,$cmp51)|0);
    HEAP32[$TA49>>2] = $call52;
    $cmp53 = ($call52|0)==(0|0);
    if ($cmp53) {
     $retval$2 = 0;
    } else {
     if ($cmp51) {
      $EndsWithTemplateArgs58 = ((($State)) + 1|0);
      HEAP8[$EndsWithTemplateArgs58>>0] = 1;
     }
     $call60 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$N,$TA49)|0);
     $retval$2 = $call60;
    }
    $retval$3 = $retval$2;
   } else {
    $retval$3 = $call41;
   }
  }
  $retval$4 = $retval$3;
 }
 STACKTOP = sp;return ($retval$4|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_22ElaboratedTypeSpefTypeEJRNS_10StringViewERPNS0_4NodeEEEESB_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle22ElaboratedTypeSpefTypeEJRNS_10StringViewERPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle22ElaboratedTypeSpefTypeEJRNS_10StringViewERPNS2_4NodeEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $10 = HEAP32[$args1>>2]|0;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle22ElaboratedTypeSpefTypeC2ENS_10StringViewEPNS0_4NodeE($call,$tmpcast$byval_copy,$10);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22ElaboratedTypeSpefTypeC2ENS_10StringViewEPNS0_4NodeE($this,$Kind_,$Child_) {
 $this = $this|0;
 $Kind_ = $Kind_|0;
 $Child_ = $Child_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Child = 0, $Kind = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,6,1,1,1);
 HEAP32[$this>>2] = (6060);
 $Kind = ((($this)) + 8|0);
 $0 = $Kind_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Kind;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $Child = ((($this)) + 16|0);
 HEAP32[$Child>>2] = $Child_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle22ElaboratedTypeSpefType9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Child = 0, $Kind = 0, $agg$tmp = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $Kind = ((($this)) + 8|0);
 $0 = $Kind;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast$byval_copy);
 __ZN12_GLOBAL__N_112OutputStreampLEc($S,32);
 $Child = ((($this)) + 16|0);
 $10 = HEAP32[$Child>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($10,$S);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22ElaboratedTypeSpefTypeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateE($this,$State) {
 $this = $this|0;
 $State = $State|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $CVQualifiers = 0, $EndsWithTemplateArgs = 0, $PushComponent = 0, $ReferenceQualifier = 0, $ReferenceQualifier14 = 0, $ReferenceQualifier19 = 0, $S = 0;
 var $SoFar = 0, $State$addr = 0, $Subs136 = 0, $TA = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call10 = 0, $call119 = 0, $call120 = 0, $call121 = 0, $call125 = 0, $call131 = 0, $call132 = 0, $call133 = 0, $call140 = 0, $call2 = 0, $call23 = 0, $call25 = 0, $call30 = 0;
 var $call32 = 0, $call37 = 0, $call40 = 0, $call41 = 0, $call42 = 0, $call5 = 0, $call50 = 0, $call52 = 0, $call57 = 0, $call69 = 0, $call77 = 0, $call78 = 0, $call79 = 0, $call88 = 0, $call92 = 0, $call93 = 0, $call94 = 0, $cmp = 0, $cmp116 = 0, $cmp126 = 0;
 var $cmp137 = 0, $cmp51 = 0, $cmp53 = 0, $cmp54 = 0, $cmp90 = 0, $cmp97 = 0, $or$cond = 0, $retval$3 = 0, $retval$4 = 0, $tobool = 0, $tobool12 = 0, $tobool61 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp$byval_copy = sp + 40|0;
 $State$addr = sp + 32|0;
 $SoFar = sp + 28|0;
 $PushComponent = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $TA = sp + 4|0;
 $S = sp;
 HEAP32[$State$addr>>2] = $State;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,78)|0);
 if ($call) {
  $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCVQualifiersEv($this)|0);
  $tobool = ($State|0)==(0|0);
  if (!($tobool)) {
   $CVQualifiers = ((($State)) + 4|0);
   HEAP32[$CVQualifiers>>2] = $call2;
  }
  $call5 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,79)|0);
  do {
   if ($call5) {
    if (!($tobool)) {
     $ReferenceQualifier = ((($State)) + 8|0);
     HEAP8[$ReferenceQualifier>>0] = 2;
    }
   } else {
    $call10 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,82)|0);
    $tobool12 = ($State|0)!=(0|0);
    if ($call10) {
     if (!($tobool12)) {
      break;
     }
     $ReferenceQualifier14 = ((($State)) + 8|0);
     HEAP8[$ReferenceQualifier14>>0] = 1;
     break;
    } else {
     if (!($tobool12)) {
      break;
     }
     $ReferenceQualifier19 = ((($State)) + 8|0);
     HEAP8[$ReferenceQualifier19>>0] = 0;
     break;
    }
   }
  } while(0);
  HEAP32[$SoFar>>2] = 0;
  HEAP32[$PushComponent>>2] = $this;
  $0 = ((($PushComponent)) + 4|0);
  HEAP32[$0>>2] = $SoFar;
  $1 = ((($PushComponent)) + 8|0);
  HEAP32[$1>>2] = $State$addr;
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,27132);
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
  $call23 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp$byval_copy)|0);
  if ($call23) {
   $call25 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA4_KcEEEPNS0_4NodeEDpOT0_($this,27450)|0);
   HEAP32[$SoFar>>2] = $call25;
  }
  $Subs136 = ((($this)) + 148|0);
  L19: while(1) {
   $call30 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
   if ($call30) {
    label = 41;
    break;
   }
   (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,76)|0);
   $call32 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,77)|0);
   L22: do {
    if ($call32) {
     $2 = HEAP32[$SoFar>>2]|0;
     $cmp = ($2|0)==(0|0);
     if ($cmp) {
      $retval$3 = 0;
      break L19;
     }
    } else {
     $call37 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
     L25: do {
      switch ($call37<<24>>24) {
      case 84:  {
       $call40 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
       $call41 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E18parseTemplateParamEv($call40)|0);
       $call42 = (__ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateEENKUlPNS0_4NodeEE_clES9_($PushComponent,$call41)|0);
       if (!($call42)) {
        $retval$3 = 0;
        break L19;
       }
       __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Subs136,$SoFar);
       break L22;
       break;
      }
      case 73:  {
       $call50 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
       $3 = HEAP32[$State$addr>>2]|0;
       $cmp51 = ($3|0)!=(0|0);
       $call52 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseTemplateArgsEb($call50,$cmp51)|0);
       HEAP32[$TA>>2] = $call52;
       $cmp53 = ($call52|0)==(0|0);
       $4 = HEAP32[$SoFar>>2]|0;
       $cmp54 = ($4|0)==(0|0);
       $or$cond = $cmp53 | $cmp54;
       if ($or$cond) {
        label = 26;
        break L19;
       }
       $call57 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20NameWithTemplateArgsEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$SoFar,$TA)|0);
       HEAP32[$SoFar>>2] = $call57;
       $5 = HEAP32[$State$addr>>2]|0;
       $tobool61 = ($5|0)==(0|0);
       if (!($tobool61)) {
        $EndsWithTemplateArgs = ((($5)) + 1|0);
        HEAP8[$EndsWithTemplateArgs>>0] = 1;
       }
       __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Subs136,$SoFar);
       break L22;
       break;
      }
      case 68:  {
       $call69 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
       switch ($call69<<24>>24) {
       case 67:  {
        label = 39;
        break L25;
        break;
       }
       case 84: case 116:  {
        break;
       }
       default: {
        break L25;
       }
       }
       $call77 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
       $call78 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseDecltypeEv($call77)|0);
       $call79 = (__ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateEENKUlPNS0_4NodeEE_clES9_($PushComponent,$call78)|0);
       if (!($call79)) {
        $retval$3 = 0;
        break L19;
       }
       __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Subs136,$SoFar);
       break L22;
       break;
      }
      case 83:  {
       $call88 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
       $cmp90 = ($call88<<24>>24)==(116);
       if ($cmp90) {
        label = 39;
       } else {
        $call92 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
        $call93 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseSubstitutionEv($call92)|0);
        HEAP32[$S>>2] = $call93;
        $call94 = (__ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateEENKUlPNS0_4NodeEE_clES9_($PushComponent,$call93)|0);
        if (!($call94)) {
         label = 44;
         break L19;
        }
        $6 = HEAP32[$SoFar>>2]|0;
        $cmp97 = ($6|0)==($call93|0);
        if (!($cmp97)) {
         __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Subs136,$S);
        }
        break L22;
       }
       break;
      }
      case 67:  {
       break;
      }
      default: {
       label = 39;
      }
      }
     } while(0);
     if ((label|0) == 39) {
      label = 0;
      $call131 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $10 = HEAP32[$State$addr>>2]|0;
      $call132 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseUnqualifiedNameEPNS5_9NameStateE($call131,$10)|0);
      $call133 = (__ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateEENKUlPNS0_4NodeEE_clES9_($PushComponent,$call132)|0);
      if (!($call133)) {
       $retval$3 = 0;
       break L19;
      }
      __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Subs136,$SoFar);
      break;
     }
     $7 = HEAP32[$SoFar>>2]|0;
     $cmp116 = ($7|0)==(0|0);
     if ($cmp116) {
      $retval$3 = 0;
      break L19;
     }
     $call119 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
     $8 = HEAP32[$State$addr>>2]|0;
     $call120 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCtorDtorNameERPNS0_4NodeEPNS5_9NameStateE($call119,$SoFar,$8)|0);
     $call121 = (__ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateEENKUlPNS0_4NodeEE_clES9_($PushComponent,$call120)|0);
     if (!($call121)) {
      $retval$3 = 0;
      break L19;
     }
     $9 = HEAP32[$SoFar>>2]|0;
     $call125 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E12parseAbiTagsEPNS0_4NodeE($call119,$9)|0);
     HEAP32[$SoFar>>2] = $call125;
     $cmp126 = ($call125|0)==(0|0);
     if ($cmp126) {
      $retval$3 = 0;
      break L19;
     }
     __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Subs136,$SoFar);
    }
   } while(0);
  }
  if ((label|0) == 26) {
   $retval$3 = 0;
  }
  else if ((label|0) == 41) {
   $11 = HEAP32[$SoFar>>2]|0;
   $cmp137 = ($11|0)==(0|0);
   if ($cmp137) {
    $retval$3 = 0;
   } else {
    $call140 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE5emptyEv($Subs136)|0);
    if ($call140) {
     $retval$3 = 0;
    } else {
     __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE8pop_backEv($Subs136);
     $12 = HEAP32[$SoFar>>2]|0;
     $retval$3 = $12;
    }
   }
  }
  else if ((label|0) == 44) {
   $retval$3 = 0;
  }
  $retval$4 = $retval$3;
 } else {
  $retval$4 = 0;
 }
 STACKTOP = sp;return ($retval$4|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E14parseLocalNameEPNS5_9NameStateE($this,$State) {
 $this = $this|0;
 $State = $State|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $Encoding = 0, $Entity = 0, $Last = 0, $Last35 = 0, $N = 0, $StringLitName = 0, $call = 0, $call11 = 0, $call14 = 0, $call16 = 0, $call18 = 0, $call2 = 0, $call22 = 0, $call26 = 0, $call3 = 0, $call30 = 0;
 var $call36 = 0, $call38 = 0, $call4 = 0, $call7 = 0, $call9 = 0, $cmp = 0, $cmp23 = 0, $cmp31 = 0, $retval$1 = 0, $retval$2 = 0, $retval$3 = 0, $retval$4 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $Encoding = sp + 20|0;
 $StringLitName = sp + 16|0;
 $tmp = sp + 8|0;
 $N = sp + 4|0;
 $Entity = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,90)|0);
 if ($call) {
  $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
  $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv($call2)|0);
  HEAP32[$Encoding>>2] = $call3;
  $cmp = ($call3|0)==(0|0);
  do {
   if ($cmp) {
    $retval$3 = 0;
   } else {
    $call4 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
    if ($call4) {
     $call7 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,115)|0);
     if ($call7) {
      $0 = HEAP32[$this>>2]|0;
      $Last = ((($this)) + 4|0);
      $1 = HEAP32[$Last>>2]|0;
      $call9 = (__ZN12_GLOBAL__N_116itanium_demangle19parse_discriminatorEPKcS2_($0,$1)|0);
      HEAP32[$this>>2] = $call9;
      $call11 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8NameTypeEJRA15_KcEEEPNS0_4NodeEDpOT0_($this,27390)|0);
      HEAP32[$StringLitName>>2] = $call11;
      $call14 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9LocalNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$Encoding,$StringLitName)|0);
      $retval$3 = $call14;
      break;
     }
     $call16 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,100)|0);
     if (!($call16)) {
      $call30 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE($call2,$State)|0);
      HEAP32[$Entity>>2] = $call30;
      $cmp31 = ($call30|0)==(0|0);
      if ($cmp31) {
       $retval$2 = 0;
      } else {
       $2 = HEAP32[$this>>2]|0;
       $Last35 = ((($this)) + 4|0);
       $3 = HEAP32[$Last35>>2]|0;
       $call36 = (__ZN12_GLOBAL__N_116itanium_demangle19parse_discriminatorEPKcS2_($2,$3)|0);
       HEAP32[$this>>2] = $call36;
       $call38 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9LocalNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$Encoding,$Entity)|0);
       $retval$2 = $call38;
      }
      $retval$3 = $retval$2;
      break;
     }
     __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($tmp,$this,1);
     $call18 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
     if ($call18) {
      $call22 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE($call2,$State)|0);
      HEAP32[$N>>2] = $call22;
      $cmp23 = ($call22|0)==(0|0);
      if ($cmp23) {
       $retval$1 = 0;
      } else {
       $call26 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9LocalNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$Encoding,$N)|0);
       $retval$1 = $call26;
      }
      $retval$3 = $retval$1;
     } else {
      $retval$3 = 0;
     }
    } else {
     $retval$3 = 0;
    }
   }
  } while(0);
  $retval$4 = $retval$3;
 } else {
  $retval$4 = 0;
 }
 STACKTOP = sp;return ($retval$4|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseUnscopedNameEPNS5_9NameStateE($this,$State) {
 $this = $this|0;
 $State = $State|0;
 var $R = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $call = 0, $call10 = 0, $call3 = 0, $call4 = 0, $call5 = 0, $call7 = 0, $call9 = 0, $cmp = 0, $retval$0 = 0, $retval$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp2$byval_copy = sp + 32|0;
 $agg$tmp$byval_copy = sp + 24|0;
 $agg$tmp = sp + 16|0;
 $agg$tmp2 = sp + 8|0;
 $R = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,27128);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp$byval_copy)|0);
 if ($call) {
  label = 3;
 } else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2,27132);
  ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$agg$tmp2$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
  $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp2$byval_copy)|0);
  if ($call3) {
   label = 3;
  } else {
   $call9 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call10 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseUnqualifiedNameEPNS5_9NameStateE($call9,$State)|0);
   $retval$1 = $call10;
  }
 }
 if ((label|0) == 3) {
  $call4 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
  $call5 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseUnqualifiedNameEPNS5_9NameStateE($call4,$State)|0);
  HEAP32[$R>>2] = $call5;
  $cmp = ($call5|0)==(0|0);
  if ($cmp) {
   $retval$0 = 0;
  } else {
   $call7 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16StdQualifiedNameEJRPNS0_4NodeEEEES9_DpOT0_($this,$R)|0);
   $retval$0 = $call7;
  }
  $retval$1 = $retval$0;
 }
 STACKTOP = sp;return ($retval$1|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseUnqualifiedNameEPNS5_9NameStateE($this,$State) {
 $this = $this|0;
 $State = $State|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $Binding = 0, $Names = 0, $Result$1 = 0, $Result$113 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call$off = 0, $call11 = 0, $call12 = 0, $call14 = 0, $call16 = 0, $call17 = 0, $call18 = 0, $call2 = 0, $call22 = 0, $call23 = 0;
 var $call28 = 0, $call29 = 0, $call3 = 0, $call36 = 0, $cmp = 0, $cmp19 = 0, $cmp33 = 0, $ref$tmp = 0, $retval$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp$byval_copy = sp + 24|0;
 $agg$tmp = sp + 16|0;
 $Binding = sp + 8|0;
 $ref$tmp = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
 $cmp = ($call<<24>>24)==(85);
 do {
  if ($cmp) {
   $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseUnnamedTypeNameEPNS5_9NameStateE($call2)|0);
   $Result$1 = $call3;
   label = 12;
  } else {
   $call$off = (($call) + -49)<<24>>24;
   $0 = ($call$off&255)<(9);
   if ($0) {
    $call11 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call12 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseSourceNameEPNS5_9NameStateE($call11)|0);
    $Result$1 = $call12;
    label = 12;
    break;
   }
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,27194);
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
   $call14 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp$byval_copy)|0);
   if (!($call14)) {
    $call28 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call29 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseOperatorNameEPNS5_9NameStateE($call28,$State)|0);
    $Result$1 = $call29;
    label = 12;
    break;
   }
   $Names = ((($this)) + 8|0);
   $call16 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names)|0);
   while(1) {
    $call17 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call18 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseSourceNameEPNS5_9NameStateE($call17)|0);
    HEAP32[$Binding>>2] = $call18;
    $cmp19 = ($call18|0)==(0|0);
    if ($cmp19) {
     label = 10;
     break;
    }
    __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names,$Binding);
    $call22 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
    if ($call22) {
     label = 9;
     break;
    }
   }
   if ((label|0) == 9) {
    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($ref$tmp,$this,$call16);
    $call23 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_21StructuredBindingNameEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this,$ref$tmp)|0);
    $$pre$phiZ2D = $call17;$Result$113 = $call23;
    label = 14;
    break;
   }
   else if ((label|0) == 10) {
    $retval$2 = 0;
    break;
   }
  }
 } while(0);
 if ((label|0) == 12) {
  $cmp33 = ($Result$1|0)==(0|0);
  if ($cmp33) {
   $retval$2 = 0;
  } else {
   $$pre = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $$pre$phiZ2D = $$pre;$Result$113 = $Result$1;
   label = 14;
  }
 }
 if ((label|0) == 14) {
  $call36 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E12parseAbiTagsEPNS0_4NodeE($$pre$phiZ2D,$Result$113)|0);
  $retval$2 = $call36;
 }
 STACKTOP = sp;return ($retval$2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16StdQualifiedNameEJRPNS0_4NodeEEEES9_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16StdQualifiedNameEJRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16StdQualifiedNameEJRPNS2_4NodeEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,12)|0);
 $0 = HEAP32[$args>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle16StdQualifiedNameC2EPNS0_4NodeE($call,$0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle16StdQualifiedNameC2EPNS0_4NodeE($this,$Child_) {
 $this = $this|0;
 $Child_ = $Child_|0;
 var $Child = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,34,1,1,1);
 HEAP32[$this>>2] = (6104);
 $Child = ((($this)) + 8|0);
 HEAP32[$Child>>2] = $Child_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle16StdQualifiedName9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $Child = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,27135);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Child = ((($this)) + 8|0);
 $0 = HEAP32[$Child>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 STACKTOP = sp;return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle16StdQualifiedName11getBaseNameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $Child = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Child = ((($this)) + 8|0);
 $0 = HEAP32[$Child>>2]|0;
 $vtable = HEAP32[$0>>2]|0;
 $vfn = ((($vtable)) + 24|0);
 $1 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vii[$1 & 255]($agg$result,$0);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle16StdQualifiedNameD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20parseUnnamedTypeNameEPNS5_9NameStateE($this) {
 $this = $this|0;
 var $Count = 0, $Count25 = 0, $Names = 0, $P = 0, $Params = 0, $ParsingLambdaParams = 0, $SwapParams = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp6 = 0, $agg$tmp6$byval_copy = 0, $agg$tmp9 = 0, $agg$tmp9$byval_copy = 0, $call = 0, $call10 = 0, $call12 = 0, $call13 = 0, $call14 = 0, $call19 = 0, $call2 = 0;
 var $call26 = 0, $call29 = 0, $call4 = 0, $call7 = 0, $cmp = 0, $retval$0 = 0, $retval$3 = 0, $retval$4 = 0, $retval$5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $agg$tmp9$byval_copy = sp + 80|0;
 $agg$tmp6$byval_copy = sp + 72|0;
 $agg$tmp$byval_copy = sp + 64|0;
 $agg$tmp = sp + 56|0;
 $Count = sp + 48|0;
 $agg$tmp6 = sp + 40|0;
 $Params = sp;
 $SwapParams = sp + 32|0;
 $agg$tmp9 = sp + 24|0;
 $P = sp + 16|0;
 $Count25 = sp + 8|0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,27255);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp$byval_copy)|0);
 if ($call) {
  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($Count,$this,0);
  $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
  if ($call2) {
   $call4 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15UnnamedTypeNameEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this,$Count)|0);
   $retval$0 = $call4;
  } else {
   $retval$0 = 0;
  }
  $retval$5 = $retval$0;
 } else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6,27258);
  ;HEAP32[$agg$tmp6$byval_copy>>2]=HEAP32[$agg$tmp6>>2]|0;HEAP32[$agg$tmp6$byval_copy+4>>2]=HEAP32[$agg$tmp6+4>>2]|0;
  $call7 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp6$byval_copy)|0);
  if ($call7) {
   __ZN12_GLOBAL__N_116itanium_demangle9NodeArrayC2Ev($Params);
   $ParsingLambdaParams = ((($this)) + 362|0);
   __ZN12_GLOBAL__N_114SwapAndRestoreIbEC2ERbb($SwapParams,$ParsingLambdaParams,1);
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp9,27261);
   ;HEAP32[$agg$tmp9$byval_copy>>2]=HEAP32[$agg$tmp9>>2]|0;HEAP32[$agg$tmp9$byval_copy+4>>2]=HEAP32[$agg$tmp9+4>>2]|0;
   $call10 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfENS_10StringViewE($this,$agg$tmp9$byval_copy)|0);
   do {
    if ($call10) {
     label = 12;
    } else {
     $Names = ((($this)) + 8|0);
     $call12 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE4sizeEv($Names)|0);
     while(1) {
      $call13 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
      $call14 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call13)|0);
      HEAP32[$P>>2] = $call14;
      $cmp = ($call14|0)==(0|0);
      if ($cmp) {
       label = 11;
       break;
      }
      __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE9push_backERKS3_($Names,$P);
      $call19 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,69)|0);
      if ($call19) {
       label = 10;
       break;
      }
     }
     if ((label|0) == 10) {
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E20popTrailingNodeArrayEm($Params,$this,$call12);
      label = 12;
      break;
     }
     else if ((label|0) == 11) {
      $retval$4 = 0;
      break;
     }
    }
   } while(0);
   if ((label|0) == 12) {
    __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($Count25,$this,0);
    $call26 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
    if ($call26) {
     $call29 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15ClosureTypeNameEJRNS0_9NodeArrayERNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this,$Params,$Count25)|0);
     $retval$3 = $call29;
    } else {
     $retval$3 = 0;
    }
    $retval$4 = $retval$3;
   }
   __ZN12_GLOBAL__N_114SwapAndRestoreIbED2Ev($SwapParams);
   $retval$5 = $retval$4;
  } else {
   $retval$5 = 0;
  }
 }
 STACKTOP = sp;return ($retval$5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_21StructuredBindingNameEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle21StructuredBindingNameEJNS2_9NodeArrayEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle21StructuredBindingNameEJNS2_9NodeArrayEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle21StructuredBindingNameC2ENS0_9NodeArrayE($call,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle21StructuredBindingNameC2ENS0_9NodeArrayE($this,$Bindings_) {
 $this = $this|0;
 $Bindings_ = $Bindings_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Bindings = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,41,1,1,1);
 HEAP32[$this>>2] = (6148);
 $Bindings = ((($this)) + 8|0);
 $0 = $Bindings_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Bindings;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle21StructuredBindingName9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $Bindings = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_112OutputStreampLEc($S,91);
 $Bindings = ((($this)) + 8|0);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($Bindings,$S);
 __ZN12_GLOBAL__N_112OutputStreampLEc($S,93);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle21StructuredBindingNameD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15UnnamedTypeNameEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15UnnamedTypeNameEJRNS_10StringViewEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15ClosureTypeNameEJRNS0_9NodeArrayERNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15ClosureTypeNameEJRNS2_9NodeArrayERNS_10StringViewEEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15ClosureTypeNameEJRNS2_9NodeArrayERNS_10StringViewEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $agg$tmp = 0, $agg$tmp5 = 0, $call = 0, $tmpcast$byval_copy = 0, $tmpcast1$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmpcast1$byval_copy = sp + 24|0;
 $tmpcast$byval_copy = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp5 = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,24)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $10 = $args1;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = $agg$tmp5;
 $17 = $16;
 HEAP32[$17>>2] = $12;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $15;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 ;HEAP32[$tmpcast1$byval_copy>>2]=HEAP32[$agg$tmp5>>2]|0;HEAP32[$tmpcast1$byval_copy+4>>2]=HEAP32[$agg$tmp5+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle15ClosureTypeNameC2ENS0_9NodeArrayENS_10StringViewE($call,$tmpcast$byval_copy,$tmpcast1$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle15ClosureTypeNameC2ENS0_9NodeArrayENS_10StringViewE($this,$Params_,$Count_) {
 $this = $this|0;
 $Params_ = $Params_|0;
 $Count_ = $Count_|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $Count = 0, $Params = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,40,1,1,1);
 HEAP32[$this>>2] = (6192);
 $Params = ((($this)) + 8|0);
 $0 = $Params_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Params;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $Count = ((($this)) + 16|0);
 $10 = $Count_;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = $Count;
 $17 = $16;
 HEAP32[$17>>2] = $12;
 $18 = (($16) + 4)|0;
 $19 = $18;
 HEAP32[$19>>2] = $15;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle15ClosureTypeName9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Count = 0, $Params = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, $agg$tmp6 = 0, $agg$tmp6$byval_copy = 0, $tmpcast$byval_copy = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $agg$tmp6$byval_copy = sp + 56|0;
 $agg$tmp4$byval_copy = sp + 48|0;
 $tmpcast$byval_copy = sp + 40|0;
 $agg$tmp$byval_copy = sp + 32|0;
 $agg$tmp = sp + 24|0;
 $agg$tmp2 = sp;
 $agg$tmp4 = sp + 16|0;
 $agg$tmp6 = sp + 8|0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,27264);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Count = ((($this)) + 16|0);
 $0 = $Count;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp2;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4,27272);
 ;HEAP32[$agg$tmp4$byval_copy>>2]=HEAP32[$agg$tmp4>>2]|0;HEAP32[$agg$tmp4$byval_copy+4>>2]=HEAP32[$agg$tmp4+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp4$byval_copy);
 $Params = ((($this)) + 8|0);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($Params,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6,23962);
 ;HEAP32[$agg$tmp6$byval_copy>>2]=HEAP32[$agg$tmp6>>2]|0;HEAP32[$agg$tmp6$byval_copy+4>>2]=HEAP32[$agg$tmp6+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp6$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle15ClosureTypeNameD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15UnnamedTypeNameEJRNS_10StringViewEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle15UnnamedTypeNameC2ENS_10StringViewE($call,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle15UnnamedTypeNameC2ENS_10StringViewE($this,$Count_) {
 $this = $this|0;
 $Count_ = $Count_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,39,1,1,1);
 HEAP32[$this>>2] = (6236);
 $Count = ((($this)) + 8|0);
 $0 = $Count_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Count;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle15UnnamedTypeName9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Count = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp4$byval_copy = sp + 40|0;
 $tmpcast$byval_copy = sp + 32|0;
 $agg$tmp$byval_copy = sp + 24|0;
 $agg$tmp = sp + 16|0;
 $agg$tmp2 = sp;
 $agg$tmp4 = sp + 8|0;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,27327);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Count = ((($this)) + 8|0);
 $0 = $Count;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp2;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4,27336);
 ;HEAP32[$agg$tmp4$byval_copy>>2]=HEAP32[$agg$tmp4>>2]|0;HEAP32[$agg$tmp4$byval_copy+4>>2]=HEAP32[$agg$tmp4+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp4$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle15UnnamedTypeNameD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle19parse_discriminatorEPKcS2_($first,$last) {
 $first = $first|0;
 $last = $last|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $add$ptr = 0, $add$ptr20 = 0, $add$ptr7 = 0, $cmp = 0, $cmp1 = 0, $cmp11 = 0, $cmp18 = 0, $cmp3 = 0, $cmp32 = 0, $cmp9 = 0, $conv = 0, $conv12 = 0, $conv34 = 0, $conv5 = 0, $first$addr$2 = 0, $first$pn = 0;
 var $incdec$ptr = 0, $incdec$ptr15 = 0, $isdigit = 0, $isdigit27 = 0, $isdigit29 = 0, $isdigit31 = 0, $isdigittmp = 0, $isdigittmp26 = 0, $isdigittmp28 = 0, $isdigittmp30 = 0, $spec$select = 0, $t1$0 = 0, $t129$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($first|0)==($last|0);
 L1: do {
  if ($cmp) {
   $first$addr$2 = $first;
  } else {
   $0 = HEAP8[$first>>0]|0;
   $cmp1 = ($0<<24>>24)==(95);
   if (!($cmp1)) {
    $conv = $0 << 24 >> 24;
    $isdigittmp = (($conv) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    if (!($isdigit)) {
     $first$addr$2 = $first;
     break;
    }
    $first$pn = $first;
    while(1) {
     $t129$0 = ((($first$pn)) + 1|0);
     $cmp32 = ($t129$0|0)==($last|0);
     if ($cmp32) {
      $first$addr$2 = $last;
      break L1;
     }
     $3 = HEAP8[$t129$0>>0]|0;
     $conv34 = $3 << 24 >> 24;
     $isdigittmp26 = (($conv34) + -48)|0;
     $isdigit27 = ($isdigittmp26>>>0)<(10);
     if ($isdigit27) {
      $first$pn = $t129$0;
     } else {
      $first$addr$2 = $first;
      break L1;
     }
    }
   }
   $add$ptr = ((($first)) + 1|0);
   $cmp3 = ($add$ptr|0)==($last|0);
   if ($cmp3) {
    $first$addr$2 = $first;
   } else {
    $1 = HEAP8[$add$ptr>>0]|0;
    $conv5 = $1 << 24 >> 24;
    $isdigittmp28 = (($conv5) + -48)|0;
    $isdigit29 = ($isdigittmp28>>>0)<(10);
    if ($isdigit29) {
     $add$ptr7 = ((($first)) + 2|0);
     $first$addr$2 = $add$ptr7;
     break;
    }
    $cmp9 = ($1<<24>>24)==(95);
    if ($cmp9) {
     $incdec$ptr = ((($first)) + 2|0);
     $t1$0 = $incdec$ptr;
     while(1) {
      $cmp11 = ($t1$0|0)==($last|0);
      if ($cmp11) {
       $first$addr$2 = $first;
       break L1;
      }
      $2 = HEAP8[$t1$0>>0]|0;
      $conv12 = $2 << 24 >> 24;
      $isdigittmp30 = (($conv12) + -48)|0;
      $isdigit31 = ($isdigittmp30>>>0)<(10);
      if (!($isdigit31)) {
       break;
      }
      $incdec$ptr15 = ((($t1$0)) + 1|0);
      $t1$0 = $incdec$ptr15;
     }
     $cmp18 = ($2<<24>>24)==(95);
     $add$ptr20 = ((($t1$0)) + 1|0);
     $spec$select = $cmp18 ? $add$ptr20 : $first;
     return ($spec$select|0);
    } else {
     $first$addr$2 = $first;
    }
   }
  }
 } while(0);
 return ($first$addr$2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9LocalNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9LocalNameEJRPNS2_4NodeES6_EEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9LocalNameEJRPNS2_4NodeES6_EEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = HEAP32[$args1>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle9LocalNameC2EPNS0_4NodeES3_($call,$0,$1);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle9LocalNameC2EPNS0_4NodeES3_($this,$Encoding_,$Entity_) {
 $this = $this|0;
 $Encoding_ = $Encoding_|0;
 $Entity_ = $Entity_|0;
 var $Encoding = 0, $Entity = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,24,1,1,1);
 HEAP32[$this>>2] = (6280);
 $Encoding = ((($this)) + 8|0);
 HEAP32[$Encoding>>2] = $Encoding_;
 $Entity = ((($this)) + 12|0);
 HEAP32[$Entity>>2] = $Entity_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle9LocalName9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $Encoding = 0, $Entity = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $Encoding = ((($this)) + 8|0);
 $0 = HEAP32[$Encoding>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,25712);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Entity = ((($this)) + 12|0);
 $1 = HEAP32[$Entity>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($1,$S);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle9LocalNameD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseNestedNameEPNS5_9NameStateEENKUlPNS0_4NodeEE_clES9_($this,$Comp) {
 $this = $this|0;
 $Comp = $Comp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Comp$addr = 0, $EndsWithTemplateArgs = 0, $call = 0, $cmp = 0, $retval$0 = 0, $tobool = 0, $tobool2 = 0, $tobool5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $Comp$addr = sp;
 HEAP32[$Comp$addr>>2] = $Comp;
 $0 = HEAP32[$this>>2]|0;
 $tobool = ($Comp|0)==(0|0);
 if ($tobool) {
  $retval$0 = 0;
 } else {
  $1 = ((($this)) + 4|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = HEAP32[$2>>2]|0;
  $tobool2 = ($3|0)==(0|0);
  if ($tobool2) {
   HEAP32[$2>>2] = $Comp;
  } else {
   $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10NestedNameEJRPNS0_4NodeESA_EEES9_DpOT0_($0,$2,$Comp$addr)|0);
   $4 = HEAP32[$1>>2]|0;
   HEAP32[$4>>2] = $call;
  }
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP32[$6>>2]|0;
  $tobool5 = ($7|0)==(0|0);
  if (!($tobool5)) {
   $EndsWithTemplateArgs = ((($7)) + 1|0);
   HEAP8[$EndsWithTemplateArgs>>0] = 0;
  }
  $8 = HEAP32[$1>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $cmp = ($9|0)!=(0|0);
  $retval$0 = $cmp;
 }
 STACKTOP = sp;return ($retval$0|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E17parseCtorDtorNameERPNS0_4NodeEPNS5_9NameStateE($this,$SoFar,$State) {
 $this = $this|0;
 $SoFar = $SoFar|0;
 $State = $State|0;
 var $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $SSK = 0, $SSK2 = 0, $Variant = 0, $Variant61 = 0, $add$ptr = 0, $call = 0, $call3 = 0, $call32 = 0, $call33 = 0, $call38 = 0, $call42 = 0, $call46 = 0, $call6 = 0, $call71 = 0, $call8 = 0;
 var $call9 = 0, $cmp = 0, $cmp34 = 0, $cmp44 = 0, $conv26 = 0, $conv63 = 0, $incdec$ptr = 0, $ref$tmp = 0, $ref$tmp70 = 0, $retval$1 = 0, $retval$3 = 0, $sub = 0, $sub64 = 0, $switch = 0, $tobool27 = 0, $tobool66 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $SSK = sp + 8|0;
 $Variant = sp + 4|0;
 $ref$tmp = sp + 13|0;
 $Variant61 = sp;
 $ref$tmp70 = sp + 12|0;
 $0 = HEAP32[$SoFar>>2]|0;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle4Node7getKindEv($0)|0);
 $cmp = ($call<<24>>24)==(36);
 if ($cmp) {
  $SSK2 = ((($0)) + 8|0);
  $1 = HEAP32[$SSK2>>2]|0;
  HEAP32[$SSK>>2] = $1;
  $$off = (($1) + -2)|0;
  $switch = ($$off>>>0)<(4);
  if ($switch) {
   $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_27ExpandedSpecialSubstitutionEJRNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_($this,$SSK)|0);
   HEAP32[$SoFar>>2] = $call3;
  }
 }
 $call6 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,67)|0);
 L7: do {
  if ($call6) {
   $call8 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,73)|0);
   $call9 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
   switch ($call9<<24>>24) {
   case 53: case 51: case 50: case 49:  {
    break;
   }
   default: {
    $retval$3 = 0;
    break L7;
   }
   }
   $conv26 = $call9 << 24 >> 24;
   $sub = (($conv26) + -48)|0;
   HEAP32[$Variant>>2] = $sub;
   $2 = HEAP32[$this>>2]|0;
   $incdec$ptr = ((($2)) + 1|0);
   HEAP32[$this>>2] = $incdec$ptr;
   $tobool27 = ($State|0)==(0|0);
   if (!($tobool27)) {
    HEAP8[$State>>0] = 1;
   }
   if ($call8) {
    $call32 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call33 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE($call32,$State)|0);
    $cmp34 = ($call33|0)==(0|0);
    if ($cmp34) {
     $retval$1 = 0;
    } else {
     label = 11;
    }
   } else {
    label = 11;
   }
   if ((label|0) == 11) {
    HEAP8[$ref$tmp>>0] = 0;
    $call38 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12CtorDtorNameEJRPNS0_4NodeEbRiEEES9_DpOT0_($this,$SoFar,$ref$tmp,$Variant)|0);
    $retval$1 = $call38;
   }
   $retval$3 = $retval$1;
  } else {
   $call42 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
   $cmp44 = ($call42<<24>>24)==(68);
   if ($cmp44) {
    $call46 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
    switch ($call46<<24>>24) {
    case 53: case 50: case 49: case 48:  {
     break;
    }
    default: {
     $retval$3 = 0;
     break L7;
    }
    }
    $conv63 = $call46 << 24 >> 24;
    $sub64 = (($conv63) + -48)|0;
    HEAP32[$Variant61>>2] = $sub64;
    $3 = HEAP32[$this>>2]|0;
    $add$ptr = ((($3)) + 2|0);
    HEAP32[$this>>2] = $add$ptr;
    $tobool66 = ($State|0)==(0|0);
    if (!($tobool66)) {
     HEAP8[$State>>0] = 1;
    }
    HEAP8[$ref$tmp70>>0] = 1;
    $call71 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12CtorDtorNameEJRPNS0_4NodeEbRiEEES9_DpOT0_($this,$SoFar,$ref$tmp70,$Variant61)|0);
    $retval$3 = $call71;
   } else {
    $retval$3 = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($retval$3|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EE8pop_backEv($this) {
 $this = $this|0;
 var $0 = 0, $Last = 0, $incdec$ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Last = ((($this)) + 4|0);
 $0 = HEAP32[$Last>>2]|0;
 $incdec$ptr = ((($0)) + -4|0);
 HEAP32[$Last>>2] = $incdec$ptr;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_27ExpandedSpecialSubstitutionEJRNS0_14SpecialSubKindEEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle27ExpandedSpecialSubstitutionEJRNS2_14SpecialSubKindEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12CtorDtorNameEJRPNS0_4NodeEbRiEEES9_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $ASTAllocator = 0, $call8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call8 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12CtorDtorNameEJRPNS2_4NodeEbRiEEEPT_DpOT0_($ASTAllocator,$args,$args1,$args3)|0);
 return ($call8|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12CtorDtorNameEJRPNS2_4NodeEbRiEEEPT_DpOT0_($this,$args,$args1,$args3) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = HEAP8[$args1>>0]|0;
 $tobool = ($1<<24>>24)!=(0);
 $2 = HEAP32[$args3>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle12CtorDtorNameC2EPKNS0_4NodeEbi($call,$0,$tobool,$2);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle12CtorDtorNameC2EPKNS0_4NodeEbi($this,$Basename_,$IsDtor_,$Variant_) {
 $this = $this|0;
 $Basename_ = $Basename_|0;
 $IsDtor_ = $IsDtor_|0;
 $Variant_ = $Variant_|0;
 var $Basename = 0, $IsDtor = 0, $Variant = 0, $frombool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $frombool = $IsDtor_&1;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,37,1,1,1);
 HEAP32[$this>>2] = (6324);
 $Basename = ((($this)) + 8|0);
 HEAP32[$Basename>>2] = $Basename_;
 $IsDtor = ((($this)) + 12|0);
 HEAP8[$IsDtor>>0] = $frombool;
 $Variant = ((($this)) + 16|0);
 HEAP32[$Variant>>2] = $Variant_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle12CtorDtorName9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $2 = 0, $Basename = 0, $IsDtor = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $tobool = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp2$byval_copy = sp + 24|0;
 $agg$tmp$byval_copy = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp2 = sp;
 $IsDtor = ((($this)) + 12|0);
 $0 = HEAP8[$IsDtor>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if (!($tobool)) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,24699);
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 }
 $Basename = ((($this)) + 8|0);
 $1 = HEAP32[$Basename>>2]|0;
 $vtable = HEAP32[$1>>2]|0;
 $vfn = ((($vtable)) + 24|0);
 $2 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vii[$2 & 255]($agg$tmp2,$1);
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$agg$tmp2$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp2$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle12CtorDtorNameD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle27ExpandedSpecialSubstitutionEJRNS2_14SpecialSubKindEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,12)|0);
 $0 = HEAP32[$args>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitutionC2ENS0_14SpecialSubKindE($call,$0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitutionC2ENS0_14SpecialSubKindE($this,$SSK_) {
 $this = $this|0;
 $SSK_ = $SSK_|0;
 var $SSK = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,35,1,1,1);
 HEAP32[$this>>2] = (6368);
 $SSK = ((($this)) + 8|0);
 HEAP32[$SSK>>2] = $SSK_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitution9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $SSK = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp12 = 0, $agg$tmp12$byval_copy = 0, $agg$tmp15 = 0, $agg$tmp15$byval_copy = 0, $agg$tmp3 = 0, $agg$tmp3$byval_copy = 0, $agg$tmp6 = 0, $agg$tmp6$byval_copy = 0, $agg$tmp9 = 0, $agg$tmp9$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $agg$tmp15$byval_copy = sp + 88|0;
 $agg$tmp12$byval_copy = sp + 80|0;
 $agg$tmp9$byval_copy = sp + 72|0;
 $agg$tmp6$byval_copy = sp + 64|0;
 $agg$tmp3$byval_copy = sp + 56|0;
 $agg$tmp$byval_copy = sp + 48|0;
 $agg$tmp = sp + 40|0;
 $agg$tmp3 = sp + 32|0;
 $agg$tmp6 = sp + 24|0;
 $agg$tmp9 = sp + 16|0;
 $agg$tmp12 = sp + 8|0;
 $agg$tmp15 = sp;
 $SSK = ((($this)) + 8|0);
 $0 = HEAP32[$SSK>>2]|0;
 switch ($0|0) {
 case 0:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,23744);
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
  break;
 }
 case 1:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp3,23759);
  ;HEAP32[$agg$tmp3$byval_copy>>2]=HEAP32[$agg$tmp3>>2]|0;HEAP32[$agg$tmp3$byval_copy+4>>2]=HEAP32[$agg$tmp3+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp3$byval_copy);
  break;
 }
 case 2:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6,27546);
  ;HEAP32[$agg$tmp6$byval_copy>>2]=HEAP32[$agg$tmp6>>2]|0;HEAP32[$agg$tmp6$byval_copy+4>>2]=HEAP32[$agg$tmp6+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp6$byval_copy);
  break;
 }
 case 3:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp9,27617);
  ;HEAP32[$agg$tmp9$byval_copy>>2]=HEAP32[$agg$tmp9>>2]|0;HEAP32[$agg$tmp9$byval_copy+4>>2]=HEAP32[$agg$tmp9+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp9$byval_copy);
  break;
 }
 case 4:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp12,27667);
  ;HEAP32[$agg$tmp12$byval_copy>>2]=HEAP32[$agg$tmp12>>2]|0;HEAP32[$agg$tmp12$byval_copy+4>>2]=HEAP32[$agg$tmp12+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp12$byval_copy);
  break;
 }
 case 5:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp15,27717);
  ;HEAP32[$agg$tmp15$byval_copy>>2]=HEAP32[$agg$tmp15>>2]|0;HEAP32[$agg$tmp15$byval_copy+4>>2]=HEAP32[$agg$tmp15+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp15$byval_copy);
  break;
 }
 default: {
 }
 }
 STACKTOP = sp;return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitution11getBaseNameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $SSK = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $SSK = ((($this)) + 8|0);
 $0 = HEAP32[$SSK>>2]|0;
 switch ($0|0) {
 case 0:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result,23689);
  break;
 }
 case 1:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result,23699);
  break;
 }
 case 2:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result,23699);
  break;
 }
 case 3:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result,27503);
  break;
 }
 case 4:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result,27517);
  break;
 }
 case 5:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$result,27531);
  break;
 }
 default: {
  // unreachable;
 }
 }
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitutionD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10NestedNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10NestedNameEJRPNS2_4NodeES6_EEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10NestedNameEJRPNS2_4NodeES6_EEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = HEAP32[$args1>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle10NestedNameC2EPNS0_4NodeES3_($call,$0,$1);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle10NestedNameC2EPNS0_4NodeES3_($this,$Qual_,$Name_) {
 $this = $this|0;
 $Qual_ = $Qual_|0;
 $Name_ = $Name_|0;
 var $Name = 0, $Qual = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,23,1,1,1);
 HEAP32[$this>>2] = (6412);
 $Qual = ((($this)) + 8|0);
 HEAP32[$Qual>>2] = $Qual_;
 $Name = ((($this)) + 12|0);
 HEAP32[$Name>>2] = $Name_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle10NestedName9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $Name = 0, $Qual = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $Qual = ((($this)) + 8|0);
 $0 = HEAP32[$Qual>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,25712);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Name = ((($this)) + 12|0);
 $1 = HEAP32[$Name>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($1,$S);
 STACKTOP = sp;return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle10NestedName11getBaseNameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $Name = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Name = ((($this)) + 12|0);
 $0 = HEAP32[$Name>>2]|0;
 $vtable = HEAP32[$0>>2]|0;
 $vfn = ((($vtable)) + 24|0);
 $1 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vii[$1 & 255]($agg$result,$0);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle10NestedNameD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_19PointerToMemberTypeEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19PointerToMemberTypeEJRPNS2_4NodeES6_EEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle19PointerToMemberTypeEJRPNS2_4NodeES6_EEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = HEAP32[$args1>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle19PointerToMemberTypeC2EPKNS0_4NodeES4_($call,$0,$1);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle19PointerToMemberTypeC2EPKNS0_4NodeES4_($this,$ClassType_,$MemberType_) {
 $this = $this|0;
 $ClassType_ = $ClassType_|0;
 $MemberType_ = $MemberType_|0;
 var $0 = 0, $ClassType = 0, $MemberType = 0, $RHSComponentCache = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $RHSComponentCache = ((($MemberType_)) + 5|0);
 $0 = HEAP8[$RHSComponentCache>>0]|0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,13,$0,1,1);
 HEAP32[$this>>2] = (6456);
 $ClassType = ((($this)) + 8|0);
 HEAP32[$ClassType>>2] = $ClassType_;
 $MemberType = ((($this)) + 12|0);
 HEAP32[$MemberType>>2] = $MemberType_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle19PointerToMemberType19hasRHSComponentSlowERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $MemberType = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $MemberType = ((($this)) + 12|0);
 $0 = HEAP32[$MemberType>>2]|0;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE($0,$S)|0);
 return ($call|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle19PointerToMemberType9printLeftERNS_12OutputStreamE($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $ClassType = 0, $MemberType = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp6 = 0, $agg$tmp6$byval_copy = 0, $agg$tmp8 = 0, $agg$tmp8$byval_copy = 0, $call = 0, $call4 = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp8$byval_copy = sp + 40|0;
 $agg$tmp6$byval_copy = sp + 32|0;
 $agg$tmp$byval_copy = sp + 24|0;
 $agg$tmp = sp + 16|0;
 $agg$tmp6 = sp + 8|0;
 $agg$tmp8 = sp;
 $MemberType = ((($this)) + 12|0);
 $0 = HEAP32[$MemberType>>2]|0;
 $vtable = HEAP32[$0>>2]|0;
 $vfn = ((($vtable)) + 16|0);
 $1 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vii[$1 & 255]($0,$s);
 $2 = HEAP32[$MemberType>>2]|0;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE($2,$s)|0);
 if ($call) {
  label = 3;
 } else {
  $3 = HEAP32[$MemberType>>2]|0;
  $call4 = (__ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE($3,$s)|0);
  if ($call4) {
   label = 3;
  } else {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6,23964);
   ;HEAP32[$agg$tmp6$byval_copy>>2]=HEAP32[$agg$tmp6>>2]|0;HEAP32[$agg$tmp6$byval_copy+4>>2]=HEAP32[$agg$tmp6+4>>2]|0;
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$agg$tmp6$byval_copy);
  }
 }
 if ((label|0) == 3) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,23966);
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$agg$tmp$byval_copy);
 }
 $ClassType = ((($this)) + 8|0);
 $4 = HEAP32[$ClassType>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($4,$s);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp8,27879);
 ;HEAP32[$agg$tmp8$byval_copy>>2]=HEAP32[$agg$tmp8>>2]|0;HEAP32[$agg$tmp8$byval_copy+4>>2]=HEAP32[$agg$tmp8+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$agg$tmp8$byval_copy);
 STACKTOP = sp;return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle19PointerToMemberType10printRightERNS_12OutputStreamE($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $MemberType = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $call3 = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $MemberType = ((($this)) + 12|0);
 $0 = HEAP32[$MemberType>>2]|0;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE($0,$s)|0);
 if ($call) {
  label = 3;
 } else {
  $1 = HEAP32[$MemberType>>2]|0;
  $call3 = (__ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE($1,$s)|0);
  if ($call3) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,23962);
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$agg$tmp$byval_copy);
 }
 $2 = HEAP32[$MemberType>>2]|0;
 $vtable = HEAP32[$2>>2]|0;
 $vfn = ((($vtable)) + 20|0);
 $3 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vii[$3 & 255]($2,$s);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle19PointerToMemberTypeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2Ev($this) {
 $this = $this|0;
 var $Second = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $Second = ((($this)) + 4|0);
 HEAP32[$Second>>2] = 0;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2ENS_10StringViewE($this,$Str) {
 $this = $this|0;
 $Str = $Str|0;
 var $FirstChar$0 = 0, $Second = 0, $SecondChar$0 = 0, $call = 0, $call2 = 0, $cmp = 0, $incdec$ptr = 0, $incdec$ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNK12_GLOBAL__N_110StringView5beginEv($Str)|0);
 $call2 = (__ZNK12_GLOBAL__N_110StringView3endEv($Str)|0);
 $cmp = ($call2|0)==(0|0);
 $incdec$ptr = ((($call)) + 1|0);
 $incdec$ptr3 = ((($call2)) + 1|0);
 $FirstChar$0 = $cmp ? $incdec$ptr : $call;
 $SecondChar$0 = $cmp ? $incdec$ptr3 : $call2;
 HEAP32[$this>>2] = $FirstChar$0;
 $Second = ((($this)) + 4|0);
 HEAP32[$Second>>2] = $SecondChar$0;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2EPNS0_4NodeE($this,$N) {
 $this = $this|0;
 $N = $N|0;
 var $Second = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = $N;
 $Second = ((($this)) + 4|0);
 HEAP32[$Second>>2] = 0;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_9ArrayTypeEJRPNS0_4NodeERNS0_12NodeOrStringEEEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9ArrayTypeEJRPNS2_4NodeERNS2_12NodeOrStringEEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9ArrayTypeEJRPNS2_4NodeERNS2_12NodeOrStringEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = $args1;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle9ArrayTypeC2EPKNS0_4NodeENS0_12NodeOrStringE($call,$0,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle9ArrayTypeC2EPKNS0_4NodeENS0_12NodeOrStringE($this,$Base_,$Dimension_) {
 $this = $this|0;
 $Base_ = $Base_|0;
 $Dimension_ = $Dimension_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Base = 0, $Dimension = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,14,0,0,1);
 HEAP32[$this>>2] = (6500);
 $Base = ((($this)) + 8|0);
 HEAP32[$Base>>2] = $Base_;
 $Dimension = ((($this)) + 12|0);
 $0 = $Dimension_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Dimension;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle9ArrayType19hasRHSComponentSlowERNS_12OutputStreamE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK12_GLOBAL__N_116itanium_demangle9ArrayType12hasArraySlowERNS_12OutputStreamE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK12_GLOBAL__N_116itanium_demangle9ArrayType9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $Base = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Base = ((($this)) + 8|0);
 $0 = HEAP32[$Base>>2]|0;
 $vtable = HEAP32[$0>>2]|0;
 $vfn = ((($vtable)) + 16|0);
 $1 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vii[$1 & 255]($0,$S);
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle9ArrayType10printRightERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $Base = 0, $Dimension = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp17 = 0, $agg$tmp17$byval_copy = 0, $agg$tmp3 = 0, $agg$tmp3$byval_copy = 0, $agg$tmp7 = 0, $agg$tmp7$byval_copy = 0, $call = 0, $call11 = 0, $call14 = 0, $call5 = 0, $cmp = 0, $vfn = 0, $vtable = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $agg$tmp17$byval_copy = sp + 56|0;
 $agg$tmp7$byval_copy = sp + 48|0;
 $agg$tmp3$byval_copy = sp + 40|0;
 $agg$tmp$byval_copy = sp + 32|0;
 $agg$tmp = sp + 24|0;
 $agg$tmp3 = sp + 16|0;
 $agg$tmp7 = sp + 8|0;
 $agg$tmp17 = sp;
 $call = (__ZNK12_GLOBAL__N_112OutputStream4backEv($S)|0);
 $cmp = ($call<<24>>24)==(93);
 if (!($cmp)) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,23964);
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 }
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp3,27939);
 ;HEAP32[$agg$tmp3$byval_copy>>2]=HEAP32[$agg$tmp3>>2]|0;HEAP32[$agg$tmp3$byval_copy+4>>2]=HEAP32[$agg$tmp3+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp3$byval_copy);
 $Dimension = ((($this)) + 12|0);
 $call5 = (__ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString8isStringEv($Dimension)|0);
 if ($call5) {
  __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString8asStringEv($agg$tmp7,$Dimension);
  ;HEAP32[$agg$tmp7$byval_copy>>2]=HEAP32[$agg$tmp7>>2]|0;HEAP32[$agg$tmp7$byval_copy+4>>2]=HEAP32[$agg$tmp7+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp7$byval_copy);
 } else {
  $call11 = (__ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString6isNodeEv($Dimension)|0);
  if ($call11) {
   $call14 = (__ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString6asNodeEv($Dimension)|0);
   __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($call14,$S);
  }
 }
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp17,23570);
 ;HEAP32[$agg$tmp17$byval_copy>>2]=HEAP32[$agg$tmp17>>2]|0;HEAP32[$agg$tmp17$byval_copy+4>>2]=HEAP32[$agg$tmp17+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp17$byval_copy);
 $Base = ((($this)) + 8|0);
 $0 = HEAP32[$Base>>2]|0;
 $vtable = HEAP32[$0>>2]|0;
 $vfn = ((($vtable)) + 20|0);
 $1 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vii[$1 & 255]($0,$S);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle9ArrayTypeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString8isStringEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $Second = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Second = ((($this)) + 4|0);
 $0 = HEAP32[$Second>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  $2 = 0;
 } else {
  $1 = HEAP32[$this>>2]|0;
  $tobool2 = ($1|0)!=(0|0);
  $2 = $tobool2;
 }
 return ($2|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString8asStringEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $Second = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $Second = ((($this)) + 4|0);
 $1 = HEAP32[$Second>>2]|0;
 __ZN12_GLOBAL__N_110StringViewC2EPKcS2_($agg$result,$0,$1);
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString6isNodeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $Second = 0, $tobool = 0, $tobool2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $tobool = ($0|0)==(0|0);
 if ($tobool) {
  $2 = 0;
 } else {
  $Second = ((($this)) + 4|0);
  $1 = HEAP32[$Second>>2]|0;
  $tobool2 = ($1|0)==(0|0);
  $2 = $tobool2;
 }
 return ($2|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString6asNodeEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 return ($0|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle22ParameterPackExpansionEJRPNS2_4NodeEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,12)|0);
 $0 = HEAP32[$args>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle22ParameterPackExpansionC2EPKNS0_4NodeE($call,$0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_15PixelVectorTypeEJRNS_10StringViewEEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15PixelVectorTypeEJRNS_10StringViewEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10VectorTypeEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10VectorTypeEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10VectorTypeEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10VectorTypeEJRPNS2_4NodeES6_EEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_10VectorTypeEJRPNS0_4NodeENS_10StringViewEEEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10VectorTypeEJRPNS2_4NodeENS_10StringViewEEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10VectorTypeEJRPNS2_4NodeENS_10StringViewEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp5 = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp$byval_copy = sp + 24|0;
 $tmpcast$byval_copy = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp5 = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = $args1;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp5;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp5>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp5+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2ENS_10StringViewE($agg$tmp,$tmpcast$byval_copy);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle10VectorTypeC2EPKNS0_4NodeENS0_12NodeOrStringE($call,$0,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle10VectorTypeC2EPKNS0_4NodeENS0_12NodeOrStringE($this,$BaseType_,$Dimension_) {
 $this = $this|0;
 $BaseType_ = $BaseType_|0;
 $Dimension_ = $Dimension_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $BaseType = 0, $Dimension = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,25,1,1,1);
 HEAP32[$this>>2] = (6544);
 $BaseType = ((($this)) + 8|0);
 HEAP32[$BaseType>>2] = $BaseType_;
 $Dimension = ((($this)) + 12|0);
 $0 = $Dimension_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Dimension;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle10VectorType9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $BaseType = 0, $Dimension = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp12 = 0, $agg$tmp12$byval_copy = 0, $agg$tmp8 = 0, $agg$tmp8$byval_copy = 0, $call2 = 0, $call4 = 0, $call6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp12$byval_copy = sp + 40|0;
 $agg$tmp8$byval_copy = sp + 32|0;
 $agg$tmp$byval_copy = sp + 24|0;
 $agg$tmp = sp + 16|0;
 $agg$tmp8 = sp + 8|0;
 $agg$tmp12 = sp;
 $BaseType = ((($this)) + 8|0);
 $0 = HEAP32[$BaseType>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,27989);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Dimension = ((($this)) + 12|0);
 $call2 = (__ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString6isNodeEv($Dimension)|0);
 if ($call2) {
  $call4 = (__ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString6asNodeEv($Dimension)|0);
  __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($call4,$S);
 } else {
  $call6 = (__ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString8isStringEv($Dimension)|0);
  if ($call6) {
   __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString8asStringEv($agg$tmp8,$Dimension);
   ;HEAP32[$agg$tmp8$byval_copy>>2]=HEAP32[$agg$tmp8>>2]|0;HEAP32[$agg$tmp8$byval_copy+4>>2]=HEAP32[$agg$tmp8+4>>2]|0;
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp8$byval_copy);
  }
 }
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp12,23570);
 ;HEAP32[$agg$tmp12$byval_copy>>2]=HEAP32[$agg$tmp12>>2]|0;HEAP32[$agg$tmp12$byval_copy+4>>2]=HEAP32[$agg$tmp12+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp12$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle10VectorTypeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10VectorTypeEJRPNS2_4NodeES6_EEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = HEAP32[$args1>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2EPNS0_4NodeE($agg$tmp,$1);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle10VectorTypeC2EPKNS0_4NodeENS0_12NodeOrStringE($call,$0,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle10VectorTypeEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp5 = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp$byval_copy = sp + 24|0;
 $tmpcast$byval_copy = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp5 = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = $args1;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp5;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp5>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp5+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2ENS_10StringViewE($agg$tmp,$tmpcast$byval_copy);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle10VectorTypeC2EPKNS0_4NodeENS0_12NodeOrStringE($call,$0,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle15PixelVectorTypeEJRNS_10StringViewEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp$byval_copy = sp + 24|0;
 $tmpcast$byval_copy = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp2 = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp2;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle12NodeOrStringC2ENS_10StringViewE($agg$tmp,$tmpcast$byval_copy);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle15PixelVectorTypeC2ENS0_12NodeOrStringE($call,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle15PixelVectorTypeC2ENS0_12NodeOrStringE($this,$Dimension_) {
 $this = $this|0;
 $Dimension_ = $Dimension_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Dimension = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,26,1,1,1);
 HEAP32[$this>>2] = (6588);
 $Dimension = ((($this)) + 8|0);
 $0 = $Dimension_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Dimension;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle15PixelVectorType9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $Dimension = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp4$byval_copy = sp + 40|0;
 $agg$tmp2$byval_copy = sp + 32|0;
 $agg$tmp$byval_copy = sp + 24|0;
 $agg$tmp = sp + 16|0;
 $agg$tmp2 = sp + 8|0;
 $agg$tmp4 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,28045);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Dimension = ((($this)) + 8|0);
 __ZNK12_GLOBAL__N_116itanium_demangle12NodeOrString8asStringEv($agg$tmp2,$Dimension);
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$agg$tmp2$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp2$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4,23570);
 ;HEAP32[$agg$tmp4$byval_copy>>2]=HEAP32[$agg$tmp4>>2]|0;HEAP32[$agg$tmp4$byval_copy+4>>2]=HEAP32[$agg$tmp4+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp4$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle15PixelVectorTypeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRNS_10StringViewEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA11_KcEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA7_KcEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA18_KcEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA9_KcEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA19_KcEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA10_KcEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA13_KcEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA4_KcEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA15_KcEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA6_KcEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA14_KcEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA12_KcEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA8_KcEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8NameTypeEJRA5_KcEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8NameTypeC2ENS_10StringViewE($call,$agg$tmp$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_114SwapAndRestoreIPKcEC2ERS2_S2_($this,$Restore_,$NewVal) {
 $this = $this|0;
 $Restore_ = $Restore_|0;
 $NewVal = $NewVal|0;
 var $0 = 0, $1 = 0, $OriginalValue = 0, $ShouldRestore = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $NewVal;
 HEAP32[$this>>2] = $Restore_;
 $OriginalValue = ((($this)) + 4|0);
 $1 = HEAP32[$Restore_>>2]|0;
 HEAP32[$OriginalValue>>2] = $1;
 $ShouldRestore = ((($this)) + 8|0);
 HEAP8[$ShouldRestore>>0] = 1;
 HEAP32[$Restore_>>2] = $0;
 return;
}
function __ZN12_GLOBAL__N_114SwapAndRestoreIPKcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $OriginalValue = 0, $ShouldRestore = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ShouldRestore = ((($this)) + 8|0);
 $0 = HEAP8[$ShouldRestore>>0]|0;
 $tobool = ($0<<24>>24)==(0);
 if (!($tobool)) {
  $OriginalValue = ((($this)) + 4|0);
  $1 = HEAP32[$OriginalValue>>2]|0;
  $2 = HEAP32[$this>>2]|0;
  HEAP32[$2>>2] = $1;
 }
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_13ObjCProtoNameEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13ObjCProtoNameEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_17VendorExtQualTypeEJRPNS0_4NodeERNS_10StringViewEEEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle17VendorExtQualTypeEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_8QualTypeEJRPNS0_4NodeERNS0_10QualifiersEEEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8QualTypeEJRPNS2_4NodeERNS2_10QualifiersEEEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle8QualTypeEJRPNS2_4NodeERNS2_10QualifiersEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = HEAP32[$args1>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle8QualTypeC2EPKNS0_4NodeENS0_10QualifiersE($call,$0,$1);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle8QualTypeC2EPKNS0_4NodeENS0_10QualifiersE($this,$Child_,$Quals_) {
 $this = $this|0;
 $Child_ = $Child_|0;
 $Quals_ = $Quals_|0;
 var $0 = 0, $1 = 0, $2 = 0, $ArrayCache = 0, $Child = 0, $FunctionCache = 0, $Quals = 0, $RHSComponentCache = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $RHSComponentCache = ((($Child_)) + 5|0);
 $0 = HEAP8[$RHSComponentCache>>0]|0;
 $ArrayCache = ((($Child_)) + 6|0);
 $1 = HEAP8[$ArrayCache>>0]|0;
 $FunctionCache = ((($Child_)) + 7|0);
 $2 = HEAP8[$FunctionCache>>0]|0;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,3,$0,$1,$2);
 HEAP32[$this>>2] = (6632);
 $Quals = ((($this)) + 8|0);
 HEAP32[$Quals>>2] = $Quals_;
 $Child = ((($this)) + 12|0);
 HEAP32[$Child>>2] = $Child_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle8QualType19hasRHSComponentSlowERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $Child = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Child = ((($this)) + 12|0);
 $0 = HEAP32[$Child>>2]|0;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE($0,$S)|0);
 return ($call|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle8QualType12hasArraySlowERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $Child = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Child = ((($this)) + 12|0);
 $0 = HEAP32[$Child>>2]|0;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle4Node8hasArrayERNS_12OutputStreamE($0,$S)|0);
 return ($call|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle8QualType15hasFunctionSlowERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $Child = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Child = ((($this)) + 12|0);
 $0 = HEAP32[$Child>>2]|0;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle4Node11hasFunctionERNS_12OutputStreamE($0,$S)|0);
 return ($call|0);
}
function __ZNK12_GLOBAL__N_116itanium_demangle8QualType9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $Child = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Child = ((($this)) + 12|0);
 $0 = HEAP32[$Child>>2]|0;
 $vtable = HEAP32[$0>>2]|0;
 $vfn = ((($vtable)) + 16|0);
 $1 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vii[$1 & 255]($0,$S);
 __ZNK12_GLOBAL__N_116itanium_demangle8QualType10printQualsERNS_12OutputStreamE($this,$S);
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle8QualType10printRightERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $Child = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $Child = ((($this)) + 12|0);
 $0 = HEAP32[$Child>>2]|0;
 $vtable = HEAP32[$0>>2]|0;
 $vfn = ((($vtable)) + 20|0);
 $1 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vii[$1 & 255]($0,$S);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle8QualTypeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle8QualType10printQualsERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $2 = 0, $Quals = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp13 = 0, $agg$tmp13$byval_copy = 0, $agg$tmp6 = 0, $agg$tmp6$byval_copy = 0, $and = 0, $and10 = 0, $and3 = 0, $tobool = 0, $tobool11 = 0, $tobool4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp13$byval_copy = sp + 40|0;
 $agg$tmp6$byval_copy = sp + 32|0;
 $agg$tmp$byval_copy = sp + 24|0;
 $agg$tmp = sp + 16|0;
 $agg$tmp6 = sp + 8|0;
 $agg$tmp13 = sp;
 $Quals = ((($this)) + 8|0);
 $0 = HEAP32[$Quals>>2]|0;
 $and = $0 & 1;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $1 = $0;
 } else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,28157);
  ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
  $$pre = HEAP32[$Quals>>2]|0;
  $1 = $$pre;
 }
 $and3 = $1 & 2;
 $tobool4 = ($and3|0)==(0);
 if ($tobool4) {
  $2 = $1;
 } else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp6,28164);
  ;HEAP32[$agg$tmp6$byval_copy>>2]=HEAP32[$agg$tmp6>>2]|0;HEAP32[$agg$tmp6$byval_copy+4>>2]=HEAP32[$agg$tmp6+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp6$byval_copy);
  $$pre3 = HEAP32[$Quals>>2]|0;
  $2 = $$pre3;
 }
 $and10 = $2 & 4;
 $tobool11 = ($and10|0)==(0);
 if (!($tobool11)) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp13,28174);
  ;HEAP32[$agg$tmp13$byval_copy>>2]=HEAP32[$agg$tmp13>>2]|0;HEAP32[$agg$tmp13$byval_copy+4>>2]=HEAP32[$agg$tmp13+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp13$byval_copy);
 }
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle17VendorExtQualTypeEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = $args1;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle17VendorExtQualTypeC2EPKNS0_4NodeENS_10StringViewE($call,$0,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle17VendorExtQualTypeC2EPKNS0_4NodeENS_10StringViewE($this,$Ty_,$Ext_) {
 $this = $this|0;
 $Ty_ = $Ty_|0;
 $Ext_ = $Ext_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Ext = 0, $Ty = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,2,1,1,1);
 HEAP32[$this>>2] = (6676);
 $Ty = ((($this)) + 8|0);
 HEAP32[$Ty>>2] = $Ty_;
 $Ext = ((($this)) + 12|0);
 $0 = $Ext_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Ext;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle17VendorExtQualType9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Ext = 0, $Ty = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $tmpcast$byval_copy = sp + 24|0;
 $agg$tmp$byval_copy = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp2 = sp;
 $Ty = ((($this)) + 8|0);
 $0 = HEAP32[$Ty>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,23964);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Ext = ((($this)) + 12|0);
 $1 = $Ext;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp2;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle17VendorExtQualTypeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle13ObjCProtoNameEJRPNS2_4NodeERNS_10StringViewEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = $args1;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle13ObjCProtoNameC2EPKNS0_4NodeENS_10StringViewE($call,$0,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle13ObjCProtoNameC2EPKNS0_4NodeENS_10StringViewE($this,$Ty_,$Protocol_) {
 $this = $this|0;
 $Ty_ = $Ty_|0;
 $Protocol_ = $Protocol_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Protocol = 0, $Ty = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,10,1,1,1);
 HEAP32[$this>>2] = (6720);
 $Ty = ((($this)) + 8|0);
 HEAP32[$Ty>>2] = $Ty_;
 $Protocol = ((($this)) + 12|0);
 $0 = $Protocol_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Protocol;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle13ObjCProtoName9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Protocol = 0, $Ty = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, $tmpcast$byval_copy = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp4$byval_copy = sp + 40|0;
 $tmpcast$byval_copy = sp + 32|0;
 $agg$tmp$byval_copy = sp + 24|0;
 $agg$tmp = sp + 16|0;
 $agg$tmp2 = sp;
 $agg$tmp4 = sp + 8|0;
 $Ty = ((($this)) + 8|0);
 $0 = HEAP32[$Ty>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,24148);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Protocol = ((($this)) + 12|0);
 $1 = $Protocol;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp2;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4,24041);
 ;HEAP32[$agg$tmp4$byval_copy>>2]=HEAP32[$agg$tmp4>>2]|0;HEAP32[$agg$tmp4$byval_copy+4>>2]=HEAP32[$agg$tmp4+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp4$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle13ObjCProtoNameD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12NoexceptSpecEJRPNS0_4NodeEEEES9_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12NoexceptSpecEJRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_20DynamicExceptionSpecEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20DynamicExceptionSpecEJNS2_9NodeArrayEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12FunctionTypeEJRPNS0_4NodeERNS0_9NodeArrayERNS0_10QualifiersERNS0_15FunctionRefQualESA_EEES9_DpOT0_($this,$args,$args1,$args3,$args5,$args7) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 $args5 = $args5|0;
 $args7 = $args7|0;
 var $ASTAllocator = 0, $call14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call14 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12FunctionTypeEJRPNS2_4NodeERNS2_9NodeArrayERNS2_10QualifiersERNS2_15FunctionRefQualES6_EEEPT_DpOT0_($ASTAllocator,$args,$args1,$args3,$args5,$args7)|0);
 return ($call14|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12FunctionTypeEJRPNS2_4NodeERNS2_9NodeArrayERNS2_10QualifiersERNS2_15FunctionRefQualES6_EEEPT_DpOT0_($this,$args,$args1,$args3,$args5,$args7) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 $args5 = $args5|0;
 $args7 = $args7|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,32)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = $args1;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 $11 = HEAP32[$args3>>2]|0;
 $12 = HEAP8[$args5>>0]|0;
 $13 = HEAP32[$args7>>2]|0;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle12FunctionTypeC2EPKNS0_4NodeENS0_9NodeArrayENS0_10QualifiersENS0_15FunctionRefQualES4_($call,$0,$tmpcast$byval_copy,$11,$12,$13);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle12FunctionTypeC2EPKNS0_4NodeENS0_9NodeArrayENS0_10QualifiersENS0_15FunctionRefQualES4_($this,$Ret_,$Params_,$CVQuals_,$RefQual_,$ExceptionSpec_) {
 $this = $this|0;
 $Ret_ = $Ret_|0;
 $Params_ = $Params_|0;
 $CVQuals_ = $CVQuals_|0;
 $RefQual_ = $RefQual_|0;
 $ExceptionSpec_ = $ExceptionSpec_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $CVQuals = 0, $ExceptionSpec = 0, $Params = 0, $RefQual = 0, $Ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,15,0,1,0);
 HEAP32[$this>>2] = (6764);
 $Ret = ((($this)) + 8|0);
 HEAP32[$Ret>>2] = $Ret_;
 $Params = ((($this)) + 12|0);
 $0 = $Params_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Params;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $CVQuals = ((($this)) + 20|0);
 HEAP32[$CVQuals>>2] = $CVQuals_;
 $RefQual = ((($this)) + 24|0);
 HEAP8[$RefQual>>0] = $RefQual_;
 $ExceptionSpec = ((($this)) + 28|0);
 HEAP32[$ExceptionSpec>>2] = $ExceptionSpec_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle12FunctionType19hasRHSComponentSlowERNS_12OutputStreamE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK12_GLOBAL__N_116itanium_demangle12FunctionType15hasFunctionSlowERNS_12OutputStreamE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK12_GLOBAL__N_116itanium_demangle12FunctionType9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $Ret = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $Ret = ((($this)) + 8|0);
 $0 = HEAP32[$Ret>>2]|0;
 $vtable = HEAP32[$0>>2]|0;
 $vfn = ((($vtable)) + 16|0);
 $1 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vii[$1 & 255]($0,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,23964);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 STACKTOP = sp;return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle12FunctionType10printRightERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $$pre = 0, $$pre11 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $CVQuals = 0, $ExceptionSpec = 0, $Params = 0, $RefQual = 0, $Ret = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp10 = 0, $agg$tmp10$byval_copy = 0, $agg$tmp17 = 0;
 var $agg$tmp17$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, $agg$tmp21 = 0, $agg$tmp21$byval_copy = 0, $agg$tmp27 = 0, $agg$tmp27$byval_copy = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, $and = 0, $and14 = 0, $and7 = 0, $cmp31 = 0, $tobool = 0, $tobool15 = 0, $tobool8 = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $agg$tmp27$byval_copy = sp + 104|0;
 $agg$tmp21$byval_copy = sp + 96|0;
 $agg$tmp17$byval_copy = sp + 88|0;
 $agg$tmp10$byval_copy = sp + 80|0;
 $agg$tmp4$byval_copy = sp + 72|0;
 $agg$tmp2$byval_copy = sp + 64|0;
 $agg$tmp$byval_copy = sp + 56|0;
 $agg$tmp = sp + 48|0;
 $agg$tmp2 = sp + 40|0;
 $agg$tmp4 = sp + 32|0;
 $agg$tmp10 = sp + 24|0;
 $agg$tmp17 = sp + 16|0;
 $agg$tmp21 = sp + 8|0;
 $agg$tmp27 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,23966);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Params = ((($this)) + 12|0);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($Params,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2,23962);
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$agg$tmp2$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp2$byval_copy);
 $Ret = ((($this)) + 8|0);
 $0 = HEAP32[$Ret>>2]|0;
 $vtable = HEAP32[$0>>2]|0;
 $vfn = ((($vtable)) + 20|0);
 $1 = HEAP32[$vfn>>2]|0;
 FUNCTION_TABLE_vii[$1 & 255]($0,$S);
 $CVQuals = ((($this)) + 20|0);
 $2 = HEAP32[$CVQuals>>2]|0;
 $and = $2 & 1;
 $tobool = ($and|0)==(0);
 if ($tobool) {
  $3 = $2;
 } else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4,28157);
  ;HEAP32[$agg$tmp4$byval_copy>>2]=HEAP32[$agg$tmp4>>2]|0;HEAP32[$agg$tmp4$byval_copy+4>>2]=HEAP32[$agg$tmp4+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp4$byval_copy);
  $$pre = HEAP32[$CVQuals>>2]|0;
  $3 = $$pre;
 }
 $and7 = $3 & 2;
 $tobool8 = ($and7|0)==(0);
 if ($tobool8) {
  $4 = $3;
 } else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp10,28164);
  ;HEAP32[$agg$tmp10$byval_copy>>2]=HEAP32[$agg$tmp10>>2]|0;HEAP32[$agg$tmp10$byval_copy+4>>2]=HEAP32[$agg$tmp10+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp10$byval_copy);
  $$pre11 = HEAP32[$CVQuals>>2]|0;
  $4 = $$pre11;
 }
 $and14 = $4 & 4;
 $tobool15 = ($and14|0)==(0);
 if (!($tobool15)) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp17,28174);
  ;HEAP32[$agg$tmp17$byval_copy>>2]=HEAP32[$agg$tmp17>>2]|0;HEAP32[$agg$tmp17$byval_copy+4>>2]=HEAP32[$agg$tmp17+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp17$byval_copy);
 }
 $RefQual = ((($this)) + 24|0);
 $5 = HEAP8[$RefQual>>0]|0;
 switch ($5<<24>>24) {
 case 1:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp21,28359);
  ;HEAP32[$agg$tmp21$byval_copy>>2]=HEAP32[$agg$tmp21>>2]|0;HEAP32[$agg$tmp21$byval_copy+4>>2]=HEAP32[$agg$tmp21+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp21$byval_copy);
  break;
 }
 case 2:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp27,28362);
  ;HEAP32[$agg$tmp27$byval_copy>>2]=HEAP32[$agg$tmp27>>2]|0;HEAP32[$agg$tmp27$byval_copy+4>>2]=HEAP32[$agg$tmp27+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp27$byval_copy);
  break;
 }
 default: {
 }
 }
 $ExceptionSpec = ((($this)) + 28|0);
 $6 = HEAP32[$ExceptionSpec>>2]|0;
 $cmp31 = ($6|0)==(0|0);
 if (!($cmp31)) {
  __ZN12_GLOBAL__N_112OutputStreampLEc($S,32);
  $7 = HEAP32[$ExceptionSpec>>2]|0;
  __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($7,$S);
 }
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle12FunctionTypeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle20DynamicExceptionSpecEJNS2_9NodeArrayEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle20DynamicExceptionSpecC2ENS0_9NodeArrayE($call,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle20DynamicExceptionSpecC2ENS0_9NodeArrayE($this,$Types_) {
 $this = $this|0;
 $Types_ = $Types_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Types = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,17,1,1,1);
 HEAP32[$this>>2] = (6808);
 $Types = ((($this)) + 8|0);
 $0 = $Types_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Types;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle20DynamicExceptionSpec9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $Types = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,28415);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Types = ((($this)) + 8|0);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($Types,$S);
 __ZN12_GLOBAL__N_112OutputStreampLEc($S,41);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle20DynamicExceptionSpecD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12NoexceptSpecEJRPNS2_4NodeEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,12)|0);
 $0 = HEAP32[$args>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle12NoexceptSpecC2EPKNS0_4NodeE($call,$0);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle12NoexceptSpecC2EPKNS0_4NodeE($this,$E_) {
 $this = $this|0;
 $E_ = $E_|0;
 var $E = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,16,1,1,1);
 HEAP32[$this>>2] = (6852);
 $E = ((($this)) + 8|0);
 HEAP32[$E>>2] = $E_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle12NoexceptSpec9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $E = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp2$byval_copy = sp + 24|0;
 $agg$tmp$byval_copy = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp2 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,28479);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $E = ((($this)) + 8|0);
 $0 = HEAP32[$E>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2,23962);
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$agg$tmp2$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp2$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle12NoexceptSpecD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA34_KcRPNS2_4NodeEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 $0 = HEAP32[$args1>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call,$agg$tmp$byval_copy,$0);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($this,$Special_,$Child_) {
 $this = $this|0;
 $Special_ = $Special_|0;
 $Child_ = $Child_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Child = 0, $Special = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,20,1,1,1);
 HEAP32[$this>>2] = (6896);
 $Special = ((($this)) + 8|0);
 $0 = $Special_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Special;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $Child = ((($this)) + 16|0);
 HEAP32[$Child>>2] = $Child_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle11SpecialName9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Child = 0, $Special = 0, $agg$tmp = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $Special = ((($this)) + 8|0);
 $0 = $Special;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$tmpcast$byval_copy);
 $Child = ((($this)) + 16|0);
 $10 = HEAP32[$Child>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($10,$S);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle9DotSuffixEJRPNS2_4NodeENS_10StringViewEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = $args1;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle9DotSuffixC2EPKNS0_4NodeENS_10StringViewE($call,$0,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle9DotSuffixC2EPKNS0_4NodeENS_10StringViewE($this,$Prefix_,$Suffix_) {
 $this = $this|0;
 $Prefix_ = $Prefix_|0;
 $Suffix_ = $Suffix_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Prefix = 0, $Suffix = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,1,1,1,1);
 HEAP32[$this>>2] = (6940);
 $Prefix = ((($this)) + 8|0);
 HEAP32[$Prefix>>2] = $Prefix_;
 $Suffix = ((($this)) + 12|0);
 $0 = $Suffix_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Suffix;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle9DotSuffix9printLeftERNS_12OutputStreamE($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Prefix = 0, $Suffix = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp4 = 0, $agg$tmp4$byval_copy = 0, $tmpcast$byval_copy = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $agg$tmp4$byval_copy = sp + 40|0;
 $tmpcast$byval_copy = sp + 32|0;
 $agg$tmp$byval_copy = sp + 24|0;
 $agg$tmp = sp + 16|0;
 $agg$tmp2 = sp;
 $agg$tmp4 = sp + 8|0;
 $Prefix = ((($this)) + 8|0);
 $0 = HEAP32[$Prefix>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$s);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,26728);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$agg$tmp$byval_copy);
 $Suffix = ((($this)) + 12|0);
 $1 = $Suffix;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $agg$tmp2;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$tmpcast$byval_copy);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp4,23962);
 ;HEAP32[$agg$tmp4$byval_copy>>2]=HEAP32[$agg$tmp4>>2]|0;HEAP32[$agg$tmp4$byval_copy+4>>2]=HEAP32[$agg$tmp4+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($s,$agg$tmp4$byval_copy);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle9DotSuffixD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E16parseSpecialNameEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $BaseEncoding = 0, $Count = 0, $Encoding = 0, $FirstType = 0, $Name = 0, $Name119 = 0, $Name130 = 0, $Name88 = 0, $SecondType = 0;
 var $Ty = 0, $Ty11 = 0, $Ty22 = 0, $Ty33 = 0, $add$ptr = 0, $add$ptr10 = 0, $add$ptr118 = 0, $add$ptr129 = 0, $add$ptr21 = 0, $add$ptr32 = 0, $add$ptr43 = 0, $add$ptr57 = 0, $add$ptr77 = 0, $add$ptr87 = 0, $brmerge = 0, $call = 0, $call100 = 0, $call103 = 0, $call104 = 0, $call109 = 0;
 var $call110 = 0, $call114 = 0, $call12 = 0, $call120 = 0, $call121 = 0, $call125 = 0, $call13 = 0, $call131 = 0, $call132 = 0, $call136 = 0, $call139 = 0, $call143 = 0, $call17 = 0, $call2 = 0, $call23 = 0, $call24 = 0, $call28 = 0, $call34 = 0, $call35 = 0, $call39 = 0;
 var $call44 = 0, $call45 = 0, $call48 = 0, $call49 = 0, $call5 = 0, $call53 = 0, $call58 = 0, $call59 = 0, $call6 = 0, $call63 = 0, $call64 = 0, $call68 = 0, $call7 = 0, $call72 = 0, $call78 = 0, $call79 = 0, $call83 = 0, $call89 = 0, $call90 = 0, $call94 = 0;
 var $call97 = 0, $cmp = 0, $cmp105 = 0, $cmp122 = 0, $cmp133 = 0, $cmp14 = 0, $cmp25 = 0, $cmp36 = 0, $cmp50 = 0, $cmp60 = 0, $cmp69 = 0, $cmp80 = 0, $cmp91 = 0, $cmp99 = 0, $conv = 0, $conv115 = 0, $conv3 = 0, $incdec$ptr = 0, $ref$tmp = 0, $retval$0 = 0;
 var $retval$1 = 0, $retval$11 = 0, $retval$12 = 0, $retval$13 = 0, $retval$14 = 0, $retval$2 = 0, $retval$3 = 0, $retval$4 = 0, $retval$5 = 0, $retval$6 = 0, $retval$7 = 0, $retval$8 = 0, $retval$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $Ty = sp + 60|0;
 $Ty11 = sp + 56|0;
 $Ty22 = sp + 52|0;
 $Ty33 = sp + 48|0;
 $Encoding = sp + 44|0;
 $FirstType = sp + 40|0;
 $ref$tmp = sp + 32|0;
 $SecondType = sp + 24|0;
 $Name = sp + 20|0;
 $Name88 = sp + 16|0;
 $BaseEncoding = sp + 12|0;
 $Name119 = sp + 8|0;
 $Name130 = sp + 4|0;
 $Count = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
 $conv = $call << 24 >> 24;
 L1: do {
  switch ($conv|0) {
  case 84:  {
   $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $conv3 = $call2 << 24 >> 24;
   switch ($conv3|0) {
   case 86:  {
    $0 = HEAP32[$this>>2]|0;
    $add$ptr = ((($0)) + 2|0);
    HEAP32[$this>>2] = $add$ptr;
    $call5 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call6 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call5)|0);
    HEAP32[$Ty>>2] = $call6;
    $cmp = ($call6|0)==(0|0);
    if ($cmp) {
     $retval$0 = 0;
    } else {
     $call7 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA12_KcRPNS0_4NodeEEEESC_DpOT0_($this,$Ty)|0);
     $retval$0 = $call7;
    }
    $retval$14 = $retval$0;
    break L1;
    break;
   }
   case 84:  {
    $1 = HEAP32[$this>>2]|0;
    $add$ptr10 = ((($1)) + 2|0);
    HEAP32[$this>>2] = $add$ptr10;
    $call12 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call13 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call12)|0);
    HEAP32[$Ty11>>2] = $call13;
    $cmp14 = ($call13|0)==(0|0);
    if ($cmp14) {
     $retval$1 = 0;
    } else {
     $call17 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA9_KcRPNS0_4NodeEEEESC_DpOT0_($this,$Ty11)|0);
     $retval$1 = $call17;
    }
    $retval$14 = $retval$1;
    break L1;
    break;
   }
   case 73:  {
    $2 = HEAP32[$this>>2]|0;
    $add$ptr21 = ((($2)) + 2|0);
    HEAP32[$this>>2] = $add$ptr21;
    $call23 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call24 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call23)|0);
    HEAP32[$Ty22>>2] = $call24;
    $cmp25 = ($call24|0)==(0|0);
    if ($cmp25) {
     $retval$2 = 0;
    } else {
     $call28 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA14_KcRPNS0_4NodeEEEESC_DpOT0_($this,$Ty22)|0);
     $retval$2 = $call28;
    }
    $retval$14 = $retval$2;
    break L1;
    break;
   }
   case 83:  {
    $3 = HEAP32[$this>>2]|0;
    $add$ptr32 = ((($3)) + 2|0);
    HEAP32[$this>>2] = $add$ptr32;
    $call34 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call35 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call34)|0);
    HEAP32[$Ty33>>2] = $call35;
    $cmp36 = ($call35|0)==(0|0);
    if ($cmp36) {
     $retval$3 = 0;
    } else {
     $call39 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA19_KcRPNS0_4NodeEEEESC_DpOT0_($this,$Ty33)|0);
     $retval$3 = $call39;
    }
    $retval$14 = $retval$3;
    break L1;
    break;
   }
   case 99:  {
    $4 = HEAP32[$this>>2]|0;
    $add$ptr43 = ((($4)) + 2|0);
    HEAP32[$this>>2] = $add$ptr43;
    $call44 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseCallOffsetEv($this)|0);
    if ($call44) {
     $retval$14 = 0;
     break L1;
    }
    $call45 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseCallOffsetEv($this)|0);
    if ($call45) {
     $retval$14 = 0;
     break L1;
    }
    $call48 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call49 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv($call48)|0);
    HEAP32[$Encoding>>2] = $call49;
    $cmp50 = ($call49|0)==(0|0);
    if ($cmp50) {
     $retval$4 = 0;
    } else {
     $call53 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA27_KcRPNS0_4NodeEEEESC_DpOT0_($this,$Encoding)|0);
     $retval$4 = $call53;
    }
    $retval$14 = $retval$4;
    break L1;
    break;
   }
   case 67:  {
    $5 = HEAP32[$this>>2]|0;
    $add$ptr57 = ((($5)) + 2|0);
    HEAP32[$this>>2] = $add$ptr57;
    $call58 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call59 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call58)|0);
    HEAP32[$FirstType>>2] = $call59;
    $cmp60 = ($call59|0)==(0|0);
    do {
     if ($cmp60) {
      $retval$6 = 0;
     } else {
      __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($ref$tmp,$this,1);
      $call63 = (__ZNK12_GLOBAL__N_110StringView5emptyEv($ref$tmp)|0);
      if ($call63) {
       $retval$6 = 0;
       break;
      }
      $call64 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
      if ($call64) {
       $call68 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseTypeEv($call58)|0);
       HEAP32[$SecondType>>2] = $call68;
       $cmp69 = ($call68|0)==(0|0);
       if ($cmp69) {
        $retval$5 = 0;
       } else {
        $call72 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_21CtorVtableSpecialNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$SecondType,$FirstType)|0);
        $retval$5 = $call72;
       }
       $retval$6 = $retval$5;
      } else {
       $retval$6 = 0;
      }
     }
    } while(0);
    $retval$14 = $retval$6;
    break L1;
    break;
   }
   case 87:  {
    $6 = HEAP32[$this>>2]|0;
    $add$ptr77 = ((($6)) + 2|0);
    HEAP32[$this>>2] = $add$ptr77;
    $call78 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call79 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE($call78,0)|0);
    HEAP32[$Name>>2] = $call79;
    $cmp80 = ($call79|0)==(0|0);
    if ($cmp80) {
     $retval$7 = 0;
    } else {
     $call83 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA34_KcRPNS0_4NodeEEEESC_DpOT0_($this,28760,$Name)|0);
     $retval$7 = $call83;
    }
    $retval$14 = $retval$7;
    break L1;
    break;
   }
   case 72:  {
    $7 = HEAP32[$this>>2]|0;
    $add$ptr87 = ((($7)) + 2|0);
    HEAP32[$this>>2] = $add$ptr87;
    $call89 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call90 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE($call89,0)|0);
    HEAP32[$Name88>>2] = $call90;
    $cmp91 = ($call90|0)==(0|0);
    if ($cmp91) {
     $retval$8 = 0;
    } else {
     $call94 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA41_KcRPNS0_4NodeEEEESC_DpOT0_($this,$Name88)|0);
     $retval$8 = $call94;
    }
    $retval$14 = $retval$8;
    break L1;
    break;
   }
   default: {
    $8 = HEAP32[$this>>2]|0;
    $incdec$ptr = ((($8)) + 1|0);
    HEAP32[$this>>2] = $incdec$ptr;
    $call97 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,0)|0);
    $cmp99 = ($call97<<24>>24)==(118);
    $call100 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseCallOffsetEv($this)|0);
    if ($call100) {
     $retval$14 = 0;
     break L1;
    }
    $call103 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call104 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEv($call103)|0);
    HEAP32[$BaseEncoding>>2] = $call104;
    $cmp105 = ($call104|0)==(0|0);
    do {
     if ($cmp105) {
      $retval$9 = 0;
     } else {
      if ($cmp99) {
       $call109 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA18_KcRPNS0_4NodeEEEESC_DpOT0_($this,$BaseEncoding)|0);
       $retval$9 = $call109;
       break;
      } else {
       $call110 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA22_KcRPNS0_4NodeEEEESC_DpOT0_($this,$BaseEncoding)|0);
       $retval$9 = $call110;
       break;
      }
     }
    } while(0);
    $retval$14 = $retval$9;
    break L1;
   }
   }
   break;
  }
  case 71:  {
   $call114 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($this,1)|0);
   $conv115 = $call114 << 24 >> 24;
   switch ($conv115|0) {
   case 86:  {
    $9 = HEAP32[$this>>2]|0;
    $add$ptr118 = ((($9)) + 2|0);
    HEAP32[$this>>2] = $add$ptr118;
    $call120 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
    $call121 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE($call120,0)|0);
    HEAP32[$Name119>>2] = $call121;
    $cmp122 = ($call121|0)==(0|0);
    if ($cmp122) {
     $retval$11 = 0;
    } else {
     $call125 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA20_KcRPNS0_4NodeEEEESC_DpOT0_($this,$Name119)|0);
     $retval$11 = $call125;
    }
    $retval$14 = $retval$11;
    break L1;
    break;
   }
   case 82:  {
    break;
   }
   default: {
    $retval$14 = 0;
    break L1;
   }
   }
   $10 = HEAP32[$this>>2]|0;
   $add$ptr129 = ((($10)) + 2|0);
   HEAP32[$this>>2] = $add$ptr129;
   $call131 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10getDerivedEv($this)|0);
   $call132 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9parseNameEPNS5_9NameStateE($call131,0)|0);
   HEAP32[$Name130>>2] = $call132;
   $cmp133 = ($call132|0)==(0|0);
   if ($cmp133) {
    $retval$13 = 0;
   } else {
    $call136 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E10parseSeqIdEPm($this,$Count)|0);
    $call139 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
    $brmerge = $call136 | $call139;
    if ($brmerge) {
     $call143 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA25_KcRPNS0_4NodeEEEESC_DpOT0_($this,$Name130)|0);
     $retval$12 = $call143;
    } else {
     $retval$12 = 0;
    }
    $retval$13 = $retval$12;
   }
   $retval$14 = $retval$13;
   break;
  }
  default: {
   $retval$14 = 0;
  }
  }
 } while(0);
 STACKTOP = sp;return ($retval$14|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9NameStateC2EPS5_($this,$Enclosing) {
 $this = $this|0;
 $Enclosing = $Enclosing|0;
 var $CVQualifiers = 0, $EndsWithTemplateArgs = 0, $ForwardTemplateRefs = 0, $ForwardTemplateRefsBegin = 0, $ReferenceQualifier = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 0;
 $EndsWithTemplateArgs = ((($this)) + 1|0);
 HEAP8[$EndsWithTemplateArgs>>0] = 0;
 $CVQualifiers = ((($this)) + 4|0);
 HEAP32[$CVQualifiers>>2] = 0;
 $ReferenceQualifier = ((($this)) + 8|0);
 HEAP8[$ReferenceQualifier>>0] = 0;
 $ForwardTemplateRefsBegin = ((($this)) + 12|0);
 $ForwardTemplateRefs = ((($Enclosing)) + 332|0);
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE4sizeEv($ForwardTemplateRefs)|0);
 HEAP32[$ForwardTemplateRefsBegin>>2] = $call;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E26resolveForwardTemplateRefsERNS5_9NameStateE($this,$State) {
 $this = $this|0;
 $State = $State|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $ForwardTemplateRefs = 0, $ForwardTemplateRefsBegin = 0, $I$0 = 0, $Index = 0, $Ref = 0, $TemplateParams = 0, $call = 0, $call3 = 0, $call4 = 0, $call7 = 0, $cmp = 0, $cmp5 = 0, $inc = 0, $retval$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ForwardTemplateRefsBegin = ((($State)) + 12|0);
 $0 = HEAP32[$ForwardTemplateRefsBegin>>2]|0;
 $ForwardTemplateRefs = ((($this)) + 332|0);
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE4sizeEv($ForwardTemplateRefs)|0);
 $TemplateParams = ((($this)) + 288|0);
 $I$0 = $0;
 while(1) {
  $cmp = ($I$0>>>0)<($call>>>0);
  if (!($cmp)) {
   label = 5;
   break;
  }
  $call3 = (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EEixEm($ForwardTemplateRefs,$I$0)|0);
  $1 = HEAP32[$call3>>2]|0;
  $Index = ((($1)) + 8|0);
  $2 = HEAP32[$Index>>2]|0;
  $call4 = (__ZNK12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EE4sizeEv($TemplateParams)|0);
  $cmp5 = ($2>>>0)<($call4>>>0);
  if (!($cmp5)) {
   $retval$2 = 1;
   break;
  }
  $call7 = (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEixEm($TemplateParams,$2)|0);
  $3 = HEAP32[$call7>>2]|0;
  $Ref = ((($1)) + 12|0);
  HEAP32[$Ref>>2] = $3;
  $inc = (($I$0) + 1)|0;
  $I$0 = $inc;
 }
 if ((label|0) == 5) {
  __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE8dropBackEm($ForwardTemplateRefs,$0);
  $retval$2 = 0;
 }
 return ($retval$2|0);
}
function __ZZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E13parseEncodingEvENKUlvE_clEv($this) {
 $this = $this|0;
 var $0 = 0, $call = 0, $call2 = 0, $cmp = 0, $cmp10 = 0, $cmp3 = 0, $cmp7 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $call = (__ZNK12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E7numLeftEv($0)|0);
 $cmp = ($call|0)==(0);
 if (!($cmp)) {
  $call2 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4lookEj($0,0)|0);
  $cmp3 = ($call2<<24>>24)==(69);
  if (!($cmp3)) {
   $cmp7 = ($call2<<24>>24)==(46);
   $cmp10 = ($call2<<24>>24)==(95);
   $spec$select = $cmp7 | $cmp10;
   return ($spec$select|0);
  }
 }
 return 1;
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_12EnableIfAttrEJNS0_9NodeArrayEEEEPNS0_4NodeEDpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $ASTAllocator = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call2 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12EnableIfAttrEJNS2_9NodeArrayEEEEPT_DpOT0_($ASTAllocator,$args)|0);
 return ($call2|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_16FunctionEncodingEJRPNS0_4NodeESA_NS0_9NodeArrayESA_RNS0_10QualifiersERNS0_15FunctionRefQualEEEES9_DpOT0_($this,$args,$args1,$args3,$args5,$args7,$args9) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 $args5 = $args5|0;
 $args7 = $args7|0;
 $args9 = $args9|0;
 var $ASTAllocator = 0, $call17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call17 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FunctionEncodingEJRPNS2_4NodeES6_NS2_9NodeArrayES6_RNS2_10QualifiersERNS2_15FunctionRefQualEEEEPT_DpOT0_($ASTAllocator,$args,$args1,$args3,$args5,$args7,$args9)|0);
 return ($call17|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle16FunctionEncodingEJRPNS2_4NodeES6_NS2_9NodeArrayES6_RNS2_10QualifiersERNS2_15FunctionRefQualEEEEPT_DpOT0_($this,$args,$args1,$args3,$args5,$args7,$args9) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 $args3 = $args3|0;
 $args5 = $args5|0;
 $args7 = $args7|0;
 $args9 = $args9|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,36)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = HEAP32[$args1>>2]|0;
 $2 = $args3;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) + 4)|0;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = $agg$tmp;
 $9 = $8;
 HEAP32[$9>>2] = $4;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $7;
 $12 = HEAP32[$args5>>2]|0;
 $13 = HEAP32[$args7>>2]|0;
 $14 = HEAP8[$args9>>0]|0;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle16FunctionEncodingC2EPKNS0_4NodeES4_NS0_9NodeArrayES4_NS0_10QualifiersENS0_15FunctionRefQualE($call,$0,$1,$tmpcast$byval_copy,$12,$13,$14);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle16FunctionEncodingC2EPKNS0_4NodeES4_NS0_9NodeArrayES4_NS0_10QualifiersENS0_15FunctionRefQualE($this,$Ret_,$Name_,$Params_,$Attrs_,$CVQuals_,$RefQual_) {
 $this = $this|0;
 $Ret_ = $Ret_|0;
 $Name_ = $Name_|0;
 $Params_ = $Params_|0;
 $Attrs_ = $Attrs_|0;
 $CVQuals_ = $CVQuals_|0;
 $RefQual_ = $RefQual_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Attrs = 0, $CVQuals = 0, $Name = 0, $Params = 0, $RefQual = 0, $Ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,18,0,1,0);
 HEAP32[$this>>2] = (6984);
 $Ret = ((($this)) + 8|0);
 HEAP32[$Ret>>2] = $Ret_;
 $Name = ((($this)) + 12|0);
 HEAP32[$Name>>2] = $Name_;
 $Params = ((($this)) + 16|0);
 $0 = $Params_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Params;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 $Attrs = ((($this)) + 24|0);
 HEAP32[$Attrs>>2] = $Attrs_;
 $CVQuals = ((($this)) + 28|0);
 HEAP32[$CVQuals>>2] = $CVQuals_;
 $RefQual = ((($this)) + 32|0);
 HEAP8[$RefQual>>0] = $RefQual_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding19hasRHSComponentSlowERNS_12OutputStreamE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding15hasFunctionSlowERNS_12OutputStreamE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $Name = 0, $Ret = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, $tobool = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $Ret = ((($this)) + 8|0);
 $0 = HEAP32[$Ret>>2]|0;
 $tobool = ($0|0)==(0|0);
 if (!($tobool)) {
  $vtable = HEAP32[$0>>2]|0;
  $vfn = ((($vtable)) + 16|0);
  $1 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_vii[$1 & 255]($0,$S);
  $2 = HEAP32[$Ret>>2]|0;
  $call = (__ZNK12_GLOBAL__N_116itanium_demangle4Node15hasRHSComponentERNS_12OutputStreamE($2,$S)|0);
  if (!($call)) {
   __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,23964);
   ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
   __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
  }
 }
 $Name = ((($this)) + 12|0);
 $3 = HEAP32[$Name>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($3,$S);
 STACKTOP = sp;return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding10printRightERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $$pre = 0, $$pre10 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $Attrs = 0, $CVQuals = 0, $Params = 0, $RefQual = 0, $Ret = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp14 = 0, $agg$tmp14$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0;
 var $agg$tmp21 = 0, $agg$tmp21$byval_copy = 0, $agg$tmp25 = 0, $agg$tmp25$byval_copy = 0, $agg$tmp31 = 0, $agg$tmp31$byval_copy = 0, $agg$tmp7 = 0, $agg$tmp7$byval_copy = 0, $and = 0, $and11 = 0, $and18 = 0, $cmp35 = 0, $tobool = 0, $tobool12 = 0, $tobool19 = 0, $tobool5 = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $agg$tmp31$byval_copy = sp + 104|0;
 $agg$tmp25$byval_copy = sp + 96|0;
 $agg$tmp21$byval_copy = sp + 88|0;
 $agg$tmp14$byval_copy = sp + 80|0;
 $agg$tmp7$byval_copy = sp + 72|0;
 $agg$tmp2$byval_copy = sp + 64|0;
 $agg$tmp$byval_copy = sp + 56|0;
 $agg$tmp = sp + 48|0;
 $agg$tmp2 = sp + 40|0;
 $agg$tmp7 = sp + 32|0;
 $agg$tmp14 = sp + 24|0;
 $agg$tmp21 = sp + 16|0;
 $agg$tmp25 = sp + 8|0;
 $agg$tmp31 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,23966);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Params = ((($this)) + 16|0);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($Params,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2,23962);
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$agg$tmp2$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp2$byval_copy);
 $Ret = ((($this)) + 8|0);
 $0 = HEAP32[$Ret>>2]|0;
 $tobool = ($0|0)==(0|0);
 if (!($tobool)) {
  $vtable = HEAP32[$0>>2]|0;
  $vfn = ((($vtable)) + 20|0);
  $1 = HEAP32[$vfn>>2]|0;
  FUNCTION_TABLE_vii[$1 & 255]($0,$S);
 }
 $CVQuals = ((($this)) + 28|0);
 $2 = HEAP32[$CVQuals>>2]|0;
 $and = $2 & 1;
 $tobool5 = ($and|0)==(0);
 if ($tobool5) {
  $3 = $2;
 } else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp7,28157);
  ;HEAP32[$agg$tmp7$byval_copy>>2]=HEAP32[$agg$tmp7>>2]|0;HEAP32[$agg$tmp7$byval_copy+4>>2]=HEAP32[$agg$tmp7+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp7$byval_copy);
  $$pre = HEAP32[$CVQuals>>2]|0;
  $3 = $$pre;
 }
 $and11 = $3 & 2;
 $tobool12 = ($and11|0)==(0);
 if ($tobool12) {
  $4 = $3;
 } else {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp14,28164);
  ;HEAP32[$agg$tmp14$byval_copy>>2]=HEAP32[$agg$tmp14>>2]|0;HEAP32[$agg$tmp14$byval_copy+4>>2]=HEAP32[$agg$tmp14+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp14$byval_copy);
  $$pre10 = HEAP32[$CVQuals>>2]|0;
  $4 = $$pre10;
 }
 $and18 = $4 & 4;
 $tobool19 = ($and18|0)==(0);
 if (!($tobool19)) {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp21,28174);
  ;HEAP32[$agg$tmp21$byval_copy>>2]=HEAP32[$agg$tmp21>>2]|0;HEAP32[$agg$tmp21$byval_copy+4>>2]=HEAP32[$agg$tmp21+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp21$byval_copy);
 }
 $RefQual = ((($this)) + 32|0);
 $5 = HEAP8[$RefQual>>0]|0;
 switch ($5<<24>>24) {
 case 1:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp25,28359);
  ;HEAP32[$agg$tmp25$byval_copy>>2]=HEAP32[$agg$tmp25>>2]|0;HEAP32[$agg$tmp25$byval_copy+4>>2]=HEAP32[$agg$tmp25+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp25$byval_copy);
  break;
 }
 case 2:  {
  __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp31,28362);
  ;HEAP32[$agg$tmp31$byval_copy>>2]=HEAP32[$agg$tmp31>>2]|0;HEAP32[$agg$tmp31$byval_copy+4>>2]=HEAP32[$agg$tmp31+4>>2]|0;
  __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp31$byval_copy);
  break;
 }
 default: {
 }
 }
 $Attrs = ((($this)) + 24|0);
 $6 = HEAP32[$Attrs>>2]|0;
 $cmp35 = ($6|0)==(0|0);
 if (!($cmp35)) {
  __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($6,$S);
 }
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle16FunctionEncodingD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle12EnableIfAttrEJNS2_9NodeArrayEEEEPT_DpOT0_($this,$args) {
 $this = $this|0;
 $args = $args|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $agg$tmp = 0, $call = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $tmpcast$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = $args;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $agg$tmp;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 ;HEAP32[$tmpcast$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle12EnableIfAttrC2ENS0_9NodeArrayE($call,$tmpcast$byval_copy);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle12EnableIfAttrC2ENS0_9NodeArrayE($this,$Conditions_) {
 $this = $this|0;
 $Conditions_ = $Conditions_|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Conditions = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,9,1,1,1);
 HEAP32[$this>>2] = (7028);
 $Conditions = ((($this)) + 8|0);
 $0 = $Conditions_;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $Conditions;
 $7 = $6;
 HEAP32[$7>>2] = $2;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $5;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle12EnableIfAttr9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $Conditions = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,28698);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $Conditions = ((($this)) + 8|0);
 __ZNK12_GLOBAL__N_116itanium_demangle9NodeArray14printWithCommaERNS_12OutputStreamE($Conditions,$S);
 __ZN12_GLOBAL__N_112OutputStreampLEc($S,93);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle12EnableIfAttrD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EEixEm($this,$Index) {
 $this = $this|0;
 $Index = $Index|0;
 var $add$ptr = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE5beginEv($this)|0);
 $add$ptr = (($call) + ($Index<<2)|0);
 return ($add$ptr|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE8dropBackEm($this,$Index) {
 $this = $this|0;
 $Index = $Index|0;
 var $0 = 0, $Last = 0, $add$ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $add$ptr = (($0) + ($Index<<2)|0);
 $Last = ((($this)) + 4|0);
 HEAP32[$Last>>2] = $add$ptr;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EE5beginEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 return ($0|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA12_KcRPNS0_4NodeEEEESC_DpOT0_($this,$args1) {
 $this = $this|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA12_KcRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,29077,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA9_KcRPNS0_4NodeEEEESC_DpOT0_($this,$args1) {
 $this = $this|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA9_KcRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,29068,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA14_KcRPNS0_4NodeEEEESC_DpOT0_($this,$args1) {
 $this = $this|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA14_KcRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,29054,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA19_KcRPNS0_4NodeEEEESC_DpOT0_($this,$args1) {
 $this = $this|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA19_KcRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,29035,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E15parseCallOffsetEv($this) {
 $this = $this|0;
 var $$ph = 0, $0 = 0, $1 = 0, $call = 0, $call11 = 0, $call13 = 0, $call2 = 0, $call3 = 0, $call4 = 0, $call7 = 0, $call8 = 0, $lnot = 0, $lnot14 = 0, $ref$tmp = 0, $ref$tmp10 = 0, $ref$tmp6 = 0, $retval$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $ref$tmp = sp + 16|0;
 $ref$tmp6 = sp + 8|0;
 $ref$tmp10 = sp;
 $call = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,104)|0);
 if ($call) {
  __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($ref$tmp,$this,1);
  $call2 = (__ZNK12_GLOBAL__N_110StringView5emptyEv($ref$tmp)|0);
  if ($call2) {
   $0 = 1;
  } else {
   $call3 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
   $lnot = $call3 ^ 1;
   $0 = $lnot;
  }
  $retval$0 = $0;
 } else {
  $call4 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,118)|0);
  if ($call4) {
   __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($ref$tmp6,$this,1);
   $call7 = (__ZNK12_GLOBAL__N_110StringView5emptyEv($ref$tmp6)|0);
   if ($call7) {
    $1 = 1;
   } else {
    $call8 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
    if ($call8) {
     __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E11parseNumberEb($ref$tmp10,$this,1);
     $call11 = (__ZNK12_GLOBAL__N_110StringView5emptyEv($ref$tmp10)|0);
     if ($call11) {
      $$ph = 1;
     } else {
      $call13 = (__ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E9consumeIfEc($this,95)|0);
      $lnot14 = $call13 ^ 1;
      $$ph = $lnot14;
     }
     $1 = $$ph;
    } else {
     $1 = 1;
    }
   }
   $retval$0 = $1;
  } else {
   $retval$0 = 1;
  }
 }
 STACKTOP = sp;return ($retval$0|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA27_KcRPNS0_4NodeEEEESC_DpOT0_($this,$args1) {
 $this = $this|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA27_KcRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,29008,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_21CtorVtableSpecialNameEJRPNS0_4NodeESA_EEES9_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle21CtorVtableSpecialNameEJRPNS2_4NodeES6_EEEPT_DpOT0_($ASTAllocator,$args,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA41_KcRPNS0_4NodeEEEESC_DpOT0_($this,$args1) {
 $this = $this|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA41_KcRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,28879,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA18_KcRPNS0_4NodeEEEESC_DpOT0_($this,$args1) {
 $this = $this|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA18_KcRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,28861,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA22_KcRPNS0_4NodeEEEESC_DpOT0_($this,$args1) {
 $this = $this|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA22_KcRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,28839,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA20_KcRPNS0_4NodeEEEESC_DpOT0_($this,$args1) {
 $this = $this|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA20_KcRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,28819,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_E4makeINS0_11SpecialNameEJRA25_KcRPNS0_4NodeEEEESC_DpOT0_($this,$args1) {
 $this = $this|0;
 $args1 = $args1|0;
 var $ASTAllocator = 0, $call5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $ASTAllocator = ((($this)) + 368|0);
 $call5 = (__ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA25_KcRPNS2_4NodeEEEEPT_DpOT0_($ASTAllocator,28794,$args1)|0);
 return ($call5|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA25_KcRPNS2_4NodeEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 $0 = HEAP32[$args1>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call,$agg$tmp$byval_copy,$0);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA20_KcRPNS2_4NodeEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 $0 = HEAP32[$args1>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call,$agg$tmp$byval_copy,$0);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA22_KcRPNS2_4NodeEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 $0 = HEAP32[$args1>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call,$agg$tmp$byval_copy,$0);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA18_KcRPNS2_4NodeEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 $0 = HEAP32[$args1>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call,$agg$tmp$byval_copy,$0);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA41_KcRPNS2_4NodeEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 $0 = HEAP32[$args1>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call,$agg$tmp$byval_copy,$0);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle21CtorVtableSpecialNameEJRPNS2_4NodeES6_EEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $1 = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,16)|0);
 $0 = HEAP32[$args>>2]|0;
 $1 = HEAP32[$args1>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle21CtorVtableSpecialNameC2EPKNS0_4NodeES4_($call,$0,$1);
 return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle21CtorVtableSpecialNameC2EPKNS0_4NodeES4_($this,$FirstType_,$SecondType_) {
 $this = $this|0;
 $FirstType_ = $FirstType_|0;
 $SecondType_ = $SecondType_|0;
 var $FirstType = 0, $SecondType = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_116itanium_demangle4NodeC2ENS1_4KindENS1_5CacheES3_S3_($this,21,1,1,1);
 HEAP32[$this>>2] = (7072);
 $FirstType = ((($this)) + 8|0);
 HEAP32[$FirstType>>2] = $FirstType_;
 $SecondType = ((($this)) + 12|0);
 HEAP32[$SecondType>>2] = $SecondType_;
 return;
}
function __ZNK12_GLOBAL__N_116itanium_demangle21CtorVtableSpecialName9printLeftERNS_12OutputStreamE($this,$S) {
 $this = $this|0;
 $S = $S|0;
 var $0 = 0, $1 = 0, $FirstType = 0, $SecondType = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $agg$tmp2 = 0, $agg$tmp2$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $agg$tmp2$byval_copy = sp + 24|0;
 $agg$tmp$byval_copy = sp + 16|0;
 $agg$tmp = sp + 8|0;
 $agg$tmp2 = sp;
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,28920);
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp$byval_copy);
 $FirstType = ((($this)) + 8|0);
 $0 = HEAP32[$FirstType>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($0,$S);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp2,28945);
 ;HEAP32[$agg$tmp2$byval_copy>>2]=HEAP32[$agg$tmp2>>2]|0;HEAP32[$agg$tmp2$byval_copy+4>>2]=HEAP32[$agg$tmp2+4>>2]|0;
 __ZN12_GLOBAL__N_112OutputStreampLENS_10StringViewE($S,$agg$tmp2$byval_copy);
 $SecondType = ((($this)) + 12|0);
 $1 = HEAP32[$SecondType>>2]|0;
 __ZNK12_GLOBAL__N_116itanium_demangle4Node5printERNS_12OutputStreamE($1,$S);
 STACKTOP = sp;return;
}
function __ZN12_GLOBAL__N_116itanium_demangle21CtorVtableSpecialNameD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA27_KcRPNS2_4NodeEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 $0 = HEAP32[$args1>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call,$agg$tmp$byval_copy,$0);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA19_KcRPNS2_4NodeEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 $0 = HEAP32[$args1>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call,$agg$tmp$byval_copy,$0);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA14_KcRPNS2_4NodeEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 $0 = HEAP32[$args1>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call,$agg$tmp$byval_copy,$0);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA9_KcRPNS2_4NodeEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 $0 = HEAP32[$args1>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call,$agg$tmp$byval_copy,$0);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116DefaultAllocator8makeNodeINS_16itanium_demangle11SpecialNameEJRA12_KcRPNS2_4NodeEEEEPT_DpOT0_($this,$args,$args1) {
 $this = $this|0;
 $args = $args|0;
 $args1 = $args1|0;
 var $0 = 0, $agg$tmp = 0, $agg$tmp$byval_copy = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $agg$tmp$byval_copy = sp + 8|0;
 $agg$tmp = sp;
 $call = (__ZN12_GLOBAL__N_120BumpPointerAllocator8allocateEm($this,20)|0);
 __ZN12_GLOBAL__N_110StringViewC2EPKc($agg$tmp,$args);
 $0 = HEAP32[$args1>>2]|0;
 ;HEAP32[$agg$tmp$byval_copy>>2]=HEAP32[$agg$tmp>>2]|0;HEAP32[$agg$tmp$byval_copy+4>>2]=HEAP32[$agg$tmp+4>>2]|0;
 __ZN12_GLOBAL__N_116itanium_demangle11SpecialNameC2ENS_10StringViewEPKNS0_4NodeE($call,$agg$tmp$byval_copy,$0);
 STACKTOP = sp;return ($call|0);
}
function __ZN12_GLOBAL__N_116itanium_demangle22AbstractManglingParserINS0_14ManglingParserINS_16DefaultAllocatorEEES3_EC2EPKcS7_($this,$First_,$Last_) {
 $this = $this|0;
 $First_ = $First_|0;
 $Last_ = $Last_|0;
 var $ASTAllocator = 0, $ForwardTemplateRefs = 0, $Last = 0, $Names = 0, $ParsingLambdaParams = 0, $PermitForwardTemplateReferences = 0, $Subs = 0, $TemplateParams = 0, $TryToParseTemplateArgs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = $First_;
 $Last = ((($this)) + 4|0);
 HEAP32[$Last>>2] = $Last_;
 $Names = ((($this)) + 8|0);
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EEC2Ev($Names);
 $Subs = ((($this)) + 148|0);
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EEC2Ev($Subs);
 $TemplateParams = ((($this)) + 288|0);
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm8EEC2Ev($TemplateParams);
 $ForwardTemplateRefs = ((($this)) + 332|0);
 __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EEC2Ev($ForwardTemplateRefs);
 $TryToParseTemplateArgs = ((($this)) + 360|0);
 HEAP8[$TryToParseTemplateArgs>>0] = 1;
 $PermitForwardTemplateReferences = ((($this)) + 361|0);
 HEAP8[$PermitForwardTemplateReferences>>0] = 0;
 $ParsingLambdaParams = ((($this)) + 362|0);
 HEAP8[$ParsingLambdaParams>>0] = 0;
 $ASTAllocator = ((($this)) + 368|0);
 __ZN12_GLOBAL__N_116DefaultAllocatorC2Ev($ASTAllocator);
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_4NodeELm32EEC2Ev($this) {
 $this = $this|0;
 var $Cap = 0, $Last = 0, $add$ptr = 0, $arraydecay = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arraydecay = ((($this)) + 12|0);
 HEAP32[$this>>2] = $arraydecay;
 $Last = ((($this)) + 4|0);
 HEAP32[$Last>>2] = $arraydecay;
 $Cap = ((($this)) + 8|0);
 $add$ptr = ((($this)) + 140|0);
 HEAP32[$Cap>>2] = $add$ptr;
 return;
}
function __ZN12_GLOBAL__N_116itanium_demangle14PODSmallVectorIPNS0_24ForwardTemplateReferenceELm4EEC2Ev($this) {
 $this = $this|0;
 var $Cap = 0, $Last = 0, $add$ptr = 0, $arraydecay = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $arraydecay = ((($this)) + 12|0);
 HEAP32[$this>>2] = $arraydecay;
 $Last = ((($this)) + 4|0);
 HEAP32[$Last>>2] = $arraydecay;
 $Cap = ((($this)) + 8|0);
 $add$ptr = ((($this)) + 28|0);
 HEAP32[$Cap>>2] = $add$ptr;
 return;
}
function __ZN12_GLOBAL__N_116DefaultAllocatorC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN12_GLOBAL__N_120BumpPointerAllocatorC2Ev($this);
 return;
}
function __ZN12_GLOBAL__N_120BumpPointerAllocatorC2Ev($this) {
 $this = $this|0;
 var $BlockList = 0, $Current = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $BlockList = ((($this)) + 4096|0);
 HEAP32[$this>>2] = 0;
 $Current = ((($this)) + 4|0);
 HEAP32[$Current>>2] = 0;
 HEAP32[$BlockList>>2] = $this;
 return;
}
function __ZNSt9exceptionD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt11logic_errorD2Ev($this) {
 $this = $this|0;
 var $__imp_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (7116);
 $__imp_ = ((($this)) + 4|0);
 __ZNSt3__218__libcpp_refstringD2Ev($__imp_);
 return;
}
function __ZNSt11logic_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt11logic_error4whatEv($this) {
 $this = $this|0;
 var $__imp_ = 0, $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__imp_ = ((($this)) + 4|0);
 $call = (__ZNKSt3__218__libcpp_refstring5c_strEv($__imp_)|0);
 return ($call|0);
}
function __ZNKSt3__218__libcpp_refstring5c_strEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 return ($0|0);
}
function __ZNSt3__218__libcpp_refstringD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $add$i = 0, $call = 0, $call2 = 0, $cmp = 0, $count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNKSt3__218__libcpp_refstring15__uses_refcountEv($this)|0);
 if ($call) {
  $0 = HEAP32[$this>>2]|0;
  $call2 = (__ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc($0)|0);
  $count = ((($call2)) + 8|0);
  $1 = HEAP32[$count>>2]|0;
  $add$i = (($1) + -1)|0;
  HEAP32[$count>>2] = $add$i;
  $cmp = ($1|0)<(1);
  if ($cmp) {
   __ZdlPv($call2);
  }
 }
 return;
}
function __ZNKSt3__218__libcpp_refstring15__uses_refcountEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc($data_) {
 $data_ = $data_|0;
 var $add$ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $add$ptr = ((($data_)) + -12|0);
 return ($add$ptr|0);
}
function __ZNSt12length_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZSt15get_new_handlerv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (0|0);
}
function __Znwm($size) {
 $size = $size|0;
 var $call = 0, $call$lcssa = 0, $call2 = 0, $cmp = 0, $cmp1 = 0, $spec$store$select = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($size|0)==(0);
 $spec$store$select = $cmp ? 1 : $size;
 while(1) {
  $call = (_malloc($spec$store$select)|0);
  $cmp1 = ($call|0)==(0|0);
  if (!($cmp1)) {
   $call$lcssa = $call;
   break;
  }
  $call2 = (__ZSt15get_new_handlerv()|0);
  $tobool = ($call2|0)==(0|0);
  if ($tobool) {
   $call$lcssa = 0;
   break;
  }
  FUNCTION_TABLE_v[$call2 & 255]();
 }
 return ($call$lcssa|0);
}
function __Znam($size) {
 $size = $size|0;
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__Znwm($size)|0);
 return ($call|0);
}
function __ZdaPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($ptr);
 return;
}
function ___cxa_can_catch($catchType,$excpType,$thrown) {
 $catchType = $catchType|0;
 $excpType = $excpType|0;
 $thrown = $thrown|0;
 var $0 = 0, $1 = 0, $2 = 0, $call = 0, $conv = 0, $temp = 0, $vfn = 0, $vtable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $temp = sp;
 $0 = HEAP32[$thrown>>2]|0;
 HEAP32[$temp>>2] = $0;
 $vtable = HEAP32[$catchType>>2]|0;
 $vfn = ((($vtable)) + 16|0);
 $1 = HEAP32[$vfn>>2]|0;
 $call = (FUNCTION_TABLE_iiii[$1 & 255]($catchType,$excpType,$temp)|0);
 $conv = $call&1;
 if ($call) {
  $2 = HEAP32[$temp>>2]|0;
  HEAP32[$thrown>>2] = $2;
 }
 STACKTOP = sp;return ($conv|0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $phitmp = 0, $phitmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $2 = 0;
 } else {
  $1 = (___dynamic_cast($type,2296,3464,0)|0);
  $phitmp = ($1|0)!=(0|0);
  $phitmp1 = $phitmp&1;
  $2 = $phitmp1;
 }
 return ($2|0);
}
function ___cxa_uncaught_exceptions() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___emscripten_environ_constructor() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___buildEnvironment((34816|0));
 return;
}
function __get_tzname() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (34800|0);
}
function __get_daylight() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (34808|0);
}
function __get_timezone() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (34812|0);
}
function _glVertexAttribDivisorANGLE($index,$divisor) {
 $index = $index|0;
 $divisor = $divisor|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _glVertexAttribDivisor(($index|0),($divisor|0));
 return;
}
function _glDrawArraysInstancedANGLE($mode,$first,$count,$instancecount) {
 $mode = $mode|0;
 $first = $first|0;
 $count = $count|0;
 $instancecount = $instancecount|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _glDrawArraysInstanced(($mode|0),($first|0),($count|0),($instancecount|0));
 return;
}
function _glDrawElementsInstancedANGLE($mode,$count,$type,$indices,$instancecount) {
 $mode = $mode|0;
 $count = $count|0;
 $type = $type|0;
 $indices = $indices|0;
 $instancecount = $instancecount|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _glDrawElementsInstanced(($mode|0),($count|0),($type|0),($indices|0),($instancecount|0));
 return;
}
function __ZSt18uncaught_exceptionv() {
 var $call = 0, $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZSt19uncaught_exceptionsv()|0);
 $cmp = ($call|0)>(0);
 return ($cmp|0);
}
function __ZSt19uncaught_exceptionsv() {
 var $call = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (___cxa_uncaught_exceptions()|0);
 return ($call|0);
}
function __ZNSt3__218__libcpp_refstringC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $add2 = 0, $add6 = 0, $call = 0, $call3 = 0, $call5 = 0, $cap = 0, $count = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_strlen($msg)|0);
 $add2 = (($call) + 13)|0;
 $call3 = (__Znwm($add2)|0);
 HEAP32[$call3>>2] = $call;
 $cap = ((($call3)) + 4|0);
 HEAP32[$cap>>2] = $call;
 $count = ((($call3)) + 8|0);
 HEAP32[$count>>2] = 0;
 $call5 = (__ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($call3)|0);
 $add6 = (($call) + 1)|0;
 _memcpy(($call5|0),($msg|0),($add6|0))|0;
 HEAP32[$this>>2] = $call5;
 return;
}
function __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE($rep) {
 $rep = $rep|0;
 var $add$ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $add$ptr2 = ((($rep)) + 12|0);
 return ($add$ptr2|0);
}
function __ZNSt11logic_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $__imp_ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (7116);
 $__imp_ = ((($this)) + 4|0);
 __ZNSt3__218__libcpp_refstringC2EPKc($__imp_,$msg);
 return;
}
function __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcm($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $__cap_$i = 0, $__p$0 = 0, $__size_$i = 0, $__size_$i12 = 0, $add$i$i = 0, $and$i$i = 0, $arrayidx = 0, $call$i$i$i = 0, $cmp = 0, $cmp2 = 0, $conv$i = 0, $or$i = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp = sp;
 $cmp = ($__sz>>>0)>(4294967279);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $cmp2 = ($__sz>>>0)<(11);
 if ($cmp2) {
  $conv$i = $__sz&255;
  $__size_$i = ((($this)) + 11|0);
  HEAP8[$__size_$i>>0] = $conv$i;
  $__p$0 = $this;
 } else {
  $add$i$i = (($__sz) + 16)|0;
  $and$i$i = $add$i$i & -16;
  $call$i$i$i = (__Znwm($and$i$i)|0);
  HEAP32[$this>>2] = $call$i$i$i;
  $or$i = $and$i$i | -2147483648;
  $__cap_$i = ((($this)) + 8|0);
  HEAP32[$__cap_$i>>2] = $or$i;
  $__size_$i12 = ((($this)) + 4|0);
  HEAP32[$__size_$i12>>2] = $__sz;
  $__p$0 = $call$i$i$i;
 }
 (__ZNSt3__211char_traitsIcE4copyEPcPKcm($__p$0,$__s,$__sz)|0);
 $arrayidx = (($__p$0) + ($__sz)|0);
 HEAP8[$ref$tmp>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($arrayidx,$ref$tmp);
 STACKTOP = sp;return;
}
function __ZNSt3__211char_traitsIcE4copyEPcPKcm($__s1,$__s2,$__n) {
 $__s1 = $__s1|0;
 $__s2 = $__s2|0;
 $__n = $__n|0;
 var $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__n|0)==(0);
 if (!($cmp)) {
  _memcpy(($__s1|0),($__s2|0),($__n|0))|0;
 }
 return ($__s1|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $__cap_$i = 0, $__size_$i = 0, $and$i = 0, $tobool$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $__size_$i = ((($this)) + 11|0);
 $0 = HEAP8[$__size_$i>>0]|0;
 $tobool$i = ($0<<24>>24)<(0);
 if ($tobool$i) {
  $1 = HEAP32[$this>>2]|0;
  $__cap_$i = ((($this)) + 8|0);
  $2 = HEAP32[$__cap_$i>>2]|0;
  $and$i = $2 & 2147483647;
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($1,$and$i);
 }
 return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__cap_$i$i = 0, $__size_$i$i = 0, $__size_$i2$i = 0, $__size_$i3$i = 0, $and$i$i = 0, $arrayidx = 0, $cmp = 0, $cond$i = 0, $cond$i19 = 0, $cond$i25 = 0, $conv$i$i = 0, $conv$i$i29 = 0, $phitmp$i = 0, $ref$tmp = 0, $sub = 0;
 var $tobool$i$i = 0, $tobool$i$i28 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp = sp;
 $__size_$i$i = ((($this)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $__cap_$i$i = ((($this)) + 8|0);
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $cond$i = $phitmp$i;
 } else {
  $cond$i = 10;
 }
 $cmp = ($cond$i>>>0)<($__n>>>0);
 do {
  if ($cmp) {
   if ($tobool$i$i) {
    $__size_$i3$i = ((($this)) + 4|0);
    $4 = HEAP32[$__size_$i3$i>>2]|0;
    $cond$i25 = $4;
   } else {
    $conv$i$i = $0&255;
    $cond$i25 = $conv$i$i;
   }
   $sub = (($__n) - ($cond$i))|0;
   __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($this,$cond$i,$sub,$cond$i25,0,$cond$i25,$__n,$__s);
  } else {
   if ($tobool$i$i) {
    $2 = HEAP32[$this>>2]|0;
    $cond$i19 = $2;
   } else {
    $cond$i19 = $this;
   }
   (__ZNSt3__211char_traitsIcE4moveEPcPKcm($cond$i19,$__s,$__n)|0);
   $arrayidx = (($cond$i19) + ($__n)|0);
   HEAP8[$ref$tmp>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($arrayidx,$ref$tmp);
   $3 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i28 = ($3<<24>>24)<(0);
   if ($tobool$i$i28) {
    $__size_$i2$i = ((($this)) + 4|0);
    HEAP32[$__size_$i2$i>>2] = $__n;
    break;
   } else {
    $conv$i$i29 = $__n&255;
    HEAP8[$__size_$i$i>>0] = $conv$i$i29;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__211char_traitsIcE4moveEPcPKcm($__s1,$__s2,$__n) {
 $__s1 = $__s1|0;
 $__s2 = $__s2|0;
 $__n = $__n|0;
 var $cmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($__n|0)==(0);
 if (!($cmp)) {
  _memmove(($__s1|0),($__s2|0),($__n|0))|0;
 }
 return ($__s1|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sroa$speculated = 0, $0 = 0, $1 = 0, $__cap_$i = 0, $__size_$i = 0, $__size_$i$i = 0, $add = 0, $add$i$i = 0, $add$ptr = 0, $add$ptr33 = 0, $add$ptr34 = 0, $add$ptr36 = 0, $add$ptr37 = 0, $add40 = 0, $add48 = 0, $and$i$i = 0, $arrayidx = 0, $call$i$i$i = 0, $cmp = 0, $cmp$i = 0;
 var $cmp$i$i$i = 0, $cmp17 = 0, $cmp23 = 0, $cmp30 = 0, $cmp41 = 0, $cmp5 = 0, $cond$i = 0, $cond40 = 0, $mul = 0, $or$i = 0, $phitmp = 0, $ref$tmp49 = 0, $sub2 = 0, $sub28 = 0, $sub29 = 0, $tobool$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp49 = sp;
 $sub2 = (-18 - ($__old_cap))|0;
 $cmp = ($sub2>>>0)<($__delta_cap>>>0);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $__size_$i$i = ((($this)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $1 = HEAP32[$this>>2]|0;
  $cond$i = $1;
 } else {
  $cond$i = $this;
 }
 $cmp5 = ($__old_cap>>>0)<(2147483623);
 if ($cmp5) {
  $add = (($__delta_cap) + ($__old_cap))|0;
  $mul = $__old_cap << 1;
  $cmp$i$i$i = ($add>>>0)<($mul>>>0);
  $$sroa$speculated = $cmp$i$i$i ? $mul : $add;
  $cmp$i = ($$sroa$speculated>>>0)<(11);
  $add$i$i = (($$sroa$speculated) + 16)|0;
  $and$i$i = $add$i$i & -16;
  $phitmp = $cmp$i ? 11 : $and$i$i;
  $cond40 = $phitmp;
 } else {
  $cond40 = -17;
 }
 $call$i$i$i = (__Znwm($cond40)|0);
 $cmp17 = ($__n_copy|0)==(0);
 if (!($cmp17)) {
  (__ZNSt3__211char_traitsIcE4copyEPcPKcm($call$i$i$i,$cond$i,$__n_copy)|0);
 }
 $cmp23 = ($__n_add|0)==(0);
 if (!($cmp23)) {
  $add$ptr = (($call$i$i$i) + ($__n_copy)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcm($add$ptr,$__p_new_stuff,$__n_add)|0);
 }
 $sub28 = (($__old_sz) - ($__n_del))|0;
 $sub29 = (($sub28) - ($__n_copy))|0;
 $cmp30 = ($sub29|0)==(0);
 if (!($cmp30)) {
  $add$ptr33 = (($call$i$i$i) + ($__n_copy)|0);
  $add$ptr34 = (($add$ptr33) + ($__n_add)|0);
  $add$ptr36 = (($cond$i) + ($__n_copy)|0);
  $add$ptr37 = (($add$ptr36) + ($__n_del)|0);
  (__ZNSt3__211char_traitsIcE4copyEPcPKcm($add$ptr34,$add$ptr37,$sub29)|0);
 }
 $add40 = (($__old_cap) + 1)|0;
 $cmp41 = ($add40|0)==(11);
 if (!($cmp41)) {
  __ZNSt3__217_DeallocateCaller27__do_deallocate_handle_sizeEPvm($cond$i,$add40);
 }
 HEAP32[$this>>2] = $call$i$i$i;
 $or$i = $cond40 | -2147483648;
 $__cap_$i = ((($this)) + 8|0);
 HEAP32[$__cap_$i>>2] = $or$i;
 $add48 = (($sub28) + ($__n_add))|0;
 $__size_$i = ((($this)) + 4|0);
 HEAP32[$__size_$i>>2] = $add48;
 $arrayidx = (($call$i$i$i) + ($add48)|0);
 HEAP8[$ref$tmp49>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($arrayidx,$ref$tmp49);
 STACKTOP = sp;return;
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $call = 0, $call2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (__ZNSt3__211char_traitsIcE6lengthEPKc($__s)|0);
 $call2 = (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm($this,$__s,$call)|0);
 return ($call2|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $__cap_$i$i = 0, $__size_$i$i = 0, $__size_$i2$i = 0, $__size_$i3$i = 0, $add = 0, $add$ptr = 0, $add7 = 0, $and$i$i = 0, $arrayidx = 0, $cmp = 0, $cond$i24 = 0, $cond$i30 = 0, $cond$i35 = 0, $conv$i$i = 0, $conv$i$i34 = 0;
 var $phitmp$i = 0, $ref$tmp = 0, $sub = 0, $sub8 = 0, $tobool = 0, $tobool$i$i = 0, $tobool$i$i33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp = sp;
 $__size_$i$i = ((($this)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 if ($tobool$i$i) {
  $__cap_$i$i = ((($this)) + 8|0);
  $1 = HEAP32[$__cap_$i$i>>2]|0;
  $and$i$i = $1 & 2147483647;
  $phitmp$i = (($and$i$i) + -1)|0;
  $__size_$i3$i = ((($this)) + 4|0);
  $2 = HEAP32[$__size_$i3$i>>2]|0;
  $cond$i24 = $2;$cond$i35 = $phitmp$i;
 } else {
  $conv$i$i = $0&255;
  $cond$i24 = $conv$i$i;$cond$i35 = 10;
 }
 $sub = (($cond$i35) - ($cond$i24))|0;
 $cmp = ($sub>>>0)<($__n>>>0);
 if ($cmp) {
  $add7 = (($cond$i24) + ($__n))|0;
  $sub8 = (($add7) - ($cond$i35))|0;
  __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEmmmmmmPKc($this,$cond$i35,$sub8,$cond$i24,$cond$i24,0,$__n,$__s);
 } else {
  $tobool = ($__n|0)==(0);
  if (!($tobool)) {
   if ($tobool$i$i) {
    $3 = HEAP32[$this>>2]|0;
    $cond$i30 = $3;
   } else {
    $cond$i30 = $this;
   }
   $add$ptr = (($cond$i30) + ($cond$i24)|0);
   (__ZNSt3__211char_traitsIcE4copyEPcPKcm($add$ptr,$__s,$__n)|0);
   $add = (($cond$i24) + ($__n))|0;
   $4 = HEAP8[$__size_$i$i>>0]|0;
   $tobool$i$i33 = ($4<<24>>24)<(0);
   if ($tobool$i$i33) {
    $__size_$i2$i = ((($this)) + 4|0);
    HEAP32[$__size_$i2$i>>2] = $add;
   } else {
    $conv$i$i34 = $add&255;
    HEAP8[$__size_$i$i>>0] = $conv$i$i34;
   }
   $arrayidx = (($cond$i30) + ($add)|0);
   HEAP8[$ref$tmp>>0] = 0;
   __ZNSt3__211char_traitsIcE6assignERcRKc($arrayidx,$ref$tmp);
  }
 }
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcmm($this,$__s,$__sz,$__reserve) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 $__reserve = $__reserve|0;
 var $__cap_$i = 0, $__p$0 = 0, $__size_$i = 0, $__size_$i11 = 0, $add$i$i = 0, $and$i$i = 0, $arrayidx = 0, $call$i$i$i = 0, $cmp = 0, $cmp2 = 0, $conv$i = 0, $or$i = 0, $ref$tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ref$tmp = sp;
 $cmp = ($__reserve>>>0)>(4294967279);
 if ($cmp) {
  __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $cmp2 = ($__reserve>>>0)<(11);
 if ($cmp2) {
  $conv$i = $__sz&255;
  $__size_$i = ((($this)) + 11|0);
  HEAP8[$__size_$i>>0] = $conv$i;
  $__p$0 = $this;
 } else {
  $add$i$i = (($__reserve) + 16)|0;
  $and$i$i = $add$i$i & -16;
  $call$i$i$i = (__Znwm($and$i$i)|0);
  HEAP32[$this>>2] = $call$i$i$i;
  $or$i = $and$i$i | -2147483648;
  $__cap_$i = ((($this)) + 8|0);
  HEAP32[$__cap_$i>>2] = $or$i;
  $__size_$i11 = ((($this)) + 4|0);
  HEAP32[$__size_$i11>>2] = $__sz;
  $__p$0 = $call$i$i$i;
 }
 (__ZNSt3__211char_traitsIcE4copyEPcPKcm($__p$0,$__s,$__sz)|0);
 $arrayidx = (($__p$0) + ($__sz)|0);
 HEAP8[$ref$tmp>>0] = 0;
 __ZNSt3__211char_traitsIcE6assignERcRKc($arrayidx,$ref$tmp);
 STACKTOP = sp;return;
}
function __ZNSt3__2plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_($agg$result,$__lhs,$__rhs) {
 $agg$result = $agg$result|0;
 $__lhs = $__lhs|0;
 $__rhs = $__rhs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $__i$0$i$i = 0, $__size_$i$i = 0, $__size_$i3$i = 0, $add = 0, $arrayidx$i$i = 0, $call = 0, $cond$i = 0, $cond$i$i = 0, $conv$i$i = 0, $exitcond$i$i = 0, $inc$i$i = 0, $tobool$i$i = 0, $tobool$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $__i$0$i$i = 0;
 while(1) {
  $exitcond$i$i = ($__i$0$i$i|0)==(3);
  if ($exitcond$i$i) {
   break;
  }
  $arrayidx$i$i = (($agg$result) + ($__i$0$i$i<<2)|0);
  HEAP32[$arrayidx$i$i>>2] = 0;
  $inc$i$i = (($__i$0$i$i) + 1)|0;
  $__i$0$i$i = $inc$i$i;
 }
 $call = (__ZNSt3__211char_traitsIcE6lengthEPKc($__lhs)|0);
 $__size_$i$i = ((($__rhs)) + 11|0);
 $0 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i = ($0<<24>>24)<(0);
 $__size_$i3$i = ((($__rhs)) + 4|0);
 $1 = HEAP32[$__size_$i3$i>>2]|0;
 $conv$i$i = $0&255;
 $cond$i = $tobool$i$i ? $1 : $conv$i$i;
 $add = (($cond$i) + ($call))|0;
 __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcmm($agg$result,$__lhs,$call,$add);
 $2 = HEAP8[$__size_$i$i>>0]|0;
 $tobool$i$i$i = ($2<<24>>24)<(0);
 $3 = HEAP32[$__rhs>>2]|0;
 $cond$i$i = $tobool$i$i$i ? $3 : $__rhs;
 (__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm($agg$result,$cond$i$i,$cond$i)|0);
 return;
}
function __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _abort();
 // unreachable;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i134 = 0, $$pre$i194 = 0, $$pre$i31$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i195Z2D = 0, $$pre$phi$i32$iZ2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F$0$i$i = 0, $F104$0 = 0, $F197$0$i = 0, $F224$0$i$i = 0, $F290$0$i = 0, $I252$0$i$i = 0, $I316$0$i = 0, $I57$0$i$i = 0, $K105$010$i$i = 0;
 var $K305$08$i$i = 0, $K373$015$i = 0, $R$1$i = 0, $R$1$i$be = 0, $R$1$i$i = 0, $R$1$i$i$be = 0, $R$1$i$i$ph = 0, $R$1$i$ph = 0, $R$1$i183 = 0, $R$1$i183$be = 0, $R$1$i183$ph = 0, $R$3$i = 0, $R$3$i$i = 0, $R$3$i188 = 0, $RP$1$i = 0, $RP$1$i$be = 0, $RP$1$i$i = 0, $RP$1$i$i$be = 0, $RP$1$i$i$ph = 0, $RP$1$i$ph = 0;
 var $RP$1$i182 = 0, $RP$1$i182$be = 0, $RP$1$i182$ph = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i34$i = 0, $T$014$i = 0, $T$07$i$i = 0, $T$09$i$i = 0, $add$i = 0, $add$i$i = 0, $add$i135 = 0, $add$i155 = 0, $add$ptr = 0, $add$ptr$i = 0, $add$ptr$i$i = 0, $add$ptr$i$i$i = 0, $add$ptr$i141 = 0, $add$ptr$i174 = 0, $add$ptr$i2$i$i = 0;
 var $add$ptr$i35$i = 0, $add$ptr$i43$i = 0, $add$ptr$i57$i = 0, $add$ptr14$i$i = 0, $add$ptr15$i$i = 0, $add$ptr16$i$i = 0, $add$ptr166 = 0, $add$ptr169 = 0, $add$ptr17$i$i = 0, $add$ptr178 = 0, $add$ptr181$i = 0, $add$ptr182 = 0, $add$ptr189$i = 0, $add$ptr190$i = 0, $add$ptr193 = 0, $add$ptr199 = 0, $add$ptr2$i$i = 0, $add$ptr205$i$i = 0, $add$ptr212$i$i = 0, $add$ptr225$i = 0;
 var $add$ptr227$i = 0, $add$ptr24$i$i = 0, $add$ptr262$i = 0, $add$ptr269$i = 0, $add$ptr273$i = 0, $add$ptr282$i = 0, $add$ptr3$i$i = 0, $add$ptr30$i$i = 0, $add$ptr369$i$i = 0, $add$ptr4$i$i = 0, $add$ptr4$i$i$i = 0, $add$ptr4$i41$i = 0, $add$ptr4$i49$i = 0, $add$ptr441$i = 0, $add$ptr5$i$i = 0, $add$ptr6$i$i = 0, $add$ptr6$i$i$i = 0, $add$ptr6$i53$i = 0, $add$ptr7$i$i = 0, $add$ptr81$i$i = 0;
 var $add$ptr95 = 0, $add$ptr98 = 0, $add10$i = 0, $add101$i = 0, $add110$i = 0, $add13$i = 0, $add14$i = 0, $add140$i = 0, $add144 = 0, $add150$i = 0, $add17$i = 0, $add17$i158 = 0, $add177$i = 0, $add18$i = 0, $add19$i = 0, $add2 = 0, $add20$i = 0, $add206$i$i = 0, $add212$i = 0, $add215$i = 0;
 var $add22$i = 0, $add246$i = 0, $add26$i$i = 0, $add268$i = 0, $add269$i$i = 0, $add274$i$i = 0, $add278$i$i = 0, $add280$i$i = 0, $add283$i$i = 0, $add337$i = 0, $add342$i = 0, $add346$i = 0, $add348$i = 0, $add351$i = 0, $add46$i = 0, $add50 = 0, $add51$i = 0, $add54 = 0, $add54$i = 0, $add58 = 0;
 var $add62 = 0, $add64 = 0, $add74$i$i = 0, $add77$i = 0, $add78$i = 0, $add79$i$i = 0, $add8 = 0, $add82$i = 0, $add83$i$i = 0, $add85$i$i = 0, $add86$i = 0, $add88$i$i = 0, $add9$i = 0, $add90$i = 0, $add92$i = 0, $and = 0, $and$i = 0, $and$i$i = 0, $and$i$i$i = 0, $and$i14$i = 0;
 var $and$i152 = 0, $and$i36$i = 0, $and$i44$i = 0, $and100$i = 0, $and103$i = 0, $and104$i = 0, $and106 = 0, $and11$i = 0, $and119$i$i = 0, $and1197$i$i = 0, $and12$i = 0, $and13$i = 0, $and13$i$i = 0, $and133$i$i = 0, $and14 = 0, $and145 = 0, $and17$i = 0, $and194$i = 0, $and194$i191 = 0, $and199$i = 0;
 var $and209$i$i = 0, $and21$i = 0, $and21$i159 = 0, $and227$i$i = 0, $and236$i = 0, $and264$i$i = 0, $and268$i$i = 0, $and273$i$i = 0, $and282$i$i = 0, $and29$i = 0, $and292$i = 0, $and295$i$i = 0, $and3$i = 0, $and3$i$i = 0, $and3$i$i$i = 0, $and3$i39$i = 0, $and3$i47$i = 0, $and30$i = 0, $and318$i$i = 0, $and3185$i$i = 0;
 var $and32$i = 0, $and32$i$i = 0, $and33$i$i = 0, $and331$i = 0, $and336$i = 0, $and341$i = 0, $and350$i = 0, $and363$i = 0, $and37$i$i = 0, $and387$i = 0, $and38712$i = 0, $and4 = 0, $and40$i$i = 0, $and41 = 0, $and42$i = 0, $and43 = 0, $and46 = 0, $and49 = 0, $and49$i = 0, $and49$i$i = 0;
 var $and53 = 0, $and57 = 0, $and6$i = 0, $and6$i$i = 0, $and6$i13$i = 0, $and6$i18$i = 0, $and61 = 0, $and64$i = 0, $and68$i = 0, $and69$i$i = 0, $and7 = 0, $and73$i = 0, $and73$i$i = 0, $and74 = 0, $and77$i = 0, $and78$i$i = 0, $and8$i = 0, $and80$i = 0, $and81$i = 0, $and85$i = 0;
 var $and87$i$i = 0, $and89$i = 0, $and9$i = 0, $and96$i$i = 0, $arrayidx = 0, $arrayidx$i = 0, $arrayidx$i$i = 0, $arrayidx$i160 = 0, $arrayidx103 = 0, $arrayidx103$i$i = 0, $arrayidx106$i = 0, $arrayidx107$i$i = 0, $arrayidx113$i = 0, $arrayidx113$i173 = 0, $arrayidx121$i = 0, $arrayidx121$i$sink = 0, $arrayidx123$i$i = 0, $arrayidx126$i$i = 0, $arrayidx137$i = 0, $arrayidx143$i$i = 0;
 var $arrayidx148$i = 0, $arrayidx151$i = 0, $arrayidx151$i$i = 0, $arrayidx151$i$i$sink = 0, $arrayidx154$i = 0, $arrayidx155$i = 0, $arrayidx161$i = 0, $arrayidx165$i = 0, $arrayidx165$i185 = 0, $arrayidx178$i$i = 0, $arrayidx184$i = 0, $arrayidx184$i$i = 0, $arrayidx195$i$i = 0, $arrayidx196$i = 0, $arrayidx204$i = 0, $arrayidx212$i = 0, $arrayidx212$i$sink = 0, $arrayidx223$i$i = 0, $arrayidx228$i = 0, $arrayidx23$i = 0;
 var $arrayidx239$i = 0, $arrayidx245$i = 0, $arrayidx256$i = 0, $arrayidx27$i = 0, $arrayidx287$i$i = 0, $arrayidx289$i = 0, $arrayidx290$i$i = 0, $arrayidx325$i$i = 0, $arrayidx355$i = 0, $arrayidx358$i = 0, $arrayidx394$i = 0, $arrayidx40$i = 0, $arrayidx44$i = 0, $arrayidx61$i = 0, $arrayidx65$i = 0, $arrayidx66 = 0, $arrayidx71$i = 0, $arrayidx75$i = 0, $arrayidx91$i$i = 0, $arrayidx92$i$i = 0;
 var $arrayidx94$i = 0, $arrayidx94$i170 = 0, $arrayidx96$i$i = 0, $bk$i = 0, $bk$i$i = 0, $bk$i176 = 0, $bk$i26$i = 0, $bk102$i$i = 0, $bk122 = 0, $bk124 = 0, $bk139$i$i = 0, $bk145$i = 0, $bk158$i$i = 0, $bk161$i$i = 0, $bk18 = 0, $bk218$i = 0, $bk220$i = 0, $bk246$i$i = 0, $bk248$i$i = 0, $bk302$i$i = 0;
 var $bk311$i = 0, $bk313$i = 0, $bk338$i$i = 0, $bk357$i$i = 0, $bk360$i$i = 0, $bk370$i = 0, $bk407$i = 0, $bk429$i = 0, $bk432$i = 0, $bk55$i$i = 0, $bk56$i = 0, $bk67$i$i = 0, $bk74$i$i = 0, $bk85 = 0, $bk91$i$i = 0, $br$2$ph$i = 0, $call107$i = 0, $call131$i = 0, $call132$i = 0, $call275$i = 0;
 var $call37$i = 0, $call68$i = 0, $call83$i = 0, $child$i$i = 0, $child166$i$i = 0, $child289$i$i = 0, $child357$i = 0, $cmp = 0, $cmp$i = 0, $cmp$i$i$i = 0, $cmp$i12$i = 0, $cmp$i133 = 0, $cmp$i149 = 0, $cmp$i15$i = 0, $cmp$i3$i$i = 0, $cmp$i37$i = 0, $cmp$i45$i = 0, $cmp$i55$i = 0, $cmp1 = 0, $cmp1$i = 0;
 var $cmp10 = 0, $cmp100$i$i = 0, $cmp102$i = 0, $cmp104$i$i = 0, $cmp105$i = 0, $cmp106$i$i = 0, $cmp107$i = 0, $cmp108$i = 0, $cmp108$i$i = 0, $cmp114$i = 0, $cmp116$i = 0, $cmp118$i = 0, $cmp119$i = 0, $cmp12$i = 0, $cmp120$i$i = 0, $cmp120$i28$i = 0, $cmp1208$i$i = 0, $cmp123$i = 0, $cmp124$i$i = 0, $cmp126$i = 0;
 var $cmp127$i = 0, $cmp128 = 0, $cmp128$i = 0, $cmp128$i$i = 0, $cmp133$i = 0, $cmp135$i = 0, $cmp137$i = 0, $cmp138$i = 0, $cmp139 = 0, $cmp141$i = 0, $cmp144$i$i = 0, $cmp146 = 0, $cmp147$i = 0, $cmp14799$i = 0, $cmp15$i = 0, $cmp151$i = 0, $cmp152$i = 0, $cmp155$i = 0, $cmp156 = 0, $cmp156$i = 0;
 var $cmp156$i$i = 0, $cmp157$i = 0, $cmp159$i = 0, $cmp162 = 0, $cmp162$i = 0, $cmp162$i184 = 0, $cmp166$i = 0, $cmp168$i$i = 0, $cmp174$i = 0, $cmp180$i = 0, $cmp185$i = 0, $cmp185$i$i = 0, $cmp186 = 0, $cmp186$i = 0, $cmp19$i = 0, $cmp190$i = 0, $cmp191$i = 0, $cmp2$i$i = 0, $cmp2$i$i$i = 0, $cmp20$i$i = 0;
 var $cmp203$i = 0, $cmp205$i = 0, $cmp209$i = 0, $cmp21$i = 0, $cmp215$i$i = 0, $cmp217$i = 0, $cmp218$i = 0, $cmp224$i = 0, $cmp228$i = 0, $cmp229$i = 0, $cmp24$i = 0, $cmp24$i$i = 0, $cmp246$i = 0, $cmp254$i$i = 0, $cmp257$i = 0, $cmp258$i$i = 0, $cmp26$i = 0, $cmp265$i = 0, $cmp27$i$i = 0, $cmp28$i = 0;
 var $cmp28$i$i = 0, $cmp284$i = 0, $cmp29 = 0, $cmp3$i$i = 0, $cmp306$i$i = 0, $cmp31 = 0, $cmp319$i = 0, $cmp319$i$i = 0, $cmp3196$i$i = 0, $cmp32$i = 0, $cmp32$i138 = 0, $cmp323$i = 0, $cmp327$i$i = 0, $cmp34$i = 0, $cmp34$i$i = 0, $cmp35$i = 0, $cmp36$i = 0, $cmp36$i$i = 0, $cmp374$i = 0, $cmp38$i = 0;
 var $cmp38$i$i = 0, $cmp388$i = 0, $cmp38813$i = 0, $cmp396$i = 0, $cmp40$i = 0, $cmp43$i = 0, $cmp45$i = 0, $cmp46$i = 0, $cmp46$i$i = 0, $cmp49$i = 0, $cmp5 = 0, $cmp55$i = 0, $cmp55$i166 = 0, $cmp57$i = 0, $cmp57$i167 = 0, $cmp59$i$i = 0, $cmp60$i = 0, $cmp62$i = 0, $cmp63$i = 0, $cmp63$i$i = 0;
 var $cmp65$i = 0, $cmp66$i = 0, $cmp66$i140 = 0, $cmp69$i = 0, $cmp7$i$i = 0, $cmp70 = 0, $cmp72$i = 0, $cmp75$i$i = 0, $cmp76$i = 0, $cmp81$i = 0, $cmp85$i = 0, $cmp89$i = 0, $cmp9$i$i = 0, $cmp90$i = 0, $cmp91$i = 0, $cmp93$i = 0, $cmp95$i = 0, $cmp96$i = 0, $cmp97$i = 0, $cmp97$i$i = 0;
 var $cmp9716$i = 0, $cmp99 = 0, $cond = 0, $cond$i = 0, $cond$i$i = 0, $cond$i$i$i = 0, $cond$i17$i = 0, $cond$i40$i = 0, $cond$i48$i = 0, $cond1$i$i = 0, $cond115$i = 0, $cond115$i$i = 0, $cond13$i$i = 0, $cond15$i$i = 0, $cond2$i = 0, $cond3$i = 0, $cond315$i$i = 0, $cond383$i = 0, $cond4$i = 0, $fd$i = 0;
 var $fd$i$i = 0, $fd$i177 = 0, $fd103$i$i = 0, $fd123 = 0, $fd140$i$i = 0, $fd146$i = 0, $fd148$i$i = 0, $fd160$i$i = 0, $fd219$i = 0, $fd247$i$i = 0, $fd303$i$i = 0, $fd312$i = 0, $fd339$i$i = 0, $fd344$i$i = 0, $fd359$i$i = 0, $fd371$i = 0, $fd408$i = 0, $fd416$i = 0, $fd431$i = 0, $fd54$i$i = 0;
 var $fd57$i = 0, $fd68$i$i = 0, $fd69 = 0, $fd78$i$i = 0, $fd9 = 0, $fd92$i$i = 0, $head = 0, $head$i = 0, $head$i$i = 0, $head$i$i$i = 0, $head$i164 = 0, $head$i22$i = 0, $head$i42$i = 0, $head$i52$i = 0, $head118$i$i = 0, $head1186$i$i = 0, $head168 = 0, $head173 = 0, $head177 = 0, $head179 = 0;
 var $head179$i = 0, $head182$i = 0, $head187$i = 0, $head189$i = 0, $head195 = 0, $head198 = 0, $head208$i$i = 0, $head211$i$i = 0, $head23$i$i = 0, $head25 = 0, $head26$i$i = 0, $head265$i = 0, $head268$i = 0, $head271$i = 0, $head274$i = 0, $head279$i = 0, $head281$i = 0, $head29$i = 0, $head29$i$i = 0, $head317$i$i = 0;
 var $head3174$i$i = 0, $head32$i$i = 0, $head34$i$i = 0, $head386$i = 0, $head38611$i = 0, $head7$i$i = 0, $head7$i$i$i = 0, $head7$i54$i = 0, $head94 = 0, $head97 = 0, $head99$i = 0, $idx$0$i = 0, $index$i = 0, $index$i$i = 0, $index$i189 = 0, $index$i29$i = 0, $index288$i$i = 0, $index356$i = 0, $magic$i$i = 0, $nb$0 = 0;
 var $neg = 0, $neg$i = 0, $neg$i$i = 0, $neg$i137 = 0, $neg$i190 = 0, $neg103$i = 0, $neg13 = 0, $neg132$i$i = 0, $neg48$i = 0, $neg73 = 0, $next$i = 0, $next$i$i = 0, $next$i$i$i = 0, $next231$i = 0, $not$cmp141$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i168 = 0, $or$cond1$i = 0, $or$cond1$i165 = 0;
 var $or$cond11$i = 0, $or$cond2$i = 0, $or$cond4$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $or$cond8$not$i = 0, $or$cond97$i = 0, $or$cond98$i = 0, $or$i = 0, $or$i$i = 0, $or$i$i$i = 0, $or$i169 = 0, $or$i51$i = 0, $or101$i$i = 0, $or110 = 0, $or167 = 0, $or172 = 0, $or176 = 0, $or178$i = 0;
 var $or180 = 0, $or183$i = 0, $or186$i = 0, $or188$i = 0, $or19$i$i = 0, $or194 = 0, $or197 = 0, $or204$i = 0, $or210$i$i = 0, $or22$i$i = 0, $or23 = 0, $or232$i$i = 0, $or26 = 0, $or264$i = 0, $or267$i = 0, $or270$i = 0, $or275$i = 0, $or278$i = 0, $or28$i$i = 0, $or280$i = 0;
 var $or297$i = 0, $or300$i$i = 0, $or33$i$i = 0, $or368$i = 0, $or40 = 0, $or44$i$i = 0, $or93 = 0, $or96 = 0, $parent$i = 0, $parent$i$i = 0, $parent$i175 = 0, $parent$i27$i = 0, $parent135$i = 0, $parent138$i$i = 0, $parent149$i = 0, $parent162$i$i = 0, $parent165$i$i = 0, $parent166$i = 0, $parent179$i$i = 0, $parent196$i$i = 0;
 var $parent226$i = 0, $parent240$i = 0, $parent257$i = 0, $parent301$i$i = 0, $parent337$i$i = 0, $parent361$i$i = 0, $parent369$i = 0, $parent406$i = 0, $parent433$i = 0, $qsize$0$i$i = 0, $retval$0 = 0, $rsize$0$i = 0, $rsize$0$i162 = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$418$i = 0, $rsize$418$i$ph = 0, $rst$0$i = 0, $rst$1$i = 0;
 var $sflags193$i = 0, $sflags235$i = 0, $shl = 0, $shl$i = 0, $shl$i$i = 0, $shl$i153 = 0, $shl102 = 0, $shl105 = 0, $shl116$i$i = 0, $shl12 = 0, $shl127$i$i = 0, $shl131$i$i = 0, $shl15$i = 0, $shl18$i = 0, $shl192$i = 0, $shl195$i = 0, $shl198$i = 0, $shl22 = 0, $shl222$i$i = 0, $shl226$i$i = 0;
 var $shl265$i$i = 0, $shl270$i$i = 0, $shl276$i$i = 0, $shl279$i$i = 0, $shl288$i = 0, $shl291$i = 0, $shl294$i$i = 0, $shl31$i = 0, $shl316$i$i = 0, $shl326$i$i = 0, $shl333$i = 0, $shl338$i = 0, $shl344$i = 0, $shl347$i = 0, $shl35 = 0, $shl362$i = 0, $shl37 = 0, $shl384$i = 0, $shl39$i$i = 0, $shl395$i = 0;
 var $shl48$i$i = 0, $shl60$i = 0, $shl65 = 0, $shl70$i$i = 0, $shl72 = 0, $shl75$i$i = 0, $shl81$i$i = 0, $shl84$i$i = 0, $shl9$i = 0, $shl90 = 0, $shl95$i$i = 0, $shr = 0, $shr$i = 0, $shr$i$i = 0, $shr$i148 = 0, $shr$i25$i = 0, $shr101 = 0, $shr11$i = 0, $shr11$i156 = 0, $shr110$i$i = 0;
 var $shr12$i = 0, $shr124$i$i = 0, $shr15$i = 0, $shr16$i = 0, $shr16$i157 = 0, $shr19$i = 0, $shr194$i = 0, $shr20$i = 0, $shr214$i$i = 0, $shr253$i$i = 0, $shr263$i$i = 0, $shr267$i$i = 0, $shr27$i = 0, $shr272$i$i = 0, $shr277$i$i = 0, $shr281$i$i = 0, $shr283$i = 0, $shr3 = 0, $shr310$i$i = 0, $shr318$i = 0;
 var $shr323$i$i = 0, $shr330$i = 0, $shr335$i = 0, $shr340$i = 0, $shr345$i = 0, $shr349$i = 0, $shr378$i = 0, $shr392$i = 0, $shr4$i = 0, $shr42$i = 0, $shr45 = 0, $shr47 = 0, $shr48 = 0, $shr5$i = 0, $shr5$i151 = 0, $shr51 = 0, $shr52 = 0, $shr55 = 0, $shr56 = 0, $shr58$i$i = 0;
 var $shr59 = 0, $shr60 = 0, $shr63 = 0, $shr68$i$i = 0, $shr7$i = 0, $shr7$i154 = 0, $shr72$i = 0, $shr72$i$i = 0, $shr75$i = 0, $shr76$i = 0, $shr77$i$i = 0, $shr79$i = 0, $shr8$i = 0, $shr80$i = 0, $shr82$i$i = 0, $shr83$i = 0, $shr84$i = 0, $shr86$i$i = 0, $shr87$i = 0, $shr88$i = 0;
 var $shr91$i = 0, $size$i$i = 0, $size$i$i$i = 0, $size$i$i$le = 0, $size188$i = 0, $size188$i$le = 0, $size245$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$0112$i = 0, $sp$1111$i = 0, $spec$select$i = 0, $spec$select$i171 = 0, $spec$select1$i = 0, $spec$select2$i = 0, $spec$select5$i = 0, $spec$select9$i = 0, $spec$select96$i = 0, $ssize$2$ph$i = 0;
 var $sub = 0, $sub$i = 0, $sub$i$i = 0, $sub$i$i$i = 0, $sub$i136 = 0, $sub$i147 = 0, $sub$i16$i = 0, $sub$i38$i = 0, $sub$i46$i = 0, $sub$ptr$lhs$cast$i = 0, $sub$ptr$lhs$cast$i$i = 0, $sub$ptr$lhs$cast$i19$i = 0, $sub$ptr$rhs$cast$i = 0, $sub$ptr$rhs$cast$i$i = 0, $sub$ptr$rhs$cast$i20$i = 0, $sub$ptr$sub$i = 0, $sub$ptr$sub$i$i = 0, $sub$ptr$sub$i21$i = 0, $sub10$i = 0, $sub101$i = 0;
 var $sub112$i = 0, $sub113$i$i = 0, $sub118$i = 0, $sub12$i$i = 0, $sub14$i = 0, $sub16$i$i = 0, $sub160 = 0, $sub172$i = 0, $sub18$i$i = 0, $sub190 = 0, $sub2$i = 0, $sub22$i = 0, $sub260$i = 0, $sub262$i$i = 0, $sub266$i$i = 0, $sub271$i$i = 0, $sub275$i$i = 0, $sub30$i = 0, $sub31$i = 0, $sub313$i$i = 0;
 var $sub329$i = 0, $sub33$i = 0, $sub334$i = 0, $sub339$i = 0, $sub343$i = 0, $sub381$i = 0, $sub4$i = 0, $sub41$i = 0, $sub42 = 0, $sub44 = 0, $sub5$i$i = 0, $sub5$i$i$i = 0, $sub5$i50$i = 0, $sub50$i = 0, $sub6$i = 0, $sub63$i = 0, $sub67$i = 0, $sub67$i$i = 0, $sub70$i = 0, $sub71$i$i = 0;
 var $sub76$i$i = 0, $sub80$i$i = 0, $sub91 = 0, $sub99$i = 0, $t$0$i = 0, $t$0$i161 = 0, $t$2$i = 0, $t$4$i = 0, $t$517$i = 0, $t$517$i$ph = 0, $tbase$795$i = 0, $tobool$i$i = 0, $tobool107 = 0, $tobool195$i = 0, $tobool200$i = 0, $tobool228$i$i = 0, $tobool237$i = 0, $tobool293$i = 0, $tobool296$i$i = 0, $tobool30$i = 0;
 var $tobool364$i = 0, $tobool97$i$i = 0, $tsize$2647482$i = 0, $tsize$4$i = 0, $tsize$794$i = 0, $v$0$i = 0, $v$0$i163 = 0, $v$1$i = 0, $v$3$i = 0, $v$3$i204 = 0, $v$4$lcssa$i = 0, $v$419$i = 0, $v$419$i$ph = 0, $xor$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $magic$i$i = sp;
 $cmp = ($bytes>>>0)<(245);
 do {
  if ($cmp) {
   $cmp1 = ($bytes>>>0)<(11);
   $add2 = (($bytes) + 11)|0;
   $and = $add2 & -8;
   $cond = $cmp1 ? 16 : $and;
   $shr = $cond >>> 3;
   $0 = HEAP32[8705]|0;
   $shr3 = $0 >>> $shr;
   $and4 = $shr3 & 3;
   $cmp5 = ($and4|0)==(0);
   if (!($cmp5)) {
    $neg = $shr3 & 1;
    $and7 = $neg ^ 1;
    $add8 = (($and7) + ($shr))|0;
    $shl = $add8 << 1;
    $arrayidx = (34860 + ($shl<<2)|0);
    $1 = ((($arrayidx)) + 8|0);
    $2 = HEAP32[$1>>2]|0;
    $fd9 = ((($2)) + 8|0);
    $3 = HEAP32[$fd9>>2]|0;
    $cmp10 = ($3|0)==($arrayidx|0);
    if ($cmp10) {
     $shl12 = 1 << $add8;
     $neg13 = $shl12 ^ -1;
     $and14 = $0 & $neg13;
     HEAP32[8705] = $and14;
    } else {
     $bk18 = ((($3)) + 12|0);
     HEAP32[$bk18>>2] = $arrayidx;
     HEAP32[$1>>2] = $3;
    }
    $shl22 = $add8 << 3;
    $or23 = $shl22 | 3;
    $head = ((($2)) + 4|0);
    HEAP32[$head>>2] = $or23;
    $add$ptr = (($2) + ($shl22)|0);
    $head25 = ((($add$ptr)) + 4|0);
    $4 = HEAP32[$head25>>2]|0;
    $or26 = $4 | 1;
    HEAP32[$head25>>2] = $or26;
    $retval$0 = $fd9;
    STACKTOP = sp;return ($retval$0|0);
   }
   $5 = HEAP32[(34828)>>2]|0;
   $cmp29 = ($cond>>>0)>($5>>>0);
   if ($cmp29) {
    $cmp31 = ($shr3|0)==(0);
    if (!($cmp31)) {
     $shl35 = $shr3 << $shr;
     $shl37 = 2 << $shr;
     $sub = (0 - ($shl37))|0;
     $or40 = $shl37 | $sub;
     $and41 = $shl35 & $or40;
     $sub42 = (0 - ($and41))|0;
     $and43 = $and41 & $sub42;
     $sub44 = (($and43) + -1)|0;
     $shr45 = $sub44 >>> 12;
     $and46 = $shr45 & 16;
     $shr47 = $sub44 >>> $and46;
     $shr48 = $shr47 >>> 5;
     $and49 = $shr48 & 8;
     $add50 = $and49 | $and46;
     $shr51 = $shr47 >>> $and49;
     $shr52 = $shr51 >>> 2;
     $and53 = $shr52 & 4;
     $add54 = $add50 | $and53;
     $shr55 = $shr51 >>> $and53;
     $shr56 = $shr55 >>> 1;
     $and57 = $shr56 & 2;
     $add58 = $add54 | $and57;
     $shr59 = $shr55 >>> $and57;
     $shr60 = $shr59 >>> 1;
     $and61 = $shr60 & 1;
     $add62 = $add58 | $and61;
     $shr63 = $shr59 >>> $and61;
     $add64 = (($add62) + ($shr63))|0;
     $shl65 = $add64 << 1;
     $arrayidx66 = (34860 + ($shl65<<2)|0);
     $6 = ((($arrayidx66)) + 8|0);
     $7 = HEAP32[$6>>2]|0;
     $fd69 = ((($7)) + 8|0);
     $8 = HEAP32[$fd69>>2]|0;
     $cmp70 = ($8|0)==($arrayidx66|0);
     if ($cmp70) {
      $shl72 = 1 << $add64;
      $neg73 = $shl72 ^ -1;
      $and74 = $0 & $neg73;
      HEAP32[8705] = $and74;
      $10 = $and74;
     } else {
      $bk85 = ((($8)) + 12|0);
      HEAP32[$bk85>>2] = $arrayidx66;
      HEAP32[$6>>2] = $8;
      $10 = $0;
     }
     $shl90 = $add64 << 3;
     $sub91 = (($shl90) - ($cond))|0;
     $or93 = $cond | 3;
     $head94 = ((($7)) + 4|0);
     HEAP32[$head94>>2] = $or93;
     $add$ptr95 = (($7) + ($cond)|0);
     $or96 = $sub91 | 1;
     $head97 = ((($add$ptr95)) + 4|0);
     HEAP32[$head97>>2] = $or96;
     $add$ptr98 = (($7) + ($shl90)|0);
     HEAP32[$add$ptr98>>2] = $sub91;
     $cmp99 = ($5|0)==(0);
     if (!($cmp99)) {
      $9 = HEAP32[(34840)>>2]|0;
      $shr101 = $5 >>> 3;
      $shl102 = $shr101 << 1;
      $arrayidx103 = (34860 + ($shl102<<2)|0);
      $shl105 = 1 << $shr101;
      $and106 = $10 & $shl105;
      $tobool107 = ($and106|0)==(0);
      if ($tobool107) {
       $or110 = $10 | $shl105;
       HEAP32[8705] = $or110;
       $$pre = ((($arrayidx103)) + 8|0);
       $$pre$phiZ2D = $$pre;$F104$0 = $arrayidx103;
      } else {
       $11 = ((($arrayidx103)) + 8|0);
       $12 = HEAP32[$11>>2]|0;
       $$pre$phiZ2D = $11;$F104$0 = $12;
      }
      HEAP32[$$pre$phiZ2D>>2] = $9;
      $bk122 = ((($F104$0)) + 12|0);
      HEAP32[$bk122>>2] = $9;
      $fd123 = ((($9)) + 8|0);
      HEAP32[$fd123>>2] = $F104$0;
      $bk124 = ((($9)) + 12|0);
      HEAP32[$bk124>>2] = $arrayidx103;
     }
     HEAP32[(34828)>>2] = $sub91;
     HEAP32[(34840)>>2] = $add$ptr95;
     $retval$0 = $fd69;
     STACKTOP = sp;return ($retval$0|0);
    }
    $13 = HEAP32[(34824)>>2]|0;
    $cmp128 = ($13|0)==(0);
    if ($cmp128) {
     $nb$0 = $cond;
    } else {
     $sub$i = (0 - ($13))|0;
     $and$i = $13 & $sub$i;
     $sub2$i = (($and$i) + -1)|0;
     $shr$i = $sub2$i >>> 12;
     $and3$i = $shr$i & 16;
     $shr4$i = $sub2$i >>> $and3$i;
     $shr5$i = $shr4$i >>> 5;
     $and6$i = $shr5$i & 8;
     $add$i = $and6$i | $and3$i;
     $shr7$i = $shr4$i >>> $and6$i;
     $shr8$i = $shr7$i >>> 2;
     $and9$i = $shr8$i & 4;
     $add10$i = $add$i | $and9$i;
     $shr11$i = $shr7$i >>> $and9$i;
     $shr12$i = $shr11$i >>> 1;
     $and13$i = $shr12$i & 2;
     $add14$i = $add10$i | $and13$i;
     $shr15$i = $shr11$i >>> $and13$i;
     $shr16$i = $shr15$i >>> 1;
     $and17$i = $shr16$i & 1;
     $add18$i = $add14$i | $and17$i;
     $shr19$i = $shr15$i >>> $and17$i;
     $add20$i = (($add18$i) + ($shr19$i))|0;
     $arrayidx$i = (35124 + ($add20$i<<2)|0);
     $14 = HEAP32[$arrayidx$i>>2]|0;
     $head$i = ((($14)) + 4|0);
     $15 = HEAP32[$head$i>>2]|0;
     $and21$i = $15 & -8;
     $sub22$i = (($and21$i) - ($cond))|0;
     $rsize$0$i = $sub22$i;$t$0$i = $14;$v$0$i = $14;
     while(1) {
      $arrayidx23$i = ((($t$0$i)) + 16|0);
      $16 = HEAP32[$arrayidx23$i>>2]|0;
      $cmp$i = ($16|0)==(0|0);
      if ($cmp$i) {
       $arrayidx27$i = ((($t$0$i)) + 20|0);
       $17 = HEAP32[$arrayidx27$i>>2]|0;
       $cmp28$i = ($17|0)==(0|0);
       if ($cmp28$i) {
        break;
       } else {
        $cond4$i = $17;
       }
      } else {
       $cond4$i = $16;
      }
      $head29$i = ((($cond4$i)) + 4|0);
      $18 = HEAP32[$head29$i>>2]|0;
      $and30$i = $18 & -8;
      $sub31$i = (($and30$i) - ($cond))|0;
      $cmp32$i = ($sub31$i>>>0)<($rsize$0$i>>>0);
      $spec$select$i = $cmp32$i ? $sub31$i : $rsize$0$i;
      $spec$select1$i = $cmp32$i ? $cond4$i : $v$0$i;
      $rsize$0$i = $spec$select$i;$t$0$i = $cond4$i;$v$0$i = $spec$select1$i;
     }
     $add$ptr$i = (($v$0$i) + ($cond)|0);
     $cmp35$i = ($add$ptr$i>>>0)>($v$0$i>>>0);
     if ($cmp35$i) {
      $parent$i = ((($v$0$i)) + 24|0);
      $19 = HEAP32[$parent$i>>2]|0;
      $bk$i = ((($v$0$i)) + 12|0);
      $20 = HEAP32[$bk$i>>2]|0;
      $cmp40$i = ($20|0)==($v$0$i|0);
      do {
       if ($cmp40$i) {
        $arrayidx61$i = ((($v$0$i)) + 20|0);
        $22 = HEAP32[$arrayidx61$i>>2]|0;
        $cmp62$i = ($22|0)==(0|0);
        if ($cmp62$i) {
         $arrayidx65$i = ((($v$0$i)) + 16|0);
         $23 = HEAP32[$arrayidx65$i>>2]|0;
         $cmp66$i = ($23|0)==(0|0);
         if ($cmp66$i) {
          $R$3$i = 0;
          break;
         } else {
          $R$1$i$ph = $23;$RP$1$i$ph = $arrayidx65$i;
         }
        } else {
         $R$1$i$ph = $22;$RP$1$i$ph = $arrayidx61$i;
        }
        $R$1$i = $R$1$i$ph;$RP$1$i = $RP$1$i$ph;
        while(1) {
         $arrayidx71$i = ((($R$1$i)) + 20|0);
         $24 = HEAP32[$arrayidx71$i>>2]|0;
         $cmp72$i = ($24|0)==(0|0);
         if ($cmp72$i) {
          $arrayidx75$i = ((($R$1$i)) + 16|0);
          $25 = HEAP32[$arrayidx75$i>>2]|0;
          $cmp76$i = ($25|0)==(0|0);
          if ($cmp76$i) {
           break;
          } else {
           $R$1$i$be = $25;$RP$1$i$be = $arrayidx75$i;
          }
         } else {
          $R$1$i$be = $24;$RP$1$i$be = $arrayidx71$i;
         }
         $R$1$i = $R$1$i$be;$RP$1$i = $RP$1$i$be;
        }
        HEAP32[$RP$1$i>>2] = 0;
        $R$3$i = $R$1$i;
       } else {
        $fd$i = ((($v$0$i)) + 8|0);
        $21 = HEAP32[$fd$i>>2]|0;
        $bk56$i = ((($21)) + 12|0);
        HEAP32[$bk56$i>>2] = $20;
        $fd57$i = ((($20)) + 8|0);
        HEAP32[$fd57$i>>2] = $21;
        $R$3$i = $20;
       }
      } while(0);
      $cmp90$i = ($19|0)==(0|0);
      do {
       if (!($cmp90$i)) {
        $index$i = ((($v$0$i)) + 28|0);
        $26 = HEAP32[$index$i>>2]|0;
        $arrayidx94$i = (35124 + ($26<<2)|0);
        $27 = HEAP32[$arrayidx94$i>>2]|0;
        $cmp95$i = ($v$0$i|0)==($27|0);
        if ($cmp95$i) {
         HEAP32[$arrayidx94$i>>2] = $R$3$i;
         $cond2$i = ($R$3$i|0)==(0|0);
         if ($cond2$i) {
          $shl$i = 1 << $26;
          $neg$i = $shl$i ^ -1;
          $and103$i = $13 & $neg$i;
          HEAP32[(34824)>>2] = $and103$i;
          break;
         }
        } else {
         $arrayidx113$i = ((($19)) + 16|0);
         $28 = HEAP32[$arrayidx113$i>>2]|0;
         $cmp114$i = ($28|0)==($v$0$i|0);
         $arrayidx121$i = ((($19)) + 20|0);
         $arrayidx121$i$sink = $cmp114$i ? $arrayidx113$i : $arrayidx121$i;
         HEAP32[$arrayidx121$i$sink>>2] = $R$3$i;
         $cmp126$i = ($R$3$i|0)==(0|0);
         if ($cmp126$i) {
          break;
         }
        }
        $parent135$i = ((($R$3$i)) + 24|0);
        HEAP32[$parent135$i>>2] = $19;
        $arrayidx137$i = ((($v$0$i)) + 16|0);
        $29 = HEAP32[$arrayidx137$i>>2]|0;
        $cmp138$i = ($29|0)==(0|0);
        if (!($cmp138$i)) {
         $arrayidx148$i = ((($R$3$i)) + 16|0);
         HEAP32[$arrayidx148$i>>2] = $29;
         $parent149$i = ((($29)) + 24|0);
         HEAP32[$parent149$i>>2] = $R$3$i;
        }
        $arrayidx154$i = ((($v$0$i)) + 20|0);
        $30 = HEAP32[$arrayidx154$i>>2]|0;
        $cmp155$i = ($30|0)==(0|0);
        if (!($cmp155$i)) {
         $arrayidx165$i = ((($R$3$i)) + 20|0);
         HEAP32[$arrayidx165$i>>2] = $30;
         $parent166$i = ((($30)) + 24|0);
         HEAP32[$parent166$i>>2] = $R$3$i;
        }
       }
      } while(0);
      $cmp174$i = ($rsize$0$i>>>0)<(16);
      if ($cmp174$i) {
       $add177$i = (($rsize$0$i) + ($cond))|0;
       $or178$i = $add177$i | 3;
       $head179$i = ((($v$0$i)) + 4|0);
       HEAP32[$head179$i>>2] = $or178$i;
       $add$ptr181$i = (($v$0$i) + ($add177$i)|0);
       $head182$i = ((($add$ptr181$i)) + 4|0);
       $31 = HEAP32[$head182$i>>2]|0;
       $or183$i = $31 | 1;
       HEAP32[$head182$i>>2] = $or183$i;
      } else {
       $or186$i = $cond | 3;
       $head187$i = ((($v$0$i)) + 4|0);
       HEAP32[$head187$i>>2] = $or186$i;
       $or188$i = $rsize$0$i | 1;
       $head189$i = ((($add$ptr$i)) + 4|0);
       HEAP32[$head189$i>>2] = $or188$i;
       $add$ptr190$i = (($add$ptr$i) + ($rsize$0$i)|0);
       HEAP32[$add$ptr190$i>>2] = $rsize$0$i;
       $cmp191$i = ($5|0)==(0);
       if (!($cmp191$i)) {
        $32 = HEAP32[(34840)>>2]|0;
        $shr194$i = $5 >>> 3;
        $shl195$i = $shr194$i << 1;
        $arrayidx196$i = (34860 + ($shl195$i<<2)|0);
        $shl198$i = 1 << $shr194$i;
        $and199$i = $shl198$i & $0;
        $tobool200$i = ($and199$i|0)==(0);
        if ($tobool200$i) {
         $or204$i = $shl198$i | $0;
         HEAP32[8705] = $or204$i;
         $$pre$i = ((($arrayidx196$i)) + 8|0);
         $$pre$phi$iZ2D = $$pre$i;$F197$0$i = $arrayidx196$i;
        } else {
         $33 = ((($arrayidx196$i)) + 8|0);
         $34 = HEAP32[$33>>2]|0;
         $$pre$phi$iZ2D = $33;$F197$0$i = $34;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $32;
        $bk218$i = ((($F197$0$i)) + 12|0);
        HEAP32[$bk218$i>>2] = $32;
        $fd219$i = ((($32)) + 8|0);
        HEAP32[$fd219$i>>2] = $F197$0$i;
        $bk220$i = ((($32)) + 12|0);
        HEAP32[$bk220$i>>2] = $arrayidx196$i;
       }
       HEAP32[(34828)>>2] = $rsize$0$i;
       HEAP32[(34840)>>2] = $add$ptr$i;
      }
      $add$ptr225$i = ((($v$0$i)) + 8|0);
      $retval$0 = $add$ptr225$i;
      STACKTOP = sp;return ($retval$0|0);
     } else {
      $nb$0 = $cond;
     }
    }
   } else {
    $nb$0 = $cond;
   }
  } else {
   $cmp139 = ($bytes>>>0)>(4294967231);
   if ($cmp139) {
    $nb$0 = -1;
   } else {
    $add144 = (($bytes) + 11)|0;
    $and145 = $add144 & -8;
    $35 = HEAP32[(34824)>>2]|0;
    $cmp146 = ($35|0)==(0);
    if ($cmp146) {
     $nb$0 = $and145;
    } else {
     $sub$i147 = (0 - ($and145))|0;
     $shr$i148 = $add144 >>> 8;
     $cmp$i149 = ($shr$i148|0)==(0);
     if ($cmp$i149) {
      $idx$0$i = 0;
     } else {
      $cmp1$i = ($and145>>>0)>(16777215);
      if ($cmp1$i) {
       $idx$0$i = 31;
      } else {
       $sub4$i = (($shr$i148) + 1048320)|0;
       $shr5$i151 = $sub4$i >>> 16;
       $and$i152 = $shr5$i151 & 8;
       $shl$i153 = $shr$i148 << $and$i152;
       $sub6$i = (($shl$i153) + 520192)|0;
       $shr7$i154 = $sub6$i >>> 16;
       $and8$i = $shr7$i154 & 4;
       $add$i155 = $and8$i | $and$i152;
       $shl9$i = $shl$i153 << $and8$i;
       $sub10$i = (($shl9$i) + 245760)|0;
       $shr11$i156 = $sub10$i >>> 16;
       $and12$i = $shr11$i156 & 2;
       $add13$i = $add$i155 | $and12$i;
       $sub14$i = (14 - ($add13$i))|0;
       $shl15$i = $shl9$i << $and12$i;
       $shr16$i157 = $shl15$i >>> 15;
       $add17$i158 = (($sub14$i) + ($shr16$i157))|0;
       $shl18$i = $add17$i158 << 1;
       $add19$i = (($add17$i158) + 7)|0;
       $shr20$i = $and145 >>> $add19$i;
       $and21$i159 = $shr20$i & 1;
       $add22$i = $and21$i159 | $shl18$i;
       $idx$0$i = $add22$i;
      }
     }
     $arrayidx$i160 = (35124 + ($idx$0$i<<2)|0);
     $36 = HEAP32[$arrayidx$i160>>2]|0;
     $cmp24$i = ($36|0)==(0|0);
     L79: do {
      if ($cmp24$i) {
       $rsize$3$i = $sub$i147;$t$2$i = 0;$v$3$i = 0;
       label = 61;
      } else {
       $cmp26$i = ($idx$0$i|0)==(31);
       $shr27$i = $idx$0$i >>> 1;
       $sub30$i = (25 - ($shr27$i))|0;
       $cond$i = $cmp26$i ? 0 : $sub30$i;
       $shl31$i = $and145 << $cond$i;
       $rsize$0$i162 = $sub$i147;$rst$0$i = 0;$sizebits$0$i = $shl31$i;$t$0$i161 = $36;$v$0$i163 = 0;
       while(1) {
        $head$i164 = ((($t$0$i161)) + 4|0);
        $37 = HEAP32[$head$i164>>2]|0;
        $and32$i = $37 & -8;
        $sub33$i = (($and32$i) - ($and145))|0;
        $cmp34$i = ($sub33$i>>>0)<($rsize$0$i162>>>0);
        if ($cmp34$i) {
         $cmp36$i = ($sub33$i|0)==(0);
         if ($cmp36$i) {
          $rsize$418$i$ph = 0;$t$517$i$ph = $t$0$i161;$v$419$i$ph = $t$0$i161;
          label = 65;
          break L79;
         } else {
          $rsize$1$i = $sub33$i;$v$1$i = $t$0$i161;
         }
        } else {
         $rsize$1$i = $rsize$0$i162;$v$1$i = $v$0$i163;
        }
        $arrayidx40$i = ((($t$0$i161)) + 20|0);
        $38 = HEAP32[$arrayidx40$i>>2]|0;
        $shr42$i = $sizebits$0$i >>> 31;
        $arrayidx44$i = (((($t$0$i161)) + 16|0) + ($shr42$i<<2)|0);
        $39 = HEAP32[$arrayidx44$i>>2]|0;
        $cmp45$i = ($38|0)==(0|0);
        $cmp46$i = ($38|0)==($39|0);
        $or$cond1$i165 = $cmp45$i | $cmp46$i;
        $rst$1$i = $or$cond1$i165 ? $rst$0$i : $38;
        $cmp49$i = ($39|0)==(0|0);
        $spec$select5$i = $sizebits$0$i << 1;
        if ($cmp49$i) {
         $rsize$3$i = $rsize$1$i;$t$2$i = $rst$1$i;$v$3$i = $v$1$i;
         label = 61;
         break;
        } else {
         $rsize$0$i162 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $spec$select5$i;$t$0$i161 = $39;$v$0$i163 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 61) {
      $cmp55$i166 = ($t$2$i|0)==(0|0);
      $cmp57$i167 = ($v$3$i|0)==(0|0);
      $or$cond$i168 = $cmp55$i166 & $cmp57$i167;
      if ($or$cond$i168) {
       $shl60$i = 2 << $idx$0$i;
       $sub63$i = (0 - ($shl60$i))|0;
       $or$i169 = $shl60$i | $sub63$i;
       $and64$i = $or$i169 & $35;
       $cmp65$i = ($and64$i|0)==(0);
       if ($cmp65$i) {
        $nb$0 = $and145;
        break;
       }
       $sub67$i = (0 - ($and64$i))|0;
       $and68$i = $and64$i & $sub67$i;
       $sub70$i = (($and68$i) + -1)|0;
       $shr72$i = $sub70$i >>> 12;
       $and73$i = $shr72$i & 16;
       $shr75$i = $sub70$i >>> $and73$i;
       $shr76$i = $shr75$i >>> 5;
       $and77$i = $shr76$i & 8;
       $add78$i = $and77$i | $and73$i;
       $shr79$i = $shr75$i >>> $and77$i;
       $shr80$i = $shr79$i >>> 2;
       $and81$i = $shr80$i & 4;
       $add82$i = $add78$i | $and81$i;
       $shr83$i = $shr79$i >>> $and81$i;
       $shr84$i = $shr83$i >>> 1;
       $and85$i = $shr84$i & 2;
       $add86$i = $add82$i | $and85$i;
       $shr87$i = $shr83$i >>> $and85$i;
       $shr88$i = $shr87$i >>> 1;
       $and89$i = $shr88$i & 1;
       $add90$i = $add86$i | $and89$i;
       $shr91$i = $shr87$i >>> $and89$i;
       $add92$i = (($add90$i) + ($shr91$i))|0;
       $arrayidx94$i170 = (35124 + ($add92$i<<2)|0);
       $40 = HEAP32[$arrayidx94$i170>>2]|0;
       $t$4$i = $40;$v$3$i204 = 0;
      } else {
       $t$4$i = $t$2$i;$v$3$i204 = $v$3$i;
      }
      $cmp9716$i = ($t$4$i|0)==(0|0);
      if ($cmp9716$i) {
       $rsize$4$lcssa$i = $rsize$3$i;$v$4$lcssa$i = $v$3$i204;
      } else {
       $rsize$418$i$ph = $rsize$3$i;$t$517$i$ph = $t$4$i;$v$419$i$ph = $v$3$i204;
       label = 65;
      }
     }
     if ((label|0) == 65) {
      $rsize$418$i = $rsize$418$i$ph;$t$517$i = $t$517$i$ph;$v$419$i = $v$419$i$ph;
      while(1) {
       $head99$i = ((($t$517$i)) + 4|0);
       $41 = HEAP32[$head99$i>>2]|0;
       $and100$i = $41 & -8;
       $sub101$i = (($and100$i) - ($and145))|0;
       $cmp102$i = ($sub101$i>>>0)<($rsize$418$i>>>0);
       $spec$select$i171 = $cmp102$i ? $sub101$i : $rsize$418$i;
       $spec$select2$i = $cmp102$i ? $t$517$i : $v$419$i;
       $arrayidx106$i = ((($t$517$i)) + 16|0);
       $42 = HEAP32[$arrayidx106$i>>2]|0;
       $cmp107$i = ($42|0)==(0|0);
       if ($cmp107$i) {
        $arrayidx113$i173 = ((($t$517$i)) + 20|0);
        $43 = HEAP32[$arrayidx113$i173>>2]|0;
        $cond115$i = $43;
       } else {
        $cond115$i = $42;
       }
       $cmp97$i = ($cond115$i|0)==(0|0);
       if ($cmp97$i) {
        $rsize$4$lcssa$i = $spec$select$i171;$v$4$lcssa$i = $spec$select2$i;
        break;
       } else {
        $rsize$418$i = $spec$select$i171;$t$517$i = $cond115$i;$v$419$i = $spec$select2$i;
       }
      }
     }
     $cmp116$i = ($v$4$lcssa$i|0)==(0|0);
     if ($cmp116$i) {
      $nb$0 = $and145;
     } else {
      $44 = HEAP32[(34828)>>2]|0;
      $sub118$i = (($44) - ($and145))|0;
      $cmp119$i = ($rsize$4$lcssa$i>>>0)<($sub118$i>>>0);
      if ($cmp119$i) {
       $add$ptr$i174 = (($v$4$lcssa$i) + ($and145)|0);
       $cmp123$i = ($add$ptr$i174>>>0)>($v$4$lcssa$i>>>0);
       if ($cmp123$i) {
        $parent$i175 = ((($v$4$lcssa$i)) + 24|0);
        $45 = HEAP32[$parent$i175>>2]|0;
        $bk$i176 = ((($v$4$lcssa$i)) + 12|0);
        $46 = HEAP32[$bk$i176>>2]|0;
        $cmp128$i = ($46|0)==($v$4$lcssa$i|0);
        do {
         if ($cmp128$i) {
          $arrayidx151$i = ((($v$4$lcssa$i)) + 20|0);
          $48 = HEAP32[$arrayidx151$i>>2]|0;
          $cmp152$i = ($48|0)==(0|0);
          if ($cmp152$i) {
           $arrayidx155$i = ((($v$4$lcssa$i)) + 16|0);
           $49 = HEAP32[$arrayidx155$i>>2]|0;
           $cmp156$i = ($49|0)==(0|0);
           if ($cmp156$i) {
            $R$3$i188 = 0;
            break;
           } else {
            $R$1$i183$ph = $49;$RP$1$i182$ph = $arrayidx155$i;
           }
          } else {
           $R$1$i183$ph = $48;$RP$1$i182$ph = $arrayidx151$i;
          }
          $R$1$i183 = $R$1$i183$ph;$RP$1$i182 = $RP$1$i182$ph;
          while(1) {
           $arrayidx161$i = ((($R$1$i183)) + 20|0);
           $50 = HEAP32[$arrayidx161$i>>2]|0;
           $cmp162$i184 = ($50|0)==(0|0);
           if ($cmp162$i184) {
            $arrayidx165$i185 = ((($R$1$i183)) + 16|0);
            $51 = HEAP32[$arrayidx165$i185>>2]|0;
            $cmp166$i = ($51|0)==(0|0);
            if ($cmp166$i) {
             break;
            } else {
             $R$1$i183$be = $51;$RP$1$i182$be = $arrayidx165$i185;
            }
           } else {
            $R$1$i183$be = $50;$RP$1$i182$be = $arrayidx161$i;
           }
           $R$1$i183 = $R$1$i183$be;$RP$1$i182 = $RP$1$i182$be;
          }
          HEAP32[$RP$1$i182>>2] = 0;
          $R$3$i188 = $R$1$i183;
         } else {
          $fd$i177 = ((($v$4$lcssa$i)) + 8|0);
          $47 = HEAP32[$fd$i177>>2]|0;
          $bk145$i = ((($47)) + 12|0);
          HEAP32[$bk145$i>>2] = $46;
          $fd146$i = ((($46)) + 8|0);
          HEAP32[$fd146$i>>2] = $47;
          $R$3$i188 = $46;
         }
        } while(0);
        $cmp180$i = ($45|0)==(0|0);
        do {
         if ($cmp180$i) {
          $61 = $35;
         } else {
          $index$i189 = ((($v$4$lcssa$i)) + 28|0);
          $52 = HEAP32[$index$i189>>2]|0;
          $arrayidx184$i = (35124 + ($52<<2)|0);
          $53 = HEAP32[$arrayidx184$i>>2]|0;
          $cmp185$i = ($v$4$lcssa$i|0)==($53|0);
          if ($cmp185$i) {
           HEAP32[$arrayidx184$i>>2] = $R$3$i188;
           $cond3$i = ($R$3$i188|0)==(0|0);
           if ($cond3$i) {
            $shl192$i = 1 << $52;
            $neg$i190 = $shl192$i ^ -1;
            $and194$i191 = $35 & $neg$i190;
            HEAP32[(34824)>>2] = $and194$i191;
            $61 = $and194$i191;
            break;
           }
          } else {
           $arrayidx204$i = ((($45)) + 16|0);
           $54 = HEAP32[$arrayidx204$i>>2]|0;
           $cmp205$i = ($54|0)==($v$4$lcssa$i|0);
           $arrayidx212$i = ((($45)) + 20|0);
           $arrayidx212$i$sink = $cmp205$i ? $arrayidx204$i : $arrayidx212$i;
           HEAP32[$arrayidx212$i$sink>>2] = $R$3$i188;
           $cmp217$i = ($R$3$i188|0)==(0|0);
           if ($cmp217$i) {
            $61 = $35;
            break;
           }
          }
          $parent226$i = ((($R$3$i188)) + 24|0);
          HEAP32[$parent226$i>>2] = $45;
          $arrayidx228$i = ((($v$4$lcssa$i)) + 16|0);
          $55 = HEAP32[$arrayidx228$i>>2]|0;
          $cmp229$i = ($55|0)==(0|0);
          if (!($cmp229$i)) {
           $arrayidx239$i = ((($R$3$i188)) + 16|0);
           HEAP32[$arrayidx239$i>>2] = $55;
           $parent240$i = ((($55)) + 24|0);
           HEAP32[$parent240$i>>2] = $R$3$i188;
          }
          $arrayidx245$i = ((($v$4$lcssa$i)) + 20|0);
          $56 = HEAP32[$arrayidx245$i>>2]|0;
          $cmp246$i = ($56|0)==(0|0);
          if ($cmp246$i) {
           $61 = $35;
          } else {
           $arrayidx256$i = ((($R$3$i188)) + 20|0);
           HEAP32[$arrayidx256$i>>2] = $56;
           $parent257$i = ((($56)) + 24|0);
           HEAP32[$parent257$i>>2] = $R$3$i188;
           $61 = $35;
          }
         }
        } while(0);
        $cmp265$i = ($rsize$4$lcssa$i>>>0)<(16);
        L128: do {
         if ($cmp265$i) {
          $add268$i = (($rsize$4$lcssa$i) + ($and145))|0;
          $or270$i = $add268$i | 3;
          $head271$i = ((($v$4$lcssa$i)) + 4|0);
          HEAP32[$head271$i>>2] = $or270$i;
          $add$ptr273$i = (($v$4$lcssa$i) + ($add268$i)|0);
          $head274$i = ((($add$ptr273$i)) + 4|0);
          $57 = HEAP32[$head274$i>>2]|0;
          $or275$i = $57 | 1;
          HEAP32[$head274$i>>2] = $or275$i;
         } else {
          $or278$i = $and145 | 3;
          $head279$i = ((($v$4$lcssa$i)) + 4|0);
          HEAP32[$head279$i>>2] = $or278$i;
          $or280$i = $rsize$4$lcssa$i | 1;
          $head281$i = ((($add$ptr$i174)) + 4|0);
          HEAP32[$head281$i>>2] = $or280$i;
          $add$ptr282$i = (($add$ptr$i174) + ($rsize$4$lcssa$i)|0);
          HEAP32[$add$ptr282$i>>2] = $rsize$4$lcssa$i;
          $shr283$i = $rsize$4$lcssa$i >>> 3;
          $cmp284$i = ($rsize$4$lcssa$i>>>0)<(256);
          if ($cmp284$i) {
           $shl288$i = $shr283$i << 1;
           $arrayidx289$i = (34860 + ($shl288$i<<2)|0);
           $58 = HEAP32[8705]|0;
           $shl291$i = 1 << $shr283$i;
           $and292$i = $58 & $shl291$i;
           $tobool293$i = ($and292$i|0)==(0);
           if ($tobool293$i) {
            $or297$i = $58 | $shl291$i;
            HEAP32[8705] = $or297$i;
            $$pre$i194 = ((($arrayidx289$i)) + 8|0);
            $$pre$phi$i195Z2D = $$pre$i194;$F290$0$i = $arrayidx289$i;
           } else {
            $59 = ((($arrayidx289$i)) + 8|0);
            $60 = HEAP32[$59>>2]|0;
            $$pre$phi$i195Z2D = $59;$F290$0$i = $60;
           }
           HEAP32[$$pre$phi$i195Z2D>>2] = $add$ptr$i174;
           $bk311$i = ((($F290$0$i)) + 12|0);
           HEAP32[$bk311$i>>2] = $add$ptr$i174;
           $fd312$i = ((($add$ptr$i174)) + 8|0);
           HEAP32[$fd312$i>>2] = $F290$0$i;
           $bk313$i = ((($add$ptr$i174)) + 12|0);
           HEAP32[$bk313$i>>2] = $arrayidx289$i;
           break;
          }
          $shr318$i = $rsize$4$lcssa$i >>> 8;
          $cmp319$i = ($shr318$i|0)==(0);
          if ($cmp319$i) {
           $I316$0$i = 0;
          } else {
           $cmp323$i = ($rsize$4$lcssa$i>>>0)>(16777215);
           if ($cmp323$i) {
            $I316$0$i = 31;
           } else {
            $sub329$i = (($shr318$i) + 1048320)|0;
            $shr330$i = $sub329$i >>> 16;
            $and331$i = $shr330$i & 8;
            $shl333$i = $shr318$i << $and331$i;
            $sub334$i = (($shl333$i) + 520192)|0;
            $shr335$i = $sub334$i >>> 16;
            $and336$i = $shr335$i & 4;
            $add337$i = $and336$i | $and331$i;
            $shl338$i = $shl333$i << $and336$i;
            $sub339$i = (($shl338$i) + 245760)|0;
            $shr340$i = $sub339$i >>> 16;
            $and341$i = $shr340$i & 2;
            $add342$i = $add337$i | $and341$i;
            $sub343$i = (14 - ($add342$i))|0;
            $shl344$i = $shl338$i << $and341$i;
            $shr345$i = $shl344$i >>> 15;
            $add346$i = (($sub343$i) + ($shr345$i))|0;
            $shl347$i = $add346$i << 1;
            $add348$i = (($add346$i) + 7)|0;
            $shr349$i = $rsize$4$lcssa$i >>> $add348$i;
            $and350$i = $shr349$i & 1;
            $add351$i = $and350$i | $shl347$i;
            $I316$0$i = $add351$i;
           }
          }
          $arrayidx355$i = (35124 + ($I316$0$i<<2)|0);
          $index356$i = ((($add$ptr$i174)) + 28|0);
          HEAP32[$index356$i>>2] = $I316$0$i;
          $child357$i = ((($add$ptr$i174)) + 16|0);
          $arrayidx358$i = ((($child357$i)) + 4|0);
          HEAP32[$arrayidx358$i>>2] = 0;
          HEAP32[$child357$i>>2] = 0;
          $shl362$i = 1 << $I316$0$i;
          $and363$i = $61 & $shl362$i;
          $tobool364$i = ($and363$i|0)==(0);
          if ($tobool364$i) {
           $or368$i = $61 | $shl362$i;
           HEAP32[(34824)>>2] = $or368$i;
           HEAP32[$arrayidx355$i>>2] = $add$ptr$i174;
           $parent369$i = ((($add$ptr$i174)) + 24|0);
           HEAP32[$parent369$i>>2] = $arrayidx355$i;
           $bk370$i = ((($add$ptr$i174)) + 12|0);
           HEAP32[$bk370$i>>2] = $add$ptr$i174;
           $fd371$i = ((($add$ptr$i174)) + 8|0);
           HEAP32[$fd371$i>>2] = $add$ptr$i174;
           break;
          }
          $62 = HEAP32[$arrayidx355$i>>2]|0;
          $head38611$i = ((($62)) + 4|0);
          $63 = HEAP32[$head38611$i>>2]|0;
          $and38712$i = $63 & -8;
          $cmp38813$i = ($and38712$i|0)==($rsize$4$lcssa$i|0);
          L145: do {
           if ($cmp38813$i) {
            $T$0$lcssa$i = $62;
           } else {
            $cmp374$i = ($I316$0$i|0)==(31);
            $shr378$i = $I316$0$i >>> 1;
            $sub381$i = (25 - ($shr378$i))|0;
            $cond383$i = $cmp374$i ? 0 : $sub381$i;
            $shl384$i = $rsize$4$lcssa$i << $cond383$i;
            $K373$015$i = $shl384$i;$T$014$i = $62;
            while(1) {
             $shr392$i = $K373$015$i >>> 31;
             $arrayidx394$i = (((($T$014$i)) + 16|0) + ($shr392$i<<2)|0);
             $64 = HEAP32[$arrayidx394$i>>2]|0;
             $cmp396$i = ($64|0)==(0|0);
             if ($cmp396$i) {
              break;
             }
             $shl395$i = $K373$015$i << 1;
             $head386$i = ((($64)) + 4|0);
             $65 = HEAP32[$head386$i>>2]|0;
             $and387$i = $65 & -8;
             $cmp388$i = ($and387$i|0)==($rsize$4$lcssa$i|0);
             if ($cmp388$i) {
              $T$0$lcssa$i = $64;
              break L145;
             } else {
              $K373$015$i = $shl395$i;$T$014$i = $64;
             }
            }
            HEAP32[$arrayidx394$i>>2] = $add$ptr$i174;
            $parent406$i = ((($add$ptr$i174)) + 24|0);
            HEAP32[$parent406$i>>2] = $T$014$i;
            $bk407$i = ((($add$ptr$i174)) + 12|0);
            HEAP32[$bk407$i>>2] = $add$ptr$i174;
            $fd408$i = ((($add$ptr$i174)) + 8|0);
            HEAP32[$fd408$i>>2] = $add$ptr$i174;
            break L128;
           }
          } while(0);
          $fd416$i = ((($T$0$lcssa$i)) + 8|0);
          $66 = HEAP32[$fd416$i>>2]|0;
          $bk429$i = ((($66)) + 12|0);
          HEAP32[$bk429$i>>2] = $add$ptr$i174;
          HEAP32[$fd416$i>>2] = $add$ptr$i174;
          $fd431$i = ((($add$ptr$i174)) + 8|0);
          HEAP32[$fd431$i>>2] = $66;
          $bk432$i = ((($add$ptr$i174)) + 12|0);
          HEAP32[$bk432$i>>2] = $T$0$lcssa$i;
          $parent433$i = ((($add$ptr$i174)) + 24|0);
          HEAP32[$parent433$i>>2] = 0;
         }
        } while(0);
        $add$ptr441$i = ((($v$4$lcssa$i)) + 8|0);
        $retval$0 = $add$ptr441$i;
        STACKTOP = sp;return ($retval$0|0);
       } else {
        $nb$0 = $and145;
       }
      } else {
       $nb$0 = $and145;
      }
     }
    }
   }
  }
 } while(0);
 $67 = HEAP32[(34828)>>2]|0;
 $cmp156 = ($67>>>0)<($nb$0>>>0);
 if (!($cmp156)) {
  $sub160 = (($67) - ($nb$0))|0;
  $68 = HEAP32[(34840)>>2]|0;
  $cmp162 = ($sub160>>>0)>(15);
  if ($cmp162) {
   $add$ptr166 = (($68) + ($nb$0)|0);
   HEAP32[(34840)>>2] = $add$ptr166;
   HEAP32[(34828)>>2] = $sub160;
   $or167 = $sub160 | 1;
   $head168 = ((($add$ptr166)) + 4|0);
   HEAP32[$head168>>2] = $or167;
   $add$ptr169 = (($68) + ($67)|0);
   HEAP32[$add$ptr169>>2] = $sub160;
   $or172 = $nb$0 | 3;
   $head173 = ((($68)) + 4|0);
   HEAP32[$head173>>2] = $or172;
  } else {
   HEAP32[(34828)>>2] = 0;
   HEAP32[(34840)>>2] = 0;
   $or176 = $67 | 3;
   $head177 = ((($68)) + 4|0);
   HEAP32[$head177>>2] = $or176;
   $add$ptr178 = (($68) + ($67)|0);
   $head179 = ((($add$ptr178)) + 4|0);
   $69 = HEAP32[$head179>>2]|0;
   $or180 = $69 | 1;
   HEAP32[$head179>>2] = $or180;
  }
  $add$ptr182 = ((($68)) + 8|0);
  $retval$0 = $add$ptr182;
  STACKTOP = sp;return ($retval$0|0);
 }
 $70 = HEAP32[(34832)>>2]|0;
 $cmp186 = ($70>>>0)>($nb$0>>>0);
 if ($cmp186) {
  $sub190 = (($70) - ($nb$0))|0;
  HEAP32[(34832)>>2] = $sub190;
  $71 = HEAP32[(34844)>>2]|0;
  $add$ptr193 = (($71) + ($nb$0)|0);
  HEAP32[(34844)>>2] = $add$ptr193;
  $or194 = $sub190 | 1;
  $head195 = ((($add$ptr193)) + 4|0);
  HEAP32[$head195>>2] = $or194;
  $or197 = $nb$0 | 3;
  $head198 = ((($71)) + 4|0);
  HEAP32[$head198>>2] = $or197;
  $add$ptr199 = ((($71)) + 8|0);
  $retval$0 = $add$ptr199;
  STACKTOP = sp;return ($retval$0|0);
 }
 $72 = HEAP32[8823]|0;
 $cmp$i133 = ($72|0)==(0);
 if ($cmp$i133) {
  HEAP32[(35300)>>2] = 4096;
  HEAP32[(35296)>>2] = 4096;
  HEAP32[(35304)>>2] = -1;
  HEAP32[(35308)>>2] = -1;
  HEAP32[(35312)>>2] = 0;
  HEAP32[(35264)>>2] = 0;
  $73 = $magic$i$i;
  $xor$i$i = $73 & -16;
  $and6$i$i = $xor$i$i ^ 1431655768;
  HEAP32[8823] = $and6$i$i;
  $74 = 4096;
 } else {
  $$pre$i134 = HEAP32[(35300)>>2]|0;
  $74 = $$pre$i134;
 }
 $add$i135 = (($nb$0) + 48)|0;
 $sub$i136 = (($nb$0) + 47)|0;
 $add9$i = (($74) + ($sub$i136))|0;
 $neg$i137 = (0 - ($74))|0;
 $and11$i = $add9$i & $neg$i137;
 $cmp12$i = ($and11$i>>>0)>($nb$0>>>0);
 if (!($cmp12$i)) {
  $retval$0 = 0;
  STACKTOP = sp;return ($retval$0|0);
 }
 $75 = HEAP32[(35260)>>2]|0;
 $cmp15$i = ($75|0)==(0);
 if (!($cmp15$i)) {
  $76 = HEAP32[(35252)>>2]|0;
  $add17$i = (($76) + ($and11$i))|0;
  $cmp19$i = ($add17$i>>>0)<=($76>>>0);
  $cmp21$i = ($add17$i>>>0)>($75>>>0);
  $or$cond1$i = $cmp19$i | $cmp21$i;
  if ($or$cond1$i) {
   $retval$0 = 0;
   STACKTOP = sp;return ($retval$0|0);
  }
 }
 $77 = HEAP32[(35264)>>2]|0;
 $and29$i = $77 & 4;
 $tobool30$i = ($and29$i|0)==(0);
 L178: do {
  if ($tobool30$i) {
   $78 = HEAP32[(34844)>>2]|0;
   $cmp32$i138 = ($78|0)==(0|0);
   L180: do {
    if ($cmp32$i138) {
     label = 128;
    } else {
     $sp$0$i$i = (35268);
     while(1) {
      $79 = HEAP32[$sp$0$i$i>>2]|0;
      $cmp$i55$i = ($79>>>0)>($78>>>0);
      if (!($cmp$i55$i)) {
       $size$i$i = ((($sp$0$i$i)) + 4|0);
       $80 = HEAP32[$size$i$i>>2]|0;
       $add$ptr$i57$i = (($79) + ($80)|0);
       $cmp2$i$i = ($add$ptr$i57$i>>>0)>($78>>>0);
       if ($cmp2$i$i) {
        break;
       }
      }
      $next$i$i = ((($sp$0$i$i)) + 8|0);
      $81 = HEAP32[$next$i$i>>2]|0;
      $cmp3$i$i = ($81|0)==(0|0);
      if ($cmp3$i$i) {
       label = 128;
       break L180;
      } else {
       $sp$0$i$i = $81;
      }
     }
     $add77$i = (($add9$i) - ($70))|0;
     $and80$i = $add77$i & $neg$i137;
     $cmp81$i = ($and80$i>>>0)<(2147483647);
     if ($cmp81$i) {
      $size$i$i$le = ((($sp$0$i$i)) + 4|0);
      $call83$i = (_sbrk($and80$i)|0);
      $86 = HEAP32[$sp$0$i$i>>2]|0;
      $87 = HEAP32[$size$i$i$le>>2]|0;
      $add$ptr$i141 = (($86) + ($87)|0);
      $cmp85$i = ($call83$i|0)==($add$ptr$i141|0);
      if ($cmp85$i) {
       $cmp89$i = ($call83$i|0)==((-1)|0);
       if ($cmp89$i) {
        $tsize$2647482$i = $and80$i;
       } else {
        $tbase$795$i = $call83$i;$tsize$794$i = $and80$i;
        label = 145;
        break L178;
       }
      } else {
       $br$2$ph$i = $call83$i;$ssize$2$ph$i = $and80$i;
       label = 136;
      }
     } else {
      $tsize$2647482$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 128) {
     $call37$i = (_sbrk(0)|0);
     $cmp38$i = ($call37$i|0)==((-1)|0);
     if ($cmp38$i) {
      $tsize$2647482$i = 0;
     } else {
      $82 = $call37$i;
      $83 = HEAP32[(35296)>>2]|0;
      $sub41$i = (($83) + -1)|0;
      $and42$i = $sub41$i & $82;
      $cmp43$i = ($and42$i|0)==(0);
      $add46$i = (($sub41$i) + ($82))|0;
      $neg48$i = (0 - ($83))|0;
      $and49$i = $add46$i & $neg48$i;
      $sub50$i = (($and49$i) - ($82))|0;
      $add51$i = $cmp43$i ? 0 : $sub50$i;
      $spec$select96$i = (($add51$i) + ($and11$i))|0;
      $84 = HEAP32[(35252)>>2]|0;
      $add54$i = (($spec$select96$i) + ($84))|0;
      $cmp55$i = ($spec$select96$i>>>0)>($nb$0>>>0);
      $cmp57$i = ($spec$select96$i>>>0)<(2147483647);
      $or$cond$i = $cmp55$i & $cmp57$i;
      if ($or$cond$i) {
       $85 = HEAP32[(35260)>>2]|0;
       $cmp60$i = ($85|0)==(0);
       if (!($cmp60$i)) {
        $cmp63$i = ($add54$i>>>0)<=($84>>>0);
        $cmp66$i140 = ($add54$i>>>0)>($85>>>0);
        $or$cond2$i = $cmp63$i | $cmp66$i140;
        if ($or$cond2$i) {
         $tsize$2647482$i = 0;
         break;
        }
       }
       $call68$i = (_sbrk($spec$select96$i)|0);
       $cmp69$i = ($call68$i|0)==($call37$i|0);
       if ($cmp69$i) {
        $tbase$795$i = $call37$i;$tsize$794$i = $spec$select96$i;
        label = 145;
        break L178;
       } else {
        $br$2$ph$i = $call68$i;$ssize$2$ph$i = $spec$select96$i;
        label = 136;
       }
      } else {
       $tsize$2647482$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 136) {
     $sub112$i = (0 - ($ssize$2$ph$i))|0;
     $cmp91$i = ($br$2$ph$i|0)!=((-1)|0);
     $cmp93$i = ($ssize$2$ph$i>>>0)<(2147483647);
     $or$cond5$i = $cmp93$i & $cmp91$i;
     $cmp96$i = ($add$i135>>>0)>($ssize$2$ph$i>>>0);
     $or$cond7$i = $cmp96$i & $or$cond5$i;
     if (!($or$cond7$i)) {
      $cmp118$i = ($br$2$ph$i|0)==((-1)|0);
      if ($cmp118$i) {
       $tsize$2647482$i = 0;
       break;
      } else {
       $tbase$795$i = $br$2$ph$i;$tsize$794$i = $ssize$2$ph$i;
       label = 145;
       break L178;
      }
     }
     $88 = HEAP32[(35300)>>2]|0;
     $sub99$i = (($sub$i136) - ($ssize$2$ph$i))|0;
     $add101$i = (($sub99$i) + ($88))|0;
     $neg103$i = (0 - ($88))|0;
     $and104$i = $add101$i & $neg103$i;
     $cmp105$i = ($and104$i>>>0)<(2147483647);
     if (!($cmp105$i)) {
      $tbase$795$i = $br$2$ph$i;$tsize$794$i = $ssize$2$ph$i;
      label = 145;
      break L178;
     }
     $call107$i = (_sbrk($and104$i)|0);
     $cmp108$i = ($call107$i|0)==((-1)|0);
     if ($cmp108$i) {
      (_sbrk($sub112$i)|0);
      $tsize$2647482$i = 0;
      break;
     } else {
      $add110$i = (($and104$i) + ($ssize$2$ph$i))|0;
      $tbase$795$i = $br$2$ph$i;$tsize$794$i = $add110$i;
      label = 145;
      break L178;
     }
    }
   } while(0);
   $89 = HEAP32[(35264)>>2]|0;
   $or$i = $89 | 4;
   HEAP32[(35264)>>2] = $or$i;
   $tsize$4$i = $tsize$2647482$i;
   label = 143;
  } else {
   $tsize$4$i = 0;
   label = 143;
  }
 } while(0);
 if ((label|0) == 143) {
  $cmp127$i = ($and11$i>>>0)<(2147483647);
  if ($cmp127$i) {
   $call131$i = (_sbrk($and11$i)|0);
   $call132$i = (_sbrk(0)|0);
   $cmp133$i = ($call131$i|0)!=((-1)|0);
   $cmp135$i = ($call132$i|0)!=((-1)|0);
   $or$cond4$i = $cmp133$i & $cmp135$i;
   $cmp137$i = ($call131$i>>>0)<($call132$i>>>0);
   $or$cond8$i = $cmp137$i & $or$cond4$i;
   $sub$ptr$lhs$cast$i = $call132$i;
   $sub$ptr$rhs$cast$i = $call131$i;
   $sub$ptr$sub$i = (($sub$ptr$lhs$cast$i) - ($sub$ptr$rhs$cast$i))|0;
   $add140$i = (($nb$0) + 40)|0;
   $cmp141$i = ($sub$ptr$sub$i>>>0)>($add140$i>>>0);
   $spec$select9$i = $cmp141$i ? $sub$ptr$sub$i : $tsize$4$i;
   $or$cond8$not$i = $or$cond8$i ^ 1;
   $cmp14799$i = ($call131$i|0)==((-1)|0);
   $not$cmp141$i = $cmp141$i ^ 1;
   $cmp147$i = $cmp14799$i | $not$cmp141$i;
   $or$cond97$i = $cmp147$i | $or$cond8$not$i;
   if (!($or$cond97$i)) {
    $tbase$795$i = $call131$i;$tsize$794$i = $spec$select9$i;
    label = 145;
   }
  }
 }
 if ((label|0) == 145) {
  $90 = HEAP32[(35252)>>2]|0;
  $add150$i = (($90) + ($tsize$794$i))|0;
  HEAP32[(35252)>>2] = $add150$i;
  $91 = HEAP32[(35256)>>2]|0;
  $cmp151$i = ($add150$i>>>0)>($91>>>0);
  if ($cmp151$i) {
   HEAP32[(35256)>>2] = $add150$i;
  }
  $92 = HEAP32[(34844)>>2]|0;
  $cmp157$i = ($92|0)==(0|0);
  L215: do {
   if ($cmp157$i) {
    $93 = HEAP32[(34836)>>2]|0;
    $cmp159$i = ($93|0)==(0|0);
    $cmp162$i = ($tbase$795$i>>>0)<($93>>>0);
    $or$cond11$i = $cmp159$i | $cmp162$i;
    if ($or$cond11$i) {
     HEAP32[(34836)>>2] = $tbase$795$i;
    }
    HEAP32[(35268)>>2] = $tbase$795$i;
    HEAP32[(35272)>>2] = $tsize$794$i;
    HEAP32[(35280)>>2] = 0;
    $94 = HEAP32[8823]|0;
    HEAP32[(34856)>>2] = $94;
    HEAP32[(34852)>>2] = -1;
    HEAP32[(34872)>>2] = (34860);
    HEAP32[(34868)>>2] = (34860);
    HEAP32[(34880)>>2] = (34868);
    HEAP32[(34876)>>2] = (34868);
    HEAP32[(34888)>>2] = (34876);
    HEAP32[(34884)>>2] = (34876);
    HEAP32[(34896)>>2] = (34884);
    HEAP32[(34892)>>2] = (34884);
    HEAP32[(34904)>>2] = (34892);
    HEAP32[(34900)>>2] = (34892);
    HEAP32[(34912)>>2] = (34900);
    HEAP32[(34908)>>2] = (34900);
    HEAP32[(34920)>>2] = (34908);
    HEAP32[(34916)>>2] = (34908);
    HEAP32[(34928)>>2] = (34916);
    HEAP32[(34924)>>2] = (34916);
    HEAP32[(34936)>>2] = (34924);
    HEAP32[(34932)>>2] = (34924);
    HEAP32[(34944)>>2] = (34932);
    HEAP32[(34940)>>2] = (34932);
    HEAP32[(34952)>>2] = (34940);
    HEAP32[(34948)>>2] = (34940);
    HEAP32[(34960)>>2] = (34948);
    HEAP32[(34956)>>2] = (34948);
    HEAP32[(34968)>>2] = (34956);
    HEAP32[(34964)>>2] = (34956);
    HEAP32[(34976)>>2] = (34964);
    HEAP32[(34972)>>2] = (34964);
    HEAP32[(34984)>>2] = (34972);
    HEAP32[(34980)>>2] = (34972);
    HEAP32[(34992)>>2] = (34980);
    HEAP32[(34988)>>2] = (34980);
    HEAP32[(35000)>>2] = (34988);
    HEAP32[(34996)>>2] = (34988);
    HEAP32[(35008)>>2] = (34996);
    HEAP32[(35004)>>2] = (34996);
    HEAP32[(35016)>>2] = (35004);
    HEAP32[(35012)>>2] = (35004);
    HEAP32[(35024)>>2] = (35012);
    HEAP32[(35020)>>2] = (35012);
    HEAP32[(35032)>>2] = (35020);
    HEAP32[(35028)>>2] = (35020);
    HEAP32[(35040)>>2] = (35028);
    HEAP32[(35036)>>2] = (35028);
    HEAP32[(35048)>>2] = (35036);
    HEAP32[(35044)>>2] = (35036);
    HEAP32[(35056)>>2] = (35044);
    HEAP32[(35052)>>2] = (35044);
    HEAP32[(35064)>>2] = (35052);
    HEAP32[(35060)>>2] = (35052);
    HEAP32[(35072)>>2] = (35060);
    HEAP32[(35068)>>2] = (35060);
    HEAP32[(35080)>>2] = (35068);
    HEAP32[(35076)>>2] = (35068);
    HEAP32[(35088)>>2] = (35076);
    HEAP32[(35084)>>2] = (35076);
    HEAP32[(35096)>>2] = (35084);
    HEAP32[(35092)>>2] = (35084);
    HEAP32[(35104)>>2] = (35092);
    HEAP32[(35100)>>2] = (35092);
    HEAP32[(35112)>>2] = (35100);
    HEAP32[(35108)>>2] = (35100);
    HEAP32[(35120)>>2] = (35108);
    HEAP32[(35116)>>2] = (35108);
    $sub172$i = (($tsize$794$i) + -40)|0;
    $add$ptr$i43$i = ((($tbase$795$i)) + 8|0);
    $95 = $add$ptr$i43$i;
    $and$i44$i = $95 & 7;
    $cmp$i45$i = ($and$i44$i|0)==(0);
    $sub$i46$i = (0 - ($95))|0;
    $and3$i47$i = $sub$i46$i & 7;
    $cond$i48$i = $cmp$i45$i ? 0 : $and3$i47$i;
    $add$ptr4$i49$i = (($tbase$795$i) + ($cond$i48$i)|0);
    $sub5$i50$i = (($sub172$i) - ($cond$i48$i))|0;
    HEAP32[(34844)>>2] = $add$ptr4$i49$i;
    HEAP32[(34832)>>2] = $sub5$i50$i;
    $or$i51$i = $sub5$i50$i | 1;
    $head$i52$i = ((($add$ptr4$i49$i)) + 4|0);
    HEAP32[$head$i52$i>>2] = $or$i51$i;
    $add$ptr6$i53$i = (($tbase$795$i) + ($sub172$i)|0);
    $head7$i54$i = ((($add$ptr6$i53$i)) + 4|0);
    HEAP32[$head7$i54$i>>2] = 40;
    $96 = HEAP32[(35308)>>2]|0;
    HEAP32[(34848)>>2] = $96;
   } else {
    $sp$0112$i = (35268);
    while(1) {
     $97 = HEAP32[$sp$0112$i>>2]|0;
     $size188$i = ((($sp$0112$i)) + 4|0);
     $98 = HEAP32[$size188$i>>2]|0;
     $add$ptr189$i = (($97) + ($98)|0);
     $cmp190$i = ($tbase$795$i|0)==($add$ptr189$i|0);
     if ($cmp190$i) {
      label = 154;
      break;
     }
     $next$i = ((($sp$0112$i)) + 8|0);
     $99 = HEAP32[$next$i>>2]|0;
     $cmp186$i = ($99|0)==(0|0);
     if ($cmp186$i) {
      break;
     } else {
      $sp$0112$i = $99;
     }
    }
    if ((label|0) == 154) {
     $size188$i$le = ((($sp$0112$i)) + 4|0);
     $sflags193$i = ((($sp$0112$i)) + 12|0);
     $100 = HEAP32[$sflags193$i>>2]|0;
     $and194$i = $100 & 8;
     $tobool195$i = ($and194$i|0)==(0);
     if ($tobool195$i) {
      $cmp203$i = ($97>>>0)<=($92>>>0);
      $cmp209$i = ($tbase$795$i>>>0)>($92>>>0);
      $or$cond98$i = $cmp209$i & $cmp203$i;
      if ($or$cond98$i) {
       $add212$i = (($98) + ($tsize$794$i))|0;
       HEAP32[$size188$i$le>>2] = $add212$i;
       $101 = HEAP32[(34832)>>2]|0;
       $add215$i = (($101) + ($tsize$794$i))|0;
       $add$ptr$i35$i = ((($92)) + 8|0);
       $102 = $add$ptr$i35$i;
       $and$i36$i = $102 & 7;
       $cmp$i37$i = ($and$i36$i|0)==(0);
       $sub$i38$i = (0 - ($102))|0;
       $and3$i39$i = $sub$i38$i & 7;
       $cond$i40$i = $cmp$i37$i ? 0 : $and3$i39$i;
       $add$ptr4$i41$i = (($92) + ($cond$i40$i)|0);
       $sub5$i$i = (($add215$i) - ($cond$i40$i))|0;
       HEAP32[(34844)>>2] = $add$ptr4$i41$i;
       HEAP32[(34832)>>2] = $sub5$i$i;
       $or$i$i = $sub5$i$i | 1;
       $head$i42$i = ((($add$ptr4$i41$i)) + 4|0);
       HEAP32[$head$i42$i>>2] = $or$i$i;
       $add$ptr6$i$i = (($92) + ($add215$i)|0);
       $head7$i$i = ((($add$ptr6$i$i)) + 4|0);
       HEAP32[$head7$i$i>>2] = 40;
       $103 = HEAP32[(35308)>>2]|0;
       HEAP32[(34848)>>2] = $103;
       break;
      }
     }
    }
    $104 = HEAP32[(34836)>>2]|0;
    $cmp218$i = ($tbase$795$i>>>0)<($104>>>0);
    if ($cmp218$i) {
     HEAP32[(34836)>>2] = $tbase$795$i;
    }
    $add$ptr227$i = (($tbase$795$i) + ($tsize$794$i)|0);
    $sp$1111$i = (35268);
    while(1) {
     $105 = HEAP32[$sp$1111$i>>2]|0;
     $cmp228$i = ($105|0)==($add$ptr227$i|0);
     if ($cmp228$i) {
      label = 162;
      break;
     }
     $next231$i = ((($sp$1111$i)) + 8|0);
     $106 = HEAP32[$next231$i>>2]|0;
     $cmp224$i = ($106|0)==(0|0);
     if ($cmp224$i) {
      break;
     } else {
      $sp$1111$i = $106;
     }
    }
    if ((label|0) == 162) {
     $sflags235$i = ((($sp$1111$i)) + 12|0);
     $107 = HEAP32[$sflags235$i>>2]|0;
     $and236$i = $107 & 8;
     $tobool237$i = ($and236$i|0)==(0);
     if ($tobool237$i) {
      HEAP32[$sp$1111$i>>2] = $tbase$795$i;
      $size245$i = ((($sp$1111$i)) + 4|0);
      $108 = HEAP32[$size245$i>>2]|0;
      $add246$i = (($108) + ($tsize$794$i))|0;
      HEAP32[$size245$i>>2] = $add246$i;
      $add$ptr$i$i = ((($tbase$795$i)) + 8|0);
      $109 = $add$ptr$i$i;
      $and$i14$i = $109 & 7;
      $cmp$i15$i = ($and$i14$i|0)==(0);
      $sub$i16$i = (0 - ($109))|0;
      $and3$i$i = $sub$i16$i & 7;
      $cond$i17$i = $cmp$i15$i ? 0 : $and3$i$i;
      $add$ptr4$i$i = (($tbase$795$i) + ($cond$i17$i)|0);
      $add$ptr5$i$i = ((($add$ptr227$i)) + 8|0);
      $110 = $add$ptr5$i$i;
      $and6$i18$i = $110 & 7;
      $cmp7$i$i = ($and6$i18$i|0)==(0);
      $sub12$i$i = (0 - ($110))|0;
      $and13$i$i = $sub12$i$i & 7;
      $cond15$i$i = $cmp7$i$i ? 0 : $and13$i$i;
      $add$ptr16$i$i = (($add$ptr227$i) + ($cond15$i$i)|0);
      $sub$ptr$lhs$cast$i19$i = $add$ptr16$i$i;
      $sub$ptr$rhs$cast$i20$i = $add$ptr4$i$i;
      $sub$ptr$sub$i21$i = (($sub$ptr$lhs$cast$i19$i) - ($sub$ptr$rhs$cast$i20$i))|0;
      $add$ptr17$i$i = (($add$ptr4$i$i) + ($nb$0)|0);
      $sub18$i$i = (($sub$ptr$sub$i21$i) - ($nb$0))|0;
      $or19$i$i = $nb$0 | 3;
      $head$i22$i = ((($add$ptr4$i$i)) + 4|0);
      HEAP32[$head$i22$i>>2] = $or19$i$i;
      $cmp20$i$i = ($92|0)==($add$ptr16$i$i|0);
      L238: do {
       if ($cmp20$i$i) {
        $111 = HEAP32[(34832)>>2]|0;
        $add$i$i = (($111) + ($sub18$i$i))|0;
        HEAP32[(34832)>>2] = $add$i$i;
        HEAP32[(34844)>>2] = $add$ptr17$i$i;
        $or22$i$i = $add$i$i | 1;
        $head23$i$i = ((($add$ptr17$i$i)) + 4|0);
        HEAP32[$head23$i$i>>2] = $or22$i$i;
       } else {
        $112 = HEAP32[(34840)>>2]|0;
        $cmp24$i$i = ($112|0)==($add$ptr16$i$i|0);
        if ($cmp24$i$i) {
         $113 = HEAP32[(34828)>>2]|0;
         $add26$i$i = (($113) + ($sub18$i$i))|0;
         HEAP32[(34828)>>2] = $add26$i$i;
         HEAP32[(34840)>>2] = $add$ptr17$i$i;
         $or28$i$i = $add26$i$i | 1;
         $head29$i$i = ((($add$ptr17$i$i)) + 4|0);
         HEAP32[$head29$i$i>>2] = $or28$i$i;
         $add$ptr30$i$i = (($add$ptr17$i$i) + ($add26$i$i)|0);
         HEAP32[$add$ptr30$i$i>>2] = $add26$i$i;
         break;
        }
        $head32$i$i = ((($add$ptr16$i$i)) + 4|0);
        $114 = HEAP32[$head32$i$i>>2]|0;
        $and33$i$i = $114 & 3;
        $cmp34$i$i = ($and33$i$i|0)==(1);
        if ($cmp34$i$i) {
         $and37$i$i = $114 & -8;
         $shr$i25$i = $114 >>> 3;
         $cmp38$i$i = ($114>>>0)<(256);
         L246: do {
          if ($cmp38$i$i) {
           $fd$i$i = ((($add$ptr16$i$i)) + 8|0);
           $115 = HEAP32[$fd$i$i>>2]|0;
           $bk$i26$i = ((($add$ptr16$i$i)) + 12|0);
           $116 = HEAP32[$bk$i26$i>>2]|0;
           $cmp46$i$i = ($116|0)==($115|0);
           if ($cmp46$i$i) {
            $shl48$i$i = 1 << $shr$i25$i;
            $neg$i$i = $shl48$i$i ^ -1;
            $117 = HEAP32[8705]|0;
            $and49$i$i = $117 & $neg$i$i;
            HEAP32[8705] = $and49$i$i;
            break;
           } else {
            $bk67$i$i = ((($115)) + 12|0);
            HEAP32[$bk67$i$i>>2] = $116;
            $fd68$i$i = ((($116)) + 8|0);
            HEAP32[$fd68$i$i>>2] = $115;
            break;
           }
          } else {
           $parent$i27$i = ((($add$ptr16$i$i)) + 24|0);
           $118 = HEAP32[$parent$i27$i>>2]|0;
           $bk74$i$i = ((($add$ptr16$i$i)) + 12|0);
           $119 = HEAP32[$bk74$i$i>>2]|0;
           $cmp75$i$i = ($119|0)==($add$ptr16$i$i|0);
           do {
            if ($cmp75$i$i) {
             $child$i$i = ((($add$ptr16$i$i)) + 16|0);
             $arrayidx96$i$i = ((($child$i$i)) + 4|0);
             $121 = HEAP32[$arrayidx96$i$i>>2]|0;
             $cmp97$i$i = ($121|0)==(0|0);
             if ($cmp97$i$i) {
              $122 = HEAP32[$child$i$i>>2]|0;
              $cmp100$i$i = ($122|0)==(0|0);
              if ($cmp100$i$i) {
               $R$3$i$i = 0;
               break;
              } else {
               $R$1$i$i$ph = $122;$RP$1$i$i$ph = $child$i$i;
              }
             } else {
              $R$1$i$i$ph = $121;$RP$1$i$i$ph = $arrayidx96$i$i;
             }
             $R$1$i$i = $R$1$i$i$ph;$RP$1$i$i = $RP$1$i$i$ph;
             while(1) {
              $arrayidx103$i$i = ((($R$1$i$i)) + 20|0);
              $123 = HEAP32[$arrayidx103$i$i>>2]|0;
              $cmp104$i$i = ($123|0)==(0|0);
              if ($cmp104$i$i) {
               $arrayidx107$i$i = ((($R$1$i$i)) + 16|0);
               $124 = HEAP32[$arrayidx107$i$i>>2]|0;
               $cmp108$i$i = ($124|0)==(0|0);
               if ($cmp108$i$i) {
                break;
               } else {
                $R$1$i$i$be = $124;$RP$1$i$i$be = $arrayidx107$i$i;
               }
              } else {
               $R$1$i$i$be = $123;$RP$1$i$i$be = $arrayidx103$i$i;
              }
              $R$1$i$i = $R$1$i$i$be;$RP$1$i$i = $RP$1$i$i$be;
             }
             HEAP32[$RP$1$i$i>>2] = 0;
             $R$3$i$i = $R$1$i$i;
            } else {
             $fd78$i$i = ((($add$ptr16$i$i)) + 8|0);
             $120 = HEAP32[$fd78$i$i>>2]|0;
             $bk91$i$i = ((($120)) + 12|0);
             HEAP32[$bk91$i$i>>2] = $119;
             $fd92$i$i = ((($119)) + 8|0);
             HEAP32[$fd92$i$i>>2] = $120;
             $R$3$i$i = $119;
            }
           } while(0);
           $cmp120$i28$i = ($118|0)==(0|0);
           if ($cmp120$i28$i) {
            break;
           }
           $index$i29$i = ((($add$ptr16$i$i)) + 28|0);
           $125 = HEAP32[$index$i29$i>>2]|0;
           $arrayidx123$i$i = (35124 + ($125<<2)|0);
           $126 = HEAP32[$arrayidx123$i$i>>2]|0;
           $cmp124$i$i = ($126|0)==($add$ptr16$i$i|0);
           do {
            if ($cmp124$i$i) {
             HEAP32[$arrayidx123$i$i>>2] = $R$3$i$i;
             $cond1$i$i = ($R$3$i$i|0)==(0|0);
             if (!($cond1$i$i)) {
              break;
             }
             $shl131$i$i = 1 << $125;
             $neg132$i$i = $shl131$i$i ^ -1;
             $127 = HEAP32[(34824)>>2]|0;
             $and133$i$i = $127 & $neg132$i$i;
             HEAP32[(34824)>>2] = $and133$i$i;
             break L246;
            } else {
             $arrayidx143$i$i = ((($118)) + 16|0);
             $128 = HEAP32[$arrayidx143$i$i>>2]|0;
             $cmp144$i$i = ($128|0)==($add$ptr16$i$i|0);
             $arrayidx151$i$i = ((($118)) + 20|0);
             $arrayidx151$i$i$sink = $cmp144$i$i ? $arrayidx143$i$i : $arrayidx151$i$i;
             HEAP32[$arrayidx151$i$i$sink>>2] = $R$3$i$i;
             $cmp156$i$i = ($R$3$i$i|0)==(0|0);
             if ($cmp156$i$i) {
              break L246;
             }
            }
           } while(0);
           $parent165$i$i = ((($R$3$i$i)) + 24|0);
           HEAP32[$parent165$i$i>>2] = $118;
           $child166$i$i = ((($add$ptr16$i$i)) + 16|0);
           $129 = HEAP32[$child166$i$i>>2]|0;
           $cmp168$i$i = ($129|0)==(0|0);
           if (!($cmp168$i$i)) {
            $arrayidx178$i$i = ((($R$3$i$i)) + 16|0);
            HEAP32[$arrayidx178$i$i>>2] = $129;
            $parent179$i$i = ((($129)) + 24|0);
            HEAP32[$parent179$i$i>>2] = $R$3$i$i;
           }
           $arrayidx184$i$i = ((($child166$i$i)) + 4|0);
           $130 = HEAP32[$arrayidx184$i$i>>2]|0;
           $cmp185$i$i = ($130|0)==(0|0);
           if ($cmp185$i$i) {
            break;
           }
           $arrayidx195$i$i = ((($R$3$i$i)) + 20|0);
           HEAP32[$arrayidx195$i$i>>2] = $130;
           $parent196$i$i = ((($130)) + 24|0);
           HEAP32[$parent196$i$i>>2] = $R$3$i$i;
          }
         } while(0);
         $add$ptr205$i$i = (($add$ptr16$i$i) + ($and37$i$i)|0);
         $add206$i$i = (($and37$i$i) + ($sub18$i$i))|0;
         $oldfirst$0$i$i = $add$ptr205$i$i;$qsize$0$i$i = $add206$i$i;
        } else {
         $oldfirst$0$i$i = $add$ptr16$i$i;$qsize$0$i$i = $sub18$i$i;
        }
        $head208$i$i = ((($oldfirst$0$i$i)) + 4|0);
        $131 = HEAP32[$head208$i$i>>2]|0;
        $and209$i$i = $131 & -2;
        HEAP32[$head208$i$i>>2] = $and209$i$i;
        $or210$i$i = $qsize$0$i$i | 1;
        $head211$i$i = ((($add$ptr17$i$i)) + 4|0);
        HEAP32[$head211$i$i>>2] = $or210$i$i;
        $add$ptr212$i$i = (($add$ptr17$i$i) + ($qsize$0$i$i)|0);
        HEAP32[$add$ptr212$i$i>>2] = $qsize$0$i$i;
        $shr214$i$i = $qsize$0$i$i >>> 3;
        $cmp215$i$i = ($qsize$0$i$i>>>0)<(256);
        if ($cmp215$i$i) {
         $shl222$i$i = $shr214$i$i << 1;
         $arrayidx223$i$i = (34860 + ($shl222$i$i<<2)|0);
         $132 = HEAP32[8705]|0;
         $shl226$i$i = 1 << $shr214$i$i;
         $and227$i$i = $132 & $shl226$i$i;
         $tobool228$i$i = ($and227$i$i|0)==(0);
         if ($tobool228$i$i) {
          $or232$i$i = $132 | $shl226$i$i;
          HEAP32[8705] = $or232$i$i;
          $$pre$i31$i = ((($arrayidx223$i$i)) + 8|0);
          $$pre$phi$i32$iZ2D = $$pre$i31$i;$F224$0$i$i = $arrayidx223$i$i;
         } else {
          $133 = ((($arrayidx223$i$i)) + 8|0);
          $134 = HEAP32[$133>>2]|0;
          $$pre$phi$i32$iZ2D = $133;$F224$0$i$i = $134;
         }
         HEAP32[$$pre$phi$i32$iZ2D>>2] = $add$ptr17$i$i;
         $bk246$i$i = ((($F224$0$i$i)) + 12|0);
         HEAP32[$bk246$i$i>>2] = $add$ptr17$i$i;
         $fd247$i$i = ((($add$ptr17$i$i)) + 8|0);
         HEAP32[$fd247$i$i>>2] = $F224$0$i$i;
         $bk248$i$i = ((($add$ptr17$i$i)) + 12|0);
         HEAP32[$bk248$i$i>>2] = $arrayidx223$i$i;
         break;
        }
        $shr253$i$i = $qsize$0$i$i >>> 8;
        $cmp254$i$i = ($shr253$i$i|0)==(0);
        do {
         if ($cmp254$i$i) {
          $I252$0$i$i = 0;
         } else {
          $cmp258$i$i = ($qsize$0$i$i>>>0)>(16777215);
          if ($cmp258$i$i) {
           $I252$0$i$i = 31;
           break;
          }
          $sub262$i$i = (($shr253$i$i) + 1048320)|0;
          $shr263$i$i = $sub262$i$i >>> 16;
          $and264$i$i = $shr263$i$i & 8;
          $shl265$i$i = $shr253$i$i << $and264$i$i;
          $sub266$i$i = (($shl265$i$i) + 520192)|0;
          $shr267$i$i = $sub266$i$i >>> 16;
          $and268$i$i = $shr267$i$i & 4;
          $add269$i$i = $and268$i$i | $and264$i$i;
          $shl270$i$i = $shl265$i$i << $and268$i$i;
          $sub271$i$i = (($shl270$i$i) + 245760)|0;
          $shr272$i$i = $sub271$i$i >>> 16;
          $and273$i$i = $shr272$i$i & 2;
          $add274$i$i = $add269$i$i | $and273$i$i;
          $sub275$i$i = (14 - ($add274$i$i))|0;
          $shl276$i$i = $shl270$i$i << $and273$i$i;
          $shr277$i$i = $shl276$i$i >>> 15;
          $add278$i$i = (($sub275$i$i) + ($shr277$i$i))|0;
          $shl279$i$i = $add278$i$i << 1;
          $add280$i$i = (($add278$i$i) + 7)|0;
          $shr281$i$i = $qsize$0$i$i >>> $add280$i$i;
          $and282$i$i = $shr281$i$i & 1;
          $add283$i$i = $and282$i$i | $shl279$i$i;
          $I252$0$i$i = $add283$i$i;
         }
        } while(0);
        $arrayidx287$i$i = (35124 + ($I252$0$i$i<<2)|0);
        $index288$i$i = ((($add$ptr17$i$i)) + 28|0);
        HEAP32[$index288$i$i>>2] = $I252$0$i$i;
        $child289$i$i = ((($add$ptr17$i$i)) + 16|0);
        $arrayidx290$i$i = ((($child289$i$i)) + 4|0);
        HEAP32[$arrayidx290$i$i>>2] = 0;
        HEAP32[$child289$i$i>>2] = 0;
        $135 = HEAP32[(34824)>>2]|0;
        $shl294$i$i = 1 << $I252$0$i$i;
        $and295$i$i = $135 & $shl294$i$i;
        $tobool296$i$i = ($and295$i$i|0)==(0);
        if ($tobool296$i$i) {
         $or300$i$i = $135 | $shl294$i$i;
         HEAP32[(34824)>>2] = $or300$i$i;
         HEAP32[$arrayidx287$i$i>>2] = $add$ptr17$i$i;
         $parent301$i$i = ((($add$ptr17$i$i)) + 24|0);
         HEAP32[$parent301$i$i>>2] = $arrayidx287$i$i;
         $bk302$i$i = ((($add$ptr17$i$i)) + 12|0);
         HEAP32[$bk302$i$i>>2] = $add$ptr17$i$i;
         $fd303$i$i = ((($add$ptr17$i$i)) + 8|0);
         HEAP32[$fd303$i$i>>2] = $add$ptr17$i$i;
         break;
        }
        $136 = HEAP32[$arrayidx287$i$i>>2]|0;
        $head3174$i$i = ((($136)) + 4|0);
        $137 = HEAP32[$head3174$i$i>>2]|0;
        $and3185$i$i = $137 & -8;
        $cmp3196$i$i = ($and3185$i$i|0)==($qsize$0$i$i|0);
        L291: do {
         if ($cmp3196$i$i) {
          $T$0$lcssa$i34$i = $136;
         } else {
          $cmp306$i$i = ($I252$0$i$i|0)==(31);
          $shr310$i$i = $I252$0$i$i >>> 1;
          $sub313$i$i = (25 - ($shr310$i$i))|0;
          $cond315$i$i = $cmp306$i$i ? 0 : $sub313$i$i;
          $shl316$i$i = $qsize$0$i$i << $cond315$i$i;
          $K305$08$i$i = $shl316$i$i;$T$07$i$i = $136;
          while(1) {
           $shr323$i$i = $K305$08$i$i >>> 31;
           $arrayidx325$i$i = (((($T$07$i$i)) + 16|0) + ($shr323$i$i<<2)|0);
           $138 = HEAP32[$arrayidx325$i$i>>2]|0;
           $cmp327$i$i = ($138|0)==(0|0);
           if ($cmp327$i$i) {
            break;
           }
           $shl326$i$i = $K305$08$i$i << 1;
           $head317$i$i = ((($138)) + 4|0);
           $139 = HEAP32[$head317$i$i>>2]|0;
           $and318$i$i = $139 & -8;
           $cmp319$i$i = ($and318$i$i|0)==($qsize$0$i$i|0);
           if ($cmp319$i$i) {
            $T$0$lcssa$i34$i = $138;
            break L291;
           } else {
            $K305$08$i$i = $shl326$i$i;$T$07$i$i = $138;
           }
          }
          HEAP32[$arrayidx325$i$i>>2] = $add$ptr17$i$i;
          $parent337$i$i = ((($add$ptr17$i$i)) + 24|0);
          HEAP32[$parent337$i$i>>2] = $T$07$i$i;
          $bk338$i$i = ((($add$ptr17$i$i)) + 12|0);
          HEAP32[$bk338$i$i>>2] = $add$ptr17$i$i;
          $fd339$i$i = ((($add$ptr17$i$i)) + 8|0);
          HEAP32[$fd339$i$i>>2] = $add$ptr17$i$i;
          break L238;
         }
        } while(0);
        $fd344$i$i = ((($T$0$lcssa$i34$i)) + 8|0);
        $140 = HEAP32[$fd344$i$i>>2]|0;
        $bk357$i$i = ((($140)) + 12|0);
        HEAP32[$bk357$i$i>>2] = $add$ptr17$i$i;
        HEAP32[$fd344$i$i>>2] = $add$ptr17$i$i;
        $fd359$i$i = ((($add$ptr17$i$i)) + 8|0);
        HEAP32[$fd359$i$i>>2] = $140;
        $bk360$i$i = ((($add$ptr17$i$i)) + 12|0);
        HEAP32[$bk360$i$i>>2] = $T$0$lcssa$i34$i;
        $parent361$i$i = ((($add$ptr17$i$i)) + 24|0);
        HEAP32[$parent361$i$i>>2] = 0;
       }
      } while(0);
      $add$ptr369$i$i = ((($add$ptr4$i$i)) + 8|0);
      $retval$0 = $add$ptr369$i$i;
      STACKTOP = sp;return ($retval$0|0);
     }
    }
    $sp$0$i$i$i = (35268);
    while(1) {
     $141 = HEAP32[$sp$0$i$i$i>>2]|0;
     $cmp$i$i$i = ($141>>>0)>($92>>>0);
     if (!($cmp$i$i$i)) {
      $size$i$i$i = ((($sp$0$i$i$i)) + 4|0);
      $142 = HEAP32[$size$i$i$i>>2]|0;
      $add$ptr$i$i$i = (($141) + ($142)|0);
      $cmp2$i$i$i = ($add$ptr$i$i$i>>>0)>($92>>>0);
      if ($cmp2$i$i$i) {
       break;
      }
     }
     $next$i$i$i = ((($sp$0$i$i$i)) + 8|0);
     $143 = HEAP32[$next$i$i$i>>2]|0;
     $sp$0$i$i$i = $143;
    }
    $add$ptr2$i$i = ((($add$ptr$i$i$i)) + -47|0);
    $add$ptr3$i$i = ((($add$ptr2$i$i)) + 8|0);
    $144 = $add$ptr3$i$i;
    $and$i$i = $144 & 7;
    $cmp$i12$i = ($and$i$i|0)==(0);
    $sub$i$i = (0 - ($144))|0;
    $and6$i13$i = $sub$i$i & 7;
    $cond$i$i = $cmp$i12$i ? 0 : $and6$i13$i;
    $add$ptr7$i$i = (($add$ptr2$i$i) + ($cond$i$i)|0);
    $add$ptr81$i$i = ((($92)) + 16|0);
    $cmp9$i$i = ($add$ptr7$i$i>>>0)<($add$ptr81$i$i>>>0);
    $cond13$i$i = $cmp9$i$i ? $92 : $add$ptr7$i$i;
    $add$ptr14$i$i = ((($cond13$i$i)) + 8|0);
    $add$ptr15$i$i = ((($cond13$i$i)) + 24|0);
    $sub16$i$i = (($tsize$794$i) + -40)|0;
    $add$ptr$i2$i$i = ((($tbase$795$i)) + 8|0);
    $145 = $add$ptr$i2$i$i;
    $and$i$i$i = $145 & 7;
    $cmp$i3$i$i = ($and$i$i$i|0)==(0);
    $sub$i$i$i = (0 - ($145))|0;
    $and3$i$i$i = $sub$i$i$i & 7;
    $cond$i$i$i = $cmp$i3$i$i ? 0 : $and3$i$i$i;
    $add$ptr4$i$i$i = (($tbase$795$i) + ($cond$i$i$i)|0);
    $sub5$i$i$i = (($sub16$i$i) - ($cond$i$i$i))|0;
    HEAP32[(34844)>>2] = $add$ptr4$i$i$i;
    HEAP32[(34832)>>2] = $sub5$i$i$i;
    $or$i$i$i = $sub5$i$i$i | 1;
    $head$i$i$i = ((($add$ptr4$i$i$i)) + 4|0);
    HEAP32[$head$i$i$i>>2] = $or$i$i$i;
    $add$ptr6$i$i$i = (($tbase$795$i) + ($sub16$i$i)|0);
    $head7$i$i$i = ((($add$ptr6$i$i$i)) + 4|0);
    HEAP32[$head7$i$i$i>>2] = 40;
    $146 = HEAP32[(35308)>>2]|0;
    HEAP32[(34848)>>2] = $146;
    $head$i$i = ((($cond13$i$i)) + 4|0);
    HEAP32[$head$i$i>>2] = 27;
    ;HEAP32[$add$ptr14$i$i>>2]=HEAP32[(35268)>>2]|0;HEAP32[$add$ptr14$i$i+4>>2]=HEAP32[(35268)+4>>2]|0;HEAP32[$add$ptr14$i$i+8>>2]=HEAP32[(35268)+8>>2]|0;HEAP32[$add$ptr14$i$i+12>>2]=HEAP32[(35268)+12>>2]|0;
    HEAP32[(35268)>>2] = $tbase$795$i;
    HEAP32[(35272)>>2] = $tsize$794$i;
    HEAP32[(35280)>>2] = 0;
    HEAP32[(35276)>>2] = $add$ptr14$i$i;
    $147 = $add$ptr15$i$i;
    while(1) {
     $add$ptr24$i$i = ((($147)) + 4|0);
     HEAP32[$add$ptr24$i$i>>2] = 7;
     $head26$i$i = ((($147)) + 8|0);
     $cmp27$i$i = ($head26$i$i>>>0)<($add$ptr$i$i$i>>>0);
     if ($cmp27$i$i) {
      $147 = $add$ptr24$i$i;
     } else {
      break;
     }
    }
    $cmp28$i$i = ($cond13$i$i|0)==($92|0);
    if (!($cmp28$i$i)) {
     $sub$ptr$lhs$cast$i$i = $cond13$i$i;
     $sub$ptr$rhs$cast$i$i = $92;
     $sub$ptr$sub$i$i = (($sub$ptr$lhs$cast$i$i) - ($sub$ptr$rhs$cast$i$i))|0;
     $148 = HEAP32[$head$i$i>>2]|0;
     $and32$i$i = $148 & -2;
     HEAP32[$head$i$i>>2] = $and32$i$i;
     $or33$i$i = $sub$ptr$sub$i$i | 1;
     $head34$i$i = ((($92)) + 4|0);
     HEAP32[$head34$i$i>>2] = $or33$i$i;
     HEAP32[$cond13$i$i>>2] = $sub$ptr$sub$i$i;
     $shr$i$i = $sub$ptr$sub$i$i >>> 3;
     $cmp36$i$i = ($sub$ptr$sub$i$i>>>0)<(256);
     if ($cmp36$i$i) {
      $shl$i$i = $shr$i$i << 1;
      $arrayidx$i$i = (34860 + ($shl$i$i<<2)|0);
      $149 = HEAP32[8705]|0;
      $shl39$i$i = 1 << $shr$i$i;
      $and40$i$i = $149 & $shl39$i$i;
      $tobool$i$i = ($and40$i$i|0)==(0);
      if ($tobool$i$i) {
       $or44$i$i = $149 | $shl39$i$i;
       HEAP32[8705] = $or44$i$i;
       $$pre$i$i = ((($arrayidx$i$i)) + 8|0);
       $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $arrayidx$i$i;
      } else {
       $150 = ((($arrayidx$i$i)) + 8|0);
       $151 = HEAP32[$150>>2]|0;
       $$pre$phi$i$iZ2D = $150;$F$0$i$i = $151;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $92;
      $bk$i$i = ((($F$0$i$i)) + 12|0);
      HEAP32[$bk$i$i>>2] = $92;
      $fd54$i$i = ((($92)) + 8|0);
      HEAP32[$fd54$i$i>>2] = $F$0$i$i;
      $bk55$i$i = ((($92)) + 12|0);
      HEAP32[$bk55$i$i>>2] = $arrayidx$i$i;
      break;
     }
     $shr58$i$i = $sub$ptr$sub$i$i >>> 8;
     $cmp59$i$i = ($shr58$i$i|0)==(0);
     if ($cmp59$i$i) {
      $I57$0$i$i = 0;
     } else {
      $cmp63$i$i = ($sub$ptr$sub$i$i>>>0)>(16777215);
      if ($cmp63$i$i) {
       $I57$0$i$i = 31;
      } else {
       $sub67$i$i = (($shr58$i$i) + 1048320)|0;
       $shr68$i$i = $sub67$i$i >>> 16;
       $and69$i$i = $shr68$i$i & 8;
       $shl70$i$i = $shr58$i$i << $and69$i$i;
       $sub71$i$i = (($shl70$i$i) + 520192)|0;
       $shr72$i$i = $sub71$i$i >>> 16;
       $and73$i$i = $shr72$i$i & 4;
       $add74$i$i = $and73$i$i | $and69$i$i;
       $shl75$i$i = $shl70$i$i << $and73$i$i;
       $sub76$i$i = (($shl75$i$i) + 245760)|0;
       $shr77$i$i = $sub76$i$i >>> 16;
       $and78$i$i = $shr77$i$i & 2;
       $add79$i$i = $add74$i$i | $and78$i$i;
       $sub80$i$i = (14 - ($add79$i$i))|0;
       $shl81$i$i = $shl75$i$i << $and78$i$i;
       $shr82$i$i = $shl81$i$i >>> 15;
       $add83$i$i = (($sub80$i$i) + ($shr82$i$i))|0;
       $shl84$i$i = $add83$i$i << 1;
       $add85$i$i = (($add83$i$i) + 7)|0;
       $shr86$i$i = $sub$ptr$sub$i$i >>> $add85$i$i;
       $and87$i$i = $shr86$i$i & 1;
       $add88$i$i = $and87$i$i | $shl84$i$i;
       $I57$0$i$i = $add88$i$i;
      }
     }
     $arrayidx91$i$i = (35124 + ($I57$0$i$i<<2)|0);
     $index$i$i = ((($92)) + 28|0);
     HEAP32[$index$i$i>>2] = $I57$0$i$i;
     $arrayidx92$i$i = ((($92)) + 20|0);
     HEAP32[$arrayidx92$i$i>>2] = 0;
     HEAP32[$add$ptr81$i$i>>2] = 0;
     $152 = HEAP32[(34824)>>2]|0;
     $shl95$i$i = 1 << $I57$0$i$i;
     $and96$i$i = $152 & $shl95$i$i;
     $tobool97$i$i = ($and96$i$i|0)==(0);
     if ($tobool97$i$i) {
      $or101$i$i = $152 | $shl95$i$i;
      HEAP32[(34824)>>2] = $or101$i$i;
      HEAP32[$arrayidx91$i$i>>2] = $92;
      $parent$i$i = ((($92)) + 24|0);
      HEAP32[$parent$i$i>>2] = $arrayidx91$i$i;
      $bk102$i$i = ((($92)) + 12|0);
      HEAP32[$bk102$i$i>>2] = $92;
      $fd103$i$i = ((($92)) + 8|0);
      HEAP32[$fd103$i$i>>2] = $92;
      break;
     }
     $153 = HEAP32[$arrayidx91$i$i>>2]|0;
     $head1186$i$i = ((($153)) + 4|0);
     $154 = HEAP32[$head1186$i$i>>2]|0;
     $and1197$i$i = $154 & -8;
     $cmp1208$i$i = ($and1197$i$i|0)==($sub$ptr$sub$i$i|0);
     L325: do {
      if ($cmp1208$i$i) {
       $T$0$lcssa$i$i = $153;
      } else {
       $cmp106$i$i = ($I57$0$i$i|0)==(31);
       $shr110$i$i = $I57$0$i$i >>> 1;
       $sub113$i$i = (25 - ($shr110$i$i))|0;
       $cond115$i$i = $cmp106$i$i ? 0 : $sub113$i$i;
       $shl116$i$i = $sub$ptr$sub$i$i << $cond115$i$i;
       $K105$010$i$i = $shl116$i$i;$T$09$i$i = $153;
       while(1) {
        $shr124$i$i = $K105$010$i$i >>> 31;
        $arrayidx126$i$i = (((($T$09$i$i)) + 16|0) + ($shr124$i$i<<2)|0);
        $155 = HEAP32[$arrayidx126$i$i>>2]|0;
        $cmp128$i$i = ($155|0)==(0|0);
        if ($cmp128$i$i) {
         break;
        }
        $shl127$i$i = $K105$010$i$i << 1;
        $head118$i$i = ((($155)) + 4|0);
        $156 = HEAP32[$head118$i$i>>2]|0;
        $and119$i$i = $156 & -8;
        $cmp120$i$i = ($and119$i$i|0)==($sub$ptr$sub$i$i|0);
        if ($cmp120$i$i) {
         $T$0$lcssa$i$i = $155;
         break L325;
        } else {
         $K105$010$i$i = $shl127$i$i;$T$09$i$i = $155;
        }
       }
       HEAP32[$arrayidx126$i$i>>2] = $92;
       $parent138$i$i = ((($92)) + 24|0);
       HEAP32[$parent138$i$i>>2] = $T$09$i$i;
       $bk139$i$i = ((($92)) + 12|0);
       HEAP32[$bk139$i$i>>2] = $92;
       $fd140$i$i = ((($92)) + 8|0);
       HEAP32[$fd140$i$i>>2] = $92;
       break L215;
      }
     } while(0);
     $fd148$i$i = ((($T$0$lcssa$i$i)) + 8|0);
     $157 = HEAP32[$fd148$i$i>>2]|0;
     $bk158$i$i = ((($157)) + 12|0);
     HEAP32[$bk158$i$i>>2] = $92;
     HEAP32[$fd148$i$i>>2] = $92;
     $fd160$i$i = ((($92)) + 8|0);
     HEAP32[$fd160$i$i>>2] = $157;
     $bk161$i$i = ((($92)) + 12|0);
     HEAP32[$bk161$i$i>>2] = $T$0$lcssa$i$i;
     $parent162$i$i = ((($92)) + 24|0);
     HEAP32[$parent162$i$i>>2] = 0;
    }
   }
  } while(0);
  $158 = HEAP32[(34832)>>2]|0;
  $cmp257$i = ($158>>>0)>($nb$0>>>0);
  if ($cmp257$i) {
   $sub260$i = (($158) - ($nb$0))|0;
   HEAP32[(34832)>>2] = $sub260$i;
   $159 = HEAP32[(34844)>>2]|0;
   $add$ptr262$i = (($159) + ($nb$0)|0);
   HEAP32[(34844)>>2] = $add$ptr262$i;
   $or264$i = $sub260$i | 1;
   $head265$i = ((($add$ptr262$i)) + 4|0);
   HEAP32[$head265$i>>2] = $or264$i;
   $or267$i = $nb$0 | 3;
   $head268$i = ((($159)) + 4|0);
   HEAP32[$head268$i>>2] = $or267$i;
   $add$ptr269$i = ((($159)) + 8|0);
   $retval$0 = $add$ptr269$i;
   STACKTOP = sp;return ($retval$0|0);
  }
 }
 $call275$i = (___errno_location()|0);
 HEAP32[$call275$i>>2] = 48;
 $retval$0 = 0;
 STACKTOP = sp;return ($retval$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $F510$0 = 0, $I534$0 = 0, $K583$0266 = 0;
 var $R$1 = 0, $R$1$be = 0, $R$1$ph = 0, $R$3 = 0, $R332$1 = 0, $R332$1$be = 0, $R332$1$ph = 0, $R332$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $RP360$1 = 0, $RP360$1$be = 0, $RP360$1$ph = 0, $T$0$lcssa = 0, $T$0265 = 0, $add$ptr = 0, $add$ptr16 = 0, $add$ptr217 = 0, $add$ptr261 = 0;
 var $add$ptr482 = 0, $add$ptr498 = 0, $add$ptr6 = 0, $add17 = 0, $add246 = 0, $add258 = 0, $add267 = 0, $add550 = 0, $add555 = 0, $add559 = 0, $add561 = 0, $add564 = 0, $and12 = 0, $and140 = 0, $and210 = 0, $and215 = 0, $and232 = 0, $and240 = 0, $and266 = 0, $and301 = 0;
 var $and410 = 0, $and46 = 0, $and495 = 0, $and5 = 0, $and512 = 0, $and545 = 0, $and549 = 0, $and554 = 0, $and563 = 0, $and574 = 0, $and592 = 0, $and592263 = 0, $and8 = 0, $arrayidx108 = 0, $arrayidx113 = 0, $arrayidx130 = 0, $arrayidx149 = 0, $arrayidx157 = 0, $arrayidx157$sink = 0, $arrayidx182 = 0;
 var $arrayidx188 = 0, $arrayidx198 = 0, $arrayidx362 = 0, $arrayidx374 = 0, $arrayidx379 = 0, $arrayidx400 = 0, $arrayidx419 = 0, $arrayidx427 = 0, $arrayidx427$sink = 0, $arrayidx454 = 0, $arrayidx460 = 0, $arrayidx470 = 0, $arrayidx509 = 0, $arrayidx567 = 0, $arrayidx570 = 0, $arrayidx599 = 0, $arrayidx99 = 0, $bk = 0, $bk275 = 0, $bk321 = 0;
 var $bk333 = 0, $bk355 = 0, $bk529 = 0, $bk531 = 0, $bk580 = 0, $bk611 = 0, $bk631 = 0, $bk634 = 0, $bk66 = 0, $bk73 = 0, $bk94 = 0, $child = 0, $child171 = 0, $child361 = 0, $child443 = 0, $child569 = 0, $cmp = 0, $cmp$i = 0, $cmp100 = 0, $cmp104 = 0;
 var $cmp109 = 0, $cmp114 = 0, $cmp127 = 0, $cmp13 = 0, $cmp131 = 0, $cmp150 = 0, $cmp162 = 0, $cmp173 = 0, $cmp18 = 0, $cmp189 = 0, $cmp211 = 0, $cmp22 = 0, $cmp228 = 0, $cmp243 = 0, $cmp249 = 0, $cmp25 = 0, $cmp255 = 0, $cmp269 = 0, $cmp296 = 0, $cmp334 = 0;
 var $cmp363 = 0, $cmp368 = 0, $cmp375 = 0, $cmp380 = 0, $cmp395 = 0, $cmp401 = 0, $cmp42 = 0, $cmp420 = 0, $cmp432 = 0, $cmp445 = 0, $cmp461 = 0, $cmp484 = 0, $cmp502 = 0, $cmp536 = 0, $cmp540 = 0, $cmp584 = 0, $cmp593 = 0, $cmp593264 = 0, $cmp601 = 0, $cmp640 = 0;
 var $cmp74 = 0, $cond = 0, $cond254 = 0, $cond255 = 0, $dec = 0, $fd = 0, $fd273 = 0, $fd322 = 0, $fd338 = 0, $fd356 = 0, $fd530 = 0, $fd581 = 0, $fd612 = 0, $fd620 = 0, $fd633 = 0, $fd67 = 0, $fd78 = 0, $fd95 = 0, $head209 = 0, $head216 = 0;
 var $head231 = 0, $head248 = 0, $head260 = 0, $head4 = 0, $head481 = 0, $head497 = 0, $head591 = 0, $head591262 = 0, $idx$neg = 0, $index = 0, $index399 = 0, $index568 = 0, $neg = 0, $neg139 = 0, $neg300 = 0, $neg409 = 0, $next4$i = 0, $or = 0, $or247 = 0, $or259 = 0;
 var $or480 = 0, $or496 = 0, $or516 = 0, $or578 = 0, $p$1 = 0, $parent = 0, $parent170 = 0, $parent183 = 0, $parent199 = 0, $parent331 = 0, $parent442 = 0, $parent455 = 0, $parent471 = 0, $parent579 = 0, $parent610 = 0, $parent635 = 0, $psize$1 = 0, $psize$2 = 0, $shl138 = 0, $shl299 = 0;
 var $shl408 = 0, $shl45 = 0, $shl508 = 0, $shl511 = 0, $shl546 = 0, $shl551 = 0, $shl557 = 0, $shl560 = 0, $shl573 = 0, $shl590 = 0, $shl600 = 0, $shr = 0, $shr268 = 0, $shr501 = 0, $shr535 = 0, $shr544 = 0, $shr548 = 0, $shr553 = 0, $shr558 = 0, $shr562 = 0;
 var $shr586 = 0, $shr597 = 0, $sp$0$i = 0, $sp$0$in$i = 0, $sub = 0, $sub547 = 0, $sub552 = 0, $sub556 = 0, $sub589 = 0, $tobool233 = 0, $tobool241 = 0, $tobool513 = 0, $tobool575 = 0, $tobool9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($mem|0)==(0|0);
 if ($cmp) {
  return;
 }
 $add$ptr = ((($mem)) + -8|0);
 $0 = HEAP32[(34836)>>2]|0;
 $head4 = ((($mem)) + -4|0);
 $1 = HEAP32[$head4>>2]|0;
 $and5 = $1 & -8;
 $add$ptr6 = (($add$ptr) + ($and5)|0);
 $and8 = $1 & 1;
 $tobool9 = ($and8|0)==(0);
 do {
  if ($tobool9) {
   $2 = HEAP32[$add$ptr>>2]|0;
   $and12 = $1 & 3;
   $cmp13 = ($and12|0)==(0);
   if ($cmp13) {
    return;
   }
   $idx$neg = (0 - ($2))|0;
   $add$ptr16 = (($add$ptr) + ($idx$neg)|0);
   $add17 = (($2) + ($and5))|0;
   $cmp18 = ($add$ptr16>>>0)<($0>>>0);
   if ($cmp18) {
    return;
   }
   $3 = HEAP32[(34840)>>2]|0;
   $cmp22 = ($3|0)==($add$ptr16|0);
   if ($cmp22) {
    $head209 = ((($add$ptr6)) + 4|0);
    $20 = HEAP32[$head209>>2]|0;
    $and210 = $20 & 3;
    $cmp211 = ($and210|0)==(3);
    if (!($cmp211)) {
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
     break;
    }
    $add$ptr217 = (($add$ptr16) + ($add17)|0);
    $head216 = ((($add$ptr16)) + 4|0);
    $or = $add17 | 1;
    $and215 = $20 & -2;
    HEAP32[(34828)>>2] = $add17;
    HEAP32[$head209>>2] = $and215;
    HEAP32[$head216>>2] = $or;
    HEAP32[$add$ptr217>>2] = $add17;
    return;
   }
   $shr = $2 >>> 3;
   $cmp25 = ($2>>>0)<(256);
   if ($cmp25) {
    $fd = ((($add$ptr16)) + 8|0);
    $4 = HEAP32[$fd>>2]|0;
    $bk = ((($add$ptr16)) + 12|0);
    $5 = HEAP32[$bk>>2]|0;
    $cmp42 = ($5|0)==($4|0);
    if ($cmp42) {
     $shl45 = 1 << $shr;
     $neg = $shl45 ^ -1;
     $6 = HEAP32[8705]|0;
     $and46 = $6 & $neg;
     HEAP32[8705] = $and46;
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
     break;
    } else {
     $bk66 = ((($4)) + 12|0);
     HEAP32[$bk66>>2] = $5;
     $fd67 = ((($5)) + 8|0);
     HEAP32[$fd67>>2] = $4;
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
     break;
    }
   }
   $parent = ((($add$ptr16)) + 24|0);
   $7 = HEAP32[$parent>>2]|0;
   $bk73 = ((($add$ptr16)) + 12|0);
   $8 = HEAP32[$bk73>>2]|0;
   $cmp74 = ($8|0)==($add$ptr16|0);
   do {
    if ($cmp74) {
     $child = ((($add$ptr16)) + 16|0);
     $arrayidx99 = ((($child)) + 4|0);
     $10 = HEAP32[$arrayidx99>>2]|0;
     $cmp100 = ($10|0)==(0|0);
     if ($cmp100) {
      $11 = HEAP32[$child>>2]|0;
      $cmp104 = ($11|0)==(0|0);
      if ($cmp104) {
       $R$3 = 0;
       break;
      } else {
       $R$1$ph = $11;$RP$1$ph = $child;
      }
     } else {
      $R$1$ph = $10;$RP$1$ph = $arrayidx99;
     }
     $R$1 = $R$1$ph;$RP$1 = $RP$1$ph;
     while(1) {
      $arrayidx108 = ((($R$1)) + 20|0);
      $12 = HEAP32[$arrayidx108>>2]|0;
      $cmp109 = ($12|0)==(0|0);
      if ($cmp109) {
       $arrayidx113 = ((($R$1)) + 16|0);
       $13 = HEAP32[$arrayidx113>>2]|0;
       $cmp114 = ($13|0)==(0|0);
       if ($cmp114) {
        break;
       } else {
        $R$1$be = $13;$RP$1$be = $arrayidx113;
       }
      } else {
       $R$1$be = $12;$RP$1$be = $arrayidx108;
      }
      $R$1 = $R$1$be;$RP$1 = $RP$1$be;
     }
     HEAP32[$RP$1>>2] = 0;
     $R$3 = $R$1;
    } else {
     $fd78 = ((($add$ptr16)) + 8|0);
     $9 = HEAP32[$fd78>>2]|0;
     $bk94 = ((($9)) + 12|0);
     HEAP32[$bk94>>2] = $8;
     $fd95 = ((($8)) + 8|0);
     HEAP32[$fd95>>2] = $9;
     $R$3 = $8;
    }
   } while(0);
   $cmp127 = ($7|0)==(0|0);
   if ($cmp127) {
    $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
   } else {
    $index = ((($add$ptr16)) + 28|0);
    $14 = HEAP32[$index>>2]|0;
    $arrayidx130 = (35124 + ($14<<2)|0);
    $15 = HEAP32[$arrayidx130>>2]|0;
    $cmp131 = ($15|0)==($add$ptr16|0);
    if ($cmp131) {
     HEAP32[$arrayidx130>>2] = $R$3;
     $cond254 = ($R$3|0)==(0|0);
     if ($cond254) {
      $shl138 = 1 << $14;
      $neg139 = $shl138 ^ -1;
      $16 = HEAP32[(34824)>>2]|0;
      $and140 = $16 & $neg139;
      HEAP32[(34824)>>2] = $and140;
      $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
      break;
     }
    } else {
     $arrayidx149 = ((($7)) + 16|0);
     $17 = HEAP32[$arrayidx149>>2]|0;
     $cmp150 = ($17|0)==($add$ptr16|0);
     $arrayidx157 = ((($7)) + 20|0);
     $arrayidx157$sink = $cmp150 ? $arrayidx149 : $arrayidx157;
     HEAP32[$arrayidx157$sink>>2] = $R$3;
     $cmp162 = ($R$3|0)==(0|0);
     if ($cmp162) {
      $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
      break;
     }
    }
    $parent170 = ((($R$3)) + 24|0);
    HEAP32[$parent170>>2] = $7;
    $child171 = ((($add$ptr16)) + 16|0);
    $18 = HEAP32[$child171>>2]|0;
    $cmp173 = ($18|0)==(0|0);
    if (!($cmp173)) {
     $arrayidx182 = ((($R$3)) + 16|0);
     HEAP32[$arrayidx182>>2] = $18;
     $parent183 = ((($18)) + 24|0);
     HEAP32[$parent183>>2] = $R$3;
    }
    $arrayidx188 = ((($child171)) + 4|0);
    $19 = HEAP32[$arrayidx188>>2]|0;
    $cmp189 = ($19|0)==(0|0);
    if ($cmp189) {
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
    } else {
     $arrayidx198 = ((($R$3)) + 20|0);
     HEAP32[$arrayidx198>>2] = $19;
     $parent199 = ((($19)) + 24|0);
     HEAP32[$parent199>>2] = $R$3;
     $21 = $add$ptr16;$p$1 = $add$ptr16;$psize$1 = $add17;
    }
   }
  } else {
   $21 = $add$ptr;$p$1 = $add$ptr;$psize$1 = $and5;
  }
 } while(0);
 $cmp228 = ($21>>>0)<($add$ptr6>>>0);
 if (!($cmp228)) {
  return;
 }
 $head231 = ((($add$ptr6)) + 4|0);
 $22 = HEAP32[$head231>>2]|0;
 $and232 = $22 & 1;
 $tobool233 = ($and232|0)==(0);
 if ($tobool233) {
  return;
 }
 $and240 = $22 & 2;
 $tobool241 = ($and240|0)==(0);
 if ($tobool241) {
  $23 = HEAP32[(34844)>>2]|0;
  $cmp243 = ($23|0)==($add$ptr6|0);
  if ($cmp243) {
   $24 = HEAP32[(34832)>>2]|0;
   $add246 = (($24) + ($psize$1))|0;
   HEAP32[(34832)>>2] = $add246;
   HEAP32[(34844)>>2] = $p$1;
   $or247 = $add246 | 1;
   $head248 = ((($p$1)) + 4|0);
   HEAP32[$head248>>2] = $or247;
   $25 = HEAP32[(34840)>>2]|0;
   $cmp249 = ($p$1|0)==($25|0);
   if (!($cmp249)) {
    return;
   }
   HEAP32[(34840)>>2] = 0;
   HEAP32[(34828)>>2] = 0;
   return;
  }
  $26 = HEAP32[(34840)>>2]|0;
  $cmp255 = ($26|0)==($add$ptr6|0);
  if ($cmp255) {
   $27 = HEAP32[(34828)>>2]|0;
   $add258 = (($27) + ($psize$1))|0;
   HEAP32[(34828)>>2] = $add258;
   HEAP32[(34840)>>2] = $21;
   $or259 = $add258 | 1;
   $head260 = ((($p$1)) + 4|0);
   HEAP32[$head260>>2] = $or259;
   $add$ptr261 = (($21) + ($add258)|0);
   HEAP32[$add$ptr261>>2] = $add258;
   return;
  }
  $and266 = $22 & -8;
  $add267 = (($and266) + ($psize$1))|0;
  $shr268 = $22 >>> 3;
  $cmp269 = ($22>>>0)<(256);
  do {
   if ($cmp269) {
    $fd273 = ((($add$ptr6)) + 8|0);
    $28 = HEAP32[$fd273>>2]|0;
    $bk275 = ((($add$ptr6)) + 12|0);
    $29 = HEAP32[$bk275>>2]|0;
    $cmp296 = ($29|0)==($28|0);
    if ($cmp296) {
     $shl299 = 1 << $shr268;
     $neg300 = $shl299 ^ -1;
     $30 = HEAP32[8705]|0;
     $and301 = $30 & $neg300;
     HEAP32[8705] = $and301;
     break;
    } else {
     $bk321 = ((($28)) + 12|0);
     HEAP32[$bk321>>2] = $29;
     $fd322 = ((($29)) + 8|0);
     HEAP32[$fd322>>2] = $28;
     break;
    }
   } else {
    $parent331 = ((($add$ptr6)) + 24|0);
    $31 = HEAP32[$parent331>>2]|0;
    $bk333 = ((($add$ptr6)) + 12|0);
    $32 = HEAP32[$bk333>>2]|0;
    $cmp334 = ($32|0)==($add$ptr6|0);
    do {
     if ($cmp334) {
      $child361 = ((($add$ptr6)) + 16|0);
      $arrayidx362 = ((($child361)) + 4|0);
      $34 = HEAP32[$arrayidx362>>2]|0;
      $cmp363 = ($34|0)==(0|0);
      if ($cmp363) {
       $35 = HEAP32[$child361>>2]|0;
       $cmp368 = ($35|0)==(0|0);
       if ($cmp368) {
        $R332$3 = 0;
        break;
       } else {
        $R332$1$ph = $35;$RP360$1$ph = $child361;
       }
      } else {
       $R332$1$ph = $34;$RP360$1$ph = $arrayidx362;
      }
      $R332$1 = $R332$1$ph;$RP360$1 = $RP360$1$ph;
      while(1) {
       $arrayidx374 = ((($R332$1)) + 20|0);
       $36 = HEAP32[$arrayidx374>>2]|0;
       $cmp375 = ($36|0)==(0|0);
       if ($cmp375) {
        $arrayidx379 = ((($R332$1)) + 16|0);
        $37 = HEAP32[$arrayidx379>>2]|0;
        $cmp380 = ($37|0)==(0|0);
        if ($cmp380) {
         break;
        } else {
         $R332$1$be = $37;$RP360$1$be = $arrayidx379;
        }
       } else {
        $R332$1$be = $36;$RP360$1$be = $arrayidx374;
       }
       $R332$1 = $R332$1$be;$RP360$1 = $RP360$1$be;
      }
      HEAP32[$RP360$1>>2] = 0;
      $R332$3 = $R332$1;
     } else {
      $fd338 = ((($add$ptr6)) + 8|0);
      $33 = HEAP32[$fd338>>2]|0;
      $bk355 = ((($33)) + 12|0);
      HEAP32[$bk355>>2] = $32;
      $fd356 = ((($32)) + 8|0);
      HEAP32[$fd356>>2] = $33;
      $R332$3 = $32;
     }
    } while(0);
    $cmp395 = ($31|0)==(0|0);
    if (!($cmp395)) {
     $index399 = ((($add$ptr6)) + 28|0);
     $38 = HEAP32[$index399>>2]|0;
     $arrayidx400 = (35124 + ($38<<2)|0);
     $39 = HEAP32[$arrayidx400>>2]|0;
     $cmp401 = ($39|0)==($add$ptr6|0);
     if ($cmp401) {
      HEAP32[$arrayidx400>>2] = $R332$3;
      $cond255 = ($R332$3|0)==(0|0);
      if ($cond255) {
       $shl408 = 1 << $38;
       $neg409 = $shl408 ^ -1;
       $40 = HEAP32[(34824)>>2]|0;
       $and410 = $40 & $neg409;
       HEAP32[(34824)>>2] = $and410;
       break;
      }
     } else {
      $arrayidx419 = ((($31)) + 16|0);
      $41 = HEAP32[$arrayidx419>>2]|0;
      $cmp420 = ($41|0)==($add$ptr6|0);
      $arrayidx427 = ((($31)) + 20|0);
      $arrayidx427$sink = $cmp420 ? $arrayidx419 : $arrayidx427;
      HEAP32[$arrayidx427$sink>>2] = $R332$3;
      $cmp432 = ($R332$3|0)==(0|0);
      if ($cmp432) {
       break;
      }
     }
     $parent442 = ((($R332$3)) + 24|0);
     HEAP32[$parent442>>2] = $31;
     $child443 = ((($add$ptr6)) + 16|0);
     $42 = HEAP32[$child443>>2]|0;
     $cmp445 = ($42|0)==(0|0);
     if (!($cmp445)) {
      $arrayidx454 = ((($R332$3)) + 16|0);
      HEAP32[$arrayidx454>>2] = $42;
      $parent455 = ((($42)) + 24|0);
      HEAP32[$parent455>>2] = $R332$3;
     }
     $arrayidx460 = ((($child443)) + 4|0);
     $43 = HEAP32[$arrayidx460>>2]|0;
     $cmp461 = ($43|0)==(0|0);
     if (!($cmp461)) {
      $arrayidx470 = ((($R332$3)) + 20|0);
      HEAP32[$arrayidx470>>2] = $43;
      $parent471 = ((($43)) + 24|0);
      HEAP32[$parent471>>2] = $R332$3;
     }
    }
   }
  } while(0);
  $or480 = $add267 | 1;
  $head481 = ((($p$1)) + 4|0);
  HEAP32[$head481>>2] = $or480;
  $add$ptr482 = (($21) + ($add267)|0);
  HEAP32[$add$ptr482>>2] = $add267;
  $44 = HEAP32[(34840)>>2]|0;
  $cmp484 = ($p$1|0)==($44|0);
  if ($cmp484) {
   HEAP32[(34828)>>2] = $add267;
   return;
  } else {
   $psize$2 = $add267;
  }
 } else {
  $and495 = $22 & -2;
  HEAP32[$head231>>2] = $and495;
  $or496 = $psize$1 | 1;
  $head497 = ((($p$1)) + 4|0);
  HEAP32[$head497>>2] = $or496;
  $add$ptr498 = (($21) + ($psize$1)|0);
  HEAP32[$add$ptr498>>2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $shr501 = $psize$2 >>> 3;
 $cmp502 = ($psize$2>>>0)<(256);
 if ($cmp502) {
  $shl508 = $shr501 << 1;
  $arrayidx509 = (34860 + ($shl508<<2)|0);
  $45 = HEAP32[8705]|0;
  $shl511 = 1 << $shr501;
  $and512 = $45 & $shl511;
  $tobool513 = ($and512|0)==(0);
  if ($tobool513) {
   $or516 = $45 | $shl511;
   HEAP32[8705] = $or516;
   $$pre = ((($arrayidx509)) + 8|0);
   $$pre$phiZ2D = $$pre;$F510$0 = $arrayidx509;
  } else {
   $46 = ((($arrayidx509)) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   $$pre$phiZ2D = $46;$F510$0 = $47;
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$1;
  $bk529 = ((($F510$0)) + 12|0);
  HEAP32[$bk529>>2] = $p$1;
  $fd530 = ((($p$1)) + 8|0);
  HEAP32[$fd530>>2] = $F510$0;
  $bk531 = ((($p$1)) + 12|0);
  HEAP32[$bk531>>2] = $arrayidx509;
  return;
 }
 $shr535 = $psize$2 >>> 8;
 $cmp536 = ($shr535|0)==(0);
 if ($cmp536) {
  $I534$0 = 0;
 } else {
  $cmp540 = ($psize$2>>>0)>(16777215);
  if ($cmp540) {
   $I534$0 = 31;
  } else {
   $sub = (($shr535) + 1048320)|0;
   $shr544 = $sub >>> 16;
   $and545 = $shr544 & 8;
   $shl546 = $shr535 << $and545;
   $sub547 = (($shl546) + 520192)|0;
   $shr548 = $sub547 >>> 16;
   $and549 = $shr548 & 4;
   $add550 = $and549 | $and545;
   $shl551 = $shl546 << $and549;
   $sub552 = (($shl551) + 245760)|0;
   $shr553 = $sub552 >>> 16;
   $and554 = $shr553 & 2;
   $add555 = $add550 | $and554;
   $sub556 = (14 - ($add555))|0;
   $shl557 = $shl551 << $and554;
   $shr558 = $shl557 >>> 15;
   $add559 = (($sub556) + ($shr558))|0;
   $shl560 = $add559 << 1;
   $add561 = (($add559) + 7)|0;
   $shr562 = $psize$2 >>> $add561;
   $and563 = $shr562 & 1;
   $add564 = $and563 | $shl560;
   $I534$0 = $add564;
  }
 }
 $arrayidx567 = (35124 + ($I534$0<<2)|0);
 $index568 = ((($p$1)) + 28|0);
 HEAP32[$index568>>2] = $I534$0;
 $child569 = ((($p$1)) + 16|0);
 $arrayidx570 = ((($p$1)) + 20|0);
 HEAP32[$arrayidx570>>2] = 0;
 HEAP32[$child569>>2] = 0;
 $48 = HEAP32[(34824)>>2]|0;
 $shl573 = 1 << $I534$0;
 $and574 = $48 & $shl573;
 $tobool575 = ($and574|0)==(0);
 L112: do {
  if ($tobool575) {
   $or578 = $48 | $shl573;
   HEAP32[(34824)>>2] = $or578;
   HEAP32[$arrayidx567>>2] = $p$1;
   $parent579 = ((($p$1)) + 24|0);
   HEAP32[$parent579>>2] = $arrayidx567;
   $bk580 = ((($p$1)) + 12|0);
   HEAP32[$bk580>>2] = $p$1;
   $fd581 = ((($p$1)) + 8|0);
   HEAP32[$fd581>>2] = $p$1;
  } else {
   $49 = HEAP32[$arrayidx567>>2]|0;
   $head591262 = ((($49)) + 4|0);
   $50 = HEAP32[$head591262>>2]|0;
   $and592263 = $50 & -8;
   $cmp593264 = ($and592263|0)==($psize$2|0);
   L115: do {
    if ($cmp593264) {
     $T$0$lcssa = $49;
    } else {
     $cmp584 = ($I534$0|0)==(31);
     $shr586 = $I534$0 >>> 1;
     $sub589 = (25 - ($shr586))|0;
     $cond = $cmp584 ? 0 : $sub589;
     $shl590 = $psize$2 << $cond;
     $K583$0266 = $shl590;$T$0265 = $49;
     while(1) {
      $shr597 = $K583$0266 >>> 31;
      $arrayidx599 = (((($T$0265)) + 16|0) + ($shr597<<2)|0);
      $51 = HEAP32[$arrayidx599>>2]|0;
      $cmp601 = ($51|0)==(0|0);
      if ($cmp601) {
       break;
      }
      $shl600 = $K583$0266 << 1;
      $head591 = ((($51)) + 4|0);
      $52 = HEAP32[$head591>>2]|0;
      $and592 = $52 & -8;
      $cmp593 = ($and592|0)==($psize$2|0);
      if ($cmp593) {
       $T$0$lcssa = $51;
       break L115;
      } else {
       $K583$0266 = $shl600;$T$0265 = $51;
      }
     }
     HEAP32[$arrayidx599>>2] = $p$1;
     $parent610 = ((($p$1)) + 24|0);
     HEAP32[$parent610>>2] = $T$0265;
     $bk611 = ((($p$1)) + 12|0);
     HEAP32[$bk611>>2] = $p$1;
     $fd612 = ((($p$1)) + 8|0);
     HEAP32[$fd612>>2] = $p$1;
     break L112;
    }
   } while(0);
   $fd620 = ((($T$0$lcssa)) + 8|0);
   $53 = HEAP32[$fd620>>2]|0;
   $bk631 = ((($53)) + 12|0);
   HEAP32[$bk631>>2] = $p$1;
   HEAP32[$fd620>>2] = $p$1;
   $fd633 = ((($p$1)) + 8|0);
   HEAP32[$fd633>>2] = $53;
   $bk634 = ((($p$1)) + 12|0);
   HEAP32[$bk634>>2] = $T$0$lcssa;
   $parent635 = ((($p$1)) + 24|0);
   HEAP32[$parent635>>2] = 0;
  }
 } while(0);
 $54 = HEAP32[(34852)>>2]|0;
 $dec = (($54) + -1)|0;
 HEAP32[(34852)>>2] = $dec;
 $cmp640 = ($dec|0)==(0);
 if (!($cmp640)) {
  return;
 }
 $sp$0$in$i = (35276);
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $cmp$i = ($sp$0$i|0)==(0|0);
  $next4$i = ((($sp$0$i)) + 8|0);
  if ($cmp$i) {
   break;
  } else {
   $sp$0$in$i = $next4$i;
  }
 }
 HEAP32[(34852)>>2] = -1;
 return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $add$ptr = 0, $add$ptr10 = 0, $add6 = 0, $and = 0, $and15 = 0, $and17 = 0, $call = 0, $call12 = 0, $call3 = 0, $call7 = 0, $cmp = 0, $cmp1 = 0, $cmp13 = 0, $cmp18 = 0, $cmp20 = 0, $cmp5 = 0, $cmp8 = 0, $cond = 0, $cond19 = 0;
 var $cond24 = 0, $head = 0, $mem$1 = 0, $sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $cmp = ($oldmem|0)==(0|0);
 if ($cmp) {
  $call = (_malloc($bytes)|0);
  $mem$1 = $call;
  return ($mem$1|0);
 }
 $cmp1 = ($bytes>>>0)>(4294967231);
 if ($cmp1) {
  $call3 = (___errno_location()|0);
  HEAP32[$call3>>2] = 48;
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $cmp5 = ($bytes>>>0)<(11);
 $add6 = (($bytes) + 11)|0;
 $and = $add6 & -8;
 $cond = $cmp5 ? 16 : $and;
 $add$ptr = ((($oldmem)) + -8|0);
 $call7 = (_try_realloc_chunk($add$ptr,$cond)|0);
 $cmp8 = ($call7|0)==(0|0);
 if (!($cmp8)) {
  $add$ptr10 = ((($call7)) + 8|0);
  $mem$1 = $add$ptr10;
  return ($mem$1|0);
 }
 $call12 = (_malloc($bytes)|0);
 $cmp13 = ($call12|0)==(0|0);
 if ($cmp13) {
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $head = ((($oldmem)) + -4|0);
 $0 = HEAP32[$head>>2]|0;
 $and15 = $0 & -8;
 $and17 = $0 & 3;
 $cmp18 = ($and17|0)==(0);
 $cond19 = $cmp18 ? 8 : 4;
 $sub = (($and15) - ($cond19))|0;
 $cmp20 = ($sub>>>0)<($bytes>>>0);
 $cond24 = $cmp20 ? $sub : $bytes;
 (_memcpy(($call12|0),($oldmem|0),($cond24|0))|0);
 _free($oldmem);
 $mem$1 = $call12;
 return ($mem$1|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $R$1 = 0, $R$1$be = 0, $R$1$ph = 0, $R$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $add = 0, $add$i = 0, $add$ptr = 0, $add$ptr17 = 0, $add$ptr298 = 0;
 var $add$ptr303 = 0, $add$ptr317 = 0, $add$ptr41 = 0, $add$ptr66 = 0, $add$ptr67 = 0, $add$ptr91 = 0, $add105 = 0, $add58 = 0, $and = 0, $and10 = 0, $and100 = 0, $and104 = 0, $and128 = 0, $and19 = 0, $and216 = 0, $and294 = 0, $and305 = 0, $and43 = 0, $and69 = 0, $and80 = 0;
 var $and87 = 0, $arrayidx179 = 0, $arrayidx186 = 0, $arrayidx190 = 0, $arrayidx206 = 0, $arrayidx226 = 0, $arrayidx234 = 0, $arrayidx234$sink = 0, $arrayidx261 = 0, $arrayidx267 = 0, $arrayidx278 = 0, $bk = 0, $bk147 = 0, $bk155 = 0, $bk174 = 0, $child = 0, $child249 = 0, $cmp$i = 0, $cmp1$i = 0, $cmp106 = 0;
 var $cmp11 = 0, $cmp111 = 0, $cmp125 = 0, $cmp13 = 0, $cmp15 = 0, $cmp156 = 0, $cmp180 = 0, $cmp183 = 0, $cmp187 = 0, $cmp191 = 0, $cmp2$i = 0, $cmp203 = 0, $cmp207 = 0, $cmp227 = 0, $cmp239 = 0, $cmp251 = 0, $cmp268 = 0, $cmp288 = 0, $cmp34 = 0, $cmp36 = 0;
 var $cmp56 = 0, $cmp59 = 0, $cmp63 = 0, $cond = 0, $fd = 0, $fd148 = 0, $fd159 = 0, $fd175 = 0, $head = 0, $head23 = 0, $head299 = 0, $head31 = 0, $head310 = 0, $head318 = 0, $head48 = 0, $head74 = 0, $head79 = 0, $head92 = 0, $head99 = 0, $index = 0;
 var $neg = 0, $neg215 = 0, $newp$2 = 0, $or = 0, $or20 = 0, $or28 = 0, $or295 = 0, $or296 = 0, $or300 = 0, $or306 = 0, $or307 = 0, $or315 = 0, $or319 = 0, $or32 = 0, $or44 = 0, $or45 = 0, $or50 = 0, $or70 = 0, $or71 = 0, $or76 = 0;
 var $or88 = 0, $or89 = 0, $or93 = 0, $parent = 0, $parent248 = 0, $parent262 = 0, $parent279 = 0, $shl$i = 0, $shl127 = 0, $shl214 = 0, $shr = 0, $storemerge = 0, $storemerge1 = 0, $sub = 0, $sub$i = 0, $sub110 = 0, $sub40 = 0, $sub62 = 0, $tobool101 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $head = ((($p)) + 4|0);
 $0 = HEAP32[$head>>2]|0;
 $and = $0 & -8;
 $add$ptr = (($p) + ($and)|0);
 $and10 = $0 & 3;
 $cmp11 = ($and10|0)==(0);
 if ($cmp11) {
  $cmp$i = ($nb>>>0)<(256);
  if ($cmp$i) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $add$i = (($nb) + 4)|0;
  $cmp1$i = ($and>>>0)<($add$i>>>0);
  if (!($cmp1$i)) {
   $sub$i = (($and) - ($nb))|0;
   $1 = HEAP32[(35300)>>2]|0;
   $shl$i = $1 << 1;
   $cmp2$i = ($sub$i>>>0)>($shl$i>>>0);
   if (!($cmp2$i)) {
    $newp$2 = $p;
    return ($newp$2|0);
   }
  }
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $cmp13 = ($and>>>0)<($nb>>>0);
 if (!($cmp13)) {
  $sub = (($and) - ($nb))|0;
  $cmp15 = ($sub>>>0)>(15);
  if (!($cmp15)) {
   $newp$2 = $p;
   return ($newp$2|0);
  }
  $add$ptr17 = (($p) + ($nb)|0);
  $and19 = $0 & 1;
  $or = $and19 | $nb;
  $or20 = $or | 2;
  HEAP32[$head>>2] = $or20;
  $head23 = ((($add$ptr17)) + 4|0);
  $or28 = $sub | 3;
  HEAP32[$head23>>2] = $or28;
  $head31 = ((($add$ptr)) + 4|0);
  $2 = HEAP32[$head31>>2]|0;
  $or32 = $2 | 1;
  HEAP32[$head31>>2] = $or32;
  _dispose_chunk($add$ptr17,$sub);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $3 = HEAP32[(34844)>>2]|0;
 $cmp34 = ($3|0)==($add$ptr|0);
 if ($cmp34) {
  $4 = HEAP32[(34832)>>2]|0;
  $add = (($4) + ($and))|0;
  $cmp36 = ($add>>>0)>($nb>>>0);
  $sub40 = (($add) - ($nb))|0;
  $add$ptr41 = (($p) + ($nb)|0);
  if (!($cmp36)) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $or50 = $sub40 | 1;
  $head48 = ((($add$ptr41)) + 4|0);
  $and43 = $0 & 1;
  $or44 = $and43 | $nb;
  $or45 = $or44 | 2;
  HEAP32[$head>>2] = $or45;
  HEAP32[$head48>>2] = $or50;
  HEAP32[(34844)>>2] = $add$ptr41;
  HEAP32[(34832)>>2] = $sub40;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $5 = HEAP32[(34840)>>2]|0;
 $cmp56 = ($5|0)==($add$ptr|0);
 if ($cmp56) {
  $6 = HEAP32[(34828)>>2]|0;
  $add58 = (($6) + ($and))|0;
  $cmp59 = ($add58>>>0)<($nb>>>0);
  if ($cmp59) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $sub62 = (($add58) - ($nb))|0;
  $cmp63 = ($sub62>>>0)>(15);
  if ($cmp63) {
   $add$ptr66 = (($p) + ($nb)|0);
   $add$ptr67 = (($p) + ($add58)|0);
   $and69 = $0 & 1;
   $or70 = $and69 | $nb;
   $or71 = $or70 | 2;
   HEAP32[$head>>2] = $or71;
   $head74 = ((($add$ptr66)) + 4|0);
   $or76 = $sub62 | 1;
   HEAP32[$head74>>2] = $or76;
   HEAP32[$add$ptr67>>2] = $sub62;
   $head79 = ((($add$ptr67)) + 4|0);
   $7 = HEAP32[$head79>>2]|0;
   $and80 = $7 & -2;
   HEAP32[$head79>>2] = $and80;
   $storemerge = $add$ptr66;$storemerge1 = $sub62;
  } else {
   $and87 = $0 & 1;
   $or88 = $and87 | $add58;
   $or89 = $or88 | 2;
   HEAP32[$head>>2] = $or89;
   $add$ptr91 = (($p) + ($add58)|0);
   $head92 = ((($add$ptr91)) + 4|0);
   $8 = HEAP32[$head92>>2]|0;
   $or93 = $8 | 1;
   HEAP32[$head92>>2] = $or93;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(34828)>>2] = $storemerge1;
  HEAP32[(34840)>>2] = $storemerge;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $head99 = ((($add$ptr)) + 4|0);
 $9 = HEAP32[$head99>>2]|0;
 $and100 = $9 & 2;
 $tobool101 = ($and100|0)==(0);
 if (!($tobool101)) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $and104 = $9 & -8;
 $add105 = (($and104) + ($and))|0;
 $cmp106 = ($add105>>>0)<($nb>>>0);
 if ($cmp106) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $sub110 = (($add105) - ($nb))|0;
 $shr = $9 >>> 3;
 $cmp111 = ($9>>>0)<(256);
 do {
  if ($cmp111) {
   $fd = ((($add$ptr)) + 8|0);
   $10 = HEAP32[$fd>>2]|0;
   $bk = ((($add$ptr)) + 12|0);
   $11 = HEAP32[$bk>>2]|0;
   $cmp125 = ($11|0)==($10|0);
   if ($cmp125) {
    $shl127 = 1 << $shr;
    $neg = $shl127 ^ -1;
    $12 = HEAP32[8705]|0;
    $and128 = $12 & $neg;
    HEAP32[8705] = $and128;
    break;
   } else {
    $bk147 = ((($10)) + 12|0);
    HEAP32[$bk147>>2] = $11;
    $fd148 = ((($11)) + 8|0);
    HEAP32[$fd148>>2] = $10;
    break;
   }
  } else {
   $parent = ((($add$ptr)) + 24|0);
   $13 = HEAP32[$parent>>2]|0;
   $bk155 = ((($add$ptr)) + 12|0);
   $14 = HEAP32[$bk155>>2]|0;
   $cmp156 = ($14|0)==($add$ptr|0);
   do {
    if ($cmp156) {
     $child = ((($add$ptr)) + 16|0);
     $arrayidx179 = ((($child)) + 4|0);
     $16 = HEAP32[$arrayidx179>>2]|0;
     $cmp180 = ($16|0)==(0|0);
     if ($cmp180) {
      $17 = HEAP32[$child>>2]|0;
      $cmp183 = ($17|0)==(0|0);
      if ($cmp183) {
       $R$3 = 0;
       break;
      } else {
       $R$1$ph = $17;$RP$1$ph = $child;
      }
     } else {
      $R$1$ph = $16;$RP$1$ph = $arrayidx179;
     }
     $R$1 = $R$1$ph;$RP$1 = $RP$1$ph;
     while(1) {
      $arrayidx186 = ((($R$1)) + 20|0);
      $18 = HEAP32[$arrayidx186>>2]|0;
      $cmp187 = ($18|0)==(0|0);
      if ($cmp187) {
       $arrayidx190 = ((($R$1)) + 16|0);
       $19 = HEAP32[$arrayidx190>>2]|0;
       $cmp191 = ($19|0)==(0|0);
       if ($cmp191) {
        break;
       } else {
        $R$1$be = $19;$RP$1$be = $arrayidx190;
       }
      } else {
       $R$1$be = $18;$RP$1$be = $arrayidx186;
      }
      $R$1 = $R$1$be;$RP$1 = $RP$1$be;
     }
     HEAP32[$RP$1>>2] = 0;
     $R$3 = $R$1;
    } else {
     $fd159 = ((($add$ptr)) + 8|0);
     $15 = HEAP32[$fd159>>2]|0;
     $bk174 = ((($15)) + 12|0);
     HEAP32[$bk174>>2] = $14;
     $fd175 = ((($14)) + 8|0);
     HEAP32[$fd175>>2] = $15;
     $R$3 = $14;
    }
   } while(0);
   $cmp203 = ($13|0)==(0|0);
   if (!($cmp203)) {
    $index = ((($add$ptr)) + 28|0);
    $20 = HEAP32[$index>>2]|0;
    $arrayidx206 = (35124 + ($20<<2)|0);
    $21 = HEAP32[$arrayidx206>>2]|0;
    $cmp207 = ($21|0)==($add$ptr|0);
    if ($cmp207) {
     HEAP32[$arrayidx206>>2] = $R$3;
     $cond = ($R$3|0)==(0|0);
     if ($cond) {
      $shl214 = 1 << $20;
      $neg215 = $shl214 ^ -1;
      $22 = HEAP32[(34824)>>2]|0;
      $and216 = $22 & $neg215;
      HEAP32[(34824)>>2] = $and216;
      break;
     }
    } else {
     $arrayidx226 = ((($13)) + 16|0);
     $23 = HEAP32[$arrayidx226>>2]|0;
     $cmp227 = ($23|0)==($add$ptr|0);
     $arrayidx234 = ((($13)) + 20|0);
     $arrayidx234$sink = $cmp227 ? $arrayidx226 : $arrayidx234;
     HEAP32[$arrayidx234$sink>>2] = $R$3;
     $cmp239 = ($R$3|0)==(0|0);
     if ($cmp239) {
      break;
     }
    }
    $parent248 = ((($R$3)) + 24|0);
    HEAP32[$parent248>>2] = $13;
    $child249 = ((($add$ptr)) + 16|0);
    $24 = HEAP32[$child249>>2]|0;
    $cmp251 = ($24|0)==(0|0);
    if (!($cmp251)) {
     $arrayidx261 = ((($R$3)) + 16|0);
     HEAP32[$arrayidx261>>2] = $24;
     $parent262 = ((($24)) + 24|0);
     HEAP32[$parent262>>2] = $R$3;
    }
    $arrayidx267 = ((($child249)) + 4|0);
    $25 = HEAP32[$arrayidx267>>2]|0;
    $cmp268 = ($25|0)==(0|0);
    if (!($cmp268)) {
     $arrayidx278 = ((($R$3)) + 20|0);
     HEAP32[$arrayidx278>>2] = $25;
     $parent279 = ((($25)) + 24|0);
     HEAP32[$parent279>>2] = $R$3;
    }
   }
  }
 } while(0);
 $cmp288 = ($sub110>>>0)<(16);
 if ($cmp288) {
  $and294 = $0 & 1;
  $or295 = $and294 | $add105;
  $or296 = $or295 | 2;
  HEAP32[$head>>2] = $or296;
  $add$ptr298 = (($p) + ($add105)|0);
  $head299 = ((($add$ptr298)) + 4|0);
  $26 = HEAP32[$head299>>2]|0;
  $or300 = $26 | 1;
  HEAP32[$head299>>2] = $or300;
  $newp$2 = $p;
  return ($newp$2|0);
 } else {
  $add$ptr303 = (($p) + ($nb)|0);
  $and305 = $0 & 1;
  $or306 = $and305 | $nb;
  $or307 = $or306 | 2;
  HEAP32[$head>>2] = $or307;
  $head310 = ((($add$ptr303)) + 4|0);
  $or315 = $sub110 | 3;
  HEAP32[$head310>>2] = $or315;
  $add$ptr317 = (($p) + ($add105)|0);
  $head318 = ((($add$ptr317)) + 4|0);
  $27 = HEAP32[$head318>>2]|0;
  $or319 = $27 | 1;
  HEAP32[$head318>>2] = $or319;
  _dispose_chunk($add$ptr303,$sub110);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $F517$0 = 0, $I545$0 = 0, $K597$010 = 0, $R$1 = 0, $R$1$be = 0, $R$1$ph = 0;
 var $R$3 = 0, $R328$1 = 0, $R328$1$be = 0, $R328$1$ph = 0, $R328$3 = 0, $RP$1 = 0, $RP$1$be = 0, $RP$1$ph = 0, $RP357$1 = 0, $RP357$1$be = 0, $RP357$1$ph = 0, $T$0$lcssa = 0, $T$09 = 0, $add$ptr = 0, $add$ptr252 = 0, $add$ptr486 = 0, $add$ptr5 = 0, $add$ptr504 = 0, $add230 = 0, $add248 = 0;
 var $add258 = 0, $add561 = 0, $add566 = 0, $add570 = 0, $add572 = 0, $add575 = 0, $add6 = 0, $and = 0, $and128 = 0, $and2 = 0, $and202 = 0, $and207 = 0, $and224 = 0, $and257 = 0, $and295 = 0, $and32 = 0, $and410 = 0, $and501 = 0, $and520 = 0, $and556 = 0;
 var $and560 = 0, $and565 = 0, $and574 = 0, $and587 = 0, $and606 = 0, $and6067 = 0, $arrayidx100 = 0, $arrayidx118 = 0, $arrayidx138 = 0, $arrayidx146 = 0, $arrayidx146$sink = 0, $arrayidx173 = 0, $arrayidx179 = 0, $arrayidx190 = 0, $arrayidx359 = 0, $arrayidx371 = 0, $arrayidx376 = 0, $arrayidx399 = 0, $arrayidx420 = 0, $arrayidx428 = 0;
 var $arrayidx428$sink = 0, $arrayidx457 = 0, $arrayidx463 = 0, $arrayidx474 = 0, $arrayidx516 = 0, $arrayidx579 = 0, $arrayidx582 = 0, $arrayidx613 = 0, $arrayidx86 = 0, $arrayidx95 = 0, $bk = 0, $bk266 = 0, $bk317 = 0, $bk329 = 0, $bk352 = 0, $bk52 = 0, $bk539 = 0, $bk541 = 0, $bk594 = 0, $bk60 = 0;
 var $bk626 = 0, $bk648 = 0, $bk651 = 0, $bk81 = 0, $child = 0, $child161 = 0, $child358 = 0, $child445 = 0, $child581 = 0, $cmp = 0, $cmp10 = 0, $cmp101 = 0, $cmp115 = 0, $cmp119 = 0, $cmp13 = 0, $cmp139 = 0, $cmp151 = 0, $cmp163 = 0, $cmp180 = 0, $cmp203 = 0;
 var $cmp227 = 0, $cmp235 = 0, $cmp244 = 0, $cmp260 = 0, $cmp28 = 0, $cmp289 = 0, $cmp330 = 0, $cmp360 = 0, $cmp365 = 0, $cmp372 = 0, $cmp377 = 0, $cmp393 = 0, $cmp400 = 0, $cmp421 = 0, $cmp433 = 0, $cmp447 = 0, $cmp464 = 0, $cmp489 = 0, $cmp508 = 0, $cmp547 = 0;
 var $cmp551 = 0, $cmp598 = 0, $cmp607 = 0, $cmp6078 = 0, $cmp61 = 0, $cmp615 = 0, $cmp87 = 0, $cmp91 = 0, $cmp96 = 0, $cond = 0, $cond2 = 0, $cond3 = 0, $fd = 0, $fd264 = 0, $fd318 = 0, $fd334 = 0, $fd353 = 0, $fd53 = 0, $fd540 = 0, $fd595 = 0;
 var $fd627 = 0, $fd635 = 0, $fd65 = 0, $fd650 = 0, $fd82 = 0, $head = 0, $head201 = 0, $head208 = 0, $head223 = 0, $head233 = 0, $head251 = 0, $head485 = 0, $head503 = 0, $head605 = 0, $head6056 = 0, $idx$neg = 0, $index = 0, $index398 = 0, $index580 = 0, $neg = 0;
 var $neg127 = 0, $neg293 = 0, $neg408 = 0, $or = 0, $or232 = 0, $or250 = 0, $or484 = 0, $or502 = 0, $or525 = 0, $or592 = 0, $p$addr$1 = 0, $parent = 0, $parent160 = 0, $parent174 = 0, $parent191 = 0, $parent327 = 0, $parent444 = 0, $parent458 = 0, $parent475 = 0, $parent593 = 0;
 var $parent625 = 0, $parent652 = 0, $psize$addr$1 = 0, $psize$addr$2 = 0, $shl126 = 0, $shl292 = 0, $shl31 = 0, $shl407 = 0, $shl515 = 0, $shl519 = 0, $shl557 = 0, $shl562 = 0, $shl568 = 0, $shl571 = 0, $shl586 = 0, $shl604 = 0, $shl614 = 0, $shr = 0, $shr259 = 0, $shr507 = 0;
 var $shr546 = 0, $shr555 = 0, $shr559 = 0, $shr564 = 0, $shr569 = 0, $shr573 = 0, $shr600 = 0, $shr611 = 0, $sub = 0, $sub558 = 0, $sub563 = 0, $sub567 = 0, $sub603 = 0, $tobool = 0, $tobool225 = 0, $tobool521 = 0, $tobool588 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $add$ptr = (($p) + ($psize)|0);
 $head = ((($p)) + 4|0);
 $0 = HEAP32[$head>>2]|0;
 $and = $0 & 1;
 $tobool = ($and|0)==(0);
 do {
  if ($tobool) {
   $1 = HEAP32[$p>>2]|0;
   $and2 = $0 & 3;
   $cmp = ($and2|0)==(0);
   if ($cmp) {
    return;
   }
   $idx$neg = (0 - ($1))|0;
   $add$ptr5 = (($p) + ($idx$neg)|0);
   $add6 = (($1) + ($psize))|0;
   $2 = HEAP32[(34840)>>2]|0;
   $cmp10 = ($2|0)==($add$ptr5|0);
   if ($cmp10) {
    $head201 = ((($add$ptr)) + 4|0);
    $19 = HEAP32[$head201>>2]|0;
    $and202 = $19 & 3;
    $cmp203 = ($and202|0)==(3);
    if (!($cmp203)) {
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
     break;
    }
    $head208 = ((($add$ptr5)) + 4|0);
    $or = $add6 | 1;
    $and207 = $19 & -2;
    HEAP32[(34828)>>2] = $add6;
    HEAP32[$head201>>2] = $and207;
    HEAP32[$head208>>2] = $or;
    HEAP32[$add$ptr>>2] = $add6;
    return;
   }
   $shr = $1 >>> 3;
   $cmp13 = ($1>>>0)<(256);
   if ($cmp13) {
    $fd = ((($add$ptr5)) + 8|0);
    $3 = HEAP32[$fd>>2]|0;
    $bk = ((($add$ptr5)) + 12|0);
    $4 = HEAP32[$bk>>2]|0;
    $cmp28 = ($4|0)==($3|0);
    if ($cmp28) {
     $shl31 = 1 << $shr;
     $neg = $shl31 ^ -1;
     $5 = HEAP32[8705]|0;
     $and32 = $5 & $neg;
     HEAP32[8705] = $and32;
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
     break;
    } else {
     $bk52 = ((($3)) + 12|0);
     HEAP32[$bk52>>2] = $4;
     $fd53 = ((($4)) + 8|0);
     HEAP32[$fd53>>2] = $3;
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
     break;
    }
   }
   $parent = ((($add$ptr5)) + 24|0);
   $6 = HEAP32[$parent>>2]|0;
   $bk60 = ((($add$ptr5)) + 12|0);
   $7 = HEAP32[$bk60>>2]|0;
   $cmp61 = ($7|0)==($add$ptr5|0);
   do {
    if ($cmp61) {
     $child = ((($add$ptr5)) + 16|0);
     $arrayidx86 = ((($child)) + 4|0);
     $9 = HEAP32[$arrayidx86>>2]|0;
     $cmp87 = ($9|0)==(0|0);
     if ($cmp87) {
      $10 = HEAP32[$child>>2]|0;
      $cmp91 = ($10|0)==(0|0);
      if ($cmp91) {
       $R$3 = 0;
       break;
      } else {
       $R$1$ph = $10;$RP$1$ph = $child;
      }
     } else {
      $R$1$ph = $9;$RP$1$ph = $arrayidx86;
     }
     $R$1 = $R$1$ph;$RP$1 = $RP$1$ph;
     while(1) {
      $arrayidx95 = ((($R$1)) + 20|0);
      $11 = HEAP32[$arrayidx95>>2]|0;
      $cmp96 = ($11|0)==(0|0);
      if ($cmp96) {
       $arrayidx100 = ((($R$1)) + 16|0);
       $12 = HEAP32[$arrayidx100>>2]|0;
       $cmp101 = ($12|0)==(0|0);
       if ($cmp101) {
        break;
       } else {
        $R$1$be = $12;$RP$1$be = $arrayidx100;
       }
      } else {
       $R$1$be = $11;$RP$1$be = $arrayidx95;
      }
      $R$1 = $R$1$be;$RP$1 = $RP$1$be;
     }
     HEAP32[$RP$1>>2] = 0;
     $R$3 = $R$1;
    } else {
     $fd65 = ((($add$ptr5)) + 8|0);
     $8 = HEAP32[$fd65>>2]|0;
     $bk81 = ((($8)) + 12|0);
     HEAP32[$bk81>>2] = $7;
     $fd82 = ((($7)) + 8|0);
     HEAP32[$fd82>>2] = $8;
     $R$3 = $7;
    }
   } while(0);
   $cmp115 = ($6|0)==(0|0);
   if ($cmp115) {
    $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
   } else {
    $index = ((($add$ptr5)) + 28|0);
    $13 = HEAP32[$index>>2]|0;
    $arrayidx118 = (35124 + ($13<<2)|0);
    $14 = HEAP32[$arrayidx118>>2]|0;
    $cmp119 = ($14|0)==($add$ptr5|0);
    if ($cmp119) {
     HEAP32[$arrayidx118>>2] = $R$3;
     $cond2 = ($R$3|0)==(0|0);
     if ($cond2) {
      $shl126 = 1 << $13;
      $neg127 = $shl126 ^ -1;
      $15 = HEAP32[(34824)>>2]|0;
      $and128 = $15 & $neg127;
      HEAP32[(34824)>>2] = $and128;
      $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
      break;
     }
    } else {
     $arrayidx138 = ((($6)) + 16|0);
     $16 = HEAP32[$arrayidx138>>2]|0;
     $cmp139 = ($16|0)==($add$ptr5|0);
     $arrayidx146 = ((($6)) + 20|0);
     $arrayidx146$sink = $cmp139 ? $arrayidx138 : $arrayidx146;
     HEAP32[$arrayidx146$sink>>2] = $R$3;
     $cmp151 = ($R$3|0)==(0|0);
     if ($cmp151) {
      $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
      break;
     }
    }
    $parent160 = ((($R$3)) + 24|0);
    HEAP32[$parent160>>2] = $6;
    $child161 = ((($add$ptr5)) + 16|0);
    $17 = HEAP32[$child161>>2]|0;
    $cmp163 = ($17|0)==(0|0);
    if (!($cmp163)) {
     $arrayidx173 = ((($R$3)) + 16|0);
     HEAP32[$arrayidx173>>2] = $17;
     $parent174 = ((($17)) + 24|0);
     HEAP32[$parent174>>2] = $R$3;
    }
    $arrayidx179 = ((($child161)) + 4|0);
    $18 = HEAP32[$arrayidx179>>2]|0;
    $cmp180 = ($18|0)==(0|0);
    if ($cmp180) {
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
    } else {
     $arrayidx190 = ((($R$3)) + 20|0);
     HEAP32[$arrayidx190>>2] = $18;
     $parent191 = ((($18)) + 24|0);
     HEAP32[$parent191>>2] = $R$3;
     $p$addr$1 = $add$ptr5;$psize$addr$1 = $add6;
    }
   }
  } else {
   $p$addr$1 = $p;$psize$addr$1 = $psize;
  }
 } while(0);
 $head223 = ((($add$ptr)) + 4|0);
 $20 = HEAP32[$head223>>2]|0;
 $and224 = $20 & 2;
 $tobool225 = ($and224|0)==(0);
 if ($tobool225) {
  $21 = HEAP32[(34844)>>2]|0;
  $cmp227 = ($21|0)==($add$ptr|0);
  if ($cmp227) {
   $22 = HEAP32[(34832)>>2]|0;
   $add230 = (($22) + ($psize$addr$1))|0;
   HEAP32[(34832)>>2] = $add230;
   HEAP32[(34844)>>2] = $p$addr$1;
   $or232 = $add230 | 1;
   $head233 = ((($p$addr$1)) + 4|0);
   HEAP32[$head233>>2] = $or232;
   $23 = HEAP32[(34840)>>2]|0;
   $cmp235 = ($p$addr$1|0)==($23|0);
   if (!($cmp235)) {
    return;
   }
   HEAP32[(34840)>>2] = 0;
   HEAP32[(34828)>>2] = 0;
   return;
  }
  $24 = HEAP32[(34840)>>2]|0;
  $cmp244 = ($24|0)==($add$ptr|0);
  if ($cmp244) {
   $25 = HEAP32[(34828)>>2]|0;
   $add248 = (($25) + ($psize$addr$1))|0;
   HEAP32[(34828)>>2] = $add248;
   HEAP32[(34840)>>2] = $p$addr$1;
   $or250 = $add248 | 1;
   $head251 = ((($p$addr$1)) + 4|0);
   HEAP32[$head251>>2] = $or250;
   $add$ptr252 = (($p$addr$1) + ($add248)|0);
   HEAP32[$add$ptr252>>2] = $add248;
   return;
  }
  $and257 = $20 & -8;
  $add258 = (($and257) + ($psize$addr$1))|0;
  $shr259 = $20 >>> 3;
  $cmp260 = ($20>>>0)<(256);
  do {
   if ($cmp260) {
    $fd264 = ((($add$ptr)) + 8|0);
    $26 = HEAP32[$fd264>>2]|0;
    $bk266 = ((($add$ptr)) + 12|0);
    $27 = HEAP32[$bk266>>2]|0;
    $cmp289 = ($27|0)==($26|0);
    if ($cmp289) {
     $shl292 = 1 << $shr259;
     $neg293 = $shl292 ^ -1;
     $28 = HEAP32[8705]|0;
     $and295 = $28 & $neg293;
     HEAP32[8705] = $and295;
     break;
    } else {
     $bk317 = ((($26)) + 12|0);
     HEAP32[$bk317>>2] = $27;
     $fd318 = ((($27)) + 8|0);
     HEAP32[$fd318>>2] = $26;
     break;
    }
   } else {
    $parent327 = ((($add$ptr)) + 24|0);
    $29 = HEAP32[$parent327>>2]|0;
    $bk329 = ((($add$ptr)) + 12|0);
    $30 = HEAP32[$bk329>>2]|0;
    $cmp330 = ($30|0)==($add$ptr|0);
    do {
     if ($cmp330) {
      $child358 = ((($add$ptr)) + 16|0);
      $arrayidx359 = ((($child358)) + 4|0);
      $32 = HEAP32[$arrayidx359>>2]|0;
      $cmp360 = ($32|0)==(0|0);
      if ($cmp360) {
       $33 = HEAP32[$child358>>2]|0;
       $cmp365 = ($33|0)==(0|0);
       if ($cmp365) {
        $R328$3 = 0;
        break;
       } else {
        $R328$1$ph = $33;$RP357$1$ph = $child358;
       }
      } else {
       $R328$1$ph = $32;$RP357$1$ph = $arrayidx359;
      }
      $R328$1 = $R328$1$ph;$RP357$1 = $RP357$1$ph;
      while(1) {
       $arrayidx371 = ((($R328$1)) + 20|0);
       $34 = HEAP32[$arrayidx371>>2]|0;
       $cmp372 = ($34|0)==(0|0);
       if ($cmp372) {
        $arrayidx376 = ((($R328$1)) + 16|0);
        $35 = HEAP32[$arrayidx376>>2]|0;
        $cmp377 = ($35|0)==(0|0);
        if ($cmp377) {
         break;
        } else {
         $R328$1$be = $35;$RP357$1$be = $arrayidx376;
        }
       } else {
        $R328$1$be = $34;$RP357$1$be = $arrayidx371;
       }
       $R328$1 = $R328$1$be;$RP357$1 = $RP357$1$be;
      }
      HEAP32[$RP357$1>>2] = 0;
      $R328$3 = $R328$1;
     } else {
      $fd334 = ((($add$ptr)) + 8|0);
      $31 = HEAP32[$fd334>>2]|0;
      $bk352 = ((($31)) + 12|0);
      HEAP32[$bk352>>2] = $30;
      $fd353 = ((($30)) + 8|0);
      HEAP32[$fd353>>2] = $31;
      $R328$3 = $30;
     }
    } while(0);
    $cmp393 = ($29|0)==(0|0);
    if (!($cmp393)) {
     $index398 = ((($add$ptr)) + 28|0);
     $36 = HEAP32[$index398>>2]|0;
     $arrayidx399 = (35124 + ($36<<2)|0);
     $37 = HEAP32[$arrayidx399>>2]|0;
     $cmp400 = ($37|0)==($add$ptr|0);
     if ($cmp400) {
      HEAP32[$arrayidx399>>2] = $R328$3;
      $cond3 = ($R328$3|0)==(0|0);
      if ($cond3) {
       $shl407 = 1 << $36;
       $neg408 = $shl407 ^ -1;
       $38 = HEAP32[(34824)>>2]|0;
       $and410 = $38 & $neg408;
       HEAP32[(34824)>>2] = $and410;
       break;
      }
     } else {
      $arrayidx420 = ((($29)) + 16|0);
      $39 = HEAP32[$arrayidx420>>2]|0;
      $cmp421 = ($39|0)==($add$ptr|0);
      $arrayidx428 = ((($29)) + 20|0);
      $arrayidx428$sink = $cmp421 ? $arrayidx420 : $arrayidx428;
      HEAP32[$arrayidx428$sink>>2] = $R328$3;
      $cmp433 = ($R328$3|0)==(0|0);
      if ($cmp433) {
       break;
      }
     }
     $parent444 = ((($R328$3)) + 24|0);
     HEAP32[$parent444>>2] = $29;
     $child445 = ((($add$ptr)) + 16|0);
     $40 = HEAP32[$child445>>2]|0;
     $cmp447 = ($40|0)==(0|0);
     if (!($cmp447)) {
      $arrayidx457 = ((($R328$3)) + 16|0);
      HEAP32[$arrayidx457>>2] = $40;
      $parent458 = ((($40)) + 24|0);
      HEAP32[$parent458>>2] = $R328$3;
     }
     $arrayidx463 = ((($child445)) + 4|0);
     $41 = HEAP32[$arrayidx463>>2]|0;
     $cmp464 = ($41|0)==(0|0);
     if (!($cmp464)) {
      $arrayidx474 = ((($R328$3)) + 20|0);
      HEAP32[$arrayidx474>>2] = $41;
      $parent475 = ((($41)) + 24|0);
      HEAP32[$parent475>>2] = $R328$3;
     }
    }
   }
  } while(0);
  $or484 = $add258 | 1;
  $head485 = ((($p$addr$1)) + 4|0);
  HEAP32[$head485>>2] = $or484;
  $add$ptr486 = (($p$addr$1) + ($add258)|0);
  HEAP32[$add$ptr486>>2] = $add258;
  $42 = HEAP32[(34840)>>2]|0;
  $cmp489 = ($p$addr$1|0)==($42|0);
  if ($cmp489) {
   HEAP32[(34828)>>2] = $add258;
   return;
  } else {
   $psize$addr$2 = $add258;
  }
 } else {
  $and501 = $20 & -2;
  HEAP32[$head223>>2] = $and501;
  $or502 = $psize$addr$1 | 1;
  $head503 = ((($p$addr$1)) + 4|0);
  HEAP32[$head503>>2] = $or502;
  $add$ptr504 = (($p$addr$1) + ($psize$addr$1)|0);
  HEAP32[$add$ptr504>>2] = $psize$addr$1;
  $psize$addr$2 = $psize$addr$1;
 }
 $shr507 = $psize$addr$2 >>> 3;
 $cmp508 = ($psize$addr$2>>>0)<(256);
 if ($cmp508) {
  $shl515 = $shr507 << 1;
  $arrayidx516 = (34860 + ($shl515<<2)|0);
  $43 = HEAP32[8705]|0;
  $shl519 = 1 << $shr507;
  $and520 = $43 & $shl519;
  $tobool521 = ($and520|0)==(0);
  if ($tobool521) {
   $or525 = $43 | $shl519;
   HEAP32[8705] = $or525;
   $$pre = ((($arrayidx516)) + 8|0);
   $$pre$phiZ2D = $$pre;$F517$0 = $arrayidx516;
  } else {
   $44 = ((($arrayidx516)) + 8|0);
   $45 = HEAP32[$44>>2]|0;
   $$pre$phiZ2D = $44;$F517$0 = $45;
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$addr$1;
  $bk539 = ((($F517$0)) + 12|0);
  HEAP32[$bk539>>2] = $p$addr$1;
  $fd540 = ((($p$addr$1)) + 8|0);
  HEAP32[$fd540>>2] = $F517$0;
  $bk541 = ((($p$addr$1)) + 12|0);
  HEAP32[$bk541>>2] = $arrayidx516;
  return;
 }
 $shr546 = $psize$addr$2 >>> 8;
 $cmp547 = ($shr546|0)==(0);
 if ($cmp547) {
  $I545$0 = 0;
 } else {
  $cmp551 = ($psize$addr$2>>>0)>(16777215);
  if ($cmp551) {
   $I545$0 = 31;
  } else {
   $sub = (($shr546) + 1048320)|0;
   $shr555 = $sub >>> 16;
   $and556 = $shr555 & 8;
   $shl557 = $shr546 << $and556;
   $sub558 = (($shl557) + 520192)|0;
   $shr559 = $sub558 >>> 16;
   $and560 = $shr559 & 4;
   $add561 = $and560 | $and556;
   $shl562 = $shl557 << $and560;
   $sub563 = (($shl562) + 245760)|0;
   $shr564 = $sub563 >>> 16;
   $and565 = $shr564 & 2;
   $add566 = $add561 | $and565;
   $sub567 = (14 - ($add566))|0;
   $shl568 = $shl562 << $and565;
   $shr569 = $shl568 >>> 15;
   $add570 = (($sub567) + ($shr569))|0;
   $shl571 = $add570 << 1;
   $add572 = (($add570) + 7)|0;
   $shr573 = $psize$addr$2 >>> $add572;
   $and574 = $shr573 & 1;
   $add575 = $and574 | $shl571;
   $I545$0 = $add575;
  }
 }
 $arrayidx579 = (35124 + ($I545$0<<2)|0);
 $index580 = ((($p$addr$1)) + 28|0);
 HEAP32[$index580>>2] = $I545$0;
 $child581 = ((($p$addr$1)) + 16|0);
 $arrayidx582 = ((($p$addr$1)) + 20|0);
 HEAP32[$arrayidx582>>2] = 0;
 HEAP32[$child581>>2] = 0;
 $46 = HEAP32[(34824)>>2]|0;
 $shl586 = 1 << $I545$0;
 $and587 = $46 & $shl586;
 $tobool588 = ($and587|0)==(0);
 if ($tobool588) {
  $or592 = $46 | $shl586;
  HEAP32[(34824)>>2] = $or592;
  HEAP32[$arrayidx579>>2] = $p$addr$1;
  $parent593 = ((($p$addr$1)) + 24|0);
  HEAP32[$parent593>>2] = $arrayidx579;
  $bk594 = ((($p$addr$1)) + 12|0);
  HEAP32[$bk594>>2] = $p$addr$1;
  $fd595 = ((($p$addr$1)) + 8|0);
  HEAP32[$fd595>>2] = $p$addr$1;
  return;
 }
 $47 = HEAP32[$arrayidx579>>2]|0;
 $head6056 = ((($47)) + 4|0);
 $48 = HEAP32[$head6056>>2]|0;
 $and6067 = $48 & -8;
 $cmp6078 = ($and6067|0)==($psize$addr$2|0);
 L104: do {
  if ($cmp6078) {
   $T$0$lcssa = $47;
  } else {
   $cmp598 = ($I545$0|0)==(31);
   $shr600 = $I545$0 >>> 1;
   $sub603 = (25 - ($shr600))|0;
   $cond = $cmp598 ? 0 : $sub603;
   $shl604 = $psize$addr$2 << $cond;
   $K597$010 = $shl604;$T$09 = $47;
   while(1) {
    $shr611 = $K597$010 >>> 31;
    $arrayidx613 = (((($T$09)) + 16|0) + ($shr611<<2)|0);
    $49 = HEAP32[$arrayidx613>>2]|0;
    $cmp615 = ($49|0)==(0|0);
    if ($cmp615) {
     break;
    }
    $shl614 = $K597$010 << 1;
    $head605 = ((($49)) + 4|0);
    $50 = HEAP32[$head605>>2]|0;
    $and606 = $50 & -8;
    $cmp607 = ($and606|0)==($psize$addr$2|0);
    if ($cmp607) {
     $T$0$lcssa = $49;
     break L104;
    } else {
     $K597$010 = $shl614;$T$09 = $49;
    }
   }
   HEAP32[$arrayidx613>>2] = $p$addr$1;
   $parent625 = ((($p$addr$1)) + 24|0);
   HEAP32[$parent625>>2] = $T$09;
   $bk626 = ((($p$addr$1)) + 12|0);
   HEAP32[$bk626>>2] = $p$addr$1;
   $fd627 = ((($p$addr$1)) + 8|0);
   HEAP32[$fd627>>2] = $p$addr$1;
   return;
  }
 } while(0);
 $fd635 = ((($T$0$lcssa)) + 8|0);
 $51 = HEAP32[$fd635>>2]|0;
 $bk648 = ((($51)) + 12|0);
 HEAP32[$bk648>>2] = $p$addr$1;
 HEAP32[$fd635>>2] = $p$addr$1;
 $fd650 = ((($p$addr$1)) + 8|0);
 HEAP32[$fd650>>2] = $51;
 $bk651 = ((($p$addr$1)) + 12|0);
 HEAP32[$bk651>>2] = $T$0$lcssa;
 $parent652 = ((($p$addr$1)) + 24|0);
 HEAP32[$parent652>>2] = 0;
 return;
}
function _sbrk($increment) {
 $increment = $increment|0;
 var $0 = 0, $1 = 0, $add = 0, $call = 0, $call1 = 0, $call2 = 0, $call4 = 0, $cmp = 0, $retval$1 = 0, $tobool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $call = (_emscripten_get_sbrk_ptr()|0);
 $0 = HEAP32[$call>>2]|0;
 $add = (($0) + ($increment))|0;
 $call1 = (_emscripten_get_heap_size()|0);
 $cmp = ($add>>>0)>($call1>>>0);
 if ($cmp) {
  $call2 = (_emscripten_resize_heap(($add|0))|0);
  $tobool = ($call2|0)==(0);
  if ($tobool) {
   $call4 = (___errno_location()|0);
   HEAP32[$call4>>2] = 48;
   $retval$1 = (-1);
   return ($retval$1|0);
  }
 }
 HEAP32[$call>>2] = $add;
 $1 = $0;
 $retval$1 = $1;
 return ($retval$1|0);
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (setTempRet0(((($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0) | 0), 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = (getTempRet0() | 0);
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (setTempRet0((((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0) | 0), 0 | $1$0 & -1) | 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((setTempRet0((h) | 0),l|0)|0);
}
function _llvm_cttz_i32(x) { // Note: Currently doesn't take isZeroUndef()
    x = x | 0;
    return (x ? (31 - (Math_clz32((x ^ (x - 1))) | 0) | 0) : 32) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = (getTempRet0() | 0);
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = (getTempRet0() | 0);
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = (getTempRet0() | 0);
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (setTempRet0(($_0$1) | 0), $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0((high >>> bits) | 0);
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    setTempRet0((0) | 0);
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      setTempRet0(((high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))) | 0);
      return low << bits;
    }
    setTempRet0((low << (bits - 32)) | 0);
    return 0;
}
function _emscripten_get_sbrk_ptr() {
    return 35344;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >= 8192) {
      _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
      return dest|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      block_aligned_end = (aligned_end - 64)|0;

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}

  
function dynCall_idi(index,a1,a2) {
  index = index|0;
  a1=+a1; a2=a2|0;
  return FUNCTION_TABLE_idi[index&255](+a1,a2|0)|0;
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&255](a1|0)|0;
}


function dynCall_iidiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  return FUNCTION_TABLE_iidiiii[index&255](a1|0,+a2,a3|0,a4|0,a5|0,a6|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&255](a1|0,a2|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&255](a1|0,a2|0,a3|0)|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&31](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&255]();
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&255](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&255](a1|0,a2|0);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&63](a1|0,a2|0,a3|0,a4|0);
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}

function b0(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(0);return 0;
}
function b1(p0) {
 p0 = p0|0; nullFunc_ii(1);return 0;
}
function b2(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = +p1;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iidiiii(2);return 0;
}
function b3(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(3);return 0;
}
function b4(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(4);return 0;
}
function b5(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(5);return 0;
}
function b6() {
 ; nullFunc_v(6);
}
function b7(p0) {
 p0 = p0|0; nullFunc_vi(7);
}
function b8(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(8);
}
function b9(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(9);
}
function b10(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(10);
}
function b11(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(11);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_idi = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZL16_sapp_emsc_framedPv,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_ii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZL15stbi__stdio_eofPv,b1,b1,b1,b1,___stdio_close,b1,b1,___emscripten_stdout_close,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNKSt11logic_error4whatEv,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_iidiiii = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_fmt_fp,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_iii = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNK12_GLOBAL__N_116itanium_demangle4Node19hasRHSComponentSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle4Node12hasArraySlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle4Node15hasFunctionSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle4Node13getSyntaxNodeERNS_12OutputStreamE,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType19hasRHSComponentSlowERNS_12OutputStreamE,b3,b3,b3
,__ZNK12_GLOBAL__N_116itanium_demangle11PointerType19hasRHSComponentSlowERNS_12OutputStreamE,b3,b3,b3,b3,b3,b3,b3,b3,__ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack19hasRHSComponentSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack12hasArraySlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack15hasFunctionSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack13getSyntaxNodeERNS_12OutputStreamE,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference19hasRHSComponentSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference12hasArraySlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference15hasFunctionSlowERNS_12OutputStreamE
,__ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference13getSyntaxNodeERNS_12OutputStreamE,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNK12_GLOBAL__N_116itanium_demangle19PointerToMemberType19hasRHSComponentSlowERNS_12OutputStreamE,b3,b3,b3,__ZNK12_GLOBAL__N_116itanium_demangle9ArrayType19hasRHSComponentSlowERNS_12OutputStreamE
,__ZNK12_GLOBAL__N_116itanium_demangle9ArrayType12hasArraySlowERNS_12OutputStreamE,b3,b3,b3,b3,b3,b3,b3,__ZNK12_GLOBAL__N_116itanium_demangle8QualType19hasRHSComponentSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle8QualType12hasArraySlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle8QualType15hasFunctionSlowERNS_12OutputStreamE,b3,b3,b3,b3,b3,b3,b3,__ZNK12_GLOBAL__N_116itanium_demangle12FunctionType19hasRHSComponentSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle12FunctionType15hasFunctionSlowERNS_12OutputStreamE,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,__ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding19hasRHSComponentSlowERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding15hasFunctionSlowERNS_12OutputStreamE,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_iiii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZL16stbi__stdio_readPvPci,b4,b4,b4,b4,b4,b4,b4,___stdio_write,b4,b4,b4,_sn_write,b4
,b4,b4,b4,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZL23_sapp_emsc_size_changediPK17EmscriptenUiEventPv,__ZL19_sapp_emsc_mouse_cbiPK20EmscriptenMouseEventPv,__ZL19_sapp_emsc_wheel_cbiPK20EmscriptenWheelEventPv,__ZL17_sapp_emsc_key_cbiPK23EmscriptenKeyboardEventPv,__ZL19_sapp_emsc_touch_cbiPK20EmscriptenTouchEventPv,__ZL21_sapp_emsc_context_cbiPKvPv,b4,b4,b4,___stdio_read,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_iiiii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,___stdio_seek,b5,___emscripten_stdout_seek,b5,b5
,b5,b5,b5];
var FUNCTION_TABLE_v = [b6,b6,b6,b6,___cxa_pure_virtual,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__Z11sokolInitCbv,__Z12sokolFrameCbv,__Z14sokolCleanupCbv,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZL28demangling_terminate_handlerv
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_vi = [b7,__ZN2lm6ObjectD2Ev,__ZN2lm6ObjectD0Ev,b7,b7,__ZN2lm4FileD2Ev,__ZN2lm4FileD0Ev,__ZN2lm7TextureD2Ev,__ZN2lm7TextureD0Ev,__ZN2lm6ShaderD2Ev,__ZN2lm6ShaderD0Ev,__ZN2lm8PipelineD2Ev,__ZN2lm8PipelineD0Ev,__ZN2lm5ImageD2Ev,__ZN2lm5ImageD0Ev,b7,b7,b7,__ZN2lm9GfxBufferD2Ev,__ZN2lm9GfxBufferD0Ev,__ZN2lm8BindingsD2Ev,__ZN2lm8BindingsD0Ev,b7,b7,b7,b7,b7,b7,__ZN10__cxxabiv116__shim_type_infoD2Ev
,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b7,b7,b7,b7,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN12_GLOBAL__N_116itanium_demangle4NodeD2Ev,__ZN12_GLOBAL__N_116itanium_demangle10AbiTagAttrD0Ev,__ZN12_GLOBAL__N_116itanium_demangle4NodeD0Ev,b7,b7,__ZN12_GLOBAL__N_116itanium_demangle19SpecialSubstitutionD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle20PostfixQualifiedTypeD0Ev,b7,b7,b7,__ZN12_GLOBAL__N_116itanium_demangle13ReferenceTypeD0Ev
,b7,b7,b7,__ZN12_GLOBAL__N_116itanium_demangle11PointerTypeD0Ev,b7,b7,__ZN12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgsD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle12TemplateArgsD0Ev,b7,b7,b7,b7,b7,b7,__ZN12_GLOBAL__N_116itanium_demangle13ParameterPackD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle15IntegerCastExprD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIeED0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIdED0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIfED0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle8BoolExprD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle14IntegerLiteralD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle20TemplateArgumentPackD0Ev
,b7,__ZN12_GLOBAL__N_116itanium_demangle9ThrowExprD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle12InitListExprD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle13NodeArrayNodeD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle13EnclosingExprD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle19SizeofParamPackExprD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle22ParameterPackExpansionD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle8CastExprD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle15ConditionalExprD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle7NewExprD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle11PostfixExprD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle15BracedRangeExprD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle10BracedExprD0Ev,b7,b7,__ZN12_GLOBAL__N_116itanium_demangle8NameTypeD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle18ArraySubscriptExprD0Ev,b7
,__ZN12_GLOBAL__N_116itanium_demangle10MemberExprD0Ev,b7,b7,__ZN12_GLOBAL__N_116itanium_demangle19GlobalQualifiedNameD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle15LiteralOperatorD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle22ConversionOperatorTypeD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle8DtorNameD0Ev,b7,b7,__ZN12_GLOBAL__N_116itanium_demangle13QualifiedNameD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle10DeleteExprD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle14ConversionExprD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle8CallExprD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle10PrefixExprD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle10BinaryExprD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle8FoldExprD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle13FunctionParamD0Ev,b7,b7,b7
,b7,b7,b7,__ZN12_GLOBAL__N_116itanium_demangle24ForwardTemplateReferenceD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle22ElaboratedTypeSpefTypeD0Ev,b7,b7,__ZN12_GLOBAL__N_116itanium_demangle16StdQualifiedNameD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle21StructuredBindingNameD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle15ClosureTypeNameD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle15UnnamedTypeNameD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle9LocalNameD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle12CtorDtorNameD0Ev,b7,b7,__ZN12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitutionD0Ev,b7,b7,__ZN12_GLOBAL__N_116itanium_demangle10NestedNameD0Ev,b7,b7,b7,__ZN12_GLOBAL__N_116itanium_demangle19PointerToMemberTypeD0Ev,b7
,b7,b7,b7,__ZN12_GLOBAL__N_116itanium_demangle9ArrayTypeD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle10VectorTypeD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle15PixelVectorTypeD0Ev,b7,b7,b7,b7,b7,__ZN12_GLOBAL__N_116itanium_demangle8QualTypeD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle17VendorExtQualTypeD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle13ObjCProtoNameD0Ev,b7,b7,b7,b7,__ZN12_GLOBAL__N_116itanium_demangle12FunctionTypeD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle20DynamicExceptionSpecD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle12NoexceptSpecD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle11SpecialNameD0Ev,b7
,__ZN12_GLOBAL__N_116itanium_demangle9DotSuffixD0Ev,b7,b7,b7,b7,__ZN12_GLOBAL__N_116itanium_demangle16FunctionEncodingD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle12EnableIfAttrD0Ev,b7,__ZN12_GLOBAL__N_116itanium_demangle21CtorVtableSpecialNameD0Ev,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,b7,__ZNSt12length_errorD0Ev,b7,b7,b7,__Z12sokolEventCbPK10sapp_event,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_vii = [b8,b8,b8,__ZN2lm8CallbackINS_5InputEJRKNS_8AppEventEEE7executeES4_,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZL16stbi__stdio_skipPvi,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNK12_GLOBAL__N_116itanium_demangle10AbiTagAttr9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle4Node10printRightERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle4Node11getBaseNameEv,b8,b8,b8,__ZNK12_GLOBAL__N_116itanium_demangle19SpecialSubstitution9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle19SpecialSubstitution11getBaseNameEv,b8,__ZNK12_GLOBAL__N_116itanium_demangle20PostfixQualifiedType9printLeftERNS_12OutputStreamE,b8,b8,__ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13ReferenceType10printRightERNS_12OutputStreamE,b8
,b8,__ZNK12_GLOBAL__N_116itanium_demangle11PointerType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle11PointerType10printRightERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgs9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle20NameWithTemplateArgs11getBaseNameEv,b8,__ZNK12_GLOBAL__N_116itanium_demangle12TemplateArgs9printLeftERNS_12OutputStreamE,b8,b8,b8,b8,b8,__ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13ParameterPack10printRightERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle15IntegerCastExpr9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIeE9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIdE9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle16FloatLiteralImplIfE9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle8BoolExpr9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle14IntegerLiteral9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle20TemplateArgumentPack9printLeftERNS_12OutputStreamE,b8
,__ZNK12_GLOBAL__N_116itanium_demangle9ThrowExpr9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle12InitListExpr9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle13NodeArrayNode9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle13EnclosingExpr9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle19SizeofParamPackExpr9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle22ParameterPackExpansion9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle8CastExpr9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle15ConditionalExpr9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle7NewExpr9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle11PostfixExpr9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle15BracedRangeExpr9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle10BracedExpr9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle8NameType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle8NameType11getBaseNameEv,b8,__ZNK12_GLOBAL__N_116itanium_demangle18ArraySubscriptExpr9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle10MemberExpr9printLeftERNS_12OutputStreamE
,b8,__ZNK12_GLOBAL__N_116itanium_demangle19GlobalQualifiedName9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle19GlobalQualifiedName11getBaseNameEv,b8,__ZNK12_GLOBAL__N_116itanium_demangle15LiteralOperator9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle22ConversionOperatorType9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle8DtorName9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle13QualifiedName9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle13QualifiedName11getBaseNameEv,b8,__ZNK12_GLOBAL__N_116itanium_demangle10DeleteExpr9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle14ConversionExpr9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle8CallExpr9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle10PrefixExpr9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle10BinaryExpr9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle8FoldExpr9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle13FunctionParam9printLeftERNS_12OutputStreamE,b8,b8,b8,b8
,b8,__ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle24ForwardTemplateReference10printRightERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle22ElaboratedTypeSpefType9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle16StdQualifiedName9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle16StdQualifiedName11getBaseNameEv,b8,__ZNK12_GLOBAL__N_116itanium_demangle21StructuredBindingName9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle15ClosureTypeName9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle15UnnamedTypeName9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle9LocalName9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle12CtorDtorName9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitution9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle27ExpandedSpecialSubstitution11getBaseNameEv,b8,__ZNK12_GLOBAL__N_116itanium_demangle10NestedName9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle10NestedName11getBaseNameEv,b8,b8,__ZNK12_GLOBAL__N_116itanium_demangle19PointerToMemberType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle19PointerToMemberType10printRightERNS_12OutputStreamE,b8,b8
,b8,__ZNK12_GLOBAL__N_116itanium_demangle9ArrayType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle9ArrayType10printRightERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle10VectorType9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle15PixelVectorType9printLeftERNS_12OutputStreamE,b8,b8,b8,b8,__ZNK12_GLOBAL__N_116itanium_demangle8QualType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle8QualType10printRightERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle17VendorExtQualType9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle13ObjCProtoName9printLeftERNS_12OutputStreamE,b8,b8,b8,__ZNK12_GLOBAL__N_116itanium_demangle12FunctionType9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle12FunctionType10printRightERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle20DynamicExceptionSpec9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle12NoexceptSpec9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle11SpecialName9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle9DotSuffix9printLeftERNS_12OutputStreamE
,b8,b8,b8,__ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding9printLeftERNS_12OutputStreamE,__ZNK12_GLOBAL__N_116itanium_demangle16FunctionEncoding10printRightERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle12EnableIfAttr9printLeftERNS_12OutputStreamE,b8,__ZNK12_GLOBAL__N_116itanium_demangle21CtorVtableSpecialName9printLeftERNS_12OutputStreamE,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZN2lm5Input10onAppEventERKNS_8AppEventE,b8,b8,b8,b8,b8,b8,b8,b8,_pop_arg_long_double,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_viiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b9,b9,b9,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_viiiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b10,b10,b10,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10];
var FUNCTION_TABLE_viiiiii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b11,b11,b11,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11];

  return { __Z30_sapp_html5_get_ask_leave_sitev: __Z30_sapp_html5_get_ask_leave_sitev, __ZSt18uncaught_exceptionv: __ZSt18uncaught_exceptionv, ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___em_js__sapp_js_create_textfield: ___em_js__sapp_js_create_textfield, ___em_js__sapp_js_focus_textfield: ___em_js__sapp_js_focus_textfield, ___em_js__sapp_js_hook_beforeunload: ___em_js__sapp_js_hook_beforeunload, ___em_js__sapp_js_unfocus_textfield: ___em_js__sapp_js_unfocus_textfield, ___emscripten_environ_constructor: ___emscripten_environ_constructor, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, __get_daylight: __get_daylight, __get_timezone: __get_timezone, __get_tzname: __get_tzname, __sapp_emsc_notify_keyboard_hidden: __sapp_emsc_notify_keyboard_hidden, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_get_sbrk_ptr: _emscripten_get_sbrk_ptr, _fflush: _fflush, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _realloc: _realloc, dynCall_idi: dynCall_idi, dynCall_ii: dynCall_ii, dynCall_iidiiii: dynCall_iidiiii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, establishStackSpace: establishStackSpace, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(asmGlobalArg, asmLibraryArg, buffer);

var real___Z30_sapp_html5_get_ask_leave_sitev = asm["__Z30_sapp_html5_get_ask_leave_sitev"];
asm["__Z30_sapp_html5_get_ask_leave_sitev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___Z30_sapp_html5_get_ask_leave_sitev.apply(null, arguments);
};

var real___ZSt18uncaught_exceptionv = asm["__ZSt18uncaught_exceptionv"];
asm["__ZSt18uncaught_exceptionv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZSt18uncaught_exceptionv.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"];
asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"];
asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____em_js__sapp_js_create_textfield = asm["___em_js__sapp_js_create_textfield"];
asm["___em_js__sapp_js_create_textfield"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____em_js__sapp_js_create_textfield.apply(null, arguments);
};

var real____em_js__sapp_js_focus_textfield = asm["___em_js__sapp_js_focus_textfield"];
asm["___em_js__sapp_js_focus_textfield"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____em_js__sapp_js_focus_textfield.apply(null, arguments);
};

var real____em_js__sapp_js_hook_beforeunload = asm["___em_js__sapp_js_hook_beforeunload"];
asm["___em_js__sapp_js_hook_beforeunload"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____em_js__sapp_js_hook_beforeunload.apply(null, arguments);
};

var real____em_js__sapp_js_unfocus_textfield = asm["___em_js__sapp_js_unfocus_textfield"];
asm["___em_js__sapp_js_unfocus_textfield"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____em_js__sapp_js_unfocus_textfield.apply(null, arguments);
};

var real____emscripten_environ_constructor = asm["___emscripten_environ_constructor"];
asm["___emscripten_environ_constructor"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____emscripten_environ_constructor.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"];
asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"];
asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"];
asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real___get_daylight = asm["__get_daylight"];
asm["__get_daylight"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___get_daylight.apply(null, arguments);
};

var real___get_timezone = asm["__get_timezone"];
asm["__get_timezone"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___get_timezone.apply(null, arguments);
};

var real___get_tzname = asm["__get_tzname"];
asm["__get_tzname"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___get_tzname.apply(null, arguments);
};

var real___sapp_emsc_notify_keyboard_hidden = asm["__sapp_emsc_notify_keyboard_hidden"];
asm["__sapp_emsc_notify_keyboard_hidden"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___sapp_emsc_notify_keyboard_hidden.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"];
asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"];
asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__emscripten_get_sbrk_ptr = asm["_emscripten_get_sbrk_ptr"];
asm["_emscripten_get_sbrk_ptr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_get_sbrk_ptr.apply(null, arguments);
};

var real__fflush = asm["_fflush"];
asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"];
asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"];
asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"];
asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__main = asm["_main"];
asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"];
asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__memmove = asm["_memmove"];
asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__realloc = asm["_realloc"];
asm["_realloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__realloc.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"];
asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"];
asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"];
asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"];
asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var __Z30_sapp_html5_get_ask_leave_sitev = Module["__Z30_sapp_html5_get_ask_leave_sitev"] = asm["__Z30_sapp_html5_get_ask_leave_sitev"];
var __ZSt18uncaught_exceptionv = Module["__ZSt18uncaught_exceptionv"] = asm["__ZSt18uncaught_exceptionv"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___em_js__sapp_js_create_textfield = Module["___em_js__sapp_js_create_textfield"] = asm["___em_js__sapp_js_create_textfield"];
var ___em_js__sapp_js_focus_textfield = Module["___em_js__sapp_js_focus_textfield"] = asm["___em_js__sapp_js_focus_textfield"];
var ___em_js__sapp_js_hook_beforeunload = Module["___em_js__sapp_js_hook_beforeunload"] = asm["___em_js__sapp_js_hook_beforeunload"];
var ___em_js__sapp_js_unfocus_textfield = Module["___em_js__sapp_js_unfocus_textfield"] = asm["___em_js__sapp_js_unfocus_textfield"];
var ___emscripten_environ_constructor = Module["___emscripten_environ_constructor"] = asm["___emscripten_environ_constructor"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var __get_daylight = Module["__get_daylight"] = asm["__get_daylight"];
var __get_timezone = Module["__get_timezone"] = asm["__get_timezone"];
var __get_tzname = Module["__get_tzname"] = asm["__get_tzname"];
var __sapp_emsc_notify_keyboard_hidden = Module["__sapp_emsc_notify_keyboard_hidden"] = asm["__sapp_emsc_notify_keyboard_hidden"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _emscripten_get_sbrk_ptr = Module["_emscripten_get_sbrk_ptr"] = asm["_emscripten_get_sbrk_ptr"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_idi = Module["dynCall_idi"] = asm["dynCall_idi"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iidiiii = Module["dynCall_iidiiii"] = asm["dynCall_iidiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ccall")) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "cwrap")) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setValue")) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getValue")) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["getMemory"] = getMemory;
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString")) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8")) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeArrayToMemory")) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["addRunDependency"] = addRunDependency;
Module["removeRunDependency"] = removeRunDependency;
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS")) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["FS_createFolder"] = FS.createFolder;
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
Module["FS_createLink"] = FS.createLink;
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;
if (!Object.getOwnPropertyDescriptor(Module, "GL")) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynamicAlloc")) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadDynamicLibrary")) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "loadWebAssemblyModule")) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "makeBigInt")) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "establishStackSpace")) Module["establishStackSpace"] = function() { abort("'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() { abort("'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() { abort("'callMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Pointer_stringify")) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
Module["abortStackOverflow"] = abortStackOverflow;
if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromBase64")) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tryParseAsDataURI")) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_DYNAMIC")) Object.defineProperty(Module, "ALLOC_DYNAMIC", { configurable: true, get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NONE")) Object.defineProperty(Module, "ALLOC_NONE", { configurable: true, get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
Module["calledRun"] = calledRun;

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    memoryInitializer = locateFile(memoryInitializer);
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = readBinary(memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    };
    var doBrowserLoad = function() {
      readAsync(memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    };
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      var useRequest = function() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile and defining it in JS. That
            // means that the HTML file doesn't know about it, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      };
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}


var calledRun;


/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;


dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  var entryFunction = Module['_main'];


  args = args || [];

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(thisProgram);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {


    var ret = entryFunction(argc, argv);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      noExitRuntime = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      err('exception thrown: ' + toLog);
      quit_(1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (shouldRunNow) callMain(args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = out;
  var printErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = print;
  err = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && noExitRuntime && status === 0) {
    return;
  }

  if (noExitRuntime) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      err('program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  quit_(status, new ExitStatus(status));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;

if (Module['noInitialRun']) shouldRunNow = false;


  noExitRuntime = true;

run();





// {{MODULE_ADDITIONS}}



